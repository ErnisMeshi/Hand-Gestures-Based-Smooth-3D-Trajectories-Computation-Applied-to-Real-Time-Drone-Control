node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_4275"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_4274"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "T\206\026~\025\305\321?60E\373P\020\330?pB!\002\016\341\331\277\025\215\030\352n\246\305?\022\023\324\360-\254\320\277\204\200|\t\025\234\322?N\303\"Lr<\274\277{\207n\0053\367\223\277i\006\310\002\354\304\305\277\275\266\351\225\323\032\310\277:1\230}&\324\322?\362\210\300G\263\350\313?\\\337n\346\343\034\303??\244\204\005\234J\331\277\017\214\315\330\341y\326?\323Z\342\022\221\253\301\277\372IR%\014\373\317?p\337\3258\274\034\311?\367\370\214]\005\345\321?\222\035\305\200\277t\262\277\215\365&\351\016\240\305\277 Q\262\346\021m\322?\233\t~\002\305\333\336?\017\335&\273\035\212\302?\207\337\013\233\032K\331?\225\025\375\200\213\276\321?\367.\224\002\301\322\336?KZ\216\343\311\346\331?\274\360\377\272\005X\326?\037\227\202\177[\001\320?~\376\336\032\226\016\243\277U\366~\037\345\222\313?h\237}\233\264\337\327?\363\350\004<\202~\313?9\304\252\007\355Q\304?72\0235fL\274\277\271\201\310C[%\332?\353vr]c]\277?\353m\226?\235\372\327?\247\277,\'\200\346\301\277\332G]!b\371\327?\010_\322\367\236:\302\277\344\'z\205\252=\305?\230\350\342%\356\347\346?nX\256\022\207\307\306\277\007\346\2158\tJ\340?L\014\023W\337\n\321?v>\362\275u4\277\277\026a\324\377\203\231\333?<\210:\377\270u\332?@Sm?2\300\333?\355\206\naw\362\343?\361\026\202\373\205G\322\277\275!\246\247<\370\307\277W\241\324\240`m\320\277\241wS_\320!\273?\200\003\305U\206\355\302\277\220+\273\201~6\320?B\325\"\201\212\323\310\277\346M4\3763\271\322?\217\301\350\304\256\205\222\277\256m\243d\346@\320?\317D\340a=\"\342?f\215r\027\376\337\314?\273Z\264!{\024\262\277\006\334-\250\363\321\311?\244N\304K\005O\262?\006\224\227F\335\030\266\277\255\200)\240\334x\327?G\333\204\275\201\260\321\277\t\330\263\214yB\321?<?\326\2358J\314?\310\345h#\021y\325?l\205<\3047\373\303?\377\361\271n\2452\272\277 \215T)\207 \355?=\322\277\250\315M\317\277\344\223>B\007<\333?\212\324\3566\363\324\250?\343)\026\205~\"\260\277\316\014\013\203l\270\337?A\221\027gF\236\300?\225)\244\004\026c\334?\032\205\207\3355p\306\277\tl\020\336\005\247\320?]\"rU41\301?G>m\\\030L\305?\002\357\252(\332,\316\277\370U\230B\020\265\314?\332\200\276\343\312\217\331?\351\357\010\033\\\302\306\277\345\302y\037\344H\311?\262\006\367\034\273\270\322\277\307\026.\035\006\002\221\277F\236\240$\217\355\325\2776\222\302\3048\342\307?\300z\232\233\210a\300?1\005\020\343\332u\321\277RV\035\203_t\320?E\375h\027W\205\311?\375\260\224\033\373H\310\277[\372\002@6E\302\277:\243\367\327<\330\305?\274\356\010\002\277!\325?`>Y1\\\235\322?Tg \\\"\223\330?\274\"\370\337Jv\314?a\2633\267\010-\302\277@\3174\233\246S\326\277\314\275\372W\332R\307?\265n\305\366A3\300\277\n\300\334z\217\253\311?\002\'\035\335\357m\327?\215\003T\335\310\341\310?O\343b5+\025\317?\010\221\312\034\344\230\331?\223\204\325<m\253\250?\316\351\204`\355\331\244\277\360\027q\t\331\\\305\277-t\014e4\264\307?\242\374\356g\302\300\321\277\014\031\302C\256Z\205?\000*\250\352\026h\312?7\010\347\021\253X\266\277\3572G\177\375J\316?\352\036\372j\036\362\264?J\037\241\003\036\332\314?j\2034\337\230\320\312?\355\306q\226HX\334\277F;\023?k\303\343?\037:\024p\225H\232?Q%V\210?q\306?\3307\203\001|\236\307?_\347\t\370\363u\275\277\232\206v\210^J\303\277\214z\363\341z\020\321?,\271\314\341AP\312?\260\372\351`yg\304\277\374\265\253Fey\321?[e\"|Z\213\313\277\033\002\262\235\020\266\312?\345$9\005\236 \331?\267\343v\375\274\010\316\277\357\263\302\333 \246\323?\032`Q\327\373\t\267\277>y7\232L\252\311?\216\025F\304\336U\337?A\222@ #\342\310\277\316\212M\320\313M\333?d\013{\271\323F\306\2777\016\253.\226\330\302?\265\353\224\375\251\347\320?\221\325\316\254|\001\237?\244{)~\204\010\321?_\007\311`\227q\276\277Q\213^\231\371\006\313\2775g\330\203\244\252\300?\035\341z5\2740\271?n]\377\350z&\313\277\234\377)\345M/\223?\005\224\237\267%0\265?\226\327\000[\024\254\315?\254b;)\335\247\311?@\277\255\303\3522\332?\232\007\260\310\257\037\312?%\221\340\272 \252\314\277\226\033\373H\000m\353?14\215\334\211H\305\277S\004\274\365/\203\312?\014w\204\214\255\213\216??\301j\321\247z\321?u\232?\205\247\000\306\277p\035\210\321\030R\311\277\317\370\235\252k\202\254?\241\222uc:\247\217?=\344w\344Y\223\324?>\231\332\255\300\353\275?\360\017\000\301\301c\350?4\335\004B_8\320\277Z\020\210\337fT\306?\031\225q\337\254\271\276\277\026\313\004.U\212\262?\232!v\"\230U\322?3_\261\310\247\256\263\277\217\327\315\326\013\317\307\277~\2455\376+\310\325?\222%\316\345a\374\324?\241N\263\037\255\332\320\277\212\260\341\351\2252\316?\201\303v\275US\275\277?\334\233\000?\272\302\277\265\304\251Z\373P\321?3<0_\3428\261\277\305\000\25249\347\276\277\301Q\270?\223T\312?\365\327\n\036\317|\303?\330\205\233c\253\221\230?C\304Q\342\010\014\306\277`\371\271\3027$\265\277\373\312\310\177VWd\277\266\227]\305\034\343\305?\213\365\323\240\344E\345?\026\356\350\301\325(\321?u\362\267w\354k\311\277s\002\005\244\036\036\305\277\241!\322%\322l\325?\223\376\3014\312\002\267\277\323\3121\027\300\255\263?\007t\226\301g\327\230\277\220DF?\316\277\247\277\373\021T\307\t\227\306\277\256\232)\245N]\311?\272|\024C\254\335\307?\371%\352\036<\307\337?\357\017\245\007O\362\340?<;\021\253\334\227\270?tZ}\226c\211\262?\351J\343\233\226m\311?\217\254\272\026F\335\251\277\327>.\273q\034\330?\177\353\0364\026\250\272?\333\0059\336\323\213\314\277#Cu\020\307\374\271\277\217\016z\374\3774\305?b\314\247\330\342d\314\277\022\025h\177\271\271\320?\331\366\013\260n@\263\277\3153a\301\036\217\312?\310<\227N\220\375\327?\264\221\312\230\253\264\306\277\262\t\366\200\365\017\315?D\205\013\365\313\222\272\277\245\250\216\260\003\202\341?.\214x\333\032\313\301?\267\245\006\2012\031\320?\r\023\323\246f\346\232\277[(\231\234\332Y\320?\330\331\220\177f\020\325\277\235\302c\242\265 \324\277\377\003\017\200v\217\314\277%\010\323\007\375\022\312?Zr\211\341\362\361\302\277HxWJ\212 \212?\352U\307\236\373z\342?c\001\002\214\035\303\323?\320\205\252\373t\372\320?||c\204\307\351\333?\347\246\005\343k\305\242?\210E\261\201\031\370\330?\226\007\206\377\266\237\321?\241\254\316 \364\"\314\277D\332J\330L\370\303\277\363\261y$w;\311\277h|\272\025\035\244\303\277\264[\313d8\236\327?T\270\324\367\320\364\254?\243\261\264[\344\001\275?\340\314T-\216o\320\277\313\022\235e\026!\311?\365(\"\3448\307\260?0n\376\272.W\340?N&M\007\333\035\312? ^\370=\3010\304?\206x\177\027\021 \321?\010E\270\236(\326\237?\327&_\032\320\034\323?\307\t\372\250\022\247\274\277\3233\234\266o\203\303?\247\363\270\332PR\303\277\241KY\002\0002\320?S\r5\351:}\244?\216\346\351\330\030&\300?\353\354\\\377K\245\324?O\362<\033f\246\321\277C\225\033\276\345\347s\277\351K\210\034\317%\317?\014\215i\236\n\325\343?H\340w\"t\017\236?%\026\347^\026I\334?KN7\232m8\312?\377p\374\365\257\321\302\277\035@\277\357\337\274\323\277\376\211>\335Hr\321?\'\367\371\3672\264\306?\344\320\021\257\241\212\312?a\261\237(}\337\267?\361\t<\244\326\003\320\277\033\360;~Vv\325?\216\301\324\340\307\242\336?\202T\253+vf\261\277\016|V\343\266G\320?\264\300h\240Cj\331\277y\016~E+5\304?\t\301\252z\371\335\331?\177F\211`\223j\276\277\2471\214\201\226*\322?\r6\267:\347\304\305\277T\"\303\t\320\337\310\277\277\343%I!\332\261?\320EC\306\243\224\340?f\321\246\260sO\271\277\242\035\036_\316.\305\277\216\262\372\372\214Q\332\277>T\277w@\376\322?cD\201\302\311K\326?\317i7v`k\200?!\223\214\234\205=\314?WV\327\367\232K\221?\315:\004\n\314u\317?]\252-\320IJ\325?\3575F\3437\242\300\277)Lk\025\365\260\303\277a4L\351p_\314\2777Yz\237p\027\307\277\212\3531\364\374\'\274\277\221b\200D\023\250\304?1\351s\336\224\214\342?^\232d\334\273#\322\277K>\227%\021\314\302?\333T\366\300;7\305?\372\205p/\335\342\266?i\210\021_y\322\310\277\355\262l\241\274s\253?\311hp\235w\n\320?\030\276\021\037\320\200\256\277\360\206\023\034\207\017\306\277\272D\232\035N\205\323?\217\316\257\234s\246\304\277\204\313t\371 \225\303?-s_s\263d\331?`\234\021\010\350|\307?0dT\235\376\201\264\277\252\255\001\337\247\t\332?\351\037\n\207Z*\310?\027S\237\232\201\000\340?T\031k$\256\210\317?\267\233\340\233\246O\303?\364\203_\217.[\330?\215\032\0026\3264\323?\310Q\312\265\262\016\301?\202\222]\304\322[\321?5\304%\205\201@\335?Y\276.\303\177:\333?\026\372\036\375H4\335?b\321\235\365c\362\305\277.l0\201\031[\301\277\204\304\013\\\375\\\302\277C\244K\244\331\341\326\277pY\t\006\245\"\305\277\321\205G\321\271\221\326?6\017q\275\2673\303\277\356H\314\036.\332\322?\347:\t|\260\322\302?-\031\341\234\372\010\230\277\247\312Z\267\377\320\305\277)\363\352w\274\244\333?\013\345\216H%\006\317?\002eS\256\360.\320\277gC\243\340\316\252\301?\342\022\221\253\242\211\303?L\241\230aH3\350?\362(Ib?G\244?\2736\n\377\330Z\307?{i\340\000``\265\277w\350G\005FE\303?Xe2^\3539\275\277\361\212\371\034\314\344\312\277\367\022t\305\326\375\326?\277<\215I\271\332\254\277F\247\031\030\232\347\307\277\363Ox\"\353\235\306?tM\365\"\342\177\326?\177\017\003\002B\320\321?\227\n\"96\216\316\277\310F\336A\005j\314\277m\223\'\234\037w\263\277\274\324!\232\355\310\305?W:\304\344\262\366\315?\367\020\001E4\323\331?0\021o\235\177\273\322?\315\325E\300\327\006\326?M\270\333\036R\306\306?\314\363;\250\037/\324?L\241\332}\0329\277\277.>`y\353\327\315\277\347\320\267?\366~\273?\365\245\320\334\267\030\316?Drl\0345\317\321?\313\002y\270\025\251\304?\373(\033\275\267\365\303\2777\312U\2077\306\303\277\261\335=@\367%\334?\230\3756\233\371\033\331?Mq\260\222\352\026\334?\007\"\315P\303T\272?\364_\224^\243>\320\277\260\342\226\2073\\\262?\365s\371\305[\235\310\277\"\261\366\332\340\302\320?\244\216+\201\326\364\321?\224\357\000\354/\375\274\277%\275\271\t\010\367\304?\177\317z\276\207\307\272?R&\356\336u)\263?\363uz\336D\346f\277\201\266r\202xU\302\277Z\252.\207\255>~?y\205.v5X\303\277sv\276\3416\001\320?\r`\333\354Y!\314?\330n/\'p\204\302\277^\217WZ%\334\300\277\203\220\003\341\320\\\350?\035\322\177A\230|\317?\315\256Z\035)p\300\277x?U\"\334\246\302?\265\330\222\372W{\302\277_\322\265\202\350\001\331?\373\263f\376\255q\274?\352#\215]\344\226\274?\354\214\032\014\250Iv?G\3156\273\336\313\302?\353\367\001\236m\233\244?\333\343,\2740q\240?z\356\024\335@\"\321?\217\223\035v:k\321?\310\364\337\336\220a\321\277\255\210y\332\n\257\300\277\210e\022y\273\363\311?@\270+\211&\257\302?\216\201+\217$\367\341?C\241L@\237\212\350?\302\332\030;\341%\306\277U\333\260\032\t\274\304?$\354\035f\026>\313?9\221h\033\342\314\310\277F^\326\304\002\037\326?\352\256\354\202\301\265\323\277\000\311S\332\013\232\300\2776\364\201\252\3629\316\277\223h\362b\233\263\337?\2265\332?\211.\325?\333\374\006\300T@\247?\265\260~\236\314`\303\277\250\355\025\314N\365\323?\030\000.\361\025\027\254?H\370qCr\203\254\277\2645\205B\302\377\306?\207\355\274\307x\030\300?M{R?\322\324\327?q\323Up.\264\245?\254\337mZ\000\205\301\277\311\004\272\376v|\323?\202#\036\334\337Q\330?g\340x%fI\305\277\374\267N\000\036\201\210\277j\025\232w\336\276\304\277\311@\330\010H$\303?\303\334\266;\340\304\242\277N\243\301T\320@\277?\022\207l ]l\303\2775\323\275N\352K\337\277#\033\357^S\277\253\277\245\017#\245U\004\244\277z\265\263\032\330\313\314?\210\214?8<\020\305\277\276\201\013\252\364\260\265\277>\232\003g\235/\307?\327\350\254\201s\347\327\277gh\227\3126K\325?\262<\376\301vf\343?DVc{\300K\235\277\261\265k\000>Q\325?\022LV\301\177\245\314\277J}\027\276\327\263\327?\320\217\320\340\000D\346?o\335I\033yf\306\277\357^\244\006\211\243\260\2773\177T\334\033\260\327\2778S|\327\373\350\313?;\362\264\272\244\003\312?P\264\376\330\034\316\313\277\"\240FJH^\313?\2225\321\204yQ\311?{\002\325\375kR\320?:U\204\274\232\023\327?\276V|\"\323J\320?1\037\367J\254\316\260\2777\225\373\323\374\347\302?:\013\326\223T\001\314?\305Z\031\340\304\210\325?;\027FzQ\273\305?\336\322\305\001O5\304?S:\375Eu\337\265\277\322\353\344Fp\247\312?\377M\275\250\274\241\315\277\352,\3044\035K\322\277MA\206\247\272\364\303?\207,&\304\311\356\247\277:\251\324\221\310\343\324\277P*\242\245yg\225?\276\3213b\013\346\315\277)\014F\374\365\320\305\277S\016^\242\027\301\311?)?g\332\0273\305\277\200\200\224\\\356\341\301?\222\r\377D\300\374\311?\272\334\375}\010\242\304\277:0N\266`-\313\277uc\356\030&l\305\277\355\356\246\000\275\225\312\2771\341\341\207\2240\325?b.\353\366@\310\311?1\314\004!+\210\241\277\241\030\351\335\t\n\224?&\001\007@\036\362\321?\264R\214\034\267R\324\277I\275#:6H\300\277sl\252\337f\240\255? \214\351S\330\026\345?:J\363\001`@\321?\\l\244\266\036\317\313?\202\201\326\262k\261\331?94]6\327\274\315?\345RK)\236\351\315\277\232!\270>j\033\313?\261t\272\003\247\004\307\277\365\311\037F\347\200\261\277&\2507\\\021 \245?B\363s\"E\r\323?\252\220<!\205|\322?\330\355\365\346\036\257\305\277\337\377\272\337\020\306\252?\024\014\r\342\010\364w?\263\010(\201\213\235\270?\377J\276D\202\312\322?\226i\333\000\321k\246?\246\211N\001\366\362\317?H.\203Z\241\002\315?h~-\226\277\316\304\277\312\322\271h\351\206\271\277\245i\016\030=\032\315?\311\"M\274\003<\320?\r\373\177\315 \333\277?\235TE\002W\303\337?\327\227\327\327\333b\315?w\257\346B\335n\301\277{>w@\341\005\310\277\326\367\310\203\200>\324?\007\373e\346\270\t\305\2772\355\264\230L\323\277\277Cm]b\0236\314?\312\351\004\227;\361\276?\222\350\334\"m9\244?f\373\014\177\270\361\316\277\300\315\301\267\331\355\300?\007\316\031Q\332\033\303\277\267\253\374\327^\260\264\277h\355\021\305?G\321?:Z\325\222\216r\311?Y\312*Si\027\251\277\017\272B\'\235+\311\277|/\031\"\002)\322\277\254\265I\250\215\250\244?\2268\331\243\303\205\335?]\203c;\204\226\320?\027\254\006\233\031\201\306\277f\031=\022\212\010\305\277/\207@\242\307\367\304?\316\240%\270&\027\303?\324\251~\347\017\264\275\277=>\306\201\374\221\315?\303\302 \033\016\354\321?H\322\301<\\\331\310? x!\302d\317\345?\255\021f\177E\243\266\2773\323\007\334\004)\254?\2536\305\004\261\303\317? \035GA*$\310\277\343Ai^\304-\322?\377VW\252\260>\310?+o\201\343\266&\334?\274[\233\276\205\022\244?P\030\265w\035\\\305\277B{\026\000\272:\340?5K\346~\245\370\264?!\255R\366m\363\312?\302\021j\247b\272\310?\t\240\275\237\277u\321?vy\010\035S\373\312?\203\272\355\347\271*\266?\251\322`d\023\352\321\277/A\333\244\201#\320?\217\373\332#iq\326?\375\211\210jcO\305\277a\220\221?Z\024\326?\343B\3243s7\302\277\312\202.\206\027\351\307\277\306\206E\300\365ep\277\277&\316\376\376\234\326?Zl\356C9,\330?r\225zX\240\304\304?\364\355\217\275\377\213\326?(\214\230\237<(\323?\214\263\330\334\207r\310?\266\035K\006\035\000\270?\354l\310?3\210\343?\251\202\027\236\023R\314\277\016\331a\310\301W\310?\224\231\373y\215<\316?\030<\361At\255\271\277i\371\211\034\205\330\326?\205\032\256\243\344\264\301\277R\004\037 \353k\312\277\223\330 Y\341\022\304?\223\376^\n\017\032\301?\205\273i\351\300(\336?^L\022\317\002\202\262?r3\036\235\241U\310?\323\005i\204\206W\320?\"l\333\244`\225\256\277\352\262\024\240\330P\317\277D\351\342\241\265\303\304?\203\234\377p\272\331\261?\361\020\245A\372\273\311\277\347\\\345d=\220\315?:\364\016\236\246\"\337?\254i\317F]T\221\277%\200\264b,\021\321?J\351\253A\036\025\237?@W\021$\245\017\304\277\377/l\007\002\350\262\277\224b\313\033\365J\320?C\320\207\035|\227\313\277 m\261\025\023\237\316\277\203\353\335a\013(\244\2779\266\236!\034\263\307?\013\305\014C\232g\302\277\313\320_\205\347g\315\277\0333\34434\371\312\277:\177\311|\366\222\311\277\363P\200\315\336\276\251?\220\002\3723r\314\330?\305\311\036\035.$\306?\333L*\277\261l\340?\032$\216\206\235s\302\277\3317\336\272\356o\302\277\250\227\316=\332.\324?\230\277\366W\205\211\217?\006\357v\200\321,\231?cT\204a\341\240\332?\253\260\363\030\340\340=\2770\243\026R\227\357\270?[\314\225b\303\252\337?\240\200X\374\307\276\320\277\3655\344\002D\277\326?\211\203\276\323\350\376\275?\000\212\025^\027\270\300\277\265\333\221^\222R\264\277 4qa\223\253\321?\355QM\203\201\353\324?R0\235\265_g\306\277\326\224\236\310\027\335\314\277\374\306Sf\265\006\306\277\257\344\317\\L\330\265\277C8E\313\252\235\270\277\256\333\332\241\345i\307?\321\306\266\261~\330\324?\277\270\361zr\305\326\277\332#q\342\3559\263\277\343eU\2358\355\325?D\324\257:\2232\306?\024\254q6\035\201\340?\241\260\264!9\370\330? Dt\000\253\000\322?\254\020\221\305\366\215\235?W\276\253A?#\232?9d^\242\325\344\346?T\306\340\335\241\023\313\277L\231\212C\354B\320?\303\251\305\226\324\277\331?*\262\272\373:u\251\2777*?\302\223\212\311?\375\344\377\300\342\021\325?\231\300\010u\354{\325?\224\303\345\200vj\312?\375\034\325\237\263;\277?\334e\236\340\213D\264?\263>\212\337\271\234\307?sP\212\242|K\257\277\335\222\342\004\"\233\320\277\340\262T(\034\213\302\277\247\213\332\0369)\307?\247b|\373\347\'\325?\350\353\246R\273x\273?\006\"z\010\231\032\323?L\350&\030k\013\300?\272\317\226\030p;\251\277[`\260\227}\211\300?V\021n2\252\014\301?\006>P\270h\022\324\277\354\352\002\034J\206\320? \026\270\334c`\222?y\314\037W\023Y\301\277\224+a\022\323*\310\277\311fy\3440\224\317\277:t\335\010In\250\277\247!\211\342~\325\310\277\251\031\255\376c|\260?\345`\025\363\234\302\240?\036M7\201\320\027\320\277\311\234\307^x\360\267\277\375\240O`\021\316\341?\3621\270\343\326o\250?F\214\350\350\002(\311?c\302y\202\016\004\334?0\232\370\027\377F\316?m\241u\236\302\233\332\277<\372>\240\\\350\302\277\242\030j^\037\347\265?\262\206I\300\001\220\316?\205\3704\345\022\340\301?\243g\'A\207R\347?h\314E\370\356A\303?O\030\336\366N\026\224\277\307\024\213cM\372\312\277\370\351\221i\341p\307\277?\2451\367\034\232\313?\335\3665yg@\305\2776w\221\225\241\242\305\277\370\025\357\360l\311\264\277i\244\010\0352\255\320?\347\212\224^\202\360\312\277\332\211\232\001\221\262\331\277Q\367\333\200\312V\260\277\027\354\n\246/\276\303?S\330=`\273\207\316?\306}\365\002\375O\332\277\006{\227{\026\276\336?\357\246\252\274\\E\204?\353\333r\303)R\321?z\206\340 p\020\270\277w`\177`.\254\247\277,\234b\335\221T\320\277\227Q\217\341o\203\240?\377\361VD\352\311\316\277\000\321a\370g\n\311?Xx4a=&\340?\371\346\253\242G\245\343?"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\\\262C_\356Q\314?\270^.=\365#\316\277\332\240\345/\343\\\312\277\263\257<HO\221\334?\t\016\27315\360\263?\315jh\240\205\306\275\277\225\021\027\200F\351\256?q\325\320a\031v\326?F\357\022\244k\311\326?\202\300\363 wp\323?:j\226\025\324\001\307\277\036a !-\302\317\277\277\331\377c\225P\332\277\232}\375\224S\320\255?B\006v%\2279\311\2776W\356\201-\341\273?\245a\235\317%\301\275?z\254S\304m\335\325\277\254\213\374v\351\221\316?=?\224\201f\204\320?l\013\317K\305\306\305?\314\323\271\242\224P\324\277\361\300[{\372\343\303\277=\251\243\241N\322\332?\364\177X\200\000c\271?}4\350\t\234\314N?\363\216\266\236\337\377\325\277KZ\216\343\311\346\331?\300=\021\274\010p\314\277\206\317\357^bj\334?d\201\n\242I\275\322?h\260\251\363\250\370\322\277\210_V\315\030\013\344?\026\025q:\311V\326\277\361\"\331D\342u\323\277F.Q `k\307?K@\310\211\3410\311?WDM\364\371\250\332?\004f\021\314\311r\266\277\250\215\352t \353\324?g]H,\316\275\307\277\205\374}\020\023\036\276?$\016\227$\350\022\327?^\007Y\236\0305z\277\211\244\362\203\256\325\251?a\302hV\266\017\341?f\243\357E\346W\304\277\2412Y79\327\262\277\370\210\271 2\027\311\277\025$\021uz9\263\277\202u\332\"\202\324\313\277*0K\330\n\334\312\277MV\0349\230\356\317?\001}\215\352\225\256\300?.\337-\242\203\264\236\277\352\244\255\000\225`\333?8\010\337\240b\301\332?@\302\3155\016m\315?\003<\350`\235-\266?L\363\330\340\216\201\312\277|\026\337\253\261_\325?\266\323Z\301\004(\326\277\nH\240f\355\333\302\277;y\252\246\230A\316?r\\:\244 \221\316?9\231\331c\371\245\323\277\025\327\245\004\314\325\335?\335\303\322~s\230\303?]\ry\231\233N\313\277\"P?\240\032\214\321?\213\257M\225\265n\307\277N\317\273\261\240\360\341?WO\234\222b6\311\277\365\3613\242r\233\336?\353\363br\264t\324?\267\010\255\003\367n\235\2770\212\210\334\2707\234\277\326}t\250\256\225\306\277\325#\252C\260\242\333?\005tW]$\000\327?\007\326\253\247\332\027\306\277\036\177\263\336\271\301\340?\244\345\037\001\314J\275\277\035}\352]^\256\275?\377\365~a\001e\313\277\265\302\262\241\264Z\340?\261V\'F\032\205\317?\314;VB\332\363\330?\223`?\376\261\024\324\277\n\321\306\266\261\376\313\277\335\230\340\314\226I\263?\373\250+D,\007\326\277\256\217=1\2418\316?\274.\323aK0\336?\212 ;`8\206\205?\242!g\212\316l\316\277\215\301\026\375\231\250\330?\261b\237\235_V\316\277e{\343Z\243\024\340?V\275\374N\223\031\342?\234\332\235\336Z@\340?\362fh\227\3126\312?>\205\267b\332\022\337?\3719O\206\364%\321?\240V\352\274:E\321\277\243\023\266]p\337\325?\357\250s=\270X\325\277\360\307i_\253J\261?\002wf\243\357E\310?\3017M\237\035\360\303?\244\235\005g\021\006\317?\325\333\023\342\231)\321?\000v\352\241\350\307\320\277\332\001\370#\034\345\321\277\270\246/:\017\335\322\277\037\243\033\345\2115\325\277!\346\026\343\221\262\331?\351\302@\276!`\334?\t\346\"\235\005\312\304?\357U\n\005\225\006\324\277B\036\250\360\363!\267?\352#\317y\266\\\315?n\267\352[b<\335?k\037~@\230\002\324?H0Y\005\377\225\317?\311\375PaS\004\332\277b8\350\\\233\327\325\277I\005_\342\331\357\320\277\375Gl\230\035\271\304?\243\000\027\205\331\333\303\277\025o\te\206\362\323?\211\366\312\037\200\222\341?\331\256\320\007\313\330\312?\3145\026^\223\177\305?\002\222\270\340o\250\325?\231\270\270:\276\005\327\277\321\nF\004g\231\317\277\005\323\027\337\243\300\266?\254\3315\347\001\250\273\277\256\010a\342M\006\316?g\272\266;\2246\276\277srT\250M\240\315\277\303\350\274==\363\224?`6\205\276\211\333\315\277O\362\270\342\301\232\275?y\370|\336\236\361\326\277\206\017x\242\0343\310\277\217\364Px\\\026\311?>\225\221\202\300-\317\277\344\013 \2356:\306?\331LS>\343F\331\277pMp\240vn\320\277\312\000\355\232\3222\324?\256\033\000\273\344I\321\277,\240/A6^\314?\215\362i\241\246\216\234?\221\367\005O|\220\324?C\"\310\234\302\345\340?%\204I\034rf\241?L\345H\302\031\027\330?o\353U\001J\005\337?}s$<F\036\307\277\230\377\251\033\234\206\326\277\320\336\256\321Q\222\256?X$\0367\231D\300\277\336\247\r\373\373T\322?\231\346F&\032\203\313?\360\344\r\017\3454\270?\313\3022\221-\246\324\277\243\021C\335\315t\330?1\352\377\301,\331\315?77\3075\025\224\300?\213\026\003\230\360S\261\277vi\303ai\340\327?\214!\245~\203\233\324?o\302\367\335\370\203\320\277a\226\321#\241\010\340?\366\360\300[{\272\337?\"\355\322\310\337\244\306?Q\017U!\263\355\332\277\222R\226B\234\336\330?El\250\377IO\340?\361\362\225\274\021\310\324?\263\t\017\036\226\033\262?&L\275\023X%\324?\244\233/\274\263\362\316\277Y\375\021\206\001K\325\277\353\211\360\'\021~\271\277\262\273@I\201\205\317?\003\335\352{\005\320\322??E\032\204\3252\253?XIT=\323\312\340?\255(\353X!\274\314?\222\352\371\242V;\332?Q\221\267\032\341\206\325\277\370zk\036\217\262\342?LV\301\177%\035\325?\212!\367|\346O\325?\236\177\232\336\356\372\331?\351\304\365Z\226P\330?j\230\251b\215g\341?\226\337X\006\213\371\331?\"\262\274i\002\336\310?\267\366\272\034\341z\277?n\3339\305\221\244\271?\367\334\256<\355\225\276?\340*\364fy\303\314\277\357\251\275\004~\277\336?\232\3253k\306\365\264?+8\366\313\253c\267?m\205\372\247e\265\300?\255\224\022@9\243\320?\003\212\005|\206\t\330\277\344#\224\204e\350\274\277T\274\035#\321r\331?G\207\321\275\2307\333?\236\251!\273\034\300\324?\020!\256\234\2753\342?\032\263\231\0016\371\320?0x\177Y-r\313\2777\247P\345\315\304\327?C:\331Y6k\235\277\232-\223\300j\325\325?\t\267\306\261?\032\342?\2551*\241\242\307\322?\227TL)\330\024\313??\227\241\330\247\357\317?\025\276c\0353\225\342?m\371d\237\251\322\270\277\267Ya\237\245\020\323?\345n\204\003)\312\307?\226=\222],\266\250\277u\236\343i\032\220\300\277.@6$I\253\324\277\355\242C;\002\323\323\277\274\233\300\327\204r\305?#\223!\001\202=\325\277\t=\223\344V\224\306?\332\246\035\243\341\271\322?Q\344q\232\003\331\236\277\277%B\033g\360\323\277&\331\314\034\360\313\254?D;~\332n\243\317?l]\254\240P\354\325?\220\177\311:\332@\334?\307\352\373\025\327\235\344?\003#\336#c\001\234\277B\256\324\263 \024\320?\263\352\030\374\242\351\321\277\264M\330\033\010\213\316?\177\202\356?\360@\322??G\232.z]\321?\232h\021\003\275m\246\277#\233/\037\336\255\277?d\330\325\242\r\031\323\277\266h\277\275\204\255\327?e\r\254\035\244\253\333?\204\031K?~B\321?ki\207\"Q\246\330?\205\322\325%\374\265\312?J\3254\367\251\215\272\277N&M\007\333\035\312?\230u\030\366(\032\317?\360-\223~N\203\343?\'C\237\331\277\374\260\277\233\030\365\275D\204\321?\305A:#\347\320\304?7\341^\231\267\352\341?|Bv\336\306f\262?\226e>\326B\377\310?[\325\222\216r\360\340?}\325\343!\0006\340?\213&\'E\361K\273?3\323\305\2772\343\276?\307\377\025\340X\243\327?\223\017\315~\3258\332?r]c]\375T\307?h\022\253\3654\026\325?\270\177<&\030\357\316\277\267T\255\236\366H\334?\272\275\007\\\025\260\271?\023\325\370\330\237<\312?p^Z\334\230\201\322\277\246\002\223\300\213c\322\277\300\267\341^6\215\317?\246\020e\373\322\323\320?\246P\253\"\273V\223\2777\320t]\225\227\307\277\035\005\004Ju\307\314?\345j\236\002\344\364\321?\007_5\"Z\243\314?(\001\234\244\032r\303?{\310J\202&8\340?n>d\200\372\005\315\277\254\324\303\002%&\315?A\327[V\243\317\317\277;Ws\004\2312\303?w\313a9:\025\302?\276\217\335\344;!\320?\376\264r\253\367\206\267\277\t6lc\005\"\265?\271oR$\241%\304?\364\025(R/2\220\277K\\\246\252\371?\316?\"B\320\217\216\304\277?\235\344\375npX\325?\3654X\037\254\022\320\277\303\341\375\237`\022\327?\236_\224\240\277\020\321\277p\225H\036_\255\315\277W\310\001`\341\311\327?\3055\343\331\212\"\326?5?a\375]\247\323?\272I\014\002+\307\330?\"hP]\216\221\323?L\301\\\203\245\227\337?\273\020\'\007\036%\310?\227\252\264\3055>\270?\312\2172\301\364\346\330\277\304\017)a\001\247\340?\371l\333\377\031\010\327?\341\373\321&=B\324?WT\314Zmr\325?b\262#\233\314t\324\277j\244\204\344\215a\330?g ;\024\252@\277?1)>>!;\312?\227\322\310!\301X\317?\243\205x\342A\314\334?\271\016\037\"\177:\323?\302$\246U>\025\325\277\272\213\315\032\376K\315?\242\025sk-\'\320\277\0068\265\032\257\014\331\277\277\t\263@#\'\274\277\210\021_y\322\272\303?\316.\204A>\r\342?\355\277)\007\016\303\341?\004-M\337\2453\321?\322~Z\373\361\215\342?\251[\207\264\327\314\313\277\301\325K\235\221\322\305\277\022@\275[Q1\261\277\335L;\353\t\001\314\277\256I3\355\3155\263??\013\225\301I\201\315?\206\004)\004\264\245\277?\323>\244\177L\342\260\277\037\232\334\234\010\352\321?\033|\'\207\313\001\301?t\215i\202\265%\252?\244\350\334H4\\\331?\302=\350<\327\365\320?\025\345\322\370\205\327\325?\215\304x\213\217h\270?8\331i\030\374\005\276\277I>\300\244B\206\274\277mU8\240\252\344\251?wZ\310mE,\343?\307\277K\200\314\224\312?XB-\274\201\370\342\277_\333\323\274\200j\326?|\214\250?\261\204\322\277vV\250\301v\250\322?\311\001\036\305\367M\336?\326P\310\240\243\355\270?o\027\026\263\220F\266?\215\276\335\355\325\242\344?\255\2058Z\376\021\311?h\237\330T\'\261\304?\2162\013\202\001\343\321?\315Am\247\357-\300?\233\352\207\340\321\351\326\277G\367\275\227\014\021\325?\342\000\014a\273\317\215\277\016\321\021\216\223\241\277??\221\'I\327\214\340?\337\333x\240\343\335\324\277\225\246Zn\335\213\267?\275\032\2404\324\250\332?\230\306\212u\005\266\333\277b\312\227\202\373\002\340?j\345\271\031\311\371\333?\360Y\317\367\360\270\312?\256\203\270\257Y\347e?R\351P\033\017\025\335?\311\031q\236=\031\323\277\265l\316=\373\374\323\277\3478\226\373\r\250\323\277N\334C%\"\372\325?\0173\013\037\327\247\321?\353\225\252\233(\025\311?\265|\217\300@\014\333?!\302\205]\220\004\315\277\005*\014_\231\366\340?!=\342\343UN\325?\002\277\241K\223\255\335?>\264\352\316n\010\322?\347\006\032\236$~\313?U\2514\275\037R\326?\005\024,\006\3665\274?\373\026\347\271\317;\324\277\025]\223E\3142\307?\323\360\363\000\222@\316?\2153\033\236=\233\322?\241\036p\227\334,\310?e@Q4j\231\320?\216\002\206\335^/\327?\376\347Y\336\217\332\342?\327EvJ\2541\321?\210}0`19\277?\274\371W\240\'/\301?0E\034_9\n\334?\351\007\032\330\317\207\320?u\267\004C\312M\324?\020!~c\247\326\253?\341\006\276\232\352\246\324?Q\223K\251l\324\310?\021\021i\341\3238\341?\305\244\256kj\217\333?|\274\312\271\230\217\311?l\360\031\344\211\273\320?\006\225]\325\376s\323?\3213(`\\\246\335?z\356\024\335@\"\321?\2675\330\212\354\271\321\277\177%\343Z\345\360\310?e\333q\334\214\307\325?\026*\346\275\275m\335?\375TO\305\021T\324?\007\014\222>\255b\324?x\227\356\"\n5\334?K\262\253\034\234\000\325?_\001u\230i\332\313?\254\361-\007\325a\314?\210\366NX$\036\304?\213\205\245\252\236\206\304\277\220\200\336\017\320a\200\277w\273\177\250\013\343\256?c\020\263\362&\032\323?\375\330$?\342\227\326?\331#77d\013\272\277\t\375\n\241\234K\323?i\301\315\332T:\326?\231\365\275\341\231\253\276\277\317\301\361\204w\334\332?>\364\223 \022\264\336?\312\317\272\004\257/\316?7\354k\033N\262\332?M{R?\322\324\307\277\246N8\242\030,\332?\236\213\361\'K)\267?\242\201\263\357\345\231\315?\252\342|\240\313\212\321\277=\032\230&\266\314\305?\022tj\035\013\200\325?\240@\361\306\366\030\301?\200\247\177\377\2348\341?\355\266\217\005\032&\315?\210\365\343\202u\224\323?\344\360\017|\210\235\307?\257\260d\267d\217\261?\013\257\207\243i\330\307\277\'$%\177(\377\331?\200h\203\237z\234\323?\313\001\026T\257\266\275?\r\017H_\224\242\331?\023\307\r\001\270@\322?A\225\303\274\001\305\332?H\014\n\234\317-\322\277\272\030^\244\253\017\327?a\\\005\214\211\250\337?\324p\035%\247\335\305\277\342\r\243\377i\223\305?s\224\254X6\322\300\277\235H\017\307\3437\253\277Wh\265\372\311\034\300?\264\321s\352N\240\304?\177\311\327\257\205j\304?j>\235\341\274\356\324\277\022[0\247\2726\344?\365\365[\277\2116\306?%\177(\177\224\244\323\277\026c\344Uk\033\312?g<\266\n\007g\324\277R\226\245\306\031\375\313\277\223\321u\237\353\224\342?\0350z4\366\241\276?\361\243T\241\005\221\332?\362\013m\010\247h\315?\007z\311{\254K\301\277\333\035J\233G\321\333\2778\005\"Y\372/\302?\025\263V\233\234-\313?7\370g\2537\017\325\277\255\353\243\225s\020\306?\377Y5\000\002s\262?e\220\273\010S\024\340?&\377\325\333M\215\326?ah\330\234AK\307?\212\317[D-\260\326?~_z\000-\213\270?\314\204\272\243Z\037\323?g\214\305%}\320\341?\211\376\032Z\256H\325?\204\301\2200g\021\340?\035\276\361Z\256#\326\277\234\347_\375e\230\303?\017\342\271\255\343.\326?kK\333\307#\033\302?t0\254,\033\347\323?\224\201\250\240G\261\317\277P\202\243\211\034G\323\277\256\327\262\204\316N\324?V\210`\177\206\265\326?l^\223=[*\327?\361\332\204\377\235\202\247\277\t\214\026\0345\221\310?!\346q\234\004\204\332?\261\202\245\333\216\000\321?c~\260\204\234\024\334?\204\260\340\237\316\354\305?\243\tN\\\022\220\325\277:\207!(m`\324\277,\335v\004\344\t\320?\242\203\211\232C-\320\277\017\345\355\003\356K\244?\201a3\237\367o\271?\307\374\324_LF\327?\032\336I\227@B\316\277BD\244\205O\343\306?A+\017V\214\010\302?\032\334\367$\207:\333?\007\366\251t\301*\327?\036\375\355\272\320\177\326?\207\363We2\236\324?\355\"\226\336H\252\321?\007\326/\340~\243\316?\274\242J\203\221M\325\277X\327\221\270\001\376\301?\274\330(\251\033\301\312?\276\306&\340t^\330\277\347\222G\303kO\327\277\226\223\263$\376\360\322?\n\201\236\376\232\t\332?\322\271.>\375N\320?>\355\317\311{j\275?C\\\265B\303(\301?\222\022P\033\264[\314\277\350\360\224\376\363n\323?H\374i\'sA\310?\177\003\213\252\374\276\315?\205U\304\002\302\273\337?TC4\035\256\223\321?\334Sj\335\243\312\322?\252\366e@(\025\340?8<R\267\222\241\262?\336\0264FNS\314?\323\r\271\276\264\315\312?>\275\347\372\035\216\335?Bb\365&\n\035\257?e\373\261\305E \302?\327\r\004\226\226\360\315?\323\217~\342\235O\320?]\036c\325\275\241\266\277\206\321b\337\0045\343?\320\222\215(i\325\274?\231xQ\005\355\337\325?\0310/]\024\177\315\277\342\267|\177\336/\321?W\004 j\262\261\302?\231\201\312\370\367\231\305\277\315\262\345d\373\363\272\277g\235\361}q)\326\277\037\014\341=\254\\\336?$]u\0259\341\314?\007G$e\346\335\320?!\234\252\326\035&\341?,\254e|\251\351\324?\343Ai^\304-\322?\006Z\252\240\334\225\330\277\310vc\346\247\335\310\277\217\205\215W\305\300\323?\377\3751\306\352\003\305?_\277y\324\014g\271\277T\362\034WD\311\307?\321\r\250\222\\Y\315?RI\235\200&\202\324\277\354o\"]\340p\324?\361\014\277@\265f\326\277s\247l?\266\370\340?\354=\263)\371\006\202\277\305\217\224\241\350\211\315?2\207\213y\251\032\310?\001\265\244\3458\236\250?J,c\")\022\314\277P&f\244{)\304?\244Bm\002\251`\320?\305\020)\233\2540\324?\367\nf\247z\r\301\277<\207Sb\256w\305?\373\232\037^[\010\341?YS\223\277\377\177\303?(Yw\301\032\306\272\277k\023\243\276\227\010\327\277\233NW\034sC\340?\313\315\201/\2263\332?]\273\214\031\343\356\210?\367\020Ca\006\231\324?\317(D]\367\230\265\277T\330V\375[\023\316?\371=c\277$\036\271?\312\"EK\273$\261?\206\265Y>\220\221\255?I\216\350\\Y;\325\277\234\275\330 8\023\323?\346\014A\345\312f\330?\231}`\277\016\271\335?\243\017\361j\024\355\323\277\361\324D\033W\016\314\277\336?\263w\210w\310?\2037\244Q\201\023\323?\316\'\341\370\220f\341?E(:\273J1\326?q\020\000^\227H\325?\3337\265;\275u\324\277\332y\321\r\003L\300\277;g\260N:6\321?=\352T\236\345\336\321?\255\3325!\255\261\334?F\031\232\200\231\316\301?\230\034\024 L\002\333?\323\033I\335)\270\322?\370\336\337\240\275\372\240?\377$\224w;\346w?}\336\371\352O\207\310?\226A\020{\374\271\332?^C\323\206\201\266\305?\360\344\354\000\374\221\310?\327[5\225fo\272?G\'\253\037$\326\262?\017\343$\203\222\270\335?\201\217\207\337\311\376\337\277\016\261nz\037`\264\277\221\342-\241\314\320\267\277\213\245\'\260)%\260?\0137l\235\260\253\262?\005\344dE\201\374\310\277G\240,B\322\003\340?\254)\034\203F\327\327?\346Ig\232\217o\304\277\306v\316\201\253\335\327?\276\003\362\333\306\225\334?\367\037\231\016\235\236\340?.\224\230\3342$\256?a\201T/d\032\324?\3734\223\024\375F\341?\326\302\217\336.\303\327?\242\257\244\005\375?\312?\363wJb\244\262\321\277\376\355\364{I\200\321?\0107\235\215*\375\267?r\366\250\241\010\007\260\277)\021\372\374\244\230\300?H\354$l\211&\322?~a\t\326\376\357\306?\222i#\215\300\016\323?\337J\372\244\250m\321\277X\rWA\353e\265\277\3742Z?\344\312\314?\355\347=c\231\335\315\277\352\016Z\366\301\205\310?kZ\020g\321}\303\277\222\033\352\034\250\370\317\277p\3224(\232\207\310?\306EZ\317\265\324\332?BV\\\301\333\250\326?\265\324(\301n\332\325\277\272\022?\316M\376\264?\266\003d\236K\'\313?:\315#\373\367\313\320?B_z\373sQ\327?\261#a!k\264\321\277\310\341\335\333>\265\322\277\236\255(\312J8\266\277\314\377\365\0337\306\327\277;15Sk+\320?\314=\013\337N\244\334?\243\264\365\333\360\236\314?\276\351+\202\336\037\320?\352e\014Z\345\025\312?\310\r;c\312M\324?\001\223+\'gI\317?\203\265{\003\335(\304?\340\214P\"x\262\321?\0031\236{\356\210\337?\346\026\004\240\233\247\341?:\260^=\325>\305?\035\223\305\375GF\341?6\353\347\250\376\334\342?\340!\326,\341\232\321?\033t\266>\264\250\322\277\347w\365\205\353,\326?b\235l\373\005X\310?\322M(e\316\212\324?\014\335\326\341b\250f\277\360\270\362\243+b\321?\204]\332\221f\003\245?\\\263\360Po\241\323?\350qs\205\322r\333?\374\257\255~\360J\316?\354p\360\\J\243\320?\243{\020\341\343\274\331?\371\357\301k\227\266\334?Y\354\304\037$\017\316?\364F\367\275\227\314\325\277 \372A\237\300\"\327\277~\027:\237\317:\276?\200\346%_\006\354\270?\247\3158\rQ\205\325?\216\343\013\203\307q\307?\233Y\t\345\226y\333?\204\010\371\037\347\235\271?\363\266-%&\003\336?\221\030\363)\266\270\327?H\272,GD\010\271?c\233\320\3731\363\321?s\365c\223\374\210\330?\214Hw\204\221f\320?\npr\246\246\260\264?\364\240fi#.\317?_j\235\033G\352\316\277.7\030\352\260B\326?6\023\253\275\212\267\242\277\210-\373}\030\004\307\277mjE@*\252\341?\300cOm6w\240?\006  %\227{\222\277M\364;E\365\363\303\277T\203\274`h\234\327?98\246a\327z\321\277\320\021T\350\027\000\315?\365\3613\242r[\340?0{\300\3319\017\262?8\210s`{\036\323?\027\306\'\256t\210\323?\202\224\022aG\214\315?\336\360/@\252z\267\277\334g\225\231\322\372\247?"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\217\023\354\340\3346\312?\315\304\363\240@\242\264?\261s\252\347j\314\311?V\367\310\346\252y\260?\341\302\354+0\340\261\277\313\377\334~\226:\265?\206ID:4\023\270?\346q{\366\032\212\262?\306\233Z\210\236,\230?\225z\210\331\332\341\230?\276\232\304\237/]\237?\237q\303\241\316\313~\277R*#&\217D\227? dc\242d\031\244\277\276\022i\227F~\300?\366~\037\345\222p\252?\026\036nfx\\\304\277\322\266\355\275\3601\261?h\336y\373\326\373\327?Z\312\246\032\305\013\313\277!l\314y3[S?\323j\321\315\301\335`?O\375\254\307\267\326\314?\246hOC\000\342u?\272m\031O\210\251\263?\200\212\020B3\224\247?<\002\217\332\212\036\306?8\n9\204d\340\242\277\r\321t\270N\212\300?\225\023\212\000\351\023\265?\025\271B\200U\363\233?m\233\332\000\t\026\203?\204Dv\300\336\315f\277 \004\222\337\203\030z\277Z>\206\037\200\372\247\277\240\374\376ISo\303\277\256\r\240\036\245\322c\277q\005\220\261E\230\262?nf\231\352n\303\320?\270\347\\\376\001\336\227?HI\264\2118B\316?\250lYx~\\Y\277\360\331\000\215Nm\266?n;\2478\222\364\267?;\344$\234/Y\225\277\323\264\264\350\327\265\315?\026 #\003\355\314\241?\337\377\246\373)\243\325?z\035P\272\035/\317?\314\257j9e\250\317?J\3332\277\036\274\275\277\366\213\247X\024z\300?`\350\251\277rE\230?W\200\027\377<\342\237?\224\354C\244\307k\303?\027No\322vD\224?8\364y9\252\242\263?\200\033\224\366\'\355\310?`Q\322BP\325\227?\354\262\225 \356\255\236?\275k\226\354T\320\266?\255V?\231\363J\221?\026\241\\C>\"\302?\324\324\262\265\276H\307?\244\310\367\030\356T\245\277\2325\t\302;\027\250?\205X\356\346X\307\223\277\210\367+\203\273\312\226?O\272\241\347\036+\262?qR=>\306\001\301?\000\000\000\000\000\000\000\000\007\325x|\212\002\224\277\032%\371[L\375\307?\247\230\360<\322\217\247?v\025s\214;\020\262?\022>\010\277\334@\313?\207\201\327\3742\367\253\277\333\022\204\356<8\202?\214wk\214\342\304\213\277\253\325\323\036a^\264?\275@b\036\246\273\276?\201v\352>\276\014\265\277\037q\341\243r\221\322?T\360F\254\346\265\270?`\235:\301\304@\307?e\032\304<h\314\254\277\257$\232\274\330\346\324?C\373\273\353*\254\276\277]\375\335\335\370J\245?\236\256\n\256\233M\215?N\002;\001\304\222\264?\350\2751\004\000\307\232\277o\200\"\341>\034\270\2773\330y\300\341\252\260?\266`\334\037\205q\253?\301\275(\375a\244\217?\365\223\234\331\317\336\305?7\202\304\336\332u\261?}Y\373\267\242\377\300?\321\242A\201\254\344\260?\307\343\256\315\342\237\203\277\356\330!a\214\206\271?\352\001\230\327\266\315\235?1Ap\t~\243\304?e\023\211\327/\267\237\277\265\277\324Kc\346\263?\324\2673\250\002\"W?x\322\227\345\270A\223?2\332W\334\207U\312\277\221ffEX\375\310?\267\270\313 l\350\242\277mc\036\277\330\367\315?d\371\215\213w;\213\277\031Z\332Aa.>\277\\rtF\250\332\215?\207$\006\303\261\025\303?A\230_\366\2003\307?Y\322\335\267R6\301?[\315Q\177q4\221\277\265la\241\314\302\237?\312m\373\036\365\327\256\277\315\330\247N\315\006\273?\317&\217\300\202\250\264?\216\315G\177SK\227\2773\354\007\247\313\003\314?HmT:g*U\277\002u\227D\265\001j?H\'\025\004\304a\242?+\362\237\371\222I\236?\353\206\361\303\326&\315?\'8P;Wo\315?\033\021Jgy\201\244\277\223\233U]\217\033\326?\360\210\303\377A\027\267?\201\342l\337H\305\261?q\323v~\027\327\232\277\200so\023(A\217\277\247\331\326+9\342\211?\355\221\264\270R\021\303?\232&\004\\\244\021\257\277\361e\351\3354\212\262?\271\214Y\376\225\370\260?\363-\377c\031I\320?\"\240FJH^\302?\310\264\277~K\252\271?\352`\346\003N+\241?4\202\215\353\337\365\300?%\353Of\254\313\267\277Z\247\200jrg\303?\302\242\321\006(Y\221\277\334\024Mo\230\313\232\277\264\200\340\\\211a\262?C\274\"\266\303x\314\277pN\272g<\225\304?\344\2023\370\373\305\271\2775\251\2629\030\373t\277\356V\032!\321\276\307?\274e\177\207?\026\260\277\247<\213\375$\000h?\266\007u\037\355pq?S\233\223rR\363\240\277\3037^\313ud\303?\235\224i?P\261p?\306Gr\226\345\255\305?e\356\311\337\227\334\240\277 \300\032N6q|\277\203.D\373\026%\304?9\264\242\257\033\024\213\277\332W\266\3002\367\252\277L\nV\222A\331@\277\023\016{\251\361\265\306?\257\3616\302\344>\232?\213\026\003\230\360S\301?c\013b\0343\273\255?\'\324,\000(\247\257?8\024\374>5\301\306?\346\001\3218y6\222\2774\345\371\302\032\235\300?\206\234JH\234\374\221?\361-]\036:\237c?\205g\370\005\2525\255?\014f#B\351,\227\277\246\244\034\006\322I\315?(\356\333\275\232\213\261?X\246\234\205\366\027\201\277\005\334\303\303SF\246?\013\2053\270\340\036\237?\362\233\374\365\216C\250?t*\225\307\005\255\313?\215\3559\331\233R\260\277\r2\242\334\221\004q\277\302x\274\177\342\366\325?*\260\235{Q\263\276\277+\271/\014\375\270\250\277\235IJc|\344\221\277\265a=\203\300\251\243?\247 `)\242\221\270?\037f/\333N[\270?\'\353&\347z\221\261?1\371\227\213\225$\266?\3017\236\346\034\360\232?\257n\345\272c\220\237?;H\231\036^!\314?nJ\273\311V4\305?\n\306V\n`N\215?\332%\303T\247\301\240\277Rr\373\243w\303\334?|h\233\362S\342\265\27755\236B\215F\316?.\344y\277\275\252\274?$\352\204\036\321\007\245?Lg\253\273G\360\313?\306\313\303 1<]\277\364\366\214\351\256\021\317?\216\3676?\366a\262?\000\000\000\000\000\000\000\000y\001\233\0307Z\300?\361\007,N\357\301\275?\231\227h5\311\264\303\277\013\332\273q\030\355\265?\235~\026l\237e\273?,RY\373\330p\325?\345\211s\026\356C\233?t\037\215\376(\316\254\277\007\350B\325}:\243\277l\t\267\204\225m\313??tA}\313\\\321?>\'\234a\223\312\243\277\224\205\320\275^L\303?1\006\362\306+\013\224?\020\374\024l\310\344\302?\345\370\333}\022H\315?\320\323\200A\322\247\303?d2\250xTc\305?\350v\243M\335\256\246?\250*~\235\345C\306?\002xd\334o\025\247?6\242\203G~\361\307\277\325\020\260\261\246\r\302?V\215o9\250\016\273?A\351\321u]\317\307?\375v\206g\021\243\276?\352\177\363\301\266n\265?\000\000\000\000\000\000\000\000\351R\257\235 \030\302?Q0\373&ag\223?\360&\256\031\317V\276?\377\273\323\327\322\'\260\277j\000\251,\216\363\271?0\025\331\326h\234\304?\246i\340\337Qw\226?\275\232M\221\215Q\254\277>\270\226$*\257\304?\'\322\017\200>\345\200\277\216\356\260!\351\347\264?\334\303p\302\374Ms?\314$n>Cr\243?\202o\375h\366H\250\277\363\017\256\302^\017\266?\002\217\366\337M.\261?\332\374d1V@\317?\346\320\236\242Us\313?\'L\367\276\341\323\307?8\2565JMq\262?J\306\234-A\302\207\277B+\007\345Cq\324?/\261\246p\014\032\263\2776\373\0359\273}z\277`\372\320\341w\325w?]\312\022\000\220\321\311?\357\315tQ\"\371\212\277\024\231e\301W\203\250\277<\016(@\271\022\240\277\320\355%\215\321:\261?\007\317\347PD\216\261?Y?\354;u\033\307?xW\274\337\010U\245\277\242\357MW\240+\315\277\330\346\357s\266_\261?\213\235:\240\266W\261?WO\200=3|\255\277+;\222\005+\322\264\2779.\035R\220\310\263?\220u\006\200\t`\260?\367\243\362\300\021n\302?f\231\217\265\320\337\262?\207\261@L\2460\201?\037M\365d\376\321\300?c\311fX\326G\266?\030x\356=\\r\245?u\221cg\341\035\302?\242\272\322\225|\252\275?\260\312\246\330\250\271\236?d?\237\211/a\210?\034f\344\003m8\310?\347I9b\244L\242?\004j\246\205\017H\225??\312\004\323\233\027\266\277\001\336#\027sB\273?\2739\2468X\311\313?@O\240\333\215\266\307?\004\314D]\340\374\220?}v\363fj\230u\277\373\026\010\310\270\336\311?Jb\327c\023z\230\277\023\205\000Z\237\344\205\277\260J\022\031\220\034\302?\"\254\313\313\217/\215?V\335\033*c\317\267?y\037\276\201\006\361\261?\336W\3044\374<\267\277`\360JA\240\373\242?\323\254\224\347\277\334\230\2776U{\001\213\266\274?fN\336\232P\225\222?v7$\365k\331\200?/\257\226\032%\330\235\277L~=\277%\211\226\277\314gg; \265\223\277\236\310\274#\235`\247\277\337J<\301z3\263?\334\265k\337/\250\253?O\360Eb\037p\310?^C\364\224j\331\241?\266_\215\237\005\"\271??C\303XbB\223?\003\034\010\352\020\017\307?\344xO/B\302\303\277\365\3556\005\270t\220?\205\367,:\037?\311?g\\\347\310\222\205t\277D\266^\231\330\370\270?\030\305J\203\335\333\245\277G5\274\276\256\335\240?\311\214\032\300\031\004\315?a\003}}\010\305\324?\253\216\301/\232:\250?\355l\237\300\001\316\320?\312B\246B]\240\323?\314G\364`\302\320\260\277\014\261\372#\014\203\301?\007\3110^[\216\261?\035x1\244\365\375\306?\234N\323\343\316\267\271?\211p\335\336\177u\242\277,\334MK\007F\253?\321\252\330\220f\311\251\277 \003\036\275\206E\325?|\350i]\366-\261?5ms!^\360\241\277\205\203\224\n\360\376\220?(\032\326\032k{\310?\345\316\257ZW\324\265?\317\247r\000\033\025\255?e\311\356\222\320G\201\277\212\352\255\201\255\022\306?:=\255\252\260\374\301?\272[\304=\267L\257\277\341[\036\214T\357\261\277.\350\234#\033]\322?O\275\003v\024\353\304?\242\342\2138\225\363\274?tb\254\302\250\234\225?Z\003\347\316D\277\265??\346\306\236\204l\275?h\037\320>\3736\231?\307\026\335\325\006\002\305?^\241\315y\337[\301?\213\216\303\3446\257\242\277t\264\373l\034ex\277\010\265\031\206\023\301\313?\240EB\235\352w\240\277\312zvht\341\235?F\300\036\234\032+\254?g\373\251T\375\010\241?\231}\242\333\340~\301?\337\272j\267\300\222\225?\031\211\376@!Q\263?\302\021X\304\246Q\211\277\200v\217\205K;\300?\270\200\017\337;\312\253?\3368\335=6\205\236?\314\343Y\027\361|\310?\024\352LN\253\360\262\277\341\273(\325\231\326\260\27710\341\206\316!\271?\317@4\014\202;\246?p\345\323\0001K\300?8\375\340I\371\263y?pX\277>\337;\265?\361X\277\333\264\000\307\277\213\321=b)\317\244?M\211\342]G?\320?\353cpZ\021\261\266\2778[\326\203\235\360\241\277hk \374\324\010o\277\277D\207\203.(\232\277y\200\311\273ZV\241\277\245\007p@le\306?\341\037\235W\310\036\303?\330\372\345=\025\n\264\277\367 \336\034\251\034\250?\326\255}\205\365\224\315?\021m\324\376_Y\274?\223?\374\"\277\203\244?\265\265t\273M\256\322\2770\205\244\242\363\222\310?\000%x\"\014,\272?@\274\317m\231>\270?\244a\245@n\330\314?\341\332\327!\001\032\272\277zhH\252)(\302?1\275\263,Nk\235?\010\2777Cv\311l\277-\237\274\372>=\250?\231\355\216\265T\030\302?\370\2270\334\261\277\265?\331\273\026_z\234\302?\204\341TR\304u\265\277*\032\255\2339\301\242?~\345\377]\270\026\320?\362\371\325\332\003F\311?\265\300?!\022p\274?O\223\370`B\032\266\277Zf\317m\333Z\277?\022\232\333\277\335R\253?\022\375V\302E\264\301\2773\354\203n\'\370\251?\2701f\340\272A\300?9~\2504bf\274?\231\236\212\375`>\254?\222:CiVS\275?~\306s ep\210\277\213\273\007\t\315\005\314?\t\354 ez\370\303?\307\375\017\374\3442\226?\2021*\302\260p\306?RA\352\033=#\222\277\212\354\234\311\2531\303?\3074\347\2415\215\263?\r\256\024]r7\302?Z\023\037`,Z\254?\277\226\265\037\271\315\272?\202b\330\0370(\277?\3410\250\241\323\224\310?\030\000.\361\025\027\254?\367\3678$\314\354\223\277\366\035\211\270\265\334\306?\222\346\023\242\021\246\262?\351}\004z\270\317\310?\231_|\272\202\271\222?O\331]^\210.\325?\206\003Bg\251\'\275?\017|\353G\263G\274?\254\374\203_\"\222\256?\021\244\224\010;b\246?`Y\035\304\304\242\222?\370\3205\300\202|d\277\243Y\227\"\022\350\303?u\003G\372\233m\302?\313%\244!\"\266\231\277#)\257\266\336F\301?\335Z\271&\303B\232?\'\366\2570m\315\252\277D\243\277\300A\265\321?4RJc\017H\304\277\271:\257\232\257\336\233?\364\005\302\210\\t\310?8\346\n)\036\233\263?\356\303\024\301\014\201\236?g\354A\304\252\232\240?\221\253G\320N\274\245?{\322\221u\233\344\300?\226\034=\237}<\303\277\204\353z7P?\306?P\255\322\236\021\363\242?\023(\225\002h\032\230?z\256J}\264\223\264?\302\025\005?\207\300p?\006\257\201\240\350)\262?\254\'A\037/\033\210\277v\372A]\244\320\304\277/\024\355\200\244\265\272?\260\252\240\232y\017\314?\027\265\301\252\366\300\260?\325\205\016p\367(\304?V\202\344\245kBk\277\314\301\340X\037(\263?-a\2477\'\037\250?7\031\260?\344\210\312?\263\310\007!F&\221?\005\333\014`_%\204?\035X+f\306\323\270\277\3663H\003p\032\302\277\030\274\236\236-\326\253?{\034@\236\341\366\262?\332!\214\014c\354\213\277Yo\377\212/\354\216?i\2627[6?i?\367\346\232v\357\260\305\277!@yd\033\324\230?,\240\253\010\222R\303?\220H\350\"\026\025\246?!\250}\347\325\010\300?\025\243t\nn\373\300?A\334BH\367\"\237?9\355$\200m\215|\277B(\214\271\255%\267?Z8/\237\303\264\251?\271\276\223?\255\334\254?\352\253\200\202X$\250\277\300`\251\301C7\244?\021\203+f\245\305\232?^\222\024\242\215m\245?\2713\270Rt\311\302?Nq\231\366tEv\277\207\302l\244\232\311_?\021qR\0340\335\311?\276\303\314\302\307\365\312?;h]@\273\205\310?\246\353O\003\202\020\267?\355E\264\035Sw\307?\354UH\037\021X\262?\336\303\210\361X;\233?\264\352W`\346@\225?\035\217\370\231\243\334\303?\261\363\205|\017\030\251?\020\226-i\367q\275?\252SP\027J\242\264?=!\"\322\302\247\270?\225\243\204@\265\030`?\306\372\260%~\241\210?v\002\365\301\215\357\241\277\325\240j\037\353\334\242?\377\036a\275\366q\330\277\353\2170\014Xr\312?jU\212\236\rY\256?\277\212\347\307\272\023\316?\207\317k&\276^\242?\206yo\001j\'|\277\t\031e\211\020O\274\277\3771&]0A\256?9\373\337\036?\254\235?\340\252\343\337\004\262\262?~\277\366\236Z\025\251?\360\267\250\334e;\267?\236\327\335\336c \260\277\376Af_`\363\215?\266\261~\330w\352\270?\357\362\271\202\211\031\253\277\017\010\346{UM\235?\2542:\275\336\277\312?KD \340\016\251\233\277\357,\254\341C\005\245\277\341\266\353\342\214\032\241\277xjh\342\241\030\216\277z\236\005\302\312x\222\277\377l\317\037\337M\277\277\353\3562\252\251\270\301?->h\3523o\262?U\317\223|6<\316?\256\257\001S\376\234\257?\347\334P\245$\363\201\277\216+&\035\2026\260?\215X\223\300IG\320?J3\314\277LJ\263\277\267\016\314\331T@\273?\207\220N\270\262\237\273?9O\334=\376#k?B7$\203\026q\305?\314\367\204\323\037\355\274?\261\376\215E\354v\260\277\302m\235\032\220\006\225?R\023\220\375\213\343y\277>L-!@\002\274?\203\366\326\377\272L\272\277Dx\305\235\034O\322?\360t\235\374\314\017\254?4)\000$\245i\257?n\227GH\356z\316?b~\031\002p?G?\314N]\376\345\210\276?\205\340D6\210=\300?\351\350\r?\214\014v\277Y\320\305\360\"]\320?\237\371\203\036\275\343\320?\343<\367y\347\253\302?C\372]@~\"\212\277\nH\373\037`-\314?\'\027c`\035\307\242?\355\370\233>\356\343P?\326z\371|\030J\272?@\353+Y_n\306?\224\276\333\177\016:\223?\260\270V\200\221\305\246\277\243\362\310\2026\367\267?\336=\233\260X\036\313\277\373jp^\201\310|\277!\253\024h\233\016\233?\320.\370\227Q\352\274?\326\320\354\013\377!\211?\367\342\201\204\005P\232?\021-\315;\273m\224\277+\3360 g\331\261?\226\375\2230\365)N?!\036\204\336\355\n\254\277\266\277/\005\3267\321\277\034\227A\032\355o\237\277\265\304g>)\013\305?\274X\030\"\247/\305?4\373\331\033\276\375\303\277\205\330J\374\022p\243\277cs\020\2374\007\212?9\327\254\n?~\304\277*\216O=\334R\240?\230\313\035h\313Z\302?\213\255Q#\265\317\246?W\351\356:\033\362\233\277\313\263t\000\"\317\202?\266bz \204\020\270?C\324T\201 \341\263?_\246\271\333\315\301o?\357y\366C\t\006\322?(\202\223\310\231\001\301?\326qs_\013\320\256?\314\231C\0136\231d?Nx\317\242\363\361\276?Iw\000Y\302\271\314\277h;lCA\200\306?\237p\331\225Tux\277\2173\371!\020\332|\277>\300\244B\206\237\272?\317\362\237\342\366S\313?G\2435\030\200\314\222\277\272\227)\035\024\343\252\277H\2617\214\335\231\264?\270\001\237\037F\010\262\277M\022\222\237i\226\240\277Bt\255b\226\342\275\277\272b-\333\332\004\263?F\254\356&2\322\306\277t\021\370&\372:X?\271\200y\303\333U\242?\246K\0300\365\261\277?|\337K#^\005\310?nM>f5\227\271??\351\261\036\330\240\234\277\020\245(]\033\246\225\277\323x3\264Ke\300?\262\232\244\265F]\213?\244\214U\326x\341\305?\240J\264\201\307y\274?c\216P\371\370\000\273?h\316\331\206z\217\245\277\006\330&\231\305Y\253?\216\302\273}\322`\315?\301\367\243Mz\204\260\277U\352\013\201Y*\236?1.\013\334p\216\310\277>\232\207\237A\273\300?\355QM\203\201\353\304?h\244R\252LJ\304\277Nv\330\351\254;\301?\352\335\023|\267\237\212?\371\200\024\302PjK?U\206P)\237\263\302?%\321\344\3056g\315?\305\2738\376\377\220\253?:\266a\276\003\326\274?\373\n\0148\317\001\302\277Zp\026aPG\265?\000\233b\304\364\263\324?\202\034s\"\352\323\305?\006\356\304\325\226\364\306?\264\314\001\006r\236\307?Q\253\362\201@\016\236?im\340/\342\022\261?f\321R\261\345 \216?dZ\233\306\366Z\321?\265C\r\360\356\022\314?\t\240{\203\355\257\312?\257\312\307\346\221\334\263?w\\\3404u\005\240?P\367/\200X\205\242\277\0346\035C\370\376\300?\346\216,\320Vt\213?f4\362y\305S\331\277\244&\217\341\220\221\262?G0\335=\243!\316?:\306\272]\324\223\255\277G\375\021`:\250\256?\370\262\272\303\220\026\241?\220x\242\271\210N\313?\253\356\306\277%\271\252\277\270S\235\202\272\220\333\277\273=\2149\235\236\302?%\300\372\211\024\024\262\277\206\307-\317K\021}?o\217\277caP\230\277\240\211_\232\352\025\213\277\237B\307qT,\277\277\237V\241\346\203\034\216?(b\021\303\016cz\277;\202\036\341\351\322\247\277\030\354\247{tU\263?\341\203S\366\310\254\264\277\362\217c\220`O\252?\035\026\034\276\202\275\204\2771M*}\225\272\330\277$\303\2364\334\231\263?o[B\333\275\036\300?\310\202\333=\355n\322\277\354\267\300/?\201\247?Emv\377\263\301\260\277\237\010^\004\3704\312?\251\331\207\345d\234\315?cY\216bIQ\246?\3537\336\340\265\222\244\277\221rb\325AZ\300?\231\004w\271\353\031\303?/\237\223{\r\203\313?S\0220\277u\363\246?&\010\221\353*\315\267?\361\206n\325\371\340\263?\317\204V\302;B\207\277\233\334\326\263s\334\260\277_\220\231\260\242\253\275\277\000\023o\237\200\346\224?\321\332\021\247\303\245\225?%\027\214\337N\001\245?\n\373n\241\310\346\306\277TC\035\2018B\222?\241\252\327g\255\354\274?\257gc\200\237\314\300?etz\275\177\234\333?\277\323\350\376\177\326\321?\220kC\3058\177\225\277\022\223\337\276\350\324\257\277\207\266k[\367\003\264?m\002\251\240\344\206\273?\020\207\370\311I\017\273\277\305\375\313\336\347\262\305?\200\364\340\375\327\n\205\277T&\251\n\0255\270?\036)g\227\213\322w?\230\336.\226J\301x?\374\315\274\003\331>\303?\245vu}\325\200\322?\252\207\344;c%\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "V\221\222\235\005A~?\331J\371Z\341\247\253?\346_G\3632P\236?Rs\335\207\310X\211?\341\302\354+0\340\261\277\343Z\304\342\375\331\301?\244\363+\347\234i\311\277\324\325.\000\345\034q?N<-`~\376\262?+\017\230\250Z\342\301\277\330\270a\210Z\242\224\2771\377y\376\332\030\247?\322\205e\'\024\006\217\277\2255\301\242\350\242\273\277\220\355\245\276f\230\302\277>\014\347\371W\177\316\277\346o\347g\217\274\331?\274t\1774\035\263\214\277\363\310@\032%\032\311\277\343\0236,\333\301\247?K\204\001\334\020\t}\277\237C\320Am\025u\277T\3727\237\2429\274\277\367\203\354\202\342C\254?d\343\316@\275\375\275\277wL\274\207t\r\265\277\272\245\n\203\210\215\251\277\375L\275n\021\030\266?\356\2525\004/I\246?-9\223\333\233\204\237\277\303\005f\2460\306\270?Q\021\370\332k\365\230?K\360\026\340l\207\242?\314\275\336\002\253\030\212?\021N\217\226\230\241\261?>#S6\223\214\305?\375\340\327\243\313\366\261\277\346\'\005x3\354\221?#\231\274\236;\203\302\277B\260.\227\"\263\310\277[[\333\210\345\236\302\277152]\302\000\305\277.\367\217\246\366\371\222\277\205\356\263F\024E\304\277\374\206O[\237I\301\277\343\235\256\264\255\342\264\277\217\r\351_\256\037\236\277j;\236}\202\027\324\277\010[G\260\314\266\263?K\036\330\274mP\245?\307\264\272\305\221\301\307\277\313(;\242\347\273\262?\r&\330\030(kS\277\316\271\317\2024\211\241\277\230\014\256VyD\303\277\333\207\037\020\2460\250\277\262\341\237\010\230/\300\277\366\217\263 \374\332\263?r\264W\335\362\252\307\277\33098\236\360\216\246\277\374\"\333\330p\201\261\277\\\002\026\027L\236\204?!\221t\325U\344\261\277\201\332\177\317\325w\270?<\352;\001E\223\273?/\226p\210\273\361\225\277r\251\240[\025\314\213?\"\262Y?G\365\305\277\222)\342\036\222\364\266\277?\004\037CC\037}\277\277\255\366\333\227f\250?\345\261\202\271\277u\227?\250rQb\024Z\235\277mH\372\271C\270\233?\362\312\300\304\311D\200\277I%:\240\254\345\240\277\352\000\203\002\301\254\246\277\t3\320)\206\263\240\277\370{\265\345T\031\231\277\241\023\361\277]B\230\277\206t\352]\313J\240\277\25744SV\242W\277e9vA^\276\254?\025E3B\204\'\246\277\236\222\265~\3412\256\277\314\264#\363\315\330u\27727\204\317{\010\317\277\325\361\261\036k\204\274?gz\r\352\360J\225\277\"\310\234\302\245>\305\277\310d\355\306\355\335\314\277a\220\376\333\210\316\244?j\202\311\t\352\306\245?\326\354(\236\0301\252?Fjy\234\244$\240?\241\266\323\367\226\311\302\277\255\200)\240\334x\262\277\033RV\035\203_\274\277\343\316\350r\372fQ\277\300\260>\026\211\246\267\277[\215\025\312\374\202\251\277\331\262\337\207Ah\267\277\357\241\n\240\224\240\262\2776\224\332\213h;\306?\272L\352W|;\304\277{ii\362\275T\267\277|xR\003&\240\220?:1\332\231\370Y\306\277\251\320\314\325\207\334\261?0e\013\001\363\242\204?FH\252\335\031\347{\277\372\355\353\3009#\226?\260\2312&\263\260\304\277\3052\n=\363V\223?`\205\027!\225\222\226?I\264h*Y\210\255?\256\230\370@~\370\303\277\271\212\244a!\010\226?\210\351\2149\031f\277\277+BQ\243\007s\242\277\004\022\034\260\016\364\266\277e\375\357S\030\005\204?\243b\367x|\326\264\277c\037\336\037a\253\205?\204#\330\342Y\225k\277\370\244\257\002\345\277\177?\346ef\311\220!\245\277\r@\242\006\245Ah\277\254z\342\001\261\341\257?-\306e\201\033\316\307?\324\307A\336\262\020\247\277\033\021Jgy\201\244\277\224(\244\312j\031\317\277\254\333\250g\244R\300\277\025.7Z\006\203\265\277\225\324<Y\307w\237?\032\205\311\371\0076\267\277\222\305&\307\327}\306\277n\370\250\202\373H\241?Co\274\376\316=\255?Sz\"_t?\306?\271\030$\371!\241\301\277`\315\277eg\264\304\277o}\334\247x\226\262\277\204\300%[\270\207\314\277\235s\032_\200hr?\233\300\005\275]M\253?\323\000\367\237\251\025\302?\353\213\347\340W\264\303\277L\222K\001\000\367}?3Y\237\034L]\244?\306\334\"!\253\n\200?\371\212\013\223\353\236\274?|3\353>`\033\230\277P5z5@i\224?Se\255\333\177\350\277\277\354\375\200\346\367\246\301\277?\343\004\236br\226\277\356\336z\342s\206\302\277\200\340\316\336I\246\255?\203\007\227\340\245\363@\277Q2M\231\032\357\232?\021\033\001\034H\005\242?\364\275\235|.\336\211?8d\304;\000fn\277\331\337\002\236\356\033\313?2\264\266\000\237e\273\277\217#kGP\000\304\277\307\222\033@\035a\231\277\225\026\366\000R\245\226\277\212\250\354h\332M\303?]U\nB\370\236\247\277\212\230m\002g\204\313\277c\013b\0343\273\255?z\r\352\360Jq\264?\305\2626\031\227\242\303\277\346\001\3218y6\222\277\202\007\376\236\365|\301\277\t\003\ti\021z\257\277\240\272\342w\r\331\264\277\234\020!Kr\002\267\277k\017\030w\305\204\217?9/g\031V\257\266?3J\372(\341\221\303\277n\0355\211\356\027\301\277\201\022\017\376?;i?6\'\'\301\270\247\223?\2102\257~\307\313\313\277\212\034U_\3630\226\277\215\3559\331\233R\260\277\237\213\351\266\002\022\306\277e\370\364}\335\016\307\277t\022\204\n\222g\264?\007$@\321e\377\226?\364\335\207e.\316\230?\277\372\177\242\240~\255\277\374\246{`q\177\245?\361YK\277L\255\266\277\364\274\341_\200T\275\277?\300%\303\233|\252?R\202z\n\353\214\265\277\367a,\357\204@\211\277B\246T@\334\000\242? \304\230k\006\365\203\2772\371\260(60\310\277\263l\275\021\243\010\231\277\225\351<\317D}\316\277x\210R\305\014I`\277\217ND\\\214\003\321\277\376\344\253\301Tc\232\277\320\337[\303\322\341\247\277\363\213@,\003\035\211?2\003t\343\006\021\247?\232\021\006\347Q\306\227\277\224,C\366#@\217?\006\207+(\213I\221\277N+\340\371\240\302\277\277\236\273U\276\004\372\304\2770cm\000\364\003\266?\226`\355\377N\240\303\277q\232\357\364\013\365b\277q\222\203e\256\004\300\277\037\237\322\271\211w\301\277\220\'#Y\311\010=\277\370\227m?\312\234\250\277\345\200\014\006\2372\217?\264\252\312crO\326\277\300C\024=7\007\236\277O\323\343\316\267\313\265\277\345\233\216|5r\311\277\020\374\024l\310\344\302?\304\363\214\\\273]\315\2772\306\202 \022N\265\277o\221(r\220)\271?\001\017P\206\230\376]\277\202\335\270\336\231\375\273\277r\002\233\277~\222\253?\241\202GD\306]\300?\256q!\202\266D\261?\374\022\226\035\207\346\310\277\341\232\267\301\273\"\303\277<\020\233\300[\275\312\277\210\231\217\001_%\221?\002\371G\034\010\202\242?\335\227u\367\347?\267\277Q0\373&ag\223\277\336\235)2B\221\277\2776\336\256{Q\331\231?\337]C}\206\310\221\277\t\335g\215(\212\271?V\357\366\275\"Hq?\347A0\375\001\305\263\277\330\304\033\374q\271\313\277\216\203\277\035\260D\322\277z\353\025y\006\313\224\277\334\303p\302\374Ms?n\330\370D\205\207\260?a\017\222\252\222m\263\2779./5L\261~?p\274\313\335\230\262\210?(\"3\177\233\261\247\277\004\035=_\2534}?\351\253\026\236\270\230\263?8\2565JMq\262\277\274\031r\302=\374\254?\330\210\273\325\316\213\310\277\234\274\264 \025x\211?\\wN\016\372-\247\277<^q\006\271j\304\277\352L\225\200|/\224\277\352I\221c\210\357\251?\254\314\027\241?\200z?\263\272\315\002\212\344\245\277\257\205\315\276\372\021\262\277\3654\300\002!$\241\277X:@\254\016\353\270?\006\034\322@\335T\277?\356]\331\276\255\337\274?,NR\354\2528\262\277\227\227\243\227\266W\221?\314\034\375\365+\031\303\277\357!7|8l\245\277XG\341\2740\200\261?+w\004\017\212\350\212?Y\036\377`;s\314?\253e\3066\004\"\263\277L\031\366\203\323\345\306\277\364\035x\214]h\265\2777\232\364_\355\315c?^\252\210\211\274\033\302?h\'\336\\W\247\310?\242\272\322\225|\252\275?:w\273^\232\"\261\277\005\242\253\235\366\316\303?\271}Em\321\270\320\277\270\234Mr\200\223\203?a\255\024\341\252\333\236\277\031\'\370\205\333\312\310\277\271W2<\000&\234?@\316a\342\202x\243\277\276\257\200\370\257b\321\277a\033\366\035\361\233\241\277\335\332d\202Q\261\255?\202Mc\234;\321\214?V\362\327\202\343\324d\277QIB\307\263p\226\277\224\274&\343\231I\245\277\000\264\004\036\272\316\236\277\002\252s\235*\005\241\277\313L\345\304\211u\237\277\255\331\273 \321\355\251\277\264<0\374\267}\312\277|\336\246\242%M\262\277\031\262\025\217\346#\266\277]\370\342\007\276\324\276\277v7$\365k\331\200?h\266\247\273\035\247\262?\026y~\376\247\225x?\201\362(\251\324k\205\277!\340,\377\003\247\240\277\373\265Ab\305\355\233?FJ\362\335_\235\250\277\312l\024\202\352Y\326\277\277\253\033x\200\352\223?R\365\310rTf\241\2778\034\264\\\330\310\243\277\037\334\235\265\333.\274?\001S\304\361\225\243\200\277\365\3556\005\270t\220?\317\212\240\030\366\207\306\277g\\\347\310\222\205t\277\246\335\236\326#\303\273\277J\337Z\3345\327\301\277^f\330(\3537\245\277\2602,\334x\313\241\277\236\310\233\025\264=\276\277\311}\345 l\241\264\277\021\243JAu{\277?DC\207?\021+\263?I}\323\240\332s\220\277\324L\010;\347h6?[\337\023-q\313\271?\261\354\034\337\353_\206?\023n>\035\253n{?\353\357\235\177XB\273\277kbL\275\030\021\246?\263\242\274E\026\037\304\277/\257\022\342\200\014\327\277\371\\\226D0\355\265?U\262\340\241\317\027\232\277\313\316\252\350rw\302\277\030\362c\'\027>\307\277u|\031dI\273\240\277\033\024\004@r:c\277+\"\007H\333\310\232\277x\254h_\270\364\267\277~\032\241\346~c\224?\272[\304=\267L\257\277\202Z7\236\002r\235?\000\301\345\000d\031`\277\325\370\371\255\245\231\261?0\373\216D\334Z\266\277B\306\252\240\345\342{?\261\225\247\336\340,\261\277h_\360\236@.\254\277\232>\277\030_\356\311\2771QR\232\254\325\262\277.\336\362\005\353\007\317\277$\342\260\253\376E~\277\250Af\241|\305\240\277\007|\346\373\225\r\226?\201\343\346\337$\211\246\277\0032*_\206\265\270\277\351\265\346\202\213\371\252\277\373\304\teD\026\311\277A\251\254\\^o\305\277\332V\263\316\370\276\250\277zKb\336\035\370\241\2776\247[\305\2054`\277\377\\v\200\016\020\263\277=\366\016\022\3755\304?\022\304\026\016\306\200\265\277\035\311\272\277G\353\240?\'\333\237\017\2770\245?oC\020\020a6\277\277\025x\202X\221,\300\277\250\210\304\036\211\200\241\277h0x^K\304\271\2777\363%\000q\352\234?Izg\240qb\264\277\264\003K\001\253\233\307?\007\220\312\3428\317\224\277\306\345\347\242\373\033\251\277\002\237\335)6\311\311\277\271aF>\320\206\276?\203\230\327S\243>\260\277\"\224\357\000\354/\217\277-AK\371>\214\204?\000\230\r`\001\264\272?\233\264\302W\350A\277?\\\220\353\256\005 \270\277\331\356\221\032\t^l?2\316\0310\3142\267?S\212\310\372\3162i?\370\252\021\321\032I\271?$\212\332G\270\332\262\277\307u\000\202A+\332\277\031\035\220\204}\273\314\277\203\326G\320-\256\266\277\235\354\217\305pT\300?\345T[\177\205+\274\277\275\r\336\025\311p\302\277\357cX\0078k\255\277\010\2777Cv\311l\277\2670E\230&\225\313\277\335\254fB8\013\224?\2172\003\021\271K\271\277.P\326\230\245W\306?\236\250(;VY\206\277L\211\037\301_\\\254?\320\022\236\257\335f\247\277>\225}\236\331\212\262?\025\257\330}\314\251\236?\231E\213\340=\017\242?!d\315\206\004\245\247\277\217\372N@\321D\266?\211\1773\214\026\373\275\2774i2g\246I\301\277\337U5_*\330\260\277w\312z\234/\027\257\2772\263U\235c\255\242?\022\201\321\202\243\246\300\277\0207\257\003J\267\274\277t\224\346\003\300\200w?\177\213\312]\266c\307?4\374\322\233\204\344\246\277\035p\300[\336\244\300\277\261\353\213B\232\312\253?#\356\271e\352\"\313\277s\270\240\277\323\222e?\214\210\377\307K/\267\277\354\257\354\274l\277\266\277\004\317Z]\220%\260\277\2776\023\272\350\267\260\277\373\257s\323f\234\272\277\030\000.\361\025\027\254?\303^\247\337%;\276\277\216\031\321\013\261\331\263?\222\346\023\242\021\246\242\277eZ\325q\200\211\276\277\034hx\222\370\005\273?\271\330Y\231\225\022\306\277!\275\023y\263\202\311?_\217$i\200\320w?9b->\005\300\255\277aP95\266(\216?MG\306\213\001\351\247\277\236\372\204\017\314\241\212\277\267\344\247\'\342c\327\277\274\274\340\243c\246\251\277\013\020\025\203\370\342a\277\034\246\307\000\232R\234\277\376\037A\240\034\315u?\030\271D\201\200\255\243\277_\211==\201s\256?\375\244\332\247\3431\272\277e/P\\\322t\243?\'xuTVO\263?\337\227e\025W\021\277\277\341fm*\275|\300\2778\302e\2775J\252?\205rw\335(\240\227?K F\204V\222\250\277P\261\270\237VH\214\277\335\316\337\000\n\340\267\277\254b,\376\257m\227?\002\302\325\241\235J\241\277-\266IEc\355\312\277\272\271\370\333\236 \231\277p\253\237\205\244\031\230\277\013\261<@\336H\243?\215L\251\023\034\323}?\003f\327 @D\254?\262\330\303\352\321L\275?\325\361\261\036k\204\263\277\325\000J\350\323\317\252\277_\030<\216\027\271\265\277\371}\244-S8\317\277-a\2477\'\037\250?\231\327\251\243\367N\240?\335$H\235g\211\303?\005\333\014`_%\204?\023\024Xc}\301\277?\363\016\246\027kn\266?\030\n\342\200\271\275\224\277\035}\243\210\322\377\256\277\357\366[f\321n\230\277\265\221%R\036\006\256\277\267~v\227\366\023\307\277\r\272\357\336r\361\264\277\177\306\236\240\301d\256?,\205\274\365\314X\231\277\220H\350\"\026\025\246?D\021\367\375@^\304\277\000\375B\270\227n\261?A\334BH\367\"\237?\036\325\236Ew\330a?\310KP&\342\353\300\277\3143@\2635l\275\277\345\025\241;5U\265\277\037\377\232\346\374\230\300\277\333\313\343T^7t?j\014Q\275\351!h?\343\323\037>\t\234\255?\314\004\022\000[\337\274\277\026\036s\0372E\206?\r\221p\2558\315\235?\337\177\032\255Y\035\316\277\237\362\340\325\017\275\304\277\302\342\r\274\234\212\307\277\221\024\354\032\210\300\250\277\242p\250\245\332#\255?d.\374\"\231\274\264? \332\001\266\007J\223?q\353\250It\277\273\277\034\225\274\266\216\\\304\277\260j9e\250\351\302\277$KA\022Q\247\317\277\223_~(J\242\204\277^\\\262C_\356\241\277\203\276x/\214.\236?K.\\\334\232\002\240\277\346\224\326\230=\364\230\277\311\256=~2p\257?\231\343\337\336j\332\272?}\342\240\207QE\226\277csE\221\004\315\216\277\")T\375k\365\251?@\377w#w\001\240\277\312L{\340\351\351\235?2\235)\266z5\304?\333\335\301W\215\210\262\277\201\3302\026\326X\201\277\357!\007C\"\017\253?\376\335\362\001Wsq?\371\030\327\2701O\234?i\340Y\030\250\340\232\277\177\261\214G\210v\226\277\220\330QI[d\260\277\357\362\271\202\211\031\253\277\027\035\373\037\201\273\265\277\003qw\006\250\321\235?n?\210\200\035\341\177\277\367VfBz\'\222?Q\374\243e`\301\230\277\315\263\355\017\357\224\231\277ba\353\306y\007\303\277\315\212\030\336\373\007\220\277\t7\3278\264+\300?\254i\346\342\322\245y?f\241\276\341\025s\324\277\311\355\362\010\311]\227\277)\204\243\036\201C\304\277n\376\035Y\022\003\227\277\214u\374\237\324:t\277\234\313|#\224\240\241\277\370\350\344w`!\274\277\367v*d\327\213\260\277i\221\3625\371\235\206?\006\035c\335.\352\301?wS\302\372\334\\\300\277K\352\343%(\023\205\277\366@\337\241\036^\246\277h\'\271\272\331\343i?R\357\375\233\204\303\256\277I\216K\207\024$\304\277N]\032;\270\246\322\277\034\005c\340\233\017|?]\203B-\233s\241\277O\217n>\225\336e?b~\031\002p?G?e\300\376\220#B\305\277W\375\370\350`?\302\277\333^\361%k\014f?mNS;+\270\237\277Y\262\351\\\337\364\225?\016-\025\310\252\020\313?\252?\222\367Il\221?\236\230\2228m\276\301?P.\376\330ZVG\277^\245A%<\016\204\277\350)\342\334u\"\247\277\234\220R\340\3176\264?\'y\236\r3\023\244\277\257g\2769\022\236\302\277\267Vb;k\371\261\277>\000\261\276\344\363\277\277\0355\354\030\323\243\300\277H\331\350\275\255K\300?\277,\212\252\241\005\270\277\226\350M\301\361g\260\277\367\342\201\204\005P\232?\006\230\340q\335\326\250\277\r\312\260a\270\000\240\277>s\260\340y\007\264?4\333\264\031\360@h\277\250\247\321\334\361\203\334?\004\025\372\005`(\302\277\357\177\323\375\224\021\275\277Q%\261A\262B\264\277\024\257\323\304\022A\254?\360p\335\302*Fl?\204,\352\027\025\006\306\277\224\350\331j\336\212\266\277*\216O=\334R\240?\360\314\333C\210L\245\277\204\035\013y \214\201?\024\020#\034d\246\221\277C\375\214\335\316V\242\277\232\370\223\017\302\236M\277C\324T\201 \341\263?\251\007\273\027N\210\261\277\236\225Y)\2518\325\277Ry\"%\311\265\265\277\372^d~E\351\245\277\314\231C\0136\231d?\272:#\361\302;p\277\310\317\210\312m\230\273?\3043)\204\\I\243?\237p\331\225Tux\277\2173\371!\020\332|\277\244(\206\232\327\307\253\277\177l\246\003\330\316\252?\377M\336\266\245D\302\277Nz\337\370\332\263\300\277\361W\301\24241\221\277\034OW\271H\010\302?\2437g\203\026\322]\277\245\020w\336\216\274\244?#\206\314~\245?\246\277,\366U\301\301A\262\277t\021\370&\372:X?,\373\t\302p\211\317?\274,\036\305\326\277\221\277\314\251\317\233\253b\256\277(\0358\251`;\262\277\"X\321\366\032H\302\277\003\341\313\303\220<\220?\0160\261\001*\377\310\277\220g\033\250!\344\245\277\"\224R+\247\230\271\277l\315\000^9W\227\277\0239\261\301\352Zw?\254J\t^\200\277|?\006\330&\231\305Y\253?\224CQ\301]\315\222\277z^\265(o$\205\277U\352\013\201Y*\236?\205g\247\276\252\265\247?%{B~O\217\261\277\020\312^cU\014\312?\304\257\232\337\027\264\277\277\006\220\353\360!r\321\277q/\342\233\243\027\243\277\361\255\274\242c \315\277\366(}\235\253\030\310\277%\321\344\3056g\315\277\300\332\266\307\211\261\207\277\0170o\345W9\263?\237\372\315\345\202\n\271?\230\002\251\177\326\035\305\277\363;,X\323\n\303\277\217\253OA\227\323\264\277\257L\021C\037\352\267\277\273\240\327\002\357\242\260?\314Y\327\034\253\212\226\277\2742\373~bK\251?\t\303\035\373\233\010\330\277\250C\033>\361u\320\277.\350\t\300I\027\246?A\031\333R\244N\274?\363/\337\200\352\255\240?F\314\342\201\245\023\211?g\010\tIMX\304\277=\335\222\177\332\346\276\277\346\216,\320Vt\213?\000\355`\'i<\300?\014\023\374%\230 \255\277\177=\304\336BY\233?!\247T.\371D\261?\r\230\321\331\023n\233?\225X\264a\226;\256\277/\034\373\236\000\246\251?\007l9]7!\214\277\224r1\345\307\210\275?\336a\352\031\210\206\265\277\372\n\303a\030\231\226?\226\330\214>\254X\305\277h\251\345\234\022\357\303\277\216@\027h\322\001\246\277R\250\263\002_\253\250\277B\363\265>\027S\303\277(\271\022$\347bj?\000\000\000\000\000\000\000\000\222\177\366\273a\357n\277\356P\301\237\351\276\304\277\376,\211\370\366\312\222?\211\004\266\367g\016\301\277\3132\202\225\\(\271?G\352\034\207\352{\313\277\2139\245\017\237l\271?GvB;\351u\267\277\035\220\332}\364q\210\277\217M\336?\227\"y?\007\227\337\200\316X\227?/\263\344\376\336\376\261?\273\244\227<\221lu\277P\277\260\241@D\321?A\335Y\036\030~\301\277[\314E@\351rh?\0130\306\345\223\354\\?S\0220\277u\363\246?\231\357d`\262+\244\277\2246n\224i\362\242\277\034\260q\036\312\247\307\277\203\"\314\243\321\323\246\277\232\204\335@\031\224\205\277\017\2236v\005\262\305?\366\3051\324Y\024\271\277n\356\330\235(\350\301\277V\260\007?\343U\255?\177\001\367\033qq\300?\315Z\247\035@\267\262\277\320V\271b\223t}\277\241\335|~s\032\320\277Z\311\330\032[Y\324\277\033\343#_\222\225\270\277\035\272,hR\361\300\277\2234E\241\341\244\270\277\035\351\257?\340\364w\277\2112+F#@\303\277T\3115B\225S\252? p\023\244\010_\325\277\310\361\236^\204\204\265\277\357E\261e\304\310\220\277\230\336.\226J\301x?\225u\346\273\347\002\315?\032\207<z\252\340\241?\323\210\3646\221\364\264\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\340\275@\234\311\357\327?\366\256\244\2115d\303?}\210\025\207\226i\306?4F-\305<\310\275?\343\007B\r:|\265\277{poe&\244\307?\330Y\200\370\361~\260\277\346q{\366\032\212\262?\354_\243\366lg\260?\213\375\266>\344\341\250\277\347\200\345\207\230\262\226?\350\275\265<\244R\261?\352y7\026\024\006\257\277\353\324\t&\006\232\264\277\361\274\204\245\342H\227?\314\241\373(\331 \302\277T<\r\234\\!\267?!1j\214\020\375\270?!w\021\246(\027\313?\202\0039\254\231J\273\277K\204\001\334\020\t}\277\374&\342\347\236\371\262?c\3618\230\217\234\273?\023\356\n\207\"\000\237?0}Th\305\334\216\277\2266\262\261f\362j\277@Z\357y\366\303\302?\375L\275n\021\030\266?\271Za\331P\332\307?\242\023|\262\346\360\260?N\343j\246s,\316?\251>\317 \267\277\257?lW\256\330\333=\263?\346\375\025\270\220\325\226?`w\272\363\304s\244?w6S=s\270\250?\365\034\337~\303\273\215?\211\366\210\003\256L\267?\302\337\016Xb3\301?2I\270\322cB\264\277\203J\340\377\\\356\273?\275\021\345$\367\350\276\277\223L\3633\232\001\302?\357\256>\024\210{}\277\\\361\303\367\264y\300\277\2657\370\302d\252\331?\231~\177\006x+\223?\023\350\033\352\332\213\262?\255\202\336<Q\351\310?\010\240\346\036\361\257\304?\273\270\215\006\360\026\301\277\316f\037u\205\210\320?`\350\251\277rE\230?\344>\324\336)\342\217\277,\260b\031d\220\210\277\027No\322vD\224?1\350\262\010-:\205\277\\O[\300W\366\326?\025\301b\201m\314\274\277\303n\022b\262\341\265?D`\010\3406\270\216?V\252\331=XJ\262?\026\206\351\367\324\034\272?\034\303R\0233\261\326?\n\317e\031\313\274\237\277N*;yh\n\300?\345\327\341x\326\037\231?\3304\010\326\345R\275\277\262m\334X\014\373\232?\261A\262\302%\256\263?\213\030\2704eD\260?\266\372Ed\263~\250\277\001\34615\3172\276?\r\362\202\241qU\272??\317\256a\327\r\245?\022>\010\277\334@\313?\305\317\373\326\271/\230\277\333\022\204\356<8\202?\200\367\310\305\234\220\270?)\334<\037\257Q\252?\243\311\244\no$\307?\201v\352>\276\014\265\277\265m\326\350\356\235\311?\336nec\007\220\251?7\212\017`O\303\270?\032\035-Z\302R\300\277\003\367\321\343\326(\261?\223X\261;F9e?\370Z\017\340\246\237\266?\277\323\350\376\177\326\253\277\350F\036\251:\273\276\277z\3255 cj\232?\373\344\322?[\343\250\277\200\003A\035\342a\273?\266`\334\037\205q\253?\227>\232\010 Wh?\033\305j\332b\n\304?U:\362e\275\357k\277\373\251\226\031\333\220\311?\216\314\315~w\007\253\277\240\002\305gi\251\221?.\010g#W\362p?z@\023@\265j\272?d{F\205^}\321?\334^!_\201i\263\277\275^\263\277`\365\225?q\274ml\227\262\243?\n\315\340\265l)\300\277\374\235\365Bd\005\273\277\346~^#\017e\324?\321\223\353\323\025_\215\277\220\362Y\277\025\340\330?%\242\203!\267\316\260\277Z\210>\2729\336\202?tD|/\327\005\263?\333\013\324{\215Q\322?\335\370f\3357%\305?$\323\241\323\363\356\322?\035\221\020a\323\265\302\277Q\025\360\276l3\264?\350\225\241\340\030\270\272\277\220\000\250\301\270\304\302?\202\307\032\242\310\342\260?\352\331\203{+3\261\2776\211\346\246r\377\330?\326\313\025\374;}\246?\323\231\372\307\342\001\232?\006S\033<\026R\256?\3553\3026=\203\247?\346\362\325DUB\325?q[\031\\\214\344\273?s\036\343\3046\255\304\277yy\266\036\360\006\272?\013\244\233/\274\263\244\277\013\211(\344R\256\266?\345ja\237\313\227\244?r\327\032c\212\346w\277(\240G\224\017\244\275\277>\307\252\265\356\356\301?\246\371\370\276\227F\222\277WL\370\347\232\260\307?b\326\213\241\234hw\277*\264\244\212\177+\253?\035\367\030r\215K\262?{\244^C\262x\270\277\352`\346\003N+\241?\233\010\234\036t\006\277?\273^\036[du\216\277\301\343\231\2374\267\274?\302\242\321\006(Y\221\277\0231_=r\224\267\277@\241\"w\246\n\260?\014q\n\375\334h\256\277l\206\310\247\317\247\305?x\242\252]\241|\246\277xC\032\0258\331\274\2773\227\247\265a\373\303?2|~\367\022S\265\277\372cn\177\255\231\273\277\357\374&=\241\221\300?\2325%\027k\321\260\277\346n\235\240\311U\304?\3349\244\203\273\324\241\277\314\310j\004,\003\277?8\367\\H\265\277\227\277\260\353Q\227\020\034\304?\201\227\0316\312\372\310?\216\342\177\237/\305\300\277<]\0061\nay\277\267\375~sw\204\273?\215\031\227`\'+\322?$\255\257\260\013\377\204\277\2642\206\336\207(\263\277p\335\336\177uf\306?\026\201\373K\234\246\320?\341\223\370#\337\201\251?\346\001\3218y6\222\2774\345\371\302\032\235\300?\005\315|A\352\372\232\277\235\251\306\001\252n\275\277X\354\001\203<l\247?\310 \034X3\327\271?\225\315$\003\243?\331?]\027\237~\'\230\245\277R\240h\201\352]\265\277\302\233\332\276\354\303\275?\372\360\352$t\372\270?\274\242\245<\004\037\302\277\276\315,S\335m\330?\220\262\345_B:\263\277Mu\022[\213`\277\277!Q\221\330(\312\310?g\202\346\025}u\211\277+\271/\014\375\270\250\2771\333F\352\332j\263\277^\234\031y0\224\270?{Y\311}ah\314?\276K\360 R\340\232?\200|l?\327\306\235\277\027\207mj$2\306?\030\262\333\343\\\365\254\277\200\275>JWv\270?\367\331\022\003n\'\325?\271\007[\313\350p\273?o\224\013\201\233F\276\277\200b\253\236\250y\255\277OW\373dZ\325\301?3\366\312a\234d\246\2774hdg<\327h?\364g\303\212\350\021\246?Cn\312\201\014\320f\2778K,\235\3152\327?\351\035v\370\316\334\253?R\021\341>\366#\305?\266\023\241\350\354\252\307?\341\377\267\'\202\027\274?\227\ndU\010\324\261?\377k\355;\2168o\277\321\031 \352\241*\242?Q\204\256&J\240c\277\206K;\363zI\270?\253\265\315\3401\264\300?\361Ss\276z\n\261\277\n\334\025U\032\214\265\277\370\227m?\312\234\250\277\253\t?\304H\347\325?\313\037_\204!Y\253\277\360\350wH\316\025\302\277\004\310G\300%V\252?A\364 \024\306\334\246\277\373\206\323\223CU\323?2\205\'$4\252\225\277\325\030\276\317\002\376\265?S\261\316\204h\245\306?\352p\201\277\360.\265?\366\225\007\351)r\271?)\357>\"\001\376\300?\347\315\372\367\215m\266\277\370N\222\317\247e\277?hk\351v\233\334\260\277\276\225\272\236\307\254\301?\220\316+d\317\032\261\277\306@\2151f\001\276?e\204\345?\014\303\273?\207\266\020\242\204\262\273?\000\000\000\000\000\000\000\000\211\326\006\376\".\271?\234,Z%\375b\243\277\375\351\365\335c\037\274?87\\\232\021\224\320?\212Q\017\205Z\311\212?\347A0\375\001\305\263\277x\\\330\303,\356\245\277\276\333\335\177;;\307\277k\205D5\200\222\301?_\324\315I\030\233\303?u\004\347\301\032\275\272?R\257\264\274\r\222\257\277q\257\314[u\035\307?F\304\336\325\274t\302?\260\000\246\014\034\320\303?s\354\352\237\361N\327?.\316\265\273ID\325?9\2565JMq\302\277\244`\005y\357\010\234?C\223\243\204\211T\307?\215\320\210\377_h\234\277\357\332\020\251\212%\254\277\237\331\"\'\033\250\301\277\301P\352?)b\327?\247\211U\273\332\025\236?\254-\206\274/x\257\277Y\333`\035\321\201\224\277oZ\225\351<\317\240?(\262\215z\263\306\227?\331A\302\203\2503\326?`i\241\343\361T\251?\252\263\234|a\317\260\277d?\322z\324l\231\277A\233\177h\244\255\265?\365Uf\010\317\235\306\277+;\222\005+\322\264\277\240\000\304<\257\241\272?\027\247\020~\230\363\265?\311k-\345\337\233\322?\330C^\203|X\315?lO\034\202\333A\301\277m\036\335\301\265\376\251?\023U\t`\024\316\303?\205\2747\351*\233\312?NVV\344!\335\322?3)\226?\005\336\271?X\rxO\324\210\273?\005\242\253\235\366\316\303?\312\351*^\336|\271\277}\252\022~\014\312\270?2\340e\364N\006Q\277\275\354\256\036\275\202\312\277\305&*\0029\264\271?z\306[:(\331\301?\377[\250\200\244\035\246\277\276j\247\336\001;\202\277}v\363fj\230u\277\304\273ua\030\256\327?\301\";F\344\201\257?\304z\243V\230\276\277?F\354i@\352\232\267?\002\025\247\2755n\301?\375s\352-\2224\260?y\037\276\201\006\361\261?\261r\242<w\253\264\277\016LM\006pH\261\277\007\347\351\342\212\031\246\277\\\230\304\332\221J\212?\304d+\341i/\252\277\264p\037\332C\322\241?\316\351Y\340\220\345s?\027>\227\263\273c\200\2778sf\300\373\330\253\277\236\310\274#\235`\247\277\017\342V\203(F\267?\306b6)N\263\201?\370fapI\345\252\277\240l\251\007\365\302\264?\257(\343\347\330\244\275?I\351vONO\204\277\201\274\r 2\333\323?c\013 \000a\365\270\277\322\200\3224Na\206\277\035\202\364^\306\336\315??j\377B\020\231\222\277N\032\325\257\225L\221\277\356M>\003\013\334\256\277\365F\316>fR\260\277I\006\353\305q\334\301?\266o\346>\326_\313?\272\205\234a\344\021\226\277I\026I\036\374\002\343?q\241\341\203\215\241\325?\367Z\257mz\345\265\277Ar|\376\305\375\267?\322\217\322\341+\376\256?xy\235\201O\373\272?yp\361\234\237u\220?\006\023^\006\214C\303\277\t\"\305\337z=\260?c\213\356j\003\301\302\277=\032\306^\241o\214\277|\350i]\366-\261?\242\210Q\177\331\027z\277\304\010\002\340\2574\267\277U\t?\006e\371\301?\354\223_\343S0\253?\226\204\2700\332\374\242?+\"\007H\333\310\232\277\341\326\366\331u-\266?:=\255\252\260\374\301?&Y\301N5\243\262\277\036\271\240\204\272\304\232\277.\350\234#\033]\322?\325\370\371\255\245\231\261?\253\034 \271\261\260\262?\031~G\277Cr\251?\177un=\267\216\260?\r\000\260\225+\227\311?b|=\004\372\351\303\277\202E\253~\230\311\256?\226\360!4\304\251\263?\356\034j\336\350\230\210?8UW;\023e\230\277\222}\353\0364\026\327?\257\206T\351\330U\201\277QUx\002\'\374v?[\300\"\3047B\232?\275\\\233\3700\234\276\277\351\257\241\345\212\234\241\277\323v~\027\327t\236?iS\330\271\'\027\267?\237\3361\341<A\244?\221Tt^B\211\270?HI\325\227!\345\300?J\340 kW2\266? \317\323%\210_\326?W\246]!\263\200s\277\267\247\026\327\031[\305\277\006\230\\99K\261?\3422\331\005\244\371\301?;\355\235\217:S\263??D\342\237\3134\242?\242\366\002\203\t{\231?\251\010`\230\206@\301?\261c+\201\367\002\272?M\211\342]G?\320?\307\220\255x4\037\301\277\0031\277\211\327\253\256?Y+\226\377\3516\241\277\350.\230\336O\244\247\277\361RO\276W\257\231\277\250)U\344\010\300\325?}\307\327;/W\317?\005\024,\006\3665\274\277\200v\362\257\006\244\261?\245`2\372v7\317?-\377^`\017S\261?\201\365,\306\310\253\313?Y\265\265\317t@\320\277E[V\340\262\252\262\277\221\316?H\266\275\232\277\263\230\226`\212U\264\277\311|\027!\002/\327?\377\337\277\026G\'\300\277\016\n14*\262\206\277\002\260p@zk}?z\002\233R\342c\247?\340\254\230|y\"\261\277\232\210mA\245@\324?\0049\327\031\247m\220?\222\3076\035\277\177\324?u\351\326\240l \270\277)\203\027;\351\226\274?\320\022\236\257\335f\267?\361\346\272:\021N\327?:\022\334\006\275\320\300?\235\002^;X\314\230?a\\`E\374y\301?\223\303\217\200\275\001\274?\372\264\0167u\330\311\277\024\275c\343\207k\242\277\236\274\002\260\205I\270?7\002\257\236\254\373\262?f\260\024\217\254x\274?\222:CiVS\275?\033\032\211\257\372L\266\277Q\n_\0042\340\331?\236y\030\336\325@\320?\024\036\331\001|\\\232\277\342#g\003\3369\253?t(\321\377c\002\237?W\340\rd\233&\251\277\205\326SC\3149\244?7L\270\200e\337\243?\033d\365\273n\031\265?\035L\365*SH\266?\350\244,\200\177\003\250?$w;o!\227\261?\022\247\254\t\026\305\305?l\234R\000\272\237\272\277\325)\207\375;\356\326?\236\340|\231\021\246\222?\354F\006Vau\265?\034hx\222\370\005\273?E\032\252\234\325\206\272?\322\010\221g\362\250\320?@\276c\374$\014\272?-n\033~\242/\177\277\021\244\224\010;b\246?\326Q\354\240\306H\222\277E0\001\004\033\363\222?\357\321U\231\255\345\265\277\320\316\355N\014\003\275?\206\256\220.@\037\204\277\251\273x`|\250\266?8W \274n\370\260?\'\366\2570m\315\252\277p\2540\"\366.\325?V\310\205\230\205U\306\277\271:\257\232\257\336\233?u\336k\255\324\330\325?\317\177\264\244H\343\304?\350wd#E\241\227\277\370\321\333e\340\374\261?\266\367g\016b\312\264?\263#z\276\013\200\265?\2324W\027\001_\271\277\035\\\327\273\201\372\256?\316\245\2568y\352\201?\346\267,\202\246\365t\277\'\356\030!\263\350\270\277[\3220\000}\360\204\277b\345\310\261\222\342\265?5\250hrR\024\262?\322\270\344v7h\272\277y\323%\312{(\306?3\223\342\302\005I\330?\23700D\261\211\300?\325\205\016p\367(\304?x\264\305\303\350\252\216\277\233\233\343\232\n\n\300\277\272\010\235!f\300\271?9G\231\344\262\027\327?\253\311\261\307\324\365\237\277\207\"\332\027\233\031\235\27764m\030h\353\303?\364\261\324\335\351\214\233\277\030\274\236\236-\326\253?/\225\223]$E\256?\357\366[f\321n\230\277/\ta\177#K\276?\372\222\273?F\217\257\277\350 \340\367\0144\301\277\245\t%\335\340\325\302?\023\343\210\367\024\347\263?\220H\350\"\026\025\246?\313\215\262\026P\274{\277\036\215\253\340\243=\275?\027\205\227\277\306\236\260?\206\324\345{\343\367\224?H\357\327A~f\241\277\340\325\216\274U\322\243\277\337\016\261\032{\221\221\277a\234\307z\315\037\265\277\323\314j\354\330)\265?\236\205\235_\035\222\262?\032\336\254\301\373*\277?\217\006\001C\240D\275?\"_t?\310.\304?\344\247\275\375\303\332\245?\231\371\217\376\367\335\261\277\237\362\340\325\017\275\304?qb\250\300R(\212?Z\306~\375\255\360\276?\261\265)\344kK\325?d.\374\"\231\274\264?\312g\201\217$\265\264?W\244k!&\263\256\277\\1\n\037\235\374\243?H2\355\223\212c\264\277\250\n\231m\237<\273\277\246\020#\337\000\016\262?\215\212\213\345\216\345\252?\320}9\263]\241\265?L\323\261\224v\264\203\277\177h\277\335m1\177?@\355\001\004\275\001\306?\017\216\202uVj\312\277p\320^}<\264\322?\222\3708z\314\245\226?\030v{\275\271G\324?\017\224>!\371\322\260?\000\3675\305\365\205\226?\315Oy\215\300\314\263?\024B\007]\302\241\241?\217\347\257g:\001\261?\324\267\023\277>G\265?\364\342\202;iD\262?tq#~(\305\260?\206s\233\335K\373\251\277\376Af_`\363}?et\316\274\rK\246?\357\362\271\202\211\031\253\277\004Q\343\035a\312\255\277\373}\030\204f\225\326?*I\270?\000q\207?3\371\013\342\250\001\310?Q\374\243e`\301\230\277\007\222\275\276\313\016r\277 \335\276\375o[\301\277\016\31638B\355\301\277 \356M\200\037\235\320?iT\367\000\221\t\244?b\304i\201p\027\231\277\037\342A\240\343\375u?\003k\213!\357\013\254\277\262{*[\257\337\203?\350\\\376\001\336\233\304?\217\341\363\273\227\230\257\277\255g\335F\320\206\220\277\320\355lb]\351\243?(\246\361\\\366#\233?W\001c\"J \324?\265\006O\036\237[\235\277\022\303\314F\000\232\225\277\302m\235\032\220\006\225?]\235$\334\262\343\211?P_d<)\027\253?\030\2306\230]b\311\277\364\035W~tE\247?p\345}\000xb\227?Ud\007\244\343\273\227?\027\335r\334\306\262\325?p\221v\001\001\373\260\277R\261\326\365\260\274\230?<\372\224\240\025\321\270?\351\350\r?\214\014v\277\177\336\361y\007p\305?\253\233\244\\\216\225\324?\216\247\212N;!\321?\357\005\2400\254\013\231?\342\032#\002\243\205\330?,\346\352>5\233\246?i\\0\237In\266?\343\213\005\244NW\253?/\213&\243\014\315\324?\354\242\307s\246\236\266?1G\250||\000\301\277\335e\037a\241\241\250?\232\003\251\271\201\247\320\277\006\343\226E\027\212\261\277\233E\336(hI\274?)\340\350tjx\234?\237\343;\342\244\361\244?\367\342\201\204\005P\232?\261\3664\276o\267M\277>~\377~\342\024\253?\006\352*c\2276\251?\312\036><\215\254\260\27783O\255\004kQ\277YRj\006#\274\300\277\236\374H\327mL\301?\321^; \"\030\271?DG\027@\235\227\261\277@YY$\353E\234\277\321\003\037\203\025\247\271\277\234\264\231\330\266\007\306\277\200\200\224\\\356a\227?\017\343\177<\005\n\301?\322K1\254\207\324\275?\024\020#\034d\246\221\277)W\307\335_\276\253?\266bz \204\020\270?&\333ed5\002\320?\332\356\014\275?\212\240\277\037\207hD\316\232\202?\2306\230]b\362\274?x\275\260\014\334G\227?u\317\250c\017\231\244?\365\301\317\013\271J\264?\221+\365,\010\345\261\277.&O\274w\022\320?(c&\230\004\204\233\277At\000\336R\0257?\032\327\205@\2528\265?_\313\320\035i\225\330?\000\335\237\244#\255\300\277\215\245\037?\341\215\303\277\3621\246\000\033\207\246?A9\300\202\352\325\263?\033\252\246G\372\204\221\277\211\217}\000\272~\256\277C\256\324\263 \224\217?\r\337%\345\254W\310\277\231\335DA\261\224\265?4\250\r\271\337\302\311?f|\251\351\304/\266?U\376\357g\374\353\273?\332E}\004\221T\223?z\376Q\'\342\245\300\277\206\233\245\307c\304\255\277dH*`\366C\271?\261\234J\'\216\023\300?c3\307\277\275\325\252?\263\200d\225-\355\276?Z{#\343\346\216\275?h\316\331\206z\217\245\277T\001\013!f}\245?\217\220? \3516\322?\027\206\315\242\245b\240\277\214\266\021\354Kx\271?ym>\307\252\265\267\277&\235P\241\035\344\301?\227\275S\236\314\001\323?$\335\205\234\255\362\312\277\021\n\276\'\336\032\271\277q\265%\335\\\035\220\277Vw9\340K\305\272\277-\277\035\362\3408\222\277\304\340\355\203$\232\243?\305\2738\376\377\220\253?\0075\2157C;\311?\276(\273E\322\001\222\277S\250\327\177\267\246k?\036\033\036N\242V\275?\261\242\212\013\325\007\270?v\025R~R\355\302?\310\007=\233U_\325?\206\302\327?\236I\244?A\243\317\242\322c\301?,\367<^\314\277\320\277H6\013?.-\221?!\336!b\326\215\325?\270->\303\243f\325?1\006\367\177\345s\305?Sq\360@\365\363\275?\331\247N\315\006\025\263\277\262\211\243\335\256\270\210?y\331\261<\0104\230\277\246H\031\314\272\332\305\277S\361V\310\"\356\300?\272k\t\371\240g\322?\014\247\343i\255\363\211?\030\211\323\300\304\\\243?M\306\010\023\014\010\225\277\2313\323\244\261\t\324?\323\202$\247\007\351\227\277G\214\340w\272\220\313\277F$\351\036\002\\\300?\267\377\274\001Ji\257\2774{\250\206`I\304\277\314\016\320\001rW\261\277\361e\2613\326\025k\277\257;\243\316X\013\261\277\337\215\344vXv\243\277Jf\004:\344}\220\277;\202\036\341\351\322\227\277)zx\200;\021\253?\361\211m94\270\307\277^f\032E\275}\307?\362Ve\370\262a\274\277M\023\266\237\214q\311\277Nkug]\013\221\277o[B\333\275\036\300?\232\223\274\337\r\316\321\277\033\255\027\001\035\177\277?S\250K\037\352\331\242\2779\342\332\232\276\350\326?\305\310\324Uh\275\306?\252\237\324\352\355\307\272?\355\256\375\256\031*\260?\202\301\211v\202\356\214\277h7\341\373n<\320?u\357\331!\233w\325?\010\201\004\341\344`\271?\312\024\217e\243n\233?l\310\337\300[U\233?\237{jP\217\310\260\277\233\334\326\263s\334\260\277\232\204\335@\031\224\265\277\310H\017\246\325N\270?\263C\374\303\226\036\205?c~\260\204\234\224\266\277h\253l\001\234<\265\277\177\001\367\033qq\300?\3561w~h\036\246?\347s\254Z\353\356\267?\254<\036\206\230C\277?\340\020!\343\216\215\227?\354FW\235`\365\255\277\300\203U\253e!\310\277\030\214\351\300t\205\233?m\002\251\240\344\206\273?\273{\302\n\236\337\276\277\217OQ\3009\315\265?\200\364\340\375\327\n\205\277\261\375\314o\204\204\205?\"\302H\372w\'\234\277\230\336.\226J\301x?N\\\361\201\333\342\321?\237\033?\371`\276\311?\210p\304A\337i\306?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "VW\262!\007>\317\277:\t!\367\337\020\305\277\236Y\371\002\006K\321?\202\354\227}\216\367\225\277\247r=~-\267\320?O\014$\2037\277\323\2777\204\317{\010\317\325?tf\324\337\277\267\302?C\020\265\247\303\216\307?\200\200\345\243\355\341\230\277o\317w\3401v\321\277XZ%\334T\362\312\277u\035\rT\204\243\275\277\212\333Oc\316\265\331?\343\000\227SD~\260\277\257\325\232\275\236\365\334?\344\245\366}\223\201\320\277\"\n\034\277\246\275\316\277Qia\242\203\346\320\277\2337o\030\334\301\307?o\242\226\346V\210\326?0\346\235\371\213\217\315\277H\364[\t\027\321\302\277\2402a\250\201\356\261?\311\020Sd\245p\324\277\244~(\342\276\237\321\277\204\363\251c\225R\324\2770\306\253\237C\210\277\277\331\321\027\306\006 \305\2773I4\232\277\266\262\277wQ\221\226\014x\301?\304\020R\032\336j\311\277\3359{\004\212\032\301\277?c\262\372\033\033\311\277\237\371\007Wa/\307\277\036\260\\\203\177\220\221\277\204A\035\1777\227\307\277\247#\246bh\027y\277\206Cg\200\250\207\272\277\253\251\362^1\372\250\277\350+>\301\242{\224\277DZ\276\211|\362\332?\024\310;sNm\206\277\331oX\340LH\333\277\253\213\241\275v\300\330? \320x\246\300\227\316\277E#D\236\311\243\317\277\314b\336\272\315\341\327?\245\231\027\365\203\231\273\277\302?\303\240\3561\276\277\022\224p[:\352\322\2775\325Q\335u\231\317\277\0300\026\300ss\266?R\372\370:_\342\327?|Zn\376\231 \337?\320\262\223f\230\377\300?\233_\305\2209\"\257\277\2102\361\232\231\221\316\277\'\300\013\266l\010\337?\367t\226\325K>\317\277\234\240\023c\025\306\307?t4\334\272z\231\314\277\302\2325>\264\013\321\277\214\306\220R\277\301\313\277|H\266\302\r[\274?dO\351\375\322$\321\277\362\002\221\352\340\205\310\277E~\036\037\004O\333?f]\016\201D\017\262\277\352\016\275 }\356\244?\270N+\236\335N\321\277\266\372Ed\263~\250\277?\231\356\221\247\216p\277+tV\362N\221\215\277\364\362C\276\256S\307?V \006\374\022\230\333\277\027\344\231]\030\345\312?\321\027kM-:\275\277w\2600\n\243\325\272\277\217\216\'Y\271]\302?7\224\220\376M\036\324\277\017_G\230y\335\304\277r\215\256V\026\032\302\277\373\233\253A\363T\326?\377\031\273\302O\234[\277\017e\207|\300\321\311\277\010\036B\t\361\320\315\277\206\203s\374\006\334\322?!\"\322\302\2471\307\277\t\017\242\316?n\260\277\351\332\017_\303\037\335?hP<\200\250(\307\277n~\r\322\235q\262?\375\336C\025@\251\310?\177\217U\245\210\'\325?\361R$>\373:\313\277\'C\300\347\250\037\262?\001 \233\242+\352\320?\357-&\342\037I\254\277\t\340f\361ba\320\277-^\013\376\2470\320?\222\365HA\277\310\330?h\251\345\234\022\357\320\277\025\2557\305>\034\321\277\241\320\374{:h\261\277\215\326\213\200\216\177\301\277\227\350,\263\010\305\306\277\220Lf@\346\230\335?\240\nnZ\337v\303?\347\007\t\254w\023\310\277L\243\013\342\352]\323?\376\351\253PIB\312\277w\356\003\261\350\255\270\277\'\017n\337a\342\311\277v1r\273<B\312\277\240\272^?i\215\321\277\3439\266\371\332\216\264?CU\344\301*\237\266?\374#g\274\010.\324?\342\275\325\000\306/\322\277Peb\004\236\005\322?oK\242fa\262\276?\017XA%\021\316\323\277K\310(K\204x\261?\2174\227\237D\231\312\277\307q\226HX\n\267\277\371f\3357\245Y\306\277{=o\225\355\344\315\277\2060\n\304\343\211\300?\t\344\257\034c\237\324\277\001\234\244\032r\303\326?\2444\233\307a0\316\277wh7~\321\263\320\277\314\330\310\\\266i\322?\336\030\247\306\360\375\303?\000*\352\006\351-\310\277\255\310C:\227\275\304\277\312\243\300\247\336?\335?\005\314\360]R\216\320\277\017}\000\035\251h\245?\024\324K\347\036\355\320\277\006.M\031Q=\260\277\337gC\233o\206\336?\260 \315X4\235\237?%\302u{\377U\335?V\257K\"5\314\304\277\225F\355\372\334;\271\277\274\2663#\356\367\322?\253\345R\205\324\247\314\2777&\233\335 \373\325?\024\326\235Y\330\364\273\277\016\362\010\333@\233\223\277G\260q\375\273\276\310?<\2259\201\334\212\276\277UY\251\332Mt\320?&(4\377\236\216\334?\337;\305\005\373\n\266?6\026=\205\226\324\302\277\237\367\316\201H\363\334?)a\340\230\351\207\262?m\316\034\355\023\233\302\277\2029\335&\232\017\310\277\377J\2356\231\'\304\277\276\225x\202\365\346\336\277\005T\223;\307\033\322\277\342\266X\177\273T\277?H\323\217<\306K\325\277\227\226h\373\035\253\334?\235\323\362$e\342\303\277b\360\366A\022M\262\277R\263(hj\304\315\277\350\\\376\001\336\233\325?(\257\235A\246i\340?\253\234r\\\370\207\262?\242\346\222G\303k\266?\305@\033\334}^\244\277l\316\342A\212l\320\277h\272\215\274b\274\324\277\332g\271_J\314\277?h\327\265\244@r\302\277j\216\007\266\245\351\320?\245\n\014z\353\323\266\277\256\363-{+\365\312\277w\020\\a\321_\332?\266S\032\001z\271\250\277E\346_\005\327\340\314\277G\377p\374\365\257\315\277\007\270\336>\304)\340?\330\341\\\201\360\272\312\277<\025\221\335\334\312\247\277D\342y\004\222\213\326?}\272)\001\013B\276\277O\243\332\361pL\322?\001\260\215\272\316m\267?\326\2514Z\365\326\307\277\312\010^\343\351K\306\277\267\"\333@T\366\263?\235\0255\276M\204\227\277`\371\271\3027$\265\277\354b\n>\034\020\272?P\"\333\\\251%\317\277Y\214x\272\014b\311\277\022>\306\242\n{\315\277\346<\245{\204\367\324?\2763w\200i\t\335?\205\252\240\273\207\370\324\277\330\206\345*q\370\340?\236\366\323\000W\022\267\277\223\251\345{\004\206\332?\201\321\202\243&\362\276?\205\210\'\375\265c\326?[\275\273|\210\031\306\277R\035z\244$\030\310\277\032o\247\204\222\217\261\277\304\032\364\306\305\250\300\277]\371\260\007(G\306\277\234<\033\250B\362\301?B]\305^\377`\321\277w\270\350\'F\335\211?\020;t\366\245\351\271\277+\3266\346\361\213\267?\010\304\220A\223i\324?\326\016\363\243\351\005\264\277\365\367\316?,a\321\277\010\364\352e\331hP\277\202\324\334\300\323\232\312\277\236d\006\205\234\322\300?-\034\316\035y\367\322\277H\177\324\313\224{\317\277\214;sI\264\350\315?/\024\023HGA\316\277r\357+ \376\253\340?\337\310\270\271cw\270\2771\321b!!\'\322\277\315.J\226\264\336\311\277[\357\026\314\210\240\273?\016D\334\275Xo\322\277~\220\341\210 \224\261?\372\222\021@\377\367\304?E\324D\237\217\262\337?\021\302\304\233\014y\305\277\267\211j|\354O\336?\005\346[\376\307\262\270?y\307JH{\356\304\277\003\265\367-c\330\266\277\222\274J\251\021\033\275\277\376\273\272:2\234\331\277\262\3363\010/\236\230?\255\030K\344\304O\315\277\211\227\247sE\251\321\277/\303\177\272\201\002\243?\226D\344^\332\034\231\277\2319\023\211\370=\341?{\276$\235\232n\334?L?<\246I\204\313\277K\270%\254l\243\271\277\024\3629^\036\276\224?\323\362\020\201{\202\245?&\255S@59\262\277\331\354n\274@\353\253?5W\325\344\214\325\264\277\356\212l)\030|\311\2774c\227\311\354\003\311\277b\n{\177(}\325\277\244];\007\205\367\304\277\023/\252\240\375c\322\277h\005\206\254n\365\317?\3044>YR\352\314\277\245\036XD\003\347\335?M_\031eGt\316\277\302s\010\1773o\266\277\rFx\275,T\313\277\227Zk\3775\346\276\277\331\316\030b\314\310\315?\220p\265\251\025\201\311?U\003\346\204}\371\274\277}\334\247x\226\377\313\277\312\227\345%\336\205\310?\235\'\001\336\300,\323\277\021]\321_H\204\240\277\201l\376\004\274\361\332?IL\314\212\023%\266?\366N\036y\224\010\305\277z\204\036Z\371\237\311\277\273\270K\352\035Q\313\277`:\357\367r\274\303\277*\247=%\347\204\336?T94\377\304\325\214\277\033\026\233=m\340\302\277onD\336\017\313\300?\335p\'*~\200\317\277f\031\240<E\361\314?\247L \333\350\222\320\277\365\325\227\235,R\322\277\367\327\341\236\235\002\323?\276\t*O\305\262\322\277(\214\034\330\340\263\325?UN\030 \023a\337?\0237\372\332+\332\277?p\3146`%\331\261\277\034>+aT\357\334?7\321\276$[~\325?\262>/&GK\330?O3\315\t\024\020\315\277\204oq\277\t\246\271\277>!1\375\357\341\242\277\027q\360;<:\243?\212c\3212Z`\262\277\275\312\310\303\274s\246\277v\360\300\276\245\265\322\277t\t\207\336\342\341\316?\357\023\271@\177*\257\277\324\022\310x\326f\230?>\364\000\275@\256\222?*\235\003\\t\330\235\277\345\351\277{\005q\243\277\357R\217\331\376\272\307\27731\341\300y\253\310?M\014\260,$\242\273\277\223\036\206V\'\347\316\277KE[|\247U\245?\203f\351\240\321q\211\277c\340N\\mI\314?\277\014\306\210D!\311\277\264\340,\302\240\016\300?\360\206\023\034\207\017\326?\220\357\326\"7\375\320\277\353<\205\267bZ\324?*\003\256\373,n\222?\255\222\237\277\226\370\276\277\210\023\363\007^\010\320\277\204\214x\231\376\370\305?J\337Z\3345\327\321\277@5\034\236w\306\300\2778\006\317J{\377\260\277I\225\223\026O9\303\277q\210]\200\"\273\303\277\1775b\301X:\313\277Fn\033\200\354y\320\277\005\014y\241\014\227\307\277\t\366\302\021b6\202\277\363\025\213|\352\232\321\277L\002P\234\016*\330\277\257\022$\235\036g\323\277@\226\221\274kw\334?\240:\363\376\201*\331?d\264+\200k_\332?K\372\305\266V\305\327?j\300b\005\246p\263?\377o6g\216v\302\277\023\374\210\302\333\001\335?\024\234\362\317\251\267\274\277h\004\033\327\277\353\267?\t\354 ez\370\304?\262X7\234\001G\324?\337\000\216\2304\241\271\277\236\320\353O\342s\322\277\336\351)\315A\253\323?\224\250\325_\310M\313\277@6\003;\202\304\315\277\372\271\200\033R\332\334\277\321:O\341\255\030\274?\213\312\002\375\3609\310\277;\355\000\272\365;\314?\3157G\302c\344\223\277\376P\202am\312\332?MB\216R\256\225\330?\001P\244\177r)\335\277S\272\306\367]\302\225?\255`\247\232QZ\326?#\315\355\230\231\035\306\277i\330\362A\004Y\277\277\n\325\017\342\261\274\315\277jp\334\333\215;\220?\356\332\357\232\241\202\336?[\320\275\177\332\005\337?^\354b?0l\321\277\360[!j\252\300\310\277\212\210\254\177!u\305\277\265\333\364\210M;\260\277z\313\315\036\005\033\320\277\245t\372\213\352\276\321\277\216U\214\353\306X\274\277\245{\347a\262\302\323?;4,F]\353\334?\002\223\206\340\331\232\301\277\211n\346%9\277\316\277\336\207\315\021C\274\306\277\202\200)\301\352a\307\277\257\204<\"\251\374\220\277E&C\002\004{\304?\241u\"\373\377\274\305\2774h\350\237\340b\311\277\3361eu\345\222\313\277\177\264(\201\007e\277\277\303l\331\214\231es?!\270%\315z\214\302\277\336\346\270\023\037\261\203?\022\331\007Y\026L\317\277D?K>\023m\316\277C.\243\036\303_\326?\001\360\025\376\210\266\307\277\225m\032\272]\330\311\277D\335(.\236\254\270?}\342\245@\013\256\303?[flC \362\320?\220[\335\373e\301\311?\020\342\206\274>\243\241\277\027\"\361<\002\211\325\277=\216Qd\316\257\311\277\0017\007\337f7\324?\244p\332\337\033;\323?\001%\221\277\254w\321\277#O4=\230|\257\277<x\237C\026\362\242\2771\206(\025C(\265\2778\344\273%\324\353Q?\353R\206\036\357]\322\277\235\341@\'\010\307\305\277|\037\227L\037GM\277\355\203\352\356S\270\273?\024\032-\254\3005\311\277\213v\313\304c\365\262?\251$\333\216\343f\277\277\307\236.\202\t\355E?\340s\026\254\')\323\277\177%\343Z\345\360\310?\215p\317\375\031\001\240\277\240\345\263\033\001\005\262\2770r\344\273s\254\265?U\276\251@\024i\305\277\201\335\372\372k\303\322\277\217TG\335\272\332\256\277q\014\\y$\271\312\277\037u\205\210\345\340\316\277jz\365\226\027\005\330?\257\202a\276\221\200\254\277FX\371\nwS\343?\324N(\237y\024\337?\367J\017\371\035y\226?0\213\344\206:\007\340\277<\204T\376s\240\322\277g\360\030\232\302\265\275?\260O\177D\263\265\227?\343\336\200\277-\022\304\277\030\000.\361\025\027\254?O*3\010 \363\301\277\2645\205B\302\377\306\277\314fH\364\266\302\241?m\356\340\016q\377\251\277WEU\237\355\311\263?w\2754E\200\223\332?\223W\245\374\2757\321\277\177\267\'\345A\274\317\277hLV\177c\323\327?uq\341aV\177\303?PE;\270\205x\325?Xl\233\373\016\362\317\277n\352\260\200\021\215\323?mb\222\333@\313\264?\203@\272\032\321$\323?\327}\021~\363\254\304?9@rca%\311\277\206\030\267\352\235~\307?\331\035Z}\330\277\321\277\177\'w\351p\276\323?\026aP\307\337\315\313?\324]\033\"U\261\306\277\243_t\334\235s\307?\226dxG!$\254\277\304ep\357u\255\305\277t\373Y\352(\240\307?R\330\177|\215M\271\277\276\013\245@\260\264\325?\372QL_\201H\267\277Q*\351z\005\226\324\277\351\300\213!\255/\327?\177\t\201\001)V\332?k\246R\036\243\335\330?\342\231\351\301Q0\310\2770 \014 \242\357\256\277\221L\177\335\206\344\324?\333\361O>wa\257\277\225\216\203\\\363\364\311\277{\002\325\375kR\320\277\273\013\265\"A#\316\277SP\233\202F\372\324\277\322\030\255\243\252\311\327?\010\330\312(\357\023\212\277\007S\203\037\213#\314\277\3764\377\371\307\214\314\277\360Q\373\204\036\367\276\277\261\250\004\233\245*\240?\230\320n>\277y\322?\355\206e\032\352\003\307\277\242\2647\370\302\344\311?\321\364\206\271\254\333\314?\241\207\230\032\272<\313\277K\255ZF\250\241\305?.\007\027~\262Z{?a\252}`\345\325\262?\364@\032\004\014\001\327?\222\352\316\"\372\006q?\223\016\377~k\006\321\277=\260\273\367r\312\234?\305w?~X\356Z?\364\231`\366\272^\310\277\217\256-\227\350\207\325?\347& \334S(\250\277\271tHA\"\263\326?\266\205cm\276\327\245\277\303G\345\2421E\313\277R\302\341?\274\262\310\277Q\363v\000\233\336\263?\363\016d\373\230(\273?\2410I\341Q\025\264\277\222w\016e\250\312\322?\322z\360\301\010\355\334?\253\375\373^\323\033\267?\323\260)\241\0052\330\277\\x\034\016d\240\261\277\2309\331\335n\217\315\277m\330\337\247\344\373\307\277i\372\262\325a\334\311\2778$\377\335LV\331?*\256\246\302\n}\261\2770\327\344!:\341\326?n3\025\342\221\370\332?00e\277r-\302?^\\\262C_\356\241\277\235\260\253f)\233\261\277\226)\346 \350h\326?b\"\316XnH\276\277\3353\001u\271w\300?)\303\334\341\273<\244\277Pu\310\315p\003\316\277q\252\326>\364\017\305?\325Il-\202\265\311\277\314\207\271\007\225v\310\277\377\226|\303\257\236\323?\312\322\271h\351\206\271\277\227\016\010:{c\305\277\237X\247\312\367\014\311\277T\273\221?9\206\265?\216\036d\376v~\303\277\361U<?\326\235\244?/\0137*\201^\320?\333`\023_\0167\325?^\334\225\000-\373d?x\242\177\335D\210\230\277\"V\332=\324\321\323?1\330G\206\240\223\314\277/\003\010\376;K\317\277L`)\201\203\254\272\277F\261\036\357<\216\232?\212\311\331C\0246\321\277\n\236!\240\353\020\334?x(\351\345\240\231\316?\272-6R[\017\320\277\207PcJ=n\260\277\024\\\356\304\223z\334?\304\370@]j%\313?\275\220\001\345^|\233?\005l\305\006$D\304?\330f\000\373*\361\273\277\025\316\311\346\005\263\326\277\024&)<\252\322\327?_Qh^\260I\216\277js\265x%\207\312\277\240\233&\001\244\225\311\277\330nqCB\n\326?qw1(.\"\313\277\036\256\356\273\226N\321\277:\211s\232&\350\310\277\306!\362\310\345\340\316\277\270\375v\002/\355\330?\3673\311\203\205w\227?\3675S\240\235s\254\277\345u\035\332b\337\225?U}\3275\2249\314\277h\243c\234\371\264\301\277\313\247\340S\255C\261\277\022\356:\3008]\271?\343\263m\377g\340\325?\355\322\036\340]\357\260\277\273I\210\311\206\373\310\277\021\315\270\200\0025\314\277\327\317\213\250\303\351\306\277]\'\3449\021\263\310\277\244!\333\340\341\311\306\277q\2045c\013\240\300\277\023Q]\nY\'\323?\300\274\327{\267\232\312\277\'y\236\r3\023\264\277\315\306\316\004X\036\334?\233\300+\204\000\331\234\277\250K\020\277\254\232\324?\271?\310\306D\311\226?h\230\271D\036V\236?\266%\027\010\247*\304\277\370r\372\325w\331\302\277\0268\343xa\022~\277B?\327\347\377\017\301\2770\332\241i\242\262\317\277|\215\217\334\273\202\313\277\307\2016\275\264v\312\277\004a<\2751\210\323\2776\305g\333\376\317\333?`\355\263\300\332\365\255?o\236\013\237\204\204\304\277\360\034%\n\210$\315?\374\242\353_\345\222\304\277%\330McZ\237\332?6)`\226\321#\326?\257.<i\300$\302\277\231\202\351?a\014\205?3G\034\323\217]\277\277\214\276\376\373\276\305\301\277\276>)I\215\277\305\277I!\271\312M\263\317\277\010\220\200U\036r\302?Q\374\374\035\250X\233?-%\252;?Z\303\277\000\210\201\317\213\352\266?\022U\360\302sBr\277z\030\275\307W\212\307\277\032\350\322\246\207\364\306\277R8\314\341\244z\315?\205\021\261w5\257\320\277\013\203\317bk\256\275\277\313g7\002\n\330\322?\377/l\007\002\350\302?E%\371:>\024\314\277=\304\263\302\374.\335?E M\253\327\343\334?\203ze\244\377a\276?\035Ek\177F\355\266\277\274\272t\335\245\236\325?\3376S!\036\t\262?3k\255X\221\213\315?\024S\257|\022\257\324?8#\333\335);\270\277\020a6\340w|\311\2773_\363\344yt\321\277>Y\001#\007\243\250\277n4\241\305)%\300?f6~\227\010\212\333?\005\344dE\201\374\310\277\346\372-\360\313O\314?\266\370\261\325\'\261\260\277\232\366bb\322c\251\277\350\273V\240\350J\275?\200\255}\307\021g\314\277T\314{{[\331\313\277\035c\274 \001\'\323?\372\370|{t\366\301\277`\373\362\227P\240\312\277\255[oa\376\006\324?\265\333\221^\222R\304?\2367\004}\330\301\316\277D\233\210#\264\212\321\277\301\013SBM\300\327?K\242M\304\021\032\342?\373\312\346\036\320\241\325?\225\302\005\236P\217\224?\'\254C$\371\200\320?H0\233!\321\333\314\277-\034\255\017\220\324\320\277\213~]\033d\361\306?\231\2210\302\312\327\321?H\203\200!P\242\260\277\200D\227`\006\035\316\277\266\362<\377\020\367\270\277\246Qy\"%I\315\277\205\302V\277\210l\320\277:\325\265Q\370\307\240\277W\276\253A?#\232?Tb*?\241\305\323\277|Bv\336\306\246\323?,\210\273Y\007\260\314\277\353\244csz\003\323\2771-f[8\326\265?\305_\315\340sP\322\277\210\021\200\207\273\335\261\277\265\033}\314\007\004\311\277Z\331\035\326D4\301\277{p\363\235\312\257\303\277G\343\324\367\257\346\301\277o\030\026\355;\320\315\277cxp\240U \321?\311\336\326\006\274\006\303?\337Xs\'\250F\221?\303\275\25661\352\313\277\204\212\201\340\267\302\300\277d\347\366]\324\230\277\277M7L\336G\010\267\277\211~+\341\"\332\313\277:1\230}&\224\333?\321\217\351}\241\317\265?:c\220\242k2\317\277n\213\232\376\330c\242?G\025\356*\336\247\264\277\263I\227aPd\256\2779rIz\275 \322?\017\362\306\276nU\223\277\245\026\347\373\353M\336?\372$\271\364\026\254\264\277[\341\002uoj\334?\331\t/\301\251\017\247\2772z\207>\314\234\301?s&u\0337\251\300?\243\325\240\232X\201\315?\033\276\001=?R\276\2773\354\244|\020\033\261\277\355](\005\202\245\306\277\363\205\332\200\031]\322\277\307\223\254\334n\366\311\277\232\037$\260\336\315\337?\230\014\021\2014\255\324?\330{\267\232\361\215\260?xZD5\241 \317\277I\0108\177q{\212?\203K\215\361\335\275\260\277JaU\362\356\036\205?\342`F\343\026\024\305?\004\223\270\032\0332\323?m\325\265\303M\260\231\277\203\321GA9\317\205?\253@\312\333Sj\317?Nj?\204~\307\333?H\304s:\271t\312?H\266\343\033DJ\307\277\220Y\0314\304\026\212\277nB\214\235\021\241\326?:\037\340A\232\216\336?sxs~\253q\302\277\013l\245B\002\347\317\277\305yQ\036\212\000\330?\357\266\003\\-\003\300\277wUw\227QM\270?\001o`\366\333l\311\277\003\233\357\267\250\\\304?BJ\201?\333\356\234\277\247I\204\241i\344\317?\027\332\030\277\031J\314?*\007\212\212\376q\310?o\227\242\001a\314\315\277/\333N[#\302\321\277v\217\307g\r9\330\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "Z\201!\253[}\342\277G\034\316\326\243k\200\277\363\3554\004\215\272\320\277\315H\2656*\303\307?\355\272\267\"1\001\322\277\3017\321\327\301\373\273\277F\037w:%\332\307\277\014\300q\337\213\253\311\277\017\351\\\366\220\225\305\277\357\274\371\262Y\032\337\277\330\270a\210Z\242\224\277d{\312\275\002I\302\277\036R-\236Q%\313?\000\353H`9\343\313\277o\303\312\226\034\337\211\277g\304\232\004N\272\305?f\324\337\2777\225\325\277 \231\314\200\3141\255?\206+V\3034\302\343\277/\210\'?\322\225\345?\036\372\356V\226\350\317?H\326Q=\350\305\250\277V+\362o\300|\261\277\377\204H\300\307\344\321?\223\274cF\262&\266\277\032#\n\024N^\263?\215\222\333\037\275\033\254?@\351\372\364\216\t\323?\3125|@\335\226\245\277+\314\214\310\301\266\322?\014\325\237\215\364S\204?\367\257\213&@\342\260\277\367\355=\277\234\027\306? \004\222\337\203\030z\277\217R*]\321\030\267\277\203\021\373\004P\214\320\277x\337\306\240\3623\303?6\315\330#\026i\320?;\323\3275R\235\307\277\235\240n\034\210\027\325\277\350+>\301\242{\224?\351V\276\035\227\'\312?\223L\3633\232\001\302?\017\337\323\346I\343\322?_\216hL\322F\266?*\354\375\241\364\000\351\277\3507e\321\350\314\261\277\337\377\246\373)\243\325\277q\372@\023\335\212\237\277+\256\001|}\316\302\277\261\362p\247\031w\302?O\035\355\260p/\263\277\202k\264=\366\212\335\277LHs}\202\270\325?y\262z\013\024F\260?g\3154\006BW\337\277\0367\231D\377\274\331\277\357t\204_,\304\341\277\334\244\334\\\200&\312?5*p\262\r\334\273\277{\336K\351\262\373\306\277\226G\372^\212E\252\277\347\005\361\344G\272\266?\327\323\365\341\254\n\343\277H}H\256Q\305\203\277\245m\357_\310\006\274\277^\260\247_\032\355\271?.:8\\\324\274\310?c~\260\204\234\024\301?\214i\246{\235T\333\277\022\322\340\327\304Y\305\277[k\203n\212\242\334?+\304\002\343\tR\264?\211\346K\271\014I\320?\026\014\266*\354\026\300\277\202a\216XjA\310\277\376\370\246Dmv\303?~\376Z\342\361\202\320?[v\312\233\252\030\267\277Y\373\\\351\214\332\303\277\261\t\037\000\'J\272\277\343\374M(D@\314?s\32158\266\303\306\277\332w\320\342HD\233?pq\032\303\030h\257?\n\247`\350l\334\323?\255\3510\025\321\345\343\277\340\306\332\235\275L\306\277\3651\301\236\346L\261\277\240bo>\202\326\273?\016k\307`\007F\267?\350\2751\004\000\307\232\277\"\325fR\371\215\315\277V\253#\005\0361\332\277?\331Z\2002\035\330\277\005\006\336\003SQ\272?X\376|[\260\324\327\277\031\257\360c\t\301\251?5\022\272\256\014h\261\277\364\003\221$\214\017\324?Ml\035\240$\362\334\277\243\345\304GY\371\275?\021\010\263\212\260A\200\277lv\244\372\316\357\343\277\004\013XYx\352\304?R\254\246-\246\200\267?\r\360!\004\213\223x\277U\027\021A\254\351\302?\235\035\200?\302Q\302\277\005@h\177\230+\341\277\227i\240\236\343H\324?\264\264\215\036C\220\345\277\026!\310\203%\205\303?\0102m\305\037\301\204\277%\0010\277O\254\276\277\236\034p#\206\031\330\277\327\241\232\222\254C\324\277\3564D_B\010v?C\357\246\276\240\303\327?ag\337\034{\344}\277\3279a\035\"\t\321\277\203\025`\205\177\004\222\277\202\307\032\242\310\342\260?\273\351k\235\205+\254?Z;\233\237,&\344\277w\013\330\2318u\232?\315\365\307\305b\345\302?j\247]\201%\255\260\2776x\333\\g\211\336\277\252k\304\376xP\310\277b\364\334BW\242\341\277\327j\017{\241\300\327?{\200\223\022\'\234\343\277\\\317\255c\236\r\317?\274EyI\020l\272\277\357\323\031aO\020\210?C\213\360\037\2405\314?\322\226J\252|p\306?ND\"\3419c\271\277\211y\271\374E\330\306\277\234\265\004\256e\021\260\277\244\354F\202\035=\303?$7\365G9\224\313\277\251\001Z%\036q\305?\000\363\034\323\013%\262?q?\013\002^x\223?w\2647\031\321M\305?\310=\341\025V\344\305\277\271Z\202\3479}\307\277l$\t\302\025\020\322?[\022\271C7\271\311?4\300\242\256\367\023\276?\222 \236\035W\300\343?G\265\343\341\230\300\260\277\345>(\336\267\020\334?\250/2\236\224\313\322?\362\330\350\377\311\035\324\277\241\263\263\205sO\313?\347A\213\266t\026\323?q\332\337\033;\217\274?T_+\333f.\306?\246\262\213\026^Q\271\277\024\3252\204)k\311?\320\336\256\321Q\222\256\2774\251\333\270I\265\311?B\317\207\343\320\215\265?V{\304\'\036\311\231?\t\246X=y;\311?\362\rd\301\355\236\304?G\315\262\202:@\266\277{\267\036*2\337\343\277%\2279<\010*\313?W\316\361!N\206s\277\022\027\333\377[$\263?\3419\306\333k\275\247\277q\007\316?\030}g\277W\344[HUM\261?\246\202\345c\322\272\315?\246(\227\306/<\324\277\3453\260\300\035\311\320?\363K\016\351\001\275\302\277v\216}\240GR\245\277Da\202\340\022\334\346\277\372 \\\345/K\230\277\227B{P\253\303\323\277~\006/U\304D\303\277\305\2225\224!a\200?a\336g\205\267A\274?IU$p5<\342\277Gv\204W\273;\305\277\025\220\264#\356\024\262?<\220P\216]\375\346\277K\023\337\036\276\253\335?\233\367\007\343\n\234\255?\337w\302\001\343\217\321?\277\372\177\242\240~\255?\252F:B\320\221x?\352\305?\"\\\267\333\277\360Q\373\204\036\367\326\277\246)\300\177\014\200\330\277\242P\005\222f\342\315?\310\200h\275J\204\304?0\216\200\300\271\365\342\277)\365~\006H\362\250?\227\324\340\350\3601\306?\226r\245;\333\345\277?\263j!\022\317\243\337\277\256\3015V\346V\303?\365C\021\367\375@\306\277\217\023.\375\256|\314\277\3416\350\205\032\t\307?cqI\037\004\016\343\277k\271T!\365\t\266\277\007\315\021\246\346z\240?9\315\2473\234\327\302?\203\315\214\300P\356\271\277\315\036G\367\234\t\313\277F\257\314|\203\206\325?\275B\027\273\032,\312\277\205\231\266\177e%\271?,9z>\373x\327\277z_K~z\"\323\277A,\027\001\200\251\324\277\330F]\347\266/\304?\345\341N3\356\227\326\277;\352Cr\215*\342\277\201?\374\374\367 \344\277d\003+\177\245\320\324?\241\3529\344\304)\242\277\3444~\300\207;\330\277\356L\262\037s\257\341\277\357)\020\250\304\226\313\277\215\361a\366\262m\311?Z)%\200rF\327\277`\302p\307\376&\264\277#\351G\201\r\241\305\277&L\336!AH\306\277\210\353\275\235\351\312\274\277&\001\007@\036r\342\277E\353\030\277?\221\265?\236bQ\350\'b\236\277\033\3109\005\207\204\226?X`\300y\016\270\271?\t\343#9\313r\311?T\\M\205\025z\320?!\365\215\236\021\033\335?\253\2543\337=\027\260\277\0161B\236{\024\275?(o\037p_2\202\277\032\034\200hA\303\342\277\206\304\240\300\371\034\330\277>\024\232^A\036\314\277\316\345\243\030b\355\226\277\231#\022\"l:\306?,4\003\241d\216\272\277\377\010\201dS\021\317\277U\277\322\371\360,\304?&\310\010\250p\204\322\277\306G\325\300\240\026\272?B\264\276\227\256\237\227?C\354\273>M\017\246?E\0336\200m3\342\277Y\236\254\275\364\373\342\277\262i\204\002\337\202\332?\346\246\204bV\350\244\277\357\372q\240,\201\342\277\251)n\201\251\313\330?\010\373~\203Y\325\322?\247\317\212\177\n\r\262?Xm\243\246\002\223\341\277\316@<}\312\322\306?H,1\350\347z\300?m\037\023\245\224B\303?\305`\264}~N\322\277\353\017\336h\021\233\310\277\367\214\351\256\221\311\351\277\232\304(!\273\377\301?\321;\025p\317\263\343?\327\245g\366P\215\304?A\233\177h\244\255\305?\355\320\023C0\326\320?\016{\312\377\036\033\323\277\366&\036\001\360\020\266?@V\307\\\337\250\266\2776id\241\347\200\343\277\013\000<?\030\372\325\277\367\306R\034\356\300\320?m\036\335\301\265\376\251?\033\322\243\007\020\316\223?\014\336i\310\376\315\201?mQf\203L\262\341\277\241\010\322Z\013\222\336\2770\222\336\3368AN?\005\242\253\235\366\316\323\277\034_\200\037\003\351\251?\276\005e\\i\000\304\277\276#\266\375#:\320?\377\316\325\332$\324\326?\254l\3048$Z\326\277\344\035\330\330\302\177\265?\207?\273*\355`\265\277\265\266\276\202\023\325\320?\376*\300w\233\267\317?I\314\242f\376\007\342\277J\305\352\202\006\n\252?\022\317D\236E\353\306\277\023ot\000\2122\262?[\352\244\347\253\236\300\277\252(\003\254\372\001\264?\317\035\351\243$v?\277\261w\024!T-\307\277\261\351\234\372\233+\326\277&\262jk\237\351\327\277\250o\272\341NT\333\277p\004\014?\366\002\325\277\204x\311\244+=\323?\252\334<\274\204\026\317?\240\305\352@\3527\276?\330\306\257\212\375\206\310?\214\004\246\025\327_\303?K\"Q!\204k\277?\325\364\362\236w!\330\277Y\216\014I\230/\267\277\342\311nf\364\243\266\277\035\306\346\333i\010\314\277\306\215\370\241\024%\314?1\036JY+\177\344\277\343\341=\007\226\243\340?\202\324\334\300\323Z\330?n\205Ua\330\006\221?\004\366\342\325\203\223\313\277\035i\374\004H\333\324\277\320\300(>\307\022\271?\361\353\217I\251\370\314?/\367,|;\221\270?rJ\006\2418\267\343\2778\n\326Y\251w\313?\272\314\372\336\360l\347\277\221rA\307Xw\350\277!\366t;\034Y\307?\'K}\276\005\220\242?\001\\=\345\240\235\263?\030\210Y\300\350\030\222?=<\021\345\207\241\320?\371\250\371\t\353\357\312?\235J\006\200*\256\323?t\355M\004X\001\311?\220\033\270\342f\341\334\277G\005\312}\335/\330\277F\007$a\337N\300?\312`\326\325.\267\306?U\t?\006e\371\301?<p\245\t\241$\312\277T8\243bs\300\305\277\300<\350\002,\254\316?\261|\242Z`i\222?=\222\273\235\267\020\303\277\261\347\245AUu\333?5\256f:\307\302\310?\336\253V&\374\022\346\277\325\370\371\255\245\231\261?<u8\374fI\311\277n\2770$\035\241\235\277jt\275#\031(\310\277\271t\'39\020\303?\315\247\022\216\356Z\270?\331\315\253B\323.G?\226\360!4\304\251\263?/)g\275Ru\264?\375\2648\000nX\325?A\272\330\264R\010\344\277Z\002\337#Q\036\301?\302\344\350\037\264\206\261?\343\\\273\233D\020\335\277\274axx\021\236\312?\3677\352\235\230\031x\277\323z__ba\271?\243\020\330\007\037k\262\277L1jk\002\024\272?\201\256\"HJ\037\314?2_\310d\035\000\230\277\013\201\226\215R2\206?HW\341}\362C\350\277\343+\r>\305\330\325?\005_E\004\353\321\327?10\341\206\316!\271?t\375/\225\2063\260\277-V\254\230L@\230?V\207\026\270\300\016\237\277\320=5\250Gd\333\277\364\204\014\201\257\352\322\277t\004\345\300\357\002\232?B\014\317\246~\271\307\277\002H\n\270)\026\315?\0031\277\211\327\253\256?\335\315\370c\377\341\334\277\342\002\252a\272n\276?N\326\003A\333\005\323\277G\315\364\236\014F\343\277\307\274\n\000\300\327\345\277\226\276^\001O\321\264?\314\003\201c\tJ\250\277\333BF\366\367\210\341\277S\001\234\203\014\311\323\277\250\271\005\340\331\375\224?\252K!\353\004\317\343?\250*]\217\374\240\267\277\002S\376\234\037\322\330\277\027>\215AH\022\327?4\242\2647\370B\345\277~\270\232+9]\324?K\237\014D\005\275\300\277\254%6\202\001\002\321?#\216+\344\000\260\255?\360\314\333C\210L\327\277\262\025\217\346#\204\332\277\023\302\233\034\333~\326\277\177O\254S\345\273\341\277\00269\337\374D\311?\334\035\204F\321\177\305?~\345\377]\270\026\340\277R\331\013`%Z\344\277\374\254\256\032\266s\325\277\202;_\322i\364\212?\t,F~y\330\325\277^\303\004\034\337\252\320\277d\266\'\362k\276\206\277z!x\3274J\331\277\236\274\002\260\205I\270?\277\221\345\311\332\313\322\277\014\277H&\257\347\262?\\sG\377\313\265\313?4\371$\177I\315\320\277\312*\327\241\273\200\342\277:~$\374\275Z\325\277U\347\254\252\362\230\323?x\225\200[!\363\231\277V\312\235_\265.\272?\351R\301\200\334\200\226\277\304\201\353\345\322S\335\277b\352[\244X\207\305\277\235\2753\332\252$\301\277\364\003O\010\272I\313\277\006\220\2207\257 \330\277\226}\236\331\212\n\222\277\253\316(ek\340\267?\014p\244\340\347G\323\277\230\236U\013\221\270\342\277\034\307\264\333\323\372\324?\302>\372Y>(\222\277\216\036\340\305\322r\306?+\306TU\303Y\323\277J\242\362\n\237\310\343\277\240bo>\202\326\244?\342o \311Q\245\305?$\334\277\r\214\027\310\277/\337\227\206#@\313?h\035F\"\343:\244?\322\365\276\235\266\331\257\277\373\270\354\306q\226\321\277\305-\223\237\\l\323?B\227\r\276r\365\344\277\242-\264a\267I\247\277@\274\360{\202a\323\277f\266u\201\334\257\344\277\206N\266\036\021\025\322?Y\312\307(\256\256\277\277\262v\312Y\216\206\344\277v\353N\332\3103\314\277\330\264\224$\266X\301?\273G\364:\373\255\302?\266\367g\016b\312\264?\305\253\213_\241\244\273?\323\337\246\232\264\304\322?\017\263 _\005\242\263?\202\311\215\"k\215\323?PiH\005\343\232\315?z\256J}\264\223\264?.\270\325b\246c\331\277\271(\345{g0\261\277\005i\306\242\351,\321?H\010\240b\346L\327?\241\266\202\260\227\311\213\277\246w\330\341;3\344\277\333 \3157&\264\261\277\036z\275\3018\264\261\277b\221\323\225\327c\315?\226\351\227\210\267\316\217?\352\177\363\301\266n\305?T\205\253\250f\373\342\277\304s\235\343/o\307\277+U\232{\345\315\306?\240\030z@\260\025\326?\221\"\327\362o|\340?g\244d\215\0103\212\277\242\332\371\341\224\267\333?l\000\035\203\241\320\305?\243\266h\\\223\311\262\277\036J8\035\226\300\321\277:\3610HUn\271\277\245\t%\335\340\325\302?\245\2066\000\033\020\245?\345\r0\363\035\374\324\277\250B4\241\346\367\326?\224\243\000Q0\343\335\277\363S\240?\002\271\324?9\355$\200m\215|\277&\260\224\300A\326\222?A\347\301\037v\315\326\277\347\273B\274\001(\310?y<o[B\033\322\277c\274\203+\342l\260\277\034\003\001\036\220\005\265\277\343\323\037>\t\234\255?\036&\257\010\335\251\315\277\"_t?\310.\304?\324\354\264G\005\324\231\277\331\034\316\231@S\305?\020\272\235\340\017\275\324\277P\262jJ\221\000\261?\207\320\326\373lh\303?\343\013\244\325\332\305\342\277\351\000\031\036!!\267?\350\036\351>\306\375\264\277\274\356J\036\221g\316\277\341\340^\333\323\274\262?^3\022\004<\'\255\277\327\031[\337\362\036\244\277\274\224\374\200\356h\321\277\223d%\377\366i\266?\224\3156\346^(\232\277\027\311G \230\002\320?\262\340UA\322\310\267?:-\313\031\202J\301?\321\332~C\362\337\353?\2051\032\340\037\202\342\277\275\n\235\225\274S\307\277n\323DD\326\377\343\277@\377w#w\001\240\277\003\020\363\274\206\246\320?\t\031e\211\020O\274\2770\001\215\014Q\t\204?9\373\337\036?\254\235?\0323\211z\301\'\325\2779\373V-\341\267\275?\200U\344\306\343\330\324\277\373{\245\003\304\352\317?\016tab\373\342\316?=\333\274\324|S\264?L\235\262`\003\036\320\277AG\253Z\322Q\307?\370\314\253\235\325@\342\277\322:\276~\007\215\251?w\255s\302:\304\323\277\n\277\263\301\262g\327\277v1\332\236\261\023\250?\226\274\256\035\224\311\313?U\254u=,\217\340?M\317\005?\273\r\342\277U\'\261\265\010V\323?\014\027\240\n\0130\301\277%\302L\374\315\033\327\277_\372\013\373Eb\327\277\224\310\231\201%2\273?\374\271\323c|\024\255\277\252d\000\250\342F\311?.\206\335=a\005\262?^\032uc0\365\332\277wg\253\2329\207\241?$\366dY\213\352\343\277\361\261\315#\005j\225?mj\311x\316\365\310?\361\246\002\276@\350\243?R\023\220\375\213\343y\277>L-!@\002\274?aZ\355\304YO\302?\017\223\025h\034O\342\277\247\274\014\265\\\354\325?B\237~\006\212\016\335\277\177\2319nBk\340\277\323\260\255\331\251\275\313?\374\310\364\036C\324\273?\306\036\363d\253\311\320\277zy\360\311y\265\320?\206\222xb\236\341\212?o\037E\337\325\331\345\277%\021+\355\036j\342\277f\303<Y\241\260\224\277\304\272\351}\200A\350\277xGY\316\304\305\200\277 W4\347*\'\241?\350)\342\334u\"\247\277u+\327\035\203\374\340\277\206\230U\034*m\253?bU\224}\035Y\321?\243\362\310\2026\367\267?T\353X\000\256\037\340?\327\353\'\255\t\263\325\277H\331\350\275\255K\300?d\2752\036\216v\244?\336\223fwq\260\266?\337\354 \3003k\322?KM\016\341\220t\277?\036f\026>\256O\244\277\231\311\005\241\233\201\270\277\363\376?N\2300\302?\243\242\373\203\222\023\324\277\356\272\320\277\321\314\324?\014S!?\227\200\322\277\031\274\267;\316\341\257\277\316}(\207\005\355\340?\334S\346\244\377\376\302?\367\315\341\200\264\004\241?\210\235\214\236\031\214\341?\341\354\367@\002\261\272?O\351`\375\237\303\323\277\025\017\275\377n\205\303?\335x\332\216g\237\277?X\244\211w\200\'\235?p\264\275\277<\302\250\277\241\331Ta\\?\260\277\023j~\343\010\245\330\277\210\3074\21104\344\277v\023|\323\364\331\315\277[V\006zM\264\332\277<\\@\242\350\005\242\277\032\350\322\246\207\364\266?\t)\2116\021\307\342?\277{\r\342\177\342\342\277\250\373\245\352\303\237\300?Up\323\372\266{\322?/2\246\005\324@\317\277\031\237\023\214\224w\344\277\277\331\377c\225P\324?\025W\225}W\004\327?\036\220\235\032\334\024\302?\252\312cr\017\256\340?\237\223\3367\276\366\322?\257c\371F\266\353\311\277sq\n\341\2079\321\277\264\227\310` \243\342?\363P\200\315\336\276\251\277\221?\343\205\036xw?\'\3402\002\205U\303\277\242\243\013\240\316\313\276?<p)BE0\301\277\316R\364\270V\030\315?9\262\270 \327\335\306?\270\334\2525\336\347\325\277i[I\002?p\266\277\354\242K\254J*\242?\024\254\324`\330)\320\277\224\372@_k\320\230\277lp\307@C\344\337?\312:\230$\001\260\327\277\375U\333\250\251\200\347\277\\]\353\336\314\340\304?6\032#\206\333\251\316?\240t;^\365\276\344?Q~Z^\034\211\305\277\' \375a\021D\345\277@\224\334\037\367\006\333?\352\tK<\240l\244\277\304\347\363\366\214i\313?\016L\217\"B\016\334\2771{vL\037\262\270\277\020\212R\347\366\367\341\277\300\267\036\302Nj\225\277z\342\367>n\242\313\2777!\245\300\237-\340?_W\233\030\365\275\260?\262\371\023\360\306\235\345\277h7\002\nX\237\301?\037\266\272\275 \371\244\277 Dt\000\253\000\342\277n\023|@\221\010\202?\315\224\326\337\022\200\265?Y\260\340\300\334\325\327?\311\213\216\334\201\227\323\277z\231r\317\004\324\343\277\301\326\327\200)\337\346\277\206~}\337\205\316\323\277M}\305\277t\377\276\277\302\365\315\242\034\361\302?R\241\243\035\203\212\242\277]\236\224j\033\326\301?\245\340B\201\353H\353?G\234FA\215N\273\277\332\201)\271y\331\344\277|Z,\342\307\332\330?\341o\346\035\310v\337\277X\320j7\260\013\324\277d\300H\036>\337\343\277\321\010\323\203\304\356\301?;\324\2455\274\317\353?\031\337\376\371\t\251\313?\246\023\0015RB\266?\361l\311\211\372\315\300?\321\217\351}\241\317\305\277\000\300\332\346\000\240\275?\004\306\372\006&\267\315\277\241R\035Y\226;\303?\274i\351\300(\367\302?_6\256=\273U\326?%!\262\304\332\312\333\277\246\347\304\273\257\314\332?\343\221p\010\362?\313\277\362\005o@2\372\321?\224\262V\376\306\350\353?\021@\244\276\260%\336\277\257b\257\177\360\004\332\277\335\273a6\\\277\342?\001\362\312\232\375&\307?\374\201\335v\302G\301?\207\tY\314\276\341\342\277\241\030Q\301~[\311\277e\353\360B\000\221\254?\277W\320[\014\203\247?\370\242\003\263\276X\256\277\374w\330\237\037\241\264\277\372\324N .q\341\277\363^\357\335jF\310?\267\376\206\036kE\341?\215\331\016\035mb\320?\352\025\344\241\316`\321\277\325\356\262\2720m\332?n\035V\227\327:\304\277b_w!\262\024]?\363\353E\274\216[\321\277\323i\233\352\342\031\311?\201\022\372\3643P\343?Y\341\320:.S\301\277-W\344|V>\335\277\373s4\273\254\221\240\277\313RF\267\271L\340\277\210[O\276\352r\346\277\330\327\333\342\361\037\304?\245\361\321\003\233J\276\277\027r\266\312]\025\313?\324r\322\301\033N\321\277\024\215\336>\345w\313?S:?bG%\320\277\247lG\'\001 \333\277\026,Y>`\330\324\277}}J!\322\347\310?\355Mg\202<\026\255?\356Bs\235F:\343\277\274\251\314\275U\021\314\277\305\210\351\347\362\313\340\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\345\377\237\324\250\021\344\277G\031\263\035:\232\332\277P\325N\336\021\337\350\277\273\026F\335{\266\330\277\344\221\354\317M\264\274\277~\314b\275\254$\344\277\250\3634\242\254F\341\277\302\317,\3073\001\302?\261N\370\031\325\361\277?+\017\230\250Z\342\301\277\222\347<[\356\251\331\277\321\311R\353\375F\337\277k\026\036\352-T\305\277Kf\'I\370Z\305?\324\233\264\035\021\033\335\277\017\204}\236\263\303\263\277\372\240\241^t\"\336\277\250\245\034@}\223\331\277\254PIB\307S\355\277\0041\032CJ\275\334?\360\357\032\221{\374\266\277\223_\263\032\032(\332\277\227\002\322\376\0078\341\277\353\362{\325\251v\302\277u1\027\002\312\320\340\277I\255\305\341\253\241\320\277\211\376\330=\334\202\312\277q\231\354\002\322\274\306\277\200I\tE\343\036\336\277\212\020\211\010 \261\312\277{\301\002\363\353\"\343\277T?\312\343\3042\337\277\211\000\361\004\014\034\336\277Q3A`\'m\326\2771\031;\237\t\346\326\277z48\276\264\360\331\277b\222\035]\235\n\322\277rG\305 ,:\325\277\030\202wM\243\344\341\277=\312\322\230Z\000\275\277\345\375Mb\357\311\330\277A=\326\274E\210\254\277\271\202\226C\305\027\332\277b\034\226\345ok\306\277\035\2724\331\232\010\313\277\334\224\341.\261h\356\277\n\3549\002\033\004\332\277W>.\036\234\227\334\277\003\264\255f\235\361\334\277\363\327u\271\322<\343\277\312\376\324\323\242\031\323\277\026\362\020\337\354\303\344\277\334\tu\337\321\311\271\277\350\223\252\'\322\201\211?\217V\265\244\243\034\324\277`[\273\304\303A\275\277D\010\033\340z\373p?}0\337\260#D\343\277\224\341\371\276\030\307\237\277lN\024\327\347\340\342\277|\010O\215<\265\303?\004v5y\312j\332\277\237\261\355\274\246*\321\277\274\215r\325\341\315\345\2774\301\r\204\246\235\334\277\373\250+D,G\341\277OCm~p\374\326\277\323\n\272Zzv\255\277`\356j$\317\226\324\277\213g\2673\237\265\271\277\305Fj\353\361L\342\277\004h\204Ll\035\267\277\237Sw\002\355\220\327\2779\365\232\201>O\325\277\267?\233E\275\032\310?\0162\311\310Y\030\352\277J\303\337\345\330\260\324\277\214\342\260\217\251\026\314\277\022\227\210\\\025\315\332\277<Pe \350\313\303?=\236\226\037\270\212\341\277\020\022\341\340\204\242\267\277\312%\237hh\315\343\277\324\020\321\277\2170\320\277\2147\350\001\342\344\325\277\3144/\301\210\001\261\2778\312\260@\252\367\351\277\024\347,\334\207\366\306?\245\332\351\377\003I\331\277\032\\\347\235\022)\326\277L\200\355\242\340\020\302\277\252:X\275\313^\332\277 P\245\202d\343\210\277\265\241\261\342\223\317\247\277&\274\014\030\207\247\274\277\"\305\337z=-\311\277\274h]\335\220\312\271\277J\312\243<o:\316\277\233U\237\253\255\230\342\277\230CF\230\206\007{?\001xv\277+~\272\277\332\212\303\272m\266\305\277.\261\360\375&7\330\277\274\356\010\002\277!\345\277\323\177{C\206\272\322\277\332\263\337\301\354\361\326\277\020\372\343\007\370\377\331\277\032\363!E\360\001\266\277\340\222\220\006\277&\304?{\257\255\341\032F\344\277\t\323\263\375\204\343\200?\316\345a\374\217\247\350\277\367\240\363\\\327\326\323\277[\010\223^\253\357\326\277l7\013\305g\274\340\277\336G$\300\237\020\357\277z\0309\217\263~\267\277Y_nA\000Z\340\277\027\030G\037\322s\312?\226\357\266^\025`\330\277\312m\373\036\365\327\256\277\177\252e\3066\304\340\277a\035\001\273\036\365\331\277=\240\307\203\210/\335\277D\357}?oi\346\277\200\'\322\242\343\317\327\277$\315\0066:\251\300\277\223\313\332\0012\217\331\277\370>\260>y\263\252\277\036hG\242~t\347\277\205X\242X\0230\325\277\006\016\211\367\363\330\264?\027](\252\310\362\353\277\224%)\237\324M\264?N2\254\301\177c\306?\253\025\267\033\216\270\325\277\355S\254\037=s\276\277\035\210v_\337\230\254\277o\001\262!IZ\341\277\373-\256\257}\032\264?\347\270df\260\363\342\277\222\tS\357\004V\324\277+\230B1\303\020\342\277\224\026\313\200\365\360\320\277v\364d\243\030\305\310\277\346\303\334\203J\273\331\277a\277\212\000e\333\320\277\373k\242d\254\025\262\277\234\333\204{e\036\343\277\221\311\315c\331;\251\277\033@d6m\353\310\277\024Xc}\3016\322\277YVP\007h\021\335?y\2657S|\327\340\277\210\221\261\034\031\022\313?\0023`Be\371{?\223\354\362\\\310\353\241\277\005k\275[0#\305\277\324\\4\205J3\234?[\371\300\351\270u\340\277j<*a\032D\315\277\034,\367]l\325\340\277\242\r\237\370Ze\303\277\252\355\211\"b\222\340\277\006\025\321\206.\356\301\277\340|\217\2372\343\342\277I5\242j\252\035\340\277\357\302Z\245\211\261\243\277e\037\340 \214e\307\277`\321\010\221gr\336\277@\352e\312=\223\345\277fJN\232\304(\263\277Z\025\372\303C\026\326\277\236\247\360VL[\334\277\307\337Q\276\373^\343\277\367\'+e\235\232\334\277\274H\262X\324\361\324\277Q\022\361Z2\334\325\277\236\220\0347\234\374\201?\0305 \301\333#\271\277\214\365.ZW7\307?\256\302\177\035\254\275\326\277y0\030\022\346\254\347\2776\033\216[\212s\336\277\003G\372\233\355]\225\277\325C\362\235\261\322\343\277\345\002\002c\236\221\330\277:2\177\0321\222\310\277\006\3462\177\2268\344\277\331%w\306a\252\233?\366\223sZ\236\244\317\277;\331\325\375\306K\353\277\262O\031bi^\322?\271\224\312F\255\321\314\277*)\207\201t\322\271\277\223\255.\247\004D\334\277\250.\205\254\023<\342\277\234P\210\200C(\304\277\201\264\275\345\003e\253\2775\314\022\225\364\315\272\277\374\366\371\030A\235\303\277j\026&[v+\337\277\226\377\332\013\026X\352\277\235\253%\236ev\261\277\'7\202;\355|\267\2778L4H\301S\310\277\024\354\032\210\300,\352\277-\341\267\276\233\360\321\277\331A%\256c\034\341\277\260\307eX\234\034\302?\265w\035\334c\n\271\277k\345o\214\256\\\345\277)\251\002\244\354\343\334\277\260\017\241\000@\004\333\277\357|Pa\266.\335\277\\4\t\203\327\323\341\277\017\0305\251\2629\276?:\364\016\236\246\242\270?\246\367\350h\260\004\332\277\315\276\033\240n\177\327\277\250\360\213>+\330\243\277\221\337\221gMb\343\277\255g6\377\027\036\254\277\306\215\266\205B\337\307\277n\021R\337\304\234x\277$.[FE\267\346\277.e*\016\261\213\345\277\242\t\213\277*m\242?\302F\376\005\'\007\341\277\363-\256\034\032I\240\2772l9<)\370\345\277r\357+ \376\253\340\277\312\212~\300E\337\320\2770\036\357\237\270\255\273\277\201\340;{x\240\336\277K\212~#p\332\336\277}\330f\276\336\230\343\277}\212\312#\013\332\323?\310\330\205\366\034\036\271\277\001\276\200\003\377@\321\277\214\272\030\373yp\332\277\306\"<\220\253\307\320\277\002\321\366\\d\312\332\277k\273\t\276i\372\325\277%\253\205\006 =\306\277\336\324\264IM\324\305\277\213\275\274\245Av\336\2770r\005\312\\\317\325\277\270\253\272\273\214*\333\277\376\347\325\245\353\256\346\277\351\367\251\234\211\370\237\277\001\236\354\032\270\371\226\277\365\251\276NE\005\327\277\360Y\317\367\360\270\274\277f\3066\004\"_\340\277\270\245\037\036\323\004\346\277|\214f#\337~\332\277\3164\3453n\244\264?\361\312?D\264\247\322\277\252\264(`\371;\336\277\364\320\014\034\257D\333\277HV\331\322\376\342\345\277HACA!\251\347\277\324k\253@\312[\311?\360\223z\201\037\226\340\277\305\177\313\255Z\343\350\277Q\362\217c\220\340\307?\3106\340[\247}\212?\2571}\351\314A\306\277\013\026\342\3541l\343\277\255\215\251\242\025\353\314\2772\010(\344\265\330\321\277\274\302\'B\217\275\322\277;zf\303F\313\230?\020\016\017\304&\360\302?\021\316\237\035\rs\354\277\363!f\376\352T\334\277\361\325\022\033\301\200\334?\215\010\010\336w)\321\277a\224\261\353(\230\324\277\006z\217\320\"\035\246?L\021\355\0361^\240\277\315\364\277\032o\004\327\277\026\220\017\335`\346\334\277\212\177\320a[R\346\277\310p+s\251\300\346\2778\357(c\266C\242\277\3623\344\216\355k\331\277.\r\262\033l\340\342\277\265\261\310e\222\307\341\277\017\266\330\355\263J\345\277\204\246\200\017\271t\301\277\333\372+\\=\204\327\277\262X\365\177/a\350\277\360\026\'B\023v\321\277>\303\'\337d\002\341\277o\252<!>\'\243\277I(\272\204\374\231\225?1pC\003\346^\252\2777\017\314v*\005\327\277\233$\022\\\027D\330\277\357m\007\336!\251\256\277\314X\270\325A\230\265\277h\304q\205\034\300\343\277s\347..\372/\334\277Hz\346\037\\%\340\277\214\255\261\225\341\t\326\277\023\235\341\335\374L\336\277\312\347p\010\260#\325\277w\335[\221\230 \333\277\262\206j\316\352\262\276?\3168h\n\370\220\301\277\320#\353\025\273\"\267\277\031\262\025\217\346#\266\277\202\304\331!\274E\244\277\026X\370\341\275v\310\277\\\327\273\201\372}\311\277x\265\334\231\t\006\326\277j\nl\347^T\314\277\221z\323\035Y\263\313\277\370\0376\344\341\265\327\277\220x\242\271\210\316\242\277/\216%\007G$\336\277:\227\301\234\311\314\337\277\224\345=1_\034\260?9\233L\344\233\320\256\277\303\357K\242\003W\350\277# \221|F\036\315?\241~\335\n\335\374\272\277\256~l\222\0371\341\277\2613\246\334T\217\303?\\\226\310h\221\253\306\277\1772\306\207\331K\325\277SN\346\345\321\211\304\277I,\214\241Z\014\325\277\024\'\367;\024\205\357\277j\002^\311\002d\304\277\255\312t\236g\002\355\277\257\213\221\333\345\021\352\2776!J\007-\034\305\277\336\005\347\337pW\330\277\235\253{\236\036\337\325\277\366u\307\377pY\330\277\201;\026\374\262\213\303\277\272\332\212\375e\367\246\277\265\231/\334\345\325c?\341\037m\036\262A\257\277b\340\024\261\343\332\344\277G]\264\305\n\276\236?\213\024\014\337\251]\323\2774\320c1=\243\272\277\372\247\310\337\305\224\313\277U\\f\"\266\205\304?Ocs\274\237&\305?F3[!\310\033\273\277\212L\n=\254\201\334\277\232\305zY\311}\345\277\233\376.d\\\016\225?\002]\177;\036m\310\277\250\036ip[[\353\277-]\342D\313\354\334\277\002c\340-N\204\277?B;\n\204[\206\325\277|\262I\033\232\364\303?0Y\005\377\225t\333\277`\354\367\243,\354\306\277:\027\322#>\036\320\277\236\323\013\302\005n\325\277\355$\t_\353\224\325\2778UW;\023e\230\277\272R\350\037\361\251\346\2779\301\355\277\204\200\323\277N6\324\336\226>\322\277\345`W\017o\010\277\277\240\301*\007Hn\263\277\333\220\230\003\261\252\325\277m\305\037\301d\025\322\2776\355\275S\\\260\340\277gT\215\034\361\275\320\277\324XN\204\005^\313\277\216\307o~\201(\342\277\202%\r$\3360\330\277\261\314\021\350\002\215\354\277\244\263\243\243\342 \251?p\001\354\314\322\210\264?\305\252\244\302\226&\325\277\343\020\026\272\267\307\331\277\330tN\375\315U\332\277cF\364Bl\366\327\2770\3209hD#\300\277\256~\021\331\254\337\340\277\313\037\302\256\334A\340\277\331\217\034\002\252\354\345\277\362n\331\337\341\217\317\277\217H\004xEO\316\277\254~\266\037:N\302\277\265@\314o\342u\323\277\264dS\203p\322~\277\024\310\354,zg\344\277\226\236D\3378\204\353\277Z\022^\212\304g\314\2777\"s\300\t`\331\277\216\3473\240\336L\351\277S\212\310\372\3162i??\225\354;3\377\335\277&\315\027b\222\035\337?E\227\334\315\370\343\335\277%\274\024\211\317\276\311\277\266\344\031}\312\006\211?mv \302*\004\351\277\244\301\216{\312\034\306?\244\300\247\336\277^\334\277\000\036Q\241\2729\324\277\240\374\233\037\230\306\333\277\223jD\325T\273\305\277GjF\253\377\330\354\277\016\024\2315\210A\273\277\001\266\315\236\025\"\343\277\345\341oA\327\272\306\277QR\036\345y\023\336\277\034\216\266C&\215\321\277\034,\265A\232\257\347\277\032\265o\254\223L\262\277)\334~;\201\027\325\277!d\315\206\004\245\247\277\335\302\251\305\226\324\350\277\332~\246\034\233\266\327?\222\217\202L\327\270\262\277\334\240\264?i\013\317\277h\014k\021\356!\243?\336\317\306\235\024^\341\277\213\310M`|I\331\277v\323\"b\204\215C?m\364 \363\267\363\346\277q\243\257\275\242]\321\277R\025%\261<\371\210?\352\3010\242\345\247\336\277\241\251\317\274\271\313\322\277 6&\376\007\\\323\277z\326^\331?.\300\277\244\302\032_bI\344\277\210m\346\353\215\265\342\277;\222\344\034\351\312\300?D%\001\254\206\253\244\277 \326\227|\036\351\337\277\024\272\001U\222\253\335\277\344\304O\312A\\\227?\202\022\013!\214\204\344\277\351\224\354}OQ\320\277\307_\275\376\342a\336\277F\245\307\245\340\337\333\277{\177(=x\322\337\277\356\217\234\361\"x\350\277\255%O\037\242M\331\277\240\372j\273\307!\301\277\235\315\364\\\3603\303?\206\376\372\002)\232\253\277+ \304\000O\373\322\277\345\340>\027\262\337\332\277\260L\373\313\316\340O?\024\335M\314\207[v?\r\214E\236\347\371\262\277\343\337g\\8\020\341\277\030\271D\201\200\255\243\277f\266u\201\334\257\344\277>@\265\311\372\260\301?\351\302\274\205}T\314?0L\246\nF\345\344\277\030\340\314\371s\033\275?\253\006\202|\340\025\324\277\254\217\342w.g\335\277\206\037{A4\210\335\277\377!`!1\t\327\277L\320\307\202g\236j?\236\212\n\213@+\332\277Q*\351z\005\226\304\277\230N\273\375\221\240\250\277-\266IEc\355\312\277[\3220\000}\360\204\277l2\231\340\212\032\340\277\026\204\362>\216\346\326\277r\353\010\274\240y\251?\206\332%`*l\336\277\265!\020\371x\362\347\277\314\317\262\223f\030\333\277\332\036\377\375\020\270\340\277\225~%\004i\316\303\277\355=\246\377\366\306\325\277j\222P\341\245\247\326\277S\277\034\207\013\312\345\277\276\374\312Zu\343\276?!yc\030\342\036\314\277\035X+f\306\323\270\277\331.\247\343\265\273\325?t\000\253\300\034\377\334\277D\233t?\315\347\235?\306\236E\010\362`\305\277;\347e\034<v\331\277M9W{u\341\266?\3032\262;\0174\321?\005\242i\201$\t\337\277C\365A\\Z\t\304\277U\364\035\202\376\320\225?\370\205\"\240l\021\263?\005\314\360]R\316\304\277e{\343Z\243\324\320\277P\261\305\311XH\327\277\347\006\032\236$~\315\277\210\352\243\017:A\213\277\"\243\311\346&A\301\277\010u\262PB\033\262?\032\264F\363\266\210\335\277\233\256\'\272.|\340\277o\2655\277\355\013\340\277[\n\260\336\2241\262?(\217\331\037IE\326\277.R\356_\325\260\333\277I\237\271\373\332\002\302\277|D\257\263\337\342\270\277B\276:}\363\021\326\277\030\266\003\001t\320\324\277\250g0\374\226/\347\27790o\304IP\334\277\271\025g\261\271\017\337\277k\355\236\270\363/\303?|\263\223\342_[\313\277N\004X\201\255\024\325\277\t\336\024\177\251\331\333\277\252SP\027J\242\244?\\s\211\033\236\273\324\277\234\260q\273\237\354\334\277\214\265\3502o\264\243\277\215m\010D>\236\322\277\330\004\244?,\202\333\277y`\031~\344\324\351?\320\371:\272[#\341\277`\350\215jC\013\307?Wp.\264)\215\352\277\350\n\000\237i\223\325\277\000\3675\305\365\205\226?\007\031T]\270\032\323\277\334Sj\335\243\n\327\277F\372\243^\246\034\326\277R\264\373 \216\037\227?\231\222\027_\325U\322\277g\037\r\242\023\024\253?\3058\216>7K\227??\351\237;\034\270\242\277x\200\304\002\241-\330\277,J_\301cc\271?\201S\367\177\020\364\246\277\362J\355\240m\360\344\277\360!\227\356d\246\326\277\332X\211yV\222\340\277;4MTF\216\252\277\226\362\265\302O\267\322\277\336\300=\377\330L\255\277U\327F\341\037\373\341?S\\U\366]Q\346\277\266\227\331\214xW\306\277^\215\242\275\260\253\335\277\027\205\033\370j\252\260\277V\021M$\301\351\263\277h2N\t\251\327\310\277\322\373\306\327\236\331\336\277\2007\223%)\037\304\277\'\245\240\333K\232\317\277!$\250m\005E\277\277\311\036\241fH\025\323\277\323\212\312\341\356\007\350\277\365\323$\035\212\'\322\277\247e{_\"\377\265\277%\225\306\273e\377\324\277\207H4\036\370\332\326\277\271\345\002\033\000\277\332\277\270\030\311?\257O\241?\020R\001A\312\271\350\277\356\326\t\232\\\255\307\277\373+\032!\362\314\301\277\004\375\307:\003@\335\2770\375\340\266\225\342\304\277D\375\211%@(\330\277\005\"8\354\306\324\274\277k\302\363\333\242\217\253\277h>\347n\327\313\334\277\224\252H\340j8\346\277\265\225\362\265\302O\346\277n-zD\330r\334\277{\257k\305H\000\351\277\013\336\241r]\302\334\277b\276z\344(\243\322\277\023\236m\301\224\371\330\277u+\327\035\203\374\340\277\0101\341\341\207\224\323\277\020YSBx\000\240?g\303\016!\266\315\324\277\260\356P\373J3\330?\211\223\216\201[\310\254\277\305\377\374B\270\227\336\277\206\272\243Z\237\315\333\277\272(\037\'\361\336\330\277*\313\255\234\377O\312\277\242ZL\205\333\216\323\2772\310\237\240\373O\333\277\\0\247\2726J\341\277\307gpc\314@\310\277dBH\355\260O\274?&!ua\302m\242?\347\200\207_\266\210l?Xv\034\232\rM\340\277\321eb\241s\312\324?g\337\354A\316\034\302\277\002f\276\203\2378\317\277U\330\322\304\267\007\326?VO\377\274\035\037\325\277%\224V-\375\014\206\277\301I\303\276\327\357\331\277!\264\334\241z\316\317\277\3074\252>\035\260\327\277eUB\177\272\244\341\277\206d\267\205\235\230\344\277\253\010\263\340\260z\270\277:\214r\376`\337\351\277\017R\246\207WH\260?\377\276Vt\261\212\264\277\307~\334\237\007\316\334\277\307@C\244K\344\326\277\252W\035{\356+\333?\243\242=\240d\031\346\277\271\315\257A\272s\326\277\223\252{\321\017\004\217?>\300\244B\206\237\272?F\216c\332\355)\344\277dsYu\353o\246?>#\021\032\301\306\264?\214M\206>\263\277\323\277p\230\005f\307>\251\277\236\345\375\250\033b\203\277\277z\201\376\347\325\272?\026\320\227 \033\257\267\277\r\337%\345\254W\330?\017\343$\203\222\270\335\277\270m\204\352\213\251\340\277\316\032\274\257\312\205\344\277\272;!*C\013\325\277\364I\223\367\026{\311?\335\212\016\222O\331\244\277\340\305\363\000\263\316\302\277\261\250\324a\217\315\231?[M\317\242\024\300\336\277\220\331z\0028(\335\277T\217\302b\305\212\253?\036\030\243\"\014\313\322\277\000.\373\207\212\367\221\277Cu\316\252*\217\262\277\327\271\314]\t\254\355\277_\247&\373\306[\303\277(Sy\371\245\227\316\277\001f\000\240q\376\341?\256\207i\276\316\226\343\277^ \367cI\257\350\277$\277\217\264e\n\321?\032\200\323\334\206\250\326\277\005\226\366\342\230 \256\277\2126*\344\010\241\310\277o2\005\306U@\335\2776\304\035\0249\351\350\2772x\024\276)r\335\277o\247\245\240x\241\350\277\'\325\343c\034\010\325?\377\020\023\273SM\331\277\255\276\272*P\013\356\277\n*\354\232w9\323\277gGG\305Az\335\277x\346\212\367\210\275\347\277t\n\362\263\221k\330\277\177C\362\337\315$\337\277)w\341\377u\313\326?\024\305q\001\344[\334\277z!x\3274\212\352\277\231\003N\000\017\226\355\277\323\036\030\010N\362\225\277\'\022L5\263\226\341\277z\370\327\227\021\003\323\277\357J\334t\025\234\340\277\000\233 \250\"\256\313\277W\354\355\236U\211\356?&\230 \331\022(\340\277\025^z\342\326p\351\277gV!\253|K\277?,6{\332\300\241\313\277M\306\010\023\014\010\225\277F\232\323\300\352\203\350\277\177\372\215~M\271\322\277\006:\356\357\307\210\355?\022\303i\034E\361\322\277l\336\345\340\241\301\322\277\t\025\177\210\313\371\275\277\203>\211\266\000\300\316?eq\377\221\351\320\311\277\260\034c\037K\274\303?\377\310\370 \231\310\323\277\367\234\2521\327X\322\277\366,\306\310\253\326\265?r\354M\312\254\367\275\277\"#wC\340\351\301?\030\354\247{t\325\335\277\373\361\345\245e\033\211?\210\304N\302\226\250\352?\255\252\217n!\033\277\277\033\370\206\377\312\003\264\277\346\215\027\373`S\335?\177\000\316b\224\255\332\277\034\315\364\277\032\257\324\277\266\022\231=\371i\344\2774w>Mw\250\346\277\"\235\211\002\340L\322\277\251^\247&\373\306\306\277\300\253\355?\225\307\326\277A\224y\365;\236\340\277\301\322\257c\022\344\345\277\227R\270\232L\307\327\277\'\230\030h\312\220\263?\t\274\233\300\327\204\266\277F\032\005VH\330\270?\340]\304\375\233\245\257?\330\331\346\177\037\371\272?\272u\355\301Z\013\340\277\321\332\021\247\303\245\225?c~\260\204\234\224\266\277\034\333|mG\202\327?_\247\344\336\364\225\340\277H\260\212\232\\J\302\277\206\245&fb\337\337\277B\220(Y\363\310\351\277>9\257V\222\241\351\277z7\263\351J\374\272\277 \025\326\370\022\313\304?\353\207}\247nS\321\277\023F\026\33581\245?m\237\002\036 \261\316\277\005&\344A\202{\261?h\345\010`\235?\276\277\234O\374\234\253{\301\277\271\303hNE\307\275\277\340\242\356^I\r\340\2775:\214\356\305<\351\277~\177\224\"Cx\344\277&~\326F\206\346\345\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\2772\251\200\377V\316\277\003\024\227\241\3715\352?[k\203n\212\"\344\277Sd\204\"\243\204\355\2779u/AW\314\357\277\221\246\213^W\335\350?9`x\241\220\357\352\277v\215\361\274\257e\347\277\270\327\223\nt\267\342\277\210\363\262\036\245\257\357\277\230\242\001aL\337\345?\t\240\275\237\2775\344?\022\350\237\"\177\227\352?X\355\253\274.\215\357\277\003\311\277\277\326\177\354?#<-\201\214\347\357\277\272\270\021?\224\"\262\277\026/\232\276lU\355?\236Y\267\3463\305\321\277\325\3779\314\227\227\354\277\225=S\371\350\336\357\277`\236\204\210\212\247\325?b\241\3264\357\370\352?\223\314\240\220S\252\357\277%r\250|[\362\331?\300\257\323@\332\034\335?\214z-\215\004?\355?hg\342gm\344\340\277&3\203\235\007<\354?\350\371.\000\350K\357\277\2325\241\336\306\245\351\277\036\367R\035\027z\350??\377\240\242\250\373\346\277P{B]A\246\335?\214>\325\327\251\250\343?\315,\370#\373\226\325\277\010\235c\202\022\215\341\277\210I\270\220G0\356\277\206Cg\200\250\207\352?\234\312\232?C\313\357\277t\240\230\006\217\200\355?\217@r!E\363\357\2774fu\037>8\355\277\365+BV\\\201\357? \024\255?6G\357\277\010$z|\357\355\323\277\003\362_\377\371F\342?aK4\355\007\241\354\277-|\\\237b\212\354?j\016\265\022_\222\351?\313\331;\243\255\212\356?mA\347\034\331\350\306?\207z\0135T\326\357\277\203(\251]]\377\357\277\211\271A@\000a\356\277\371\331\310uS\312\357\277op3&\016\252\357\277\216&\223*\274\221\310\277\371Gc\335\r\374\357\277\330W\rxO\324\331?\341\3143\037\245\354\345\277\365J\366[}\355\325?\226\231-\264\316\323\356?\244K\244\331\341T\321\277b\370\343Q\205\032\335\277\267 \000\335<\372\342?\005n\335\315S\335\344\277\302^Q\337l\362\357\277L`)\201\203L\356?\263\323j\243\225\326\357\277\201\206\253\301\003\234\346?\300\300b\303\211\336\357\277\246\021\361\336j\300\355?z\205\252=\221,\356\277\312+|\"\364X\342\277\225\251\223}\241\021\337?W\216\271\000n\365\322\277#\251\277=S8\357?NA\341`-\306\342\277\315\264\232\001p$\346\277AvIbj\347\351?d\2546\377\257\232\350\277\303T\351\335\016#\351?3\227e\231\217\365\356\277)\331E,\275\021\356?\215P\307\276\277\234\354\277\375_\236cz!\331\277\325X\302\332\030{\357\277_\376\226B\030\346\345?\345\355\255\355\222\235\353?\327\270\345\300\376\255\357\277dO\351\375\322\344\347?@\\\203\010\202\321\357\277C\3350\237\346\343\356\277t\013\372^\205\314\357\277\342\365\364l\261\266\334?\022\201\217f\321 \357\2771\005\020\343\332u\321\277\303\334I\237\261\n\352\277\237\3767\037lK\351\277\n\022\333\335\003\324\357\277\325p6\302G\211\357\277\2258<\316~n\343\277\177\270P\236\036\200\323\277!d\264\351c\231\356?M\323-\\\322(\327\277\214\331\222U\021n\350?C\260hB\254\341\357\277>w\202\375\327\231\357\277%\313I(}\241\325\277\373\224c\262\270\377\357\277@\003\373\371\000\356\323\277/rOWwl\356?\220<\245\275\240\211\334?\t\362X\330x\225\346?\0041\330&x\267\316?K\304\000.m\335\357\277\307\306r\001\036G\340\277-\201\357\221(O\357\277\217\232e\005u@\345?\336\246\344A\037\361\357\277D\371\335\317\204A\353\277I\232\303\336YU\343\277;\373o\312\201\003\341\277\221\305h\343\251\303\323\277\277E\'K\255\267\345?\tb\352\370y\035\324?G9w?\227\036\347?\204\035\0202\332\364\357\277\261qXu\261\304\345?\265\227~\323\005\206\350\277\031\232F\356D\344\350\277\220Z\264B\211=\321\277\303\305@\2151\346\357\2773\344TB\342\004\342\277\204\342\032\341\345P\325?,\271\314\341AP\312?\273\256\251=6\363\357\277\365\202Os\362\342\352?E\343?\223\263\346\357\277\265\243\274\177\301\310\351?\031\343\242\336|\330\355?\334Rb2\260i\352\277\003\026L>n\246\354?R\303\257?&e\357\277L\226\244|Rw\351?\254\275\231\342\273\336\356?x\212f\257\210\353\357\277\347\325\357xIR\351?\247\275w\212\013\366\357\277\325\003(>%\204\352?\367\331T\037@\255\356?\177(\240\242M\202\354\277\023&\214fe{\352?\tAX\327\262F\357\277Tb\350\"\317\377\357\277\t\203|\032A\264\355\277\350.\252\301\013\255\350\277\227\201V\242\344\374\357\277\223\207l\2752q\353\277\307V\341\340\034?\353\277[+\332\034\3476\353?s\353\332\203\265\226\350?\332\027\226`\355_\353?/\356\016B\243\350\355? \2202\177\330\324\351\277\300\3348sY\026\324\277Dn\206\033\360\371\357\277m\351\013\000\331\024\316?[s\354EY\244\345\277\304\177\025;u@\330\277\337\374\206\211\006\351\357\277\301 #\177\264\010\356\277:\202\n\375\002\260\354\277\336\275\016b\210x\351\277>\366\006\241\264\336\353?\320e\244\275E0\345\277P\277\260\241@\204\345\277A\364A\"\257\377\357\277\373\356\014\t\316O\353?\010\233\360\001p\002\347\277~z\">f\266\345\277wv\350\252/\001\324\2772\311#\023K%\354\277aE\272]7\376\357\277[\333%\273\343\036\351?\334\325\314\326\321\243\313?\020?\275!\246g\357\2772\272\017\202\206\245\324\277\224\373\035\212\002\375\357\277\377\215\342\301\273\001\357\277\234\253b\001~\263\340\2773\202S@V\247\356\277\0043K\247\032\242\353\277\366\337\224\003\207!\353?|Zn\376\231\000\354\277\314\013U\326\333K\352\277\202\231\010~\310\231\357\277\365\013\033\nD\364\357\277\333{\002r\323p\347\277\275GG\203%\350\351\277\243)\226\266\023\300\353\277\226\365Q\374\316\245\324\277\210g*@\353\354\357\277\204&.lr\335\357\277\236\344\365\375\'A\333?\336\327\222\237\236h\342\277\200\271\365\036W\230\351\277k\225h\342\200\n\353\277\"\256\265Z\324\345\332\2777\205:Q\267\330\357\277\005\005\357\365\377;\330\277n\324T`\022\270\334?q.Q\377Q\002\355?\317\355\353\341G\254\350\277\\A\313\241\342\013\346\277\315q\217!\327\030\347\277 =M\177Y\016\350\277N\245U\343[\016\331\277\034r\032?\340\303\355?\274\237K\037W6\352\277\013\216\334\344\001v\351\277\276P\0330\243\363\357\277b\013\346T\327F\347\277\023\200\034 \332\377\357\277\243*\340}\331f\326\277IPW\322\345\250\347\277\276\355\370\345\202i\350\277 Gsd\345\027\353?\016\213Q\327\332\373\357\277\212\344+\201\224X\306\277\233\372\3458\\P\353\277\325\307*B=\177\356?\020\332\006I\372\317\357?/\032\360\001\323\214\347?\321\266\365.9\t\354\277\3721\234!\013\'\341?\314\305k\240\361k\356\277c\177\331=y\330\357\277(\036\274\033\260\320\356\277Xy\033\376G$\355?\232\225\222\212k\341\356\277\031fW\020\271\017\355\277k\321#\302\226)\347\277\000\037\274vi\203\357\277\247\034\223\305\375\207\357\277-\326h 3#\337?W\023U\t`\024\351\277\300?\245J\224=\351?\211\227\247sE\251\321\277\262.n\243\001\374\357\2772\257\002\000\360\375\357\277\004\332\014&\264\333\355\277;8\226\177F\314\357\277md\r\315+M\345?:~\342\337\353t\341\277\371\300\216\377\002!\355\277X\264\357@S\345\357\277\361\312?D\264\247\322\277n\220\244\377@4\354\277\376Q/S\356\331\354?\221\3774{\301\243\322\277\214\374\023\277\326\243\326\277\305L\211\301O\036\345\2777\307V#\375.\334?\221p\020c\210\322\304\27729\326A5p\357\277.\035s\236\261\017\347\277]~\226\2354\203\357\277\321m\364\367s\206\311\277\307\357\022AA\356\350\277IQ_}\331\311\347\277\277\347\217\202\n\273\337\277\217\327r\035\231\375\357\277\331E,\275\221\324\350\277gv\304\276\360L\335\277g\336\036Bd\252\342\277\212\277\334\335\271\246\354\277\222\220H\333\370\323\356?^\346\t\276HL\356\277\263\236\020\360Z\370\357\277g\341F%\320\373\357\277\356\336\233\360\\i\354?\364\364\266>Q>\345?\031*Z\024\321\n\322\277x\243$^}@\331\277X\254#?\311\372\357\277\346Oeb\004^\355?Rqo\300\337\326\351\277=\340p\325+\233\352\277\323\257\276\313V\250\307\277\254e!\360v\263\357\277\021\017r(\215b\344\277\t\301\252z\371\335\331?\227\324}\2765\311\356\277Y\345[\202\000\327\351?%\350\222\036D\372\357\277<\3328b-\376\357\277R\203\345\337\231\266\353\277\020\030\220b%K\354?\305P=\210S\234\355\277\200\212\374]L\361\357\277\374\010\262T\315\342\357\277\300\277R\247Mf\322\277\027J\201`\3517\341\277\326\242\252\256\350\373\340\277tqe\232\372\n\356?>\235\206\003|R\343\277\030}`\"94\356?\250\001\203\244Ok\353?t\203\231\235\342\304\357\277\031\357}`}\262\357\277J\177\212>z\336\357\277\261b\237\235_\326\355\277\322>N\177\223\371\357\277\336\277\303\376\374h\357\2774\032TvU{\323\277\270\030\362\276\340\311\354\277\005\221\240S\353\230\354?\331\253\023\300b\247\342\277J\344\314\300\022\271\355\277\223\243\010\302x\372\357\277\365\352\322u\227:\354\277\273\351;do\216\347?\177g{\364\206;\344\277@\264\342]&\361\357\277\006v\210\301\364d\327\277U\265\35607)\357\277g\2217\nZ\322\357\277\302\316\003\016W\375\352\277\017\245\017\300z\032\337?T9\212\377}~\357\277\307\367\305\245*-\356?\246\373\357w\336\374\352?f\360\234\322f\201\353?\253/\340\2371\027\306?\362\014u\263\232I\353\277D\335\305\003\343\003\333\277\252\367\361#\300\341\322\277\355p\307\335\030i\346\2777\035\277\277Z\230\355?\210\344\277\233\311\022\356?>5M\216\361\227\355?h\267\361\202\343M\355?\265\305\363!\301\367\357\277\361\010\023\353\371\377\357\277\204\3567\177\270\360\357\277\177\242\262aME\350\277g\200,\300N\374\357\277\324\237X\002\204\212\340\277\314\320x\"\210\323\357\277\201\334\321A\217?\357\277\207\036\255A\312u\350\277\360\331\235b\223\204\346\277&\r$\336\360\321\357\277B\362)[\177\246\354?\256[\251\014\210\265\347?l<}\251D\376\357\277?\244\204\005\234\n\350\277\314\234\r}\240*\324\277x\376\376\336\267+\345?\334D-\315\255\020\350\277\215\332\263\235\245z\344?\345\324\3160\265\245\353\277`\306\332\000\350\347\354\277\'\021\206\246\221{\357\277\241\302*A\363\367\356\277\0070<aO\334\330\277\t\317:\231n\210\347\277Nr\217\276\254\375\357\277\215\322\347\233\0330\332\277a\262\002\215\343\221\341\277w\005\r\303hR\323?\321*LB\226\303\357\277Y\353zX^\350\357\277Z\211\324\017E\034\356\277V\341\340\034\277A\350\277\303\275\215(H\207\347?{\231Q\301\033\261\326\277\367Z\216_\221B\357\277\200\264\244HcY\352?\261\277\354\236<\314\343\277\t\335F\177?\347\334\277\300+\335\270 \366\357\277^\037\214\216\232\345\357\277\227_a\034\2673\356\277\0278\013A/\330\332?\245Kb\275\017\317\352?\235,\265\336oT\345?\305\267f\341\241\276\357\277\270_\272 \2150\353\277X#\263a\352z\347\277\325\355\313\035&O\347\277\270\332y\321\r\003\357?\200\034\336\275\355\023\332\277\222\354\256?\313\253\357\277|\345\213\007\245\271\355\277\342\235\215\246\304\377\357\277\325\362\332\327GH\314\277?\2779m\327U\340\277\325~\306\340\2743\357\277\347\263M;F\303\345?u\251\370\\\371.\331\277\037\311\366k\374\223\353\277\365_\326zuD\354\277\237Y\022\240\246\366\353\277\265\243\335\215\252K\354\277`y\353W\225X\357\277\340\t\346}V\330\350\277\\\212P\021LZ\324\277\237q\206\207\325\204\357\277\307s\307\254(\257\354\277\225+Y\241\212\023\343\277qg\313^[\344\342\277\214c\311\301\021\211\357\277D\266\034}\006\263\333\277\366\0056\337o\321\357\277g_\232\236\207E\315\277\312\213L\300\257q\351\277 \255\326.\022?\354\277\227\250\203aey\342\277s\332\3179\252\340\317\277\353\021\264\023on\345\277\003\252\207\201\021\350\344\277e5]Ot\235\351\277\013\376\310\276u/\344?\354\\\007\275\355\270\355\277\206d\022?\020\352\357\277\262\265\276Hh\013\357\277v\337\357\037$\256\354\277\006\\\035!\177\340\352\277\007[\221=\347\363\354\277\2255\240\224\377\377\357\277\256\020Vc\tk\302\277\312\241\250\340\256\346\306\277\314\301}.d\377\357\277\222\304\334\377\021\027\354?\331\265{\301\300\226\356\2771\331\323i8\200\356\277/Z\333oH\276\357\277\266\252\333\217\312C\340?\017\n)\303\341\032\334?\230t\357<L\226\344\277\371;%1R\371\357\277\251\354\005\260\022\275\353?\322\002\223\237}Z\354\277S#\025B\336\375\357\277\252hj\341\313g\323\277\373\316\212\003C\361\356\2779\0139\276\017*\354?F4\313\2570\316\354\277\221Kw2\223\303\353\277\377\366LakW\324\2771\241\335|~\363\352?\274\"\370\337J\266\357\277\265\312\247\"p\037\351\277B\2616B\026\364\357\277\033##\261\356i\343\277\366\273\013\357\315\n\355\277\200\250\352\324K\302\355\277\341\227\237\300\340\377\357\277\210\332\025~\231]\343\277\333{#\200\274\263\344?\305,\305\237\362\371\357\277%(\033b\376\002\320\277\215~\362\177`\261\357\277P\334\361&\277\205\352\277a\210\234\276\236/\327\277m_\366\241\301\034\327\277\360{\304}\036b\356?)A\177\241Gl\354\277\240\266W0;\225\353\277T\343c\177\362\332\355?\356\213\225\342\364\377\357\277\t\233K\273\3423\355? j\221\243\357$\354?\017\352d\241\204\366\357\277\0354\273\356\255H\357\277\300\273\246Q\222\377\357\277EO\343A\'B\347?\005\324\212%\233\341\355\277\305:\260w\332\365\357\277\3177\3754IG\353?ZZ6\010\255\346\315\277\226\312><\t4\333?NW\034sC\370\350?\367*\307\236\034)\347\277\2425P*+\027\356\277\204}\340\317\225\355\355\277\265\233*)\301,\320\277\t\'\026\266n\234\262?\026\004\207\376\246C\351?\030\266\301\344\241J\314\277J[\\\3433\031\356\277Ky\010>a\304\351?i\361\246~\205\234\226\277\2624\tA\273A\324\277\206L\236W\341{\340\277\024j<\3076\337\357\2776\344\237\031\304\007\351\277\276\223\005\002S\374\353\277\201Hu\360\002\233\357\277\325\217M\362#\376\357\277zs\023\020\356i\351\277j\341\r\304\r\223\357\277\252\001\224\320\247\337\356\277.;\202#\232c\335?\234\305\346>\224#\357\277\356\270<1F\377\357\277}\210\231\277:\265\357\277\273\354|\344{\353\357\277\201\212\221\302H\261\337?\2551\350\204\320\301\350?C\032xb\224\257\353\277\277\0218m!\243\350\277\347`h;\307\374\333\277\214e~^\206\331\354\277\305`\264}~\256\357\277\251\253LB3\331\357\277\353\326\276\302zJ\323?\017\t\204B\251B\356\277x8.\241\2124\306\277ME\317\322\272\262\354?5\305\322v\002P\350?\256\n\324b\360\260\355\277\360\324+~\266B\357?\274~\301n\3306\356\277\207p\006^\261\317\354\277\205\003!Y\300\004\354\277\031\332\245\262\315\262\355?\333Q\234\243\216\316\343\277c_W8\356\371\357\277\255\317(\237\026\352\347\277\264\261\022\363\254\344\354\277\226\246\367C\"\343\342\2772\024^\037)$\330\277\344\266\205\000C\203\355\277\267\244z\235\232\354\333\277\233\353n}\334\207\346?\324\230s\235\004\376\357\277\377PY\342;\220\327\277j\222i~F\363\344?%;6\002\361:\323?\255\364\240\301\"v\347\277\353\025\375>o\354\332\2774@X|\371S\345\277\274-\005b\341\375\357\277h\265\033\330\205\372\357\277\232v\367!\353\240\355?y,\307u\235\327\357\277\343-\374\205\303\367\357\277\255/u\004.\227\320\277fL\177\376\224\r\345\277\323\220e\177\250\215\326\277o\240\300;\371\364\357\277\035\331\350\336\273t\344\277\322\014\363/\223\362\357\277y\266?\376ox\352\277G\270=\377E)\323\277\370\357\260??\202\357\277\271\321[\227uZ\354\277<9\371\343\254\276\355\277\013\340\322\326-\347\357\277\200R\345b\251\301\324\277\250\374\020\300r\t\354?ZtW\033\010n\337\277\235\023\030>d\002\357\277nYt\241\250\302\357\277\274\200\362\322\250\333\341?Hf\273c-\025\322\277\320\3304B\201\257\356\277\266\202\246%V\306\327?5\221>R\351L\340?z\321h\274\276\240\336?\275\335y\177\017`\344\277\307\216\327\315\326\013\355\277\353Y\255\237@P\344\277=\024\201\301\240r\357\2777*\201\336e\260\357\277\267\3637\200\002\230\331\277m\310`AqR\352?\"*\340\340\003\242\355?\245\035\222\265\341\313\357\277g\\\335V\037\364\357\277t\"$\177\356\223\354?e\177\311[\350\251\321\277Y\357\303\203^\346\322\277)\237\324M\030\303\350?D\300\204~d\202\332\277~r\024 \n\246\351?~\345\377]\270\026\344\277\246\337t\201\201v\355\277\303\031\221b_\266\316\277\277\342_\272\377\376\336\277\233:\217\212\377\373\357\277\305\316o\363!C\356?\321f\346\023\303\237\355\277\270\372V\220\013\363\357\277\367\256A_z\033\354\277|\366\267_\231\322\354?\230\266\311\362\277&\342\277;}N\213\013Q\357\277\211\333x\342\377\017\341\277\346\023\303\037\217\n\340?\304\217\326\275\272\357\340?\211\317\235`\3775\344\277%\212\177\216E\211\335\277R\265\037!\261\372\357\277\210\325\304\247\245\236\353\277\026\007+\251n\211\353?\2459he\261C\356\277\323\344\030\177\221\206\314\277\367\316h\253\222\010\357\277\216\312\362\032`\013\356\277\315-\337\300\0055\356?\316\033\'\205yO\332\277\242$E\340\037A\355\277 \314\324\301M\310\346\277F\212\226vI\240\313?#\265\232\277S\262\352?jf-\005\244}\350\277X\201k8v\332\357\277\304!\033H\027[\342\277\250b\031\321,\377\350\277\365\224\346\240\225\345\357\277K}\325\241\005\316\347?\242\350\211\000\n\342\355?\240\372\007\221\014\371\354\277\n2\237\377`\030\323\277$\033YC\363\312\355\277j\t\350t\017\377\357\277\327\250$>\271\236\346\277\3274\255\034s\201\316\277\335X\365^!\370\357\277?\330\265\377\371\344\357\277\312\253\316\305:p\356\277\273\301\006\372\372\020\341\277Nq\250!\242\377\357\277\225\330\265\275\335\322\357\277jY\010\274\335\334\357\277\306\330\256uN\230\355\277\303\365\346?\275<\347\2771M\307R\332Q\353?\267n\030?l\215\350?2\243\'~\357\243\354?\026|\344 2\226\341\277\206\375C\2374\371\357\277\250\243\210\261\361E\344? g\365ip\366\357\277bT\255\340\022{\345\2773\017\252\036z|\354?\3330L\236\231\375\346\277;\t[\242i\337\343\277\022%)\002\377\310\325\277\376\373B~\354\204\354\277s\242\372Z\331\366\327\277h\026\262\004cN\347\277\277\225\221\037\226\022\357\277\210C6\220.v\352\277\343\345\351\\Q\n\347?8\006l \300\026\332\277\304\333{\237G\330\356\277\202\311\215\"k\355\355\277\257Q\305C\316\361\357\277\201v\250\"\354f\357\277\361\007\250\025Kv\354\277(\310|\376\203!\335\277\302}.d\277\370\351?\034d\314<=_\327\277\335\334\251\312\0109\356\277O\247\341\000\237d\355?\377l\232-\017\010\326\277;\353\t\001\257\205\356?\300\331\2349\332\347\350?\203\345!\266h\277\313\277\351rs\277}\\\352\277\312\210\013@\243\364\353\277Gi>\000\0148\337?\014#\275\250\335\257\354\277b->\005\300x\327\277Xh\214{\230b\330\277\320\353\364(\001\226\342\277\016\340%\037X\341\342?\376pF\203\312\356\355?e\326{\277\013Z\353?p\247c\204\246\333\350?N\006\354\0179\"\323\277z\000I\340(\\\345\277\241\216}\1779i\321\277\215\020y&\217\302\357\277\016\305\323\341\327>\357\277\225\'s\240E\376\357\2773VY\343\205W\324\277[M\215\206B\272\341\277\223G\242]\246\242\330\277\216\031n\341\365\220\356\277\236 V$\313\256\346\277\303\345\343\240\245\307\357\277/\202\214\241\030\020\357\277#z\204`v\253\347\277\215\243(\206\232W\351\277RG\307\325\310n\356?\002$\344\315+\250\356\277\223\350v@#\342\357\277\334\026\033\251\255\307\357\277\367L\233\026a\257\357\277\350\003U\345s\325\335\277\316A\310`b\377\357\277\260\345\225\353m\263\341\277\315?\372&M\303\357\277i\302Y\276\354\346\357\277>\345^\201dq\354\277\353Gy\234X\026\355\2772\021\333\202JA\354\277\340\014@\233\003!\325\277\264\303\004\332\302\230\346?\252x+d\021\267\314?=\226>tA}\357\277\223\006\267\265\205\347\355\277F|\'f\275X\353\277\350=\337`\271\357\321\277\232!v\"\230\265\355\2773\242\027b\263+\324?\331\302\230\231>\340\357\277\253\"\334dT\331\357\277\362\020!\tV\360\357\277C\240\247\277f\322\357\277\363+\347\234\351\257\353\277\010u\323^+\376\357\277\2068Z\376\021\340\357\277\321<\302aP\303\355\277\332\264\255\301V\304\351?3\223\003\321\356\253\357\277\376\210p\335\336\277\353\277:\241\306sl\363\342\277Y_\023\210\215(\343\277\013\265\t\244\202\022\335?u\322\014\363/\223\357\277\267\201\226\t\032\316\356?\371\262\376\340\215\366\346\277\n\230\310\036\004\021\357?\033\007$\202\355\327\353\277\331f\276\336X\353\347\277\254\364\177\2639\263\357\277j\030>\"\246\204\327\277\026]\315\360U!\347\277o\227\242\001a\314\315\277\230Uu\342\264\230\350?\363!f\376\352T\347?"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_contenttt\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\ttt\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_6"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_2"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_3"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_4"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_5"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_6"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_7"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_8"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 9
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\t\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3922322690486908
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3922322690486908
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_4444"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_4443"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_4514"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_4513"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_4583"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_4582"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_9"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_11"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_12"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_13"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_14"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_15"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_16"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_17"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "ExponentialDecay/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/initial_learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/logits/BiasAdd"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:9"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 9
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard"
  op: "If"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_false_4719"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_true_4718"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard/Identity"
  op: "Identity"
  input: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard"
  op: "If"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/labels"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_false_4744"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_true_4743"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Identity"
  op: "Identity"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/labels"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/AssertGuard/Identity"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims"
  op: "ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/losses/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 9
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 9
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 9
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp\\part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "global_step_cond_true_4274"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_4443"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_4444"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_4513"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_true_4743"
      input_arg {
        name: "identity_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_true_4718"
      input_arg {
        name: "identity_head_losses_check_label_range_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_losses_check_label_range_assert_less_equal_all"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_4514"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_4583"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_false_4744"
      input_arg {
        name: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_head_losses_labels"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Labels must be >= 0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x >= 0 did not hold element-wise:"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (head/losses/labels:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_head_losses_labels"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_4582"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_4275"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_false_4719"
      input_arg {
        name: "assert_head_losses_check_label_range_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_head_losses_labels"
        type: DT_INT64
      }
      input_arg {
        name: "assert_head_losses_check_label_range_const"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Labels must be <= n_classes - 1"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x <= y did not hold element-wise:"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (head/losses/labels:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (head/losses/check_label_range/Const:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_head_losses_check_label_range_assert_less_equal_all"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_head_losses_labels"
      input: "Assert/data_4:output:0"
      input: "assert_head_losses_check_label_range_const"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT64
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_head_losses_check_label_range_assert_less_equal_all"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}
