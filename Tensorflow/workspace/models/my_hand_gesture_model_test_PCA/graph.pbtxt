node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_15193"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_15192"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "rZ\244\253O\222\326?\016\361\003Or\353\361\277k\352\352\264\0239\301\277\315\006\257]\334\254\323\277L\273\006\030\005\244\365?\362L7\023\021_\356\277\300\367n9\362?\323?\332\025\314EU\316\363?\014\206r<j\361\363?\310i\nu\3135\372?\245\"\022\237\005 \363\277x\272\343\366\020\177\361\277|\233>i%\263\363\277\250o\342\232\262\306\373?\206\222\232:I\273\362\277\303>\327\313\3150\326?\347\016\230\030\351\201\313\277\200a\202/\305\264\364\277\030z\037\322K\224\302?\027|\031\t\223\370\300?\322Y\3255\364\214\321?\236\371)\026\303\001\355\277\353\234\023\215HQ\365\277\250\3109*\313\237\320\277\301\320\304\240\323^\355\277\245\333\216+\256X\360\277\234!F\256\217\t\366\277\024\215\310\305\320[\350\277}r\205\224&\027\362\277\332w\350\334[\034\322\277\032?B\376`o\301\277\316\225\372\263\001z\363\277\005\213\243\260\2552\342\277\277m\235T\034\"\356\277\334bqH\231;\361\277\320\330\002qU#\311\277\211\323\'\354\344+\343\277\346}\001\017\036\000\323\277x\355\023<a\261\352\277\344\357\027\214\375\245\365?\000\317 \017\352\226\361\277c\202\334\325\371j\314?\310\236[\251\327\375\321\277\247\t\303\003[\'\367\277\357UB\003\221\307\314?_\210l\251\223\216\332?\314\0362\243\255l\361\277\334\203S\321v\347\340?\225\333 \362$6\363\277Gx\227\212\200P\357\277=T\312Iz\311\362\277\230^\377KE \366\277\203k\351D\347\003\373?Yu\210T\367\324\313?g\00786\252\037\306?`\027\202\377\255\353\365?4\301u\257Z\260\371?\377\333o\325\024.\324?|\003\032t\206\217\311?\033S&\244\n\t\354\277\270%\177\267\276\311\364?\304C\316y\273>\355\277o\345\220\003\031\331\363\277\016<\322\366D\211\332?\354\215&\000\340\246\320\277\300\303\302\004g\350\355\277\350\353]5\000\335\267\277\000S\234y?\377\311?\201Y1>B\274\360\277\r\355\354\033\021\257\366?\232\004\021\221/\375\361\277R!\216\031j\026\327\277\241\3460\323\006\345\360\277\311\372\036\200g\303\325\277\267\243~F,\237\363?_t\204\351\261\252\371\277\227`\266G\347\037\320\277m\020\313q!s\362\277/F\302\350\344Y\260\277\365\210\264\203f\004\364?\343\277\315c\366\207\366\277r\377\325\261-\220\205?a\237\204\247\263\362\360\277\265\232!&\352\346\317?c\342\\\234\304k\357\277\203\327\343\221\370\367f\277ew\267B\023\327\336?\025\241\365\330U\354\364?\304\263\200\004\006/\363\277\030b\034\250\364\004\364\277\314er\341[?\332?\276X\325Q\357\270\363\277\344\340c\332\272?\366?\005\022C\031\345X\370?\251z\321D\210\373\370?\202\3707^55\356\277\332\\!\212\305F\364?\336\207\247\245\001\234\337\277\365\214\266Dr\300\335\277\312,m\007\\\250\277?\253\036\036\255{\005\370?\\p\351P1m\322?\\^\237NE\220\307\277\361ry.U\017\331?\3660\313g\227\310\362\277p\tPKUt\345\277q\010X0\223\220\363\277\376\223t4,\347\317?\224\022w\306\026\210\367?J\025}\231\252\347\326?m)bi\203M\316?\350\317\013\216\346\255\335?W\352\034\327^\341\363\277_\321\005SR\353\355\277\016\370.\240\226\005\363\277 \253\t\326.\215\355\277\367\341j\225\\q\364?\034\010\300\203\360\264\341\277|\245\343\364\251\213\305?\221+4~SN\357\277D\300DL{S\366?\361T\343\213\036w\265\277\207v&\313\305\376\323\277\020}\007\253\006\241\311\277\316\216fi\301Z\335?\301qm\025(\360\361\277]\321\221\260\345\311\356\277\261\tC\324_Z\362\277Oo\356:Vm\370?\210\341\371\001\302\264\370\277j\037\021\263\205\327\371?m:\004\004\362\206\237?A+\271\262C\277\321?=\260\212\2546\352\303?\037d\037Pm\252\364?\336\304\344[\254l\356\277\266i\352\260\364\372\352\277\324IN6\364\252\320?\311\203\025\265\236\242\352\277\315\271\253\003!\013\364?\203T\356J\351\311\351\277\013\230\377\267{\311\364\277\245r\367\370\321\234\316?\303\303_D\372,\362\277\213\010!\356\355\177\317?f\020\333\260\243\230\363\277\2445\342\334\266R\364\277\352]\306\201\364\366\360?\t)\246\234\230\340\360\277W\207\336R\304\345\322?\247o\340\256\035\256\363\277|\313h\231\260\261\360\277:\023\370\332:\351\275?\233v\245\026\005>\360\277\235u\357\244Pd\312?\364\027\346u\355G\265?\216\327\246$\030\361\362?\237\277\037\325\317\325\236\277\032\357J\306R\247\264?H\231>?J2\316\277\321\336\357\004\251T0?\225\364f\232\205(\353\277\2558,~\203E\365\277\013\200\343u\322\372\361\277;H\\\251\2157\364\277\357\271\261hM\000\304\277\371\356\224B:R\364\277.\365s\021\177\263\317?\222HM\244\323}\352\277\313O\346\325\266\001\264\277\275\324\3311^3\326?x@`\262\332o\321?\223\311\352\306^$\321?\001\250\\\271e\350\306\277A\2309\313\2166\314\277\201\006\372\202\336\376\363\277H*\352\335\r\207\304\277\260x\260`\304(\355\277b\034\265\026]\261\366?t\317\353\326\001V\363\277,\300\004o\333\257\367?\332-\247\376\344\237\241?\264\321\307\233\005\371\340?\262\025)\317\376\311\315?\3566>at\307\367?lN\026\230\351e\363\277$\r\016\t\340v\357\277\375?\320\003\331Y\304?}`\3525\200\276\334?+\274X4\006\245\364?8\203\317U\210\303\311?\330\252\'\207\235\356\344?\t\"\215c\321\210\321?\301\333\221.-t\331?\275\300T\273Bc\365\277\256\322nQ\235\314\257?\310\2031\340\234\020\315\277M\305\2762M\311\365?x\304\002P\021\035\370?\024?\225\177\034\353\363?\036N\2541\203\356\245\277\354\333\322{\037\364\350\277)\343T\347~\205\325?$\202HC\365\277\332?\226r\022#p^\316?\n\350\244^ue\360\277\332\213=q\000\224\317?\027\345\345\221\000\301\242\277\036\355\316\263\2627\332?\210Y\247O\321\025\361?\350\261\347e\361\347\320?\333t\231\030\013k\341?\330\330\303n\361_\355\277\036\331sv\321\353\362\277RuMQI\240\347\277_\210\005\237D\317\305\277\236\233\333\212e\255\363?\307\343Fo\327!\315?\2676\241\310\006\267\306\277-\033?\222]X\365\277k\021\207,\306\245\364?\376\361o\217`\334\331?\233\341<\037\372\034\366?\226<\252\002H\274\276\277\234\320\352\252-\035\370?bg\010\014\373\266\333?\277\347\244\315\365\353\364?\204\253L\355\211gz?0\020#\356\363\354\360\277Z\202\267\274\277\t\371?\275m\300\243K\264\305?\241\260\311\364\355y\327?\315\303\366\212s\010\363\277\000<c\t\224\350\265?\016\377m\007\367\213\363\277\323\266\3374U#\320?\265J\207\"L\337\357\2774\\\210T/\223\366?\256\36181\025|\372?\306\351\324\020\251\"\316?\340c\230\177\255\267\351\277i\352\314\304P*\323?/{,\370\244\231\310\277\020\221\265\236Yk\350\277\026Y\272Q\254\363\314\277\226\342K.\362\304\332\277w\251\376\301\376\267\362\277RLJa\221\303\304\277\342s\213\2505T\364\277 \004\343Tc\330\313?\351J\245X\227\337\366?\177\267\320&E\265\364?\017\212\\\367\264C\321?g\023\237\313\333\252\331?;;\t\241\\\231\364\277:M\205\276\342\016\305\277VP\222\n\350X\321\277<e\267\346#\n\372?\373\010\214\253\2033\353\277\272Z\005y\215F\305\277\205\250\322\372|R\363\277h1\375\014\t\247\331?\370;\350\362\345\220\335?3\241?g\037\033\266?\201\360_\303\3138\345\2773\237\371\300\032\330\266?8\353\3409\240p\306?]\371^>\256\233\271?\002O\256\224\372-\326?\346\257\212\234\250K\324?\321\363?\010 9\262?hSCc\027\246\301\277\031\010\230\376\217\350\340\277>b\325\264\353D\364?\324\275w\3333\226\365?\351&\313\017\340\346\344?\315\247\262\020\027\322\357\277eW?|/\242\273?0a\303\277\020\354\362\277\242$\300JO\247\307\277zH%\024\300\014\307?H\320\321<e\371\364?\254\023z\273:\350\362\277H\013\365 \002\267\360\277/R\010TR\035\330?\247Ws\027\021\302\306\277VU~^\313\013\303?\377\304\326\206F\035\360\277\323q \221\004c\341\277\251\353\273w\274_\304\277z\371\362\035\233\377\307?\355\227o\335GW\365?r\211\022\246R|\303\277\003\357\035\n\271\265\360\277V\365\343\373aH\323?4\227B\244\277\014\364\277\334\313\356T\007?\320?L\034\371\260X\t\271\277\204X\241\337\243T\364?8\216,&b{\362\277\350\257\023Ffj\327?9\313\220\320\211\357\315?N\264/\374*\242\320?+\022b\325E\336\332?p*\000c\255\310\337\277E6\0262\362\327\263\277a:u\256\205\374\357\277\3113\215\003\370\211\261\277\207\333\240<\200\317\360\277\354`\230\005\263R\366\277F+\277X\270\033\364?\250\362\000\300N\276\365?\377\232\362U\203T\370?\221\333\272B\347\352\372?J\341\321\006\004]\366?H\256\3245\334\273\323\277\374\337\303xv\351\357\277\361Po*RG\212?\237\370\363\373h\252\363\277\352\247\321}\'l\315\277@\000\317)\371c\270\277\n\267\306\316\255\354\365?\031\306\245\364PG\340?e\000\025f\033\243\363\277`liq\2605\364?.\227}\014<S\320?\n\310\n\367E\030\331?\007\252\241\353\343&\310?\320ur\252\252\315\324\2773\302\254[\036\005\320\277\333h\256\255\340\311\342?+[\356\310\360\256\364?Q\240+\267n\277\363\277\233\031\204SX\306\363\277\365\366\375\207!\262\362\277h\324\324\271Q\264\314\277\017\345\225\304\347J\270?\3777G\367\220\226\336?\025Q\216\014\303\232\330?\302\341A)Q\225\252\277\200\377\'\301yS\357\277\310u;\305\016\035\363\277\233\243\375\267Vn\362\277O;7\317[j\367\277\377\3512\356\342\352\313?;\231\254k\327\275\304?\337n\372\027l*\314?\036M-ih\260\344?\252Hs?Y\326\367?T(C6\361W\341\277g\3158\032\333H\302?\360 \205C\2567\302\277\346\271,\374\263\026\362?mIfU8\364\363?\2564\274[C\276\312?\032\305\212\207\006\323\361\277\240\327\014\325\227\366\353\277\352\356B\275\372\271\240\277;\210\317\367\261\215\235\277\027\2744\230\300\300\331?\366\230&!\276\231\374\2775\220\205\226=\245\363?E\367\303\031\277\345\360\277\2577\237/\001\222\366?rJy\317\252r\322\277t\236NW\262\\\321?\237$\226\374E6\327?\010$\3254Y\025\326\277\361/\323\246S\200\305\277\'\200*\302\343\360\315?\343\014\205R\310*\342?o\314\242\221\362\276\340\277\277\024\027m\200\000\355\277\r\366\036D\251=\370?\351\330\221\t\023\020\310?\334^\310hB\260\311?W\272\262\354P}\275\277BX\367\307:\350\362\277\275\2245\237\257\253\345\277eu\302\227\r=\312\277\307\257pH\266_\365\277\252p\0223\273\217\306\277\002\3265\213\275\370\343?=\000\037q\017f\314?\355\247=\372J6\276?pT\205R\260\275\260?\2371;$\3375\355\277\377/\364l4n\362\277\350o\323\024ru\361\277\003\'\322\202Q\375\365?\251s\242\\\253\004\353?\r$\217\227\221?\344\277\302\326\023\336U\"\327\277\340T\271\254\024\267\364\277\240{\022O\204\361\302\277~7\000\274\275\304\370?\227\366\271VW\203\244\277\022\331\021\217u6\365?\330\002\231\305\3671\325?\243\3106B\034/\340?\303\273\212\360\232\206\311?\242\033\355^\2556\361\277VVr\355\223\241\305?\355u\"\303\265=\363?j\3157ugI\324\277\366\237\235v\023Z\260?a\243\332B3\026\343?{\243+62d\365?\324\364\230\257\3553\257?\322\221\244\231\304\227\336?\253\240t\213\270U\314?\365Gw\277\356\210\341?\364\\\261\346H&\361\277\336G\264\231\001^\336\277\332\244\017\023:\255\364?Dy\327\377=j\305\277^\033\234\000\014\317\365?\010\031&\205\213n\316?40i\336[\221\257\277uy\220\037\016\252\321\277\353\022\254\233B_\362?\032\210v\2024-\332?\351\220\242\337\221\376\362?\264\340\270t!\377\223\277\003\nU%5\205\362?\241P\033\312\224\342\356\277\342\235\260\372\021k\373?\325\230P\306\264\\\367?>\031G=\242\216\260\277\260L\344d.\224\363?\372\"%\020\317D\346\2774\034\255\340\325l\353\277^\267\257l\024\023\367?\266<\000\242\224\231\323?\026\236T\261\031\355\307?>\244Z\251\362\222\316?\320e\236\254<\365\360\277#2\251\245e*\315?L\037\240\207\302)\324?\tt\344O&\274\366?\010=)M\"W\363\277\243\013\220\232\0147\355\277u\315\313\017\301\341\362?\274LMQV\355\367?\222Ro\3138\316\361\277=\210\375\365\024d\324\277BM\252\347\204\351\367?\020}\\\311\206\356\335?\276\010\006\310\360\303\315\277\024\346\345a\333\005\362\277\014\264\274\273\250\361\303\277\241y\252\240\016\257\325?d;\010\007\215\244\320?\n\313z\223)\350\364\277\242}\276GF9\320?\220i:\362\261\360\363?\'\217\300-\000_\321?\031 \202M!\025\312\277\024g\330v\022\200\336?\214FF\265\003\312\362?c f\362\354X\314?\034\342I\234\317\232\374?\\\003\n:\230\037\352\277ke\253\365\320\276\363?\034\331(\336t\225\335?r\222\266\242\000\227\315?\317w\333\267\335\210\365?\r4\242O/\034\342?M\004~\353\372j\366?G\346\343\206\360\217\364\277\242\311Z\214\363;\347\277\212T\377\210\311x\321\277ZJ\267u\240\377\361\277g\327\211\264\322\336\331?4 \367F-\364\361\277\254\326\367\311\341\370\366\277\301.F\252\021v\320?5\2239u\206*\317?v\006\277}\362\022\374?\231\226,\245\242\337\362\277\263\213`!n.\327\277r(k\322\221N\327?\013\025\274\031WU\360\277\243W\002\031\250@\321?\3335p\032zP\355\277nw3\346i\357\362\277\036\030\030\217\346\222\302\277Ii\274F\330\275\325?\020\343\257Ta/\304\277\375\200\232\305\332;\330?\336\201A\206\226o\335?i\257\255\022\3033\364\277&&3\245QA\354\277d\246\177V\204~\321?i\327\3640&k\363\277\3777o\276\211M\347\277\226LIiT\311\316\277\030\002g\354nW\314\277\261\004\222\371#O\362?b\341\013U\200\303\371?\211\327\243~2\r\316\277\035N-\373\n\200\334?\252\241M\332\021k\365?\026\343~\373\342}\314?\230\302\206\230}j\366?\034\236M\375\324H\322\277r-L\024\245\274\355\277c\320o\247R\001\340?\034\324\307\002l\324\367?\210\251\024\207x,\307?4\332\200\020\003\221\370?(\'\330\205\024K\362\277I\241R\334A\241\363\277B*\031\030Ad\301\277\003\342\264\210\361\341\363?\335)\365!\222\307\347\277\221\335#\014c\217\255\277\356\362a\2722\262\225?b\025Dg@\016\364?\026\372\202\005p\276\364\277\253l\267\013s\256\314\277\014\366\267*\005\n\321?\344\376\243D^\021\364\277\340\204u+\005\245\363\277N\261wm\303\246\374?\340\266\263\314\037^\354\277m-q\235N\177\333?\275\323l[,y\327?\345\237\023I\225R\365?\272}L\221\271\'\362\277\333]9\371\316C\337\277\327N\200\366\325\207\320?,\201\360\211\021\324\267\277\373a\324\350\024\370\320\277\366\275 \366\354}\227?\013\250\237#\371(\343?rd\\\333\r\216\364?~\252\021\306\000?\337?\372T\276g\227\240\363\277\242318\342t\320?}\302\341\364E-\311\277ba\204\017\221N\363\277.^\021\200\212\031\356\277Y\313\205\375a\274\362?\351\007c\241-\212\353\277zy|\032\336\037\362?.\203\310\254\266b\323?0\017\301E\007A\320?2{\200\237ep\361\277q\'t\002\355E\370?\317\202\340\036\311\024\330?6D3\003\320!\331?y\315\253\202e\277\301\277\311\352\027\371c\302\314\277\31424\367\372M\367?\2313\217\367a\t\304\277\267u\200\020\330Y\303?T\006oSb8\330?\236\3029K\327\253\322?\013\365\210nS@\322\277\250\370\256\005\r\314\333?\301\t{\002\027\237\371?\377d\254y\312e\367?~\304\365bcA\330\277\345\244\352{\250\374\361\277\310\035\314\342;\033\327\277\241\344\244\265i{\317?\252\272 *n>\366?\2238\275Xq:\361\277\272\3537\266\326\325\330?\340Y\227\004Y\300\323?\302\006\3757\000*\357\277sO6\317XO\356\277G\362\236\374\267\017\356\277\357\037H\211\203\265\354\277/\022M\235n\214\251\277\217\372\321g\240S\346?`\2178\353?\245\321\277\266\000W\363\322\317\367?$\363\200 \220\250\343?\303\354\017PR\335\363\277W\213B\034\226\203\363\277%\002\332y%\301\361?\335f\260\205\006\030\320?\0103\305\364\324\202\362\277s\033\2018[\322\330?\301\016\201eu=\326?\256\230:\233\024\204\363\277\260$^*\241c\342?\273\215\311\245n\237\363\277\375d\273T\335\377\217\277\023\231s\320\350\031\322?\0166\335\304}\347\333?\3275x\315=I\341\277\222-\304<g,\277?J\021\325hw\027\361\277<\362\341\307\255,\302?\343z\346\240\364\304\367?M\355\243\276\025\346\305\277\233\255)S\377e\363\277\300+7w{k\341\277qu\242\025- \312\277\212\003\215\226\203\202\340\277\314\257\231\001\034\316\360\277\226L\016}\177~\356\277`\364\317\351\257\366\261\277U\246B\244\232a\361?\370f\027\240\365\351\261?\223\232\016\342T.\362?\276\033\252\363\321(\350\277\020Ph\001\265\207\306?@\215\025\336:\256\346\277\222O\366\307\233\037\324?\302A\323\206]E\220\277\331nt7\n\251\362\277Q S\276\303y\361?0\234\007\353\230\243\341\277\311\0373\241/N\253\2772\216U\311{\225\351\277#\216\201HhS\360\2776pK\336.g\266\277\254\272\'\2208\334\366?l1\177\217\236\331\355?1\003i\032\003\021\363?u\333\244p2\300\366?3A\245\2443\021\363\277\'\001\203>2\022\363\277LDc\377 \013\302?\277\307_*\354\252\327?\264x\2227\001N\226\277\021\035R\201\355\305\314?\202`k\371\375\317\365?~\224et\335e\334?\205ja\244\2137\266?\271\007E\340\315I\260?\033\341\212\305\210=\225?\250\220[-\246\372\343\277\317\233z\217#6\305?2\353H\277\233\352\363?\302\235\361\353S\362\365?\373\367m3\303,\246\2772.+\376C\222\206\277\016\364IUX%\367\277\272 gZ\313\037\352\277L\214\305Eb\272\362\277\373\356\023\363%G\363?\315^\033\235gq\277?v\036\273\363w\271\362\277\262a\374;QP\373?\034\325_\206\007{\261\277\311\343\243Y\225\337\363\277\304TqJs\350\363?\212\244L\337\270\365\205?\035\324:z\235\327\355\2770\233\370Oy\000\372?3\357\344l\304h\331?)\320\210\240\241\302\206\277\361iNU0\361\277?\014U\277 \221c\302?\017\373P\347\254\036\363\277P\237\017Ja$\331?d\014\377vBv\306?\0202R(\021\373\322?\244\033\377\036>\277\320?\337s \346\376P\367?\243\313\361K9.\343?\003I\372\243\027\346\335?Qdf$\276\226\365\2772\000bt\t\215\311\277:a\230\025\366\334\320?b\202\001\235\031n\363\277\333\"?P\356G\327?s3y\277\027\232\365\277c\005\304\274\256\261\363\277\341\017\022\241\3433\312?\3774&f\004\201\243?\351[X\005T!\302\277Bw\351\363b\330\333\2777\365#\303Gj\352?\200\222\227(m&\331?\241\036\332\366\340\031\322?\327\217\255\177\325\263\363?\376uvH\362\201\355\277\2556\361\236\244\260\363\277\257\"m\213\352\325\361\277\215\204)J\360\373\363\277\315\275~\304\324\224\204?\265\347\332\374\321!u\2775\371\276\201\300\243\326?\346\003\r\372\313\315\307?E\307\3213\203\275\366?\222\245\341D\202\271\366?u\006\345h\334\237\333?\222\343\223\\\031>\340\277\307\375\220\353\251\226\241?\207\026s\237b\311\323\277\331\000\350\330\301\330\301\277\223)\007\312\235\270\316?\342\304\324\313BT\364?R\272\243\217\270\221\250\277D\310LIS\373\374?\216EA\rhu\363\277?\310\204\375%\321\201?\230S\321\276\277\313\313?\3173\256tz\236\365?\335\017k\206@\237\231?Osde\242\r\205\277p\327k\246\355\357\273?\342\014\203G\372\320\237?\332#\240\352\330\236\366?y\312\347(\326\372\365?Cx\235\217V\374\266?\032\274\313\323\256\226\343\277\017\222\001\000CL\206\277x\250\273<0\315\337?~\343\256y!\213\364\277\320h\373\023\221\333\357\277\371\2214\236\272\347\340?\300\2509\003jz\337?\347\376\025(\301r\323\277h\254\n\272\276\215\324?\036H\376\361p\303\323\277\017\0312\'\210\316\362\277\226\201\335(\335G\303\2775\334j\276\325\310\362?\307\230\264\037\364\214\246?h\306\264f\233\253\365?\216\207\242\210<\t\330\277N\240.s\343\305\364?\342x\203%j\016\305?u\332\021\036\352Z\304?\2114\027\233\004y\361\277\222?\r\201X\007\367?P\223\213\030\217O\303?\325\344\202\350\341R\320?\205O\203\331\321G\357?\203\363T(;>\356\277y|g\350\373\342\371?\r\027_\"\253D\362\277tO\332\257n\273\363?\232\2078jEE\362\277\211\033j8Q\225\362?\226d\243\207:\343\363?\210q\252\302\227\341\366?y\277\362\274O\003\322\277\0228\010\307\320\250\312\277\304\264\214p\037\034\320?a\262\031\362%\322\362\277\360\247B\007\325\371\335\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "|\370j\334\005\236\362?\2465}\026\362=\340?\317 \021}\203t\341\277 \352\363 \000\373\350\277\242\301\\T\357\225\312?\023]\033x\246k\343?EISA)\276\342\277:A\273!;u\341?\027W\216d-\234\340?z5\220\030\017\277\330?\372\325\331\244\2143\332?\271/\335\356\311\025\341?c\017\\\327\310\006\321?\230\374\312\370g\212\323?\336\316*:\007W\345?v\271:K\265\245\354\277\250\224\010\234#B\347?\3354\000#\266\020\337?l\213\262\370jx\357?\334\240U\002<\306\353\277\366\021K\357\252\355\357\277\213\333\201B\\&\322?8\035\346j\364\341\343?c\303Zr=\200\353\277\\v=,\373Q\325?A\3421\204\0375\304?t\201\021\372*\322\342?\231\342\\\327\"\316\352\277\352\345s\374U\250\341?\014\330\027\211\321\331\344\277p\321b\332\177\004\347\277.\377\276\261\340\202\337?\344\320=\001\371\204\350\277me\341\357\027S\304?\205U\033\345\314\305\337?\026\273\221\3751\265\343\277\276k\213\363\231\277\323\277\271\301\301\261\252\343\350\277\220\365Bq\340*\350?J\364\222\027j\213\307?A>\331-\305\020\344?(\337B\000\037\257\356\277\324\356r\246\373?\346\277\005\263\242\217\n\272\333?6\356i\306\232?\353\277\0106\010\303i\242\360?\227#\353\0212\372\334?(=\010\3556u\304\277\306\020\3148\355+\342?3\267\005\027\250\035\345?\277\265\347Jbk\352?;A\347V\310\'\271\277h\357\241\013\353\256\327?\255K?\221\006\202\361\277\353\020\352\010\257\251\357\277\220\274\235\302\021\345\340?\232MHO\303\223\320?)\251\372\213\226\236\362?\313\003\243\001\342\245\361\277\256bQ\016\362\263\327?\324\213\\\016 \336\336?\375\304\322\231\237\334\313?\217\376\255\265\312u\343?\330QgLs\212\362?\234\013U\327\006\264\337\2776\021\334ys\271\336?8\n\"\352\t\270\340\277\341\001\306Z!\213\356\277\275*\0370\275\301\345?\'\031\r\341\264\r\310?\263\t\272=\n\320\342?\211\320\316\372\035N\354\277\250\261\3071\216!\343?\345\222\250\374Dq\353\277\202\201u\323Xj\340?\326\266\315\225\247\306\323?\340\230B\377\200|\343\277?h\237Z\3208\341?\314\352-\355\324\213\342\277\374\316\365E\354\356\340?si\204\022;3\340?\301\350\037\340\211\313\343\277(\033\374\026*\352\346?w\3674q%\022\356\277\3644 \272\257H\343?&\322\367\312\006\375\341\277\223j\024\226+\336\360?\241h\342\214ey\300?\021\"\355]x\"\340?p_\314\225@P\343?\332{\220.9\'\353\277+\031{\345\240\312\335?\376\333\242p\034F\242?n\243H\316eE\343?J\254\207\2259\272\330?!\252\030\254\247\000\274?;\345]\003\315]\346??\000\020.\316\343\346\277#\232NHP\376\346\277PO-\005\365\026\323\277)\010\317\315\324\356\331?\003\001\365\243ix\360\277\271X\333f\\\363\324\277\235%\202\020\254\273\362?\024\314p\3403\315\343?Y\210\221\231\'\346\334\277kK>\024\341\275\335?\267Y\321m\316Q\355\277S\345W\234\270i\226?F\003\217?\257U\361?v?\0304\3059\360\277\332\206i\322n\345\362?\254\r\0277\305\267\343?Z\330\010\306>\307\302?:\364\032\242B\307\340?\350;i\375C\304\330?\314JZ?\332\306\343?\014\251\246\254<\357\357\277\313\035\037\352r6\355\277\243\017\314\301\"\013\334?\221\206\274M\017I\312?\341\230yF\316\006\345\277my4w&%\321\277\004\305\027s\240n\340\277\274;\353\177\324\003\363?\342\345\337zIr\331?\310\373\004\264\245\311\244\277>\232\203\245Y\230\340?\207\373\210d\363:\317?\031m\016\351\312\354\306?\177\253\200\030\301=\331?\200\021)\252\200\222\335\277\216i\372\340\201\331\360?j\326\3067~i\350\277!+\323y\331\337\343?\355\244%F>i\301?\321l\3274\024\325\247\277YD\371\363\027%\357\277\314<\265\370\364\242\344?\260*A;l-\231?\344{.\350\036\337\343?\215\261yokN\343?+Qp\2027\221\360\277\254\211\001\316\3572\342?p\267\377\263\323\354\353\277G\272<\260\367t\335?p\256\'I\374\256\340?\020\027\\X\260g\320\277WT)(\265U\352?U\370\344(\361\r\357\277\023@\005\323\017J\310?T\010=V7?\343?\032\316\222\226\025\351\354\277\026\356\264\305V\204\342?\003\212\004\025\000]\355\277%\342Z\352\026[\361\277\241\270\322\251f\312\344?R\253w\377\334w\345\277[$\363\'=\324\361\277j\253N\324I\211\347\277\207\327\032BO\356\344\277\0319Pr7\010\346?\263\355Q\223v\020\310?C\340\241*\371E\345?\200\324\316\251\345\001\313?\313\354\350wB\315\344\277:\347E\031)X\304\277\300\215\266[\331\211\357\277\247\212\003q3V\214?\251\252\311#\010\237\347\277\326\325\341\317\034r\361?\027\337QWK\321\355\277\262\026\230(\305\234\354\277\036CK\216\233\256\346\277\267%\030\317x\223\350\277\3529a\231\276y\345?\026\307\231\256\034\371\337\277&\305\331\316\337\203\337\277\023;q\233s\222\311?@&\312\243\357$\325?\022R\036\002\267\301\335?\017\2145n@^\343\277X?G\361r\033\364?\341\230\261&\331\017\345\277\r\262\005\000\217\361\305?\236\257E\023\002\220\336?\032\214*\215P\322\301?\222\362a^]i\361\277K\244\351[\020<\362?\005\027a\246t\366\275?\215.\350A?\021\352\277\202pB4\024\211\346?D?\370\017\247=\355\277\177\217\014T\276\220\345\277\037?\351\334\222\321\315?\342\207\000\277[A\337\277\262bM\340\327E\351\277\372\034nXb@\311?\251\320\230\355\365]\314?\257\212\037{\323\010\350?\034\031Q\374))\340\277\375b\032\304\340\030\350\277\003V\315\311 W\362?\211\260\031*\301\r\345\277\275\335\3036\315i\360\277Tb!\3557\377\307?|\247\252 \r!\327\277-\351\271\221\224\243\351\277&\202\347c\330\361\337\277c(u\367]\232\344?\253.H\322\247M\356\277\227\013\213\366\225\216\362?\031\036\213\300\374\t\320?8\336A\315\355\224\342?9\354\272\033\361^\350\277\016\366 \312\001\210\337\277\274\005\214\007`?\340?\211E\247k8(\271\277\261\3515{\305\251\350\277\307;\256\221kE\343?4\037/x\225\243\345? \372\007\'\355\r\324\277\377\246\260\205!\026\315?\315\306\024\000\356j\341\277\310X\250\224\3549\304?\321\334\261\350\265N\362?@\371\324\346\271\355\343?#\007A\360m\250\331\277\000\000zU\2163\343?\233\343\367\354\334\270\332?\014]q\270Y\006\361?\257[^\257\363t\346\277\373*\037}v\232\343?y9\230!\030\251\370?t*\341x\242!\341?\333\366\004\267L\017\312\277\335,\275H\'A\337?\366\002\321\371DE\240?\217\'.}z\352\326?\223C\225+[p\356\277V#\374#\345s\342?h[\356\372\004\233\353\277\017\334\3541\371\212\350\277\314\250\327\023$\316\350\277i\030)r\245\'\342\277\261/c\334\215\313\352\277R\372\003\001\320\177\326?\025\303S8\223\331\344\277a\023\0307D\264\341?\273\202\n\306\227u\361?A>\344*DL\302?8\370=B+j\273?\0130\251q\200\227\355\277\330\027W\240\3662\352\277\001\364\323\252\270\306\332??\361\260^\206\035\337\277\334\361\203\340\226\306\351\277\370\203\353\333\000\021\303?d\ro56\331\351\277BY4kY\306\345\277\364\326\024:u\212\342?,\237\010<\034M\362?\260]\317+\357\214\362?\301\3255\223h\375\301\277p\353d/\024\177\320?\373v\307\212\031N\360?IBxk\022\212\353\277\362\253\375\220\004\225\330\2778\002\\\321)\'\352\277\274\206N&\235\221\362?\212\235\347\330\215q\345\277(\031\215\006\346\301\344\277\351~.\037\354\241\324\277.6\213\303y\201\254?\353&v\031qy\336?\354\262]\251\217R\357?Y\035\025\314\020\000\345\277\327Ql\334E7\355\277\252I\300\371S\022\344?V$\004{\263y\343\277\253\003\311C%\235\360\277\021\024\200s\210\350\274?u&\226\324\344\203\337?\301\203\204\250\334\366\341?\2401\215\271\226\263\361?\207LV:\227\241\306\277\200,m\034\370B\361\277b\306\001\340\016H\345?\257608k]\340\277\020]\036\342w\\\350\277\220Y\20142\\\361?\204w>|*\304\301?\377\316\026\3475\017\326\277\340\315S!\2468\325?\223\335\223\254\324\323\347\277x;\262\035\265\364\342?i\235\223z\350\'\357\277\026\247$\037D\214\366\277a!-k\034\354\344?Z\333G\233\216\211\342?\253\366d\036\235\"\346\277<X\352\033p\025\360\277\024\003\272\327 \022\353\277LC\300\231\266\272\362?\253\230\253.\374\030\323\277\224\305\256.E\327\343\277Y\356\337\3407\311\342?S`0\215\304C\345\277P\360\222?&\231\345?%\236z\004\262g\340?\356\251\020\032\023\033\305?\366@\241\255\354>\305?eS\276S\351\325\307?\034I%\230\331z\325?#\357~`s\345\310?+>=\030\234j\352\277\334?BX#\n\343\277!\231\237|W\037\354\277\022\326\272\217L\020\322?\273\227m\3521\'\341\277\210\370\377\224\001\317\341\277J\307K\021x\030\306?k~\207A\302\265\327\277/:2\231\r\371\340?\251\323\212\'\301\264\344?\360\366 R\332\257\356\277(}\321\326={\363?\036\225\026v\230U\361\277#\261C\315\n\223\353\277\357\301fw\243\255\313\277\007\037\365,]\306\367?W\316\201\220\276\343\313?z\276\366\276\031\371\350?\222\025\256\r\3216\322?qpX,\323\204\341?@\201h\335\221\313\337?\241\256\001\275J\004\341\277\252\235\372\335\341\265\362?\377(\305\020\034\277\362?\211\257\276.a\264\344\277\234D\\Y`\333\343?\306\002\334Ldd\334?\002\313\300pA\330\347?c\356yo\353O\327?\225<\353\330\230<\357\277^\363\266\265-?\365\277\003B\302\030,\275\356\277+y\346\324gd\320\277\256n\311\326L\272\304?e\217qok\305\326\277\220\316.\014\346)\360\277\006\200\036\236C\\\331\277\005\315\343\306\336Z\341?\315%{#e\216\336?D\t\0138n~\355\277\2561\000?\005\026\345?\247,\232L\323\216\345?\256\360A\352~2\362\277]\336\233\0008\320\341\277\335OK\0067\037\363?M\316z\221\300\t\321?29\177\224/\003\342?f~\010\002lB\337?m\024Ls\026\302\337?\014\315 \353\255*\351\277\254\373b\"x\321\352\277\014Lj\223\330\315\351\277\261\224\016\320N\245\262?\304\261\260iC#\347\2779@\230uS\036\361\277\370\312\260R\342M\362?\251R7t .\327\277D\364!\373\227\205\314?x\266\375\367\343\215\315?2u&3\rT\360\277\300\031\n\037\2525\354\277\014\326Ze\327\315\333\277/\260\305j\017\"\342?\331:\265E\001\350\321\277\324s\310\204\220}\342\277\257\202\203G\254\363\302?\0064s\362\260\177\324\277\353K.&b`\355?-+o\233\314\256\357\277))\363\215\265k\361\277j&\205#\257\264\340\277\366\240\236|\353*\327?A\026\2140\322\242\343?X\377\335)1~\333?D\322X?O\000\311?\324\243Ef\337\363\260?E\3270\353\n|\332\277\312\023\372>\213@\320\277I\214\001\334\0162\345?E\360\261R\335(\346\277\316@$AJ\200\314?\232\236`{l\016\346\277\370\'\375^\210\210\271?\333\244[\244\242\235\362?\022IC\334 \037\361?)\315\002\005\r\373\351\277vOY\204c\317\340?\201\346\3318\304\007\354?\370}:\300\355\227\344?}\320\347\361\256\303\355\277b\266\000\276$J\357\277\261\033\324^?\226\315\277\370\n\n~\244\315\306?\212\303>\005a\362\305\277\316\204\211_]\312\362?\360\300N\000_\206\351\277[Z\001En\006\337\277\347d\340k\203R\343\277~0\340\204\275D\337\277u\237\026\005\034:\310?(e\366z\305\206\263?*.\267\314Y\222\307?uyYd\006\232\362?\275u\005\376\272 \347\277\254e\264\033\355m\345\277_\251\336\275\374\332\347?\\\237\230;\023m\362?\t\356\271\001\204R\350?\003\260\037<\007\013\344\277~\335\210-\251\213\352?g\307\325\254\177\207\341?\242Iz1\250\243\321?8\343\220\346\177\274\316?\255\344\204\002[\360\332\277VG\322\336\231*\344?o~\263(t\010\346\277\2510\342\202\343\002\342\277?\256;mR\035\305?\226\255\022\331\r\271\362?oK\211\314\022\366\356?\021\003\231\202\306\343\361\277\302&\261\r\005\323\344?\342\025\276\277S\037\364\277\007\346(\023\243\234\353\277n\2614\016)1\314?\201v?\270\0221\330?\222U\352\273J*\332?<\003\253A6\021\342?\337E~m\311_\320?\205*S\326\316\365\342??\261\236o3S\355\277\304\217N\371\321\000\313?\373\326V\376\371C\362?\300(\271\352\324=\350\277\200l\344+I\"\347?\330\307\031\0208\302\346\277\320)5\316\010\024\350\277<\361\2225[0\361?\t\362\311ZU\217\340?U\351\370\030\242d\360\277\360\333y\216=l\340?\376\263\354#.*\356\277\225\001\334\002vx\336\277\246\021;\332\231}\332\277Cfe\304\210&\343?N|Q\250\265W\357\277\010\210}\336\037\334\353?\220;T\013s\200\326?<k\333\344\264\302\321?E\'\207\214\322a\364?2\201\t\207Y\363\351\277\214(\324Vk\372\330?\215\263\224\007\360\205\362?/F\375h\225\304\351?\314\377\301G\001\222\342?\220\370\277\032\316B\350\277_\275\030N\333\355\361\277\237\333[8{+\343?@\306\n\265\215\032\357\277\321\221\240!\254\306\342?\324e\361\023\257\360\331?:O\242K\315\333\356\277\320q \313\354\340\351\277D\345[\367\333\310\333?\335=\311\301F\267\341?n\223`\313\247\020\355\277\324\311\'\365\355\271\357\277\220\2157C\265\317\336?-&\306\331{\203\361?2\332O\362\267P\330?WF3\330\236\304\344?\313&\345\334\n0\325\277\312oaI\274\177\342\277,\355\355`\013*\343\277\352\221\344\236\310r\362?\331\235Jeo\216\363?PO\223  =\324?=\372p\001\2104\355\277o\005\"\231\231\035\355\277.\355|\242\311\243\337?\375\307\030D4\013\360\277\323N\254\2151\r\347\2778\346:\243\334\022\331\277\026\274_2HS\320?H\274\253\365\231\345\323?\"o\362\222\344Y\347\277B\260\2066\236\341\345\277i\345+\231@\350\305?\3136\341\320\300\325\273\277\261w\212\314\243\340\322?\235\277\332+\366a\351\277\005=\356\302\227\272\303?\335x\363\030l_\345\277\341\373\342\376\007\311\306?\272\r\250\214\222{\360\277a0\216\004\"\255\310?\030\236\344\026R\001\323?\237\323~\352\205>\340?\022\320R\023\236o\345\277\256\206D\351\345\266\343?\321\337\033$u\354\351\277kny\205\266\034\352\277\212\302\343\304m\006\363\277Z}\034\2672c\343?\326\377\326\340\237\314\254?f\370g^\247i\341\277X\262\373\220\336\205\362?\271y\304j\260\034\333?\327\016~\347\3716\341?(\236\367\002\'\267\321?\346 \254z\350f\347?N\356\243\023\204\337\342\277\305J\205\035~X\342\277\316\003\333\010\013\251\342?\034\314\201\307\035\306\345?*\263e\3572n\336\277\370\260(\311\257\360\356\277k\205\321fja\347\277\343\314\214\346\3460\355\277\245U\307\352\270.\333\277\"\\:\200\026\246\362?\014n8\021 \321\336?\366\323D\370\271_\362?\352\237\016\317\022p\337?\242\031 \'L\234\354\277St\351\320;,\333\2773\245\217\034JI\337?\246O\356F\335\352\271?\214\010\374!\331\325\344?\303w\262\032\332z\344\277 \013\272\020>\254\347?\010F\006\300\000\"\347\277\035\314Y}\211l\357\277\254\326\302\"u\244\344?u\\)\317D\337\305?\340*\344\2071\344\350\277\307\250S@yZ\362?j\"1\270\216\337\334\277u\272\256\034~\341\327\277\341\334\345\346\207\223\303?\244OdH\270\322\335\277\205{\237e8A\360\277\20143\026U\306\344\277d\265\034\3467\241\361?I[c\237\305w\346\277\025$\313^\0060\341\277\034\023\017 \023E\344?A\361:\303\313\004\311?\257\031\231<\336\252\350\277-\224;\256\027\214\344?\257\251j$\004S\332\277\214\203\324\340D1\356\277a\302\\N*x\313?\243r\305\212\236\220\325?:\252<\235\014\212\361?\331|A\363/k\352\277%\334,\354\244\223\233?\215\245\342t\n\316\312?-\226\030\016}\323\303?,\035\022I\202S\341\277\372(\222\343\321`\357\277\243&\373\335\226\244\334?[\250\301\010\364\023\350\277$\037\211vo\005\317?)\250\027\031\377\221\362?\237\3235@\006\\\321?\370@\273x\343s\343?\230e\337\255\373\212\335?&\035\202?\320\206\357\277(\342\001\200\307h\343?\202\017\223}`e\362?L;\320\352\203\217\361?\243\376$\2715\215\334?\306\026\363\300yq\363?\302\021\361~\3744\337?\272#e:\375\305\340\277\234\317c\251\032/\341\277\344\324<;Y\262\362?xvp\351e\327\331\277\345E\242\001 \342\360\277\251o.\341\366\030\345?-ZJI<l\357\277I\331\037\235k\027\314?\020\306\302\177\204a\343\277v\037\215\354\220)\343?\225\237\365\317\307\216\326\277\241\004\r*\255\276\346\277\310\204\374\376!\021\327\277\240\217\317{yj\324?\377\320M\312y\320\324?`\220\t\006\251\345\342\277\340\347a2\316\233\364?\2177\377X\006\201\361\277\306\255\352\302\262y\345?u\234,O0L\346?\326\366\276hKO\354\277r\234<\200,\246\321\277\246\264\207\"O\344\350\277\202\226\265N\205\031\361\277Z\326\252/\250U\333?\305F((\305\213\352?Q\247\267=f-\347\277\331\'\246\321\310\372\344\277#\001\303\353\331\314\267?>g\326\226\235:\341?.0sN_(\343\277a\374\361\352aa\302?\306\257\t\304\357\345\346?\006\355\346\r+v\343?\374{\206\357\320\223\310?\356X\267\355\311\211\337?\223\245\267\303+\237\343?\361O\257\024\034\033\356\277\030\027\243\251\213N\362?\3318:)\344\267\351\277;1c\244]:\355\277\004\324?\200\257\344\343?\232\323\342\3749n\363?-\370\000\334\315\304\361\277\372\370\305\303\354i\362\277\262\010\025\226\361K\344\277\352\037\342\236\210Y\352\277\225L\320\370\256\366\360\277m\347_\357\2266\253?LK\317\254\317X\334?k\t\232\247\270\330\360\277H\225\377\026\367R\345\277\020\376\345\2605L\252?Dzs\377\221|\345?\237+\224\271\227\316\341?\203\342\010\247\n\313\346?\340\'1\376\367|\360\277)\312\351\225\310\255\304?/n\223r.\322\344?\261v\313(s\364\346\277\333,pC\251\266\342?\016\342\354\311$\252\344?`9\247\"&U\313\277\2027\354S[\331\347\277\001\243\277\326&\245\340?Y3\\A-U\352?/h\226\252B\200\341\277z\370\312\3637%\354\277\361\241\322:Cm\350\277[Cv\316f`\346?\210\206)\270\365\313\362?\2072&Q$\370\356\277\351$\002\260\017B\360\277FzD\256\262c\356\277E\025\"\032\025\312\327?\356\267B\306Y\251\327\277\346/D0\244\312\355?y\364\377\035\177\265\336?\230}\333\373T\375\331\277\220?\367\224\375M\355\277\241\227\016\271\250\205\344?wl\016\2444V\361?\375\001\n})\214\332?\3605\214\322\303\014\344?;1B\001\033\334\361?\360?\033\305\3222\345\277NVkA\254\271\342\277jg\020Z\214\365\343? u\324N\367Q\305\277\021\0060W\241x\362?m\264\323PK\372\362?=\230\342[\205\037\350?\327\206\257\332/\230\337?.\302\023n\214x\344?\373\2635\226\326\325\343?M0\243F\212-\322?}P\301\371\\\240\232?\367D\"#\345`\336\277\224\301\332R\220\260\362?\321\337\\}\177j\356\277\306^.h\363\223\324?\023\241s\"\342\322\303?i\256\250&\004\215\362?(\325\014\246\302\244\331\277\375\371o\314GH\266\277{\342;<r\265\343\277\272J\260\017\235\265\342\277\345r\216\017hV\353\277~\002.\321\301\250\326?\274U[\221(\265\341\277\222Z\317Vlu\330?\345\227\344\366\314B\343?\333\333\'\245da\345\277\346M\243\323\264%\356\2771\354\t\232p\377\307?\0133\004\'~\255\363\277\311\013\235$*;\325\277\274a\322Z\346\340\360\277\304\230\231\0149W\327\277\n\242M\347\352\210\340?\242]\262\375\3276\302?\244\315\242\032fQ\356\277\262\303\253\3056t\350\277O\311P\325\007\224\352\277\267\236\336\375\3435\362?;A\220h\313=\324?\321\344\035\312b\217\245?\217\211\335\344Z\377\346\277\tE\330\327\303V\341\277~Nj\221#\202\350\277\266\312d\222\234p\362?\356#T\217F\314\351\277\211\343\362\225\336l\324\277\244\036\036\300\357\305\346\277C\232\361L\232x\322?\311\240s3\311\366\360\277\357t\363NV?\242?\\\324)<*\275\353\277\221x+\214\267\362\322?\320>\370\307\2447\360\277\273\027D:`\244\352\277\246\\\264uh\342\341?\303\312\355\0344w\313?\026\247\214\177\204@\352\277HE\010\377-3\322\277\240\217\341\253M\277\350?\211\213.AD\017\266?\255\367\t\005\316\022\312?.\355\252\004\240\265\342?\354P\273\351\303\324\345?\340\237\327\322`G\346?\026t\304\305\207v\330?b\202\273\310S\352\354?\247\242\336\376\261o\334?\0025%v\326\304\353\277\035\024IB+\246\352\277\203\223\006\260>8\361?\000\271\202\321JF\346?3R\301Fl\353\361?"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\227$d{(\276\334\277Al\003\216\305\325\327?\214[\3145\005/\330?\tcUl\026\276\327\277\222\237;!\032*\341?\223\276\023\265\245\017\270\277\250(\201.\213`\343?\264j\360\200hm\325?ZV^:\204\362\330?\233\227\265)#\215\270\277\274(t\321^d\232\277\276T\000\274\204\204\305?\215#\304/\031p\340?\272\235\352\266\246\240\344?\352\306\202\0360i\331?\325\352\301Lm\246\342?\'$\t\252\252W\342\277e\306\232\325\202J\312?\266\210WXc4\333\277\005(\002EM\375\316\277\350\014\022x\341\224\303?n\352fw\334\327\240\277\354; \225k\"\321?\374\n\350\001\2122\330\277m\013\333tIm\327\277\003\360\366\013\316\020\317\277r.O\337\233\264\325?\245\246\271\355\310=\337\277\234\355\210\247\210\325\330?=\210$\213\204\342\327\277\013OO\275\365\035\300\277\346$\203\372\310p\315?\362j\341v\265k\345\277\276\330\216*\224B\270?\025?\322\334\\N\314?\356\312\230gu*\313\277Y\220.\335l\376\327\277\275\301\367\331\360\253\326\2778\022\235\016,\325\331?\302$\342M=\366\303\277\255\370\374\227|\222\341?-\376\351dY$\340?h!\272\010y\240\323\277\344e\253\036\301\222\261\277\346h,\006\330\361\342?R\014j\275D~\343\277c\016Hi\205\334\260\277`3\013\336\264\023\351?\"H0])\350\331?\221\325\217\216m\246\325?/\222\026W\221P\317?\025\264L\275o<\305\277n\315\265\207\006\225\254?p\202\355\231\237*\312?29&$\254%\347?\020\031\215%\333x\276?\340\246\340*\303k\311\277\037\324\205\247\220\212\336\277\220\210\264\222\247V\343? l|\322\310\260\267\2774s}N\353g\333?\324[\226-\332=}?9\214\244\200\202\200\314?C\322*\251\277\240\335\277\373bzuL\317\300\277\211?\260\355VF\265\277\353\017\236\340\260\027\351\277.\310y\231\365`\335?QH|J\274^\340?\201\221\267\351\364Ay?~\030vc=E\244?\'\305\030:\276\223\341\277b\334\035\373u\336\341?\341\001\313\002\360\240\331\277`\243P\204\324\356\331?\022\006yQ\276^\324\277f\324s\217=\224\312?\351\270c\304\017\215\332?c\247\247\240@}\341\277\277L,\255E\246\325?8\007\220\3456h\302?w\261\356\371\026)\351\277\271 \344\321\213T\323?Xe8j7J\323?k2\362%z2\342?*\337\371\177w\010\353\277zI\260\"[&\321\277.\377tad&\316?E\226</\005\263\321?\377\324t_\325\302\332?\310\373\336\351l\225\343?\310p\347}\312n\321?\332Y\257\254)\r\246\277>^\2240\005\372\310?\371\340G\255!\354\346?\206\023&\206\222\035\270?\237\372\027\211\350\262\277?b\316c6\244\364\335?\271:\017\365t\234\336\277O]+z\307\367\352\277l\253\357\022Q\354\306?\025\303\213\310\2026\316?\203\210\374e\335C\351\277\236,\330\224\302\230\340\277\r\3214{P\021\337?lS[\213v\362\326\277CR\217\337\255\311\321?\003\001q,\364G\343?\2371\262\346\007\351\311?;b\317\261\321\216\327\277\217$\372c\265W\220?F\260\\\300\225\324\334\277\223\332\361+H-\333?\224%T\275\350y\225?j\241\232\274\016\376\311?\240\006Nd\002\355\274\277\3718x\310\243\362\302?\322h^7\217\337\332\277\233\354\350\272\212N\320?Q\235\363K\370\037\247\27762\361\233-\253\341?\330x^\365V\336\267\277\377!^`v\251\353\277\r\243\211\337jJ\307\277\321\031\275\252\301\025\334\277\315\251\231N\303\337\326?h\322\303\207]\200\266?\277\033\n\215 \357\304?:\354\300\001}\321\304?\377\325\2109\300e\302\277X\277W\301T\336\333?\377\307\273\203\261M\353\277\360\277\rJ9\000\324\277\177\226\333\302f\n\320?ip:\3276\300\330?\363\030.\200\217\343\260?\210\372\356\323\305y\251?~C\204:\375P\343?\330\302]\3677\361\263?PD12\332\300\250\277\300\3716\002\031;\232\277\365\220\3476X1\336?6\327\341\245Q\243\345?dwO\201\021\233\343?W\217g\375\260\001\342?\275P\037H\303\304\326?\013K\013.K\255\331?\346;+\374\330\222\321?\016\'\320p\035\254\325?\302\020X\314\236\033\301?P\027-R/D\340?\302\312\256j@\363\341?=\2505T\374E\313\277\035\247\246\253.\201\333?\225p\230\244\036\327\255\277o\327\035R\177\212\341?\254Yk\272\307$\314?\2318\310\356f\267\350\277\315/\315\204\204\376\341?\316,*\245r8\321\277\262a\370\202\357\232\347\277\352\336Q45\261\321?\343\352\271\007X\372\326?R\301yS\340t\315\277c\276\"|\374z\244\277-\314\352\351h\334\315\277\310)\263\212\345\031\336\277R\025\216\\\260_\342?\255\366!\177\325\314\265?\022x\340\022\341\005\341\277\271Z&#&\r\341\277\3308\207\2031X\314?H\206\342}\370\341\353?\027Q\225+nZ\316\277\322\033jnsz\306\277N\323D&PM\334?l\214\237\212U\211\351\277\3579$t\366\213\347\277\377\010\r\212<;\312?L\336\027\004\217\000\343?\341\375)\264\334\226\335?3\034~\336\222\225\342\277@ESj\\T\340\277\016h\316\036\364\276\344?\363i\243\370;:\303\277\304\364F \247\213\312?/\'\227R\217\244\242\277\255\262(\333J\213\354?\202\315\320\326\034\"\333\277Z\272\361\000\230+\303\277\026\366i\310K=\342?\204\247\364\260E\274\326\277\036\026\037\331;s\212?\013tr\347?*\326\277\220\334\3575L\307\333?\307\215l:d\272\350\277%\211\270\342\261s\303\277\247u\307b\276\351\304\277B\020y\325t}\304\277\236:g/\270s\301?\226%\0278\r\270\353\277\0012\366\031\333y\343\2772\271\200\277\024<\333\277\363\302C\2723\324\323?\363 \2364o\322\342?\2313\211oC\205\330\277&\341\324;\241\312\363?\3023C\027l\301\346\277-K\010\326^\231\345?\340\023\307G\256E\341?\300\306\340\244\271Q\316?U7\335\036\256H\331\277\274\301_\216\371\251\261?\315M\2105;\273\333?\007\256\026sr\246\341\277\352\277\340\344\245\357\344\277V\025\r\357\247\276\330?\260\304\'E\256\377\352\277\000\"\2248\233\001\325\277\221\262\355\004\276\310\330?\236\032\254|]#\311?.\336+\306\354u\343?N\202\004\207\222\313\303\277\322\334\036\204\320R\353\277S\004\017j\317\372\262\2773Z\221<\256c\331\2774\217\303\352\352`\317?}\316\255`\370\324\354\277\3740q\354\377\246\302?\225\204\300G\031Z\316?*\336q&zn\340\277\201\003\223\315\340\201\355?\242\246\0376VD\333?>S\220g\312r\340?\321eh\230\371\232\314?\320\2500\244\323s\263?\'\355qG-\344\266\277\377\305.\303\261\263\273?\000\334\362\266\245\253\306?\212jZ\335\323\351\350?zTr\370\3202\334?\343\212\335%\372t\346?|\211\221\211\250\246\303\277\036\351\240a\236\034\340\277!\373=z\020\242\331\277~\2429\002\310\324\345\277\301\262R7\0225\327\277\264\364\312\223\274\335\321\277\014\345\334\244\253\250\323?=6\366\232\257\360\340\277\007\222\305\360\210\013\246\277\233\262w\351\350\360\275\277\346\266\013\027\244\272\353?\r\333\304,h\342\342?\202\363[\026\272\354\315?\031\361\245\355\2429\334\277`NW\254\033\342\327\277Q\214\345\017\302G\260?\255E\023\217\375\010\341\277C\027\337\022\0175\303\277\227\t\221\n\213C\333?\347JH\273&.\331\277O \036z\267\033\334\277\301\267\337\026\3678\354\277Y\t\247\247\332\247\275\277.\220\031\266U\002\332\277\270J\000\236\3234t?\375\214(Z\0108\352\277\321<\213\017\370Q\345?\274\265:\314M&\333\277e\337\001\004M4\346\277\377\365\267\323_\336\350\277\001\310\240\345\2348\315\277^1\013\325\313\247\325?4\331F\314\\4\331?FZN\227&W\333\277\355\327\272\266p\243\333\277d\362\247<Q5\315\277\3228\254a\337\313\323?\350\017\236\310\350\t\326\277\t\001\3060n\275\335?\034\234\255\230\266\325\260?\250\267\253!\3221\333?\014\305\177\347\226\335\307?@p\024\032\323,\340\277jC\306$\022\250\324\277\312\334\027\330\3153\346?\342\002*<\370/\341?\005pu\327,X\332\277\354\210h\356\247}\311\277\003\333\302\331s\211\341\277\257u\363\035\346\016\322?x\"!|a\236\351\277\235~q\017\206F\274\277\371=\236\362\374\242\323?>C\214F\234\"\276?\037\"\356\226Py\304?\317o;Q%\312\330?ekw\207*2\320?\237C</\'\275\333?[\nP\010\336-\347?7\303p\303V\323\303?\274\210P\313\373\326\327?~,h\206\347\322\333\277>*s\037OL\321\277\345\234\211\275\352k\327\277(\\<\031\t\000\344?\200\371\013\325\025/\335\277\273:!_\326\031\341?\254\252\205\177\211\276\270?\220\253\037\'X\225\316?\223\332N\312\246 \307\277r\207\221\001\272\031\264\277tB\2444!\324\261\277d\261\363{\376\324\266\2773\266!\271\302R\333\277\220\273U\035{\352\331\277G\022\275\277\253\360\270\277<r\255\372\317\367\340?\267\020tg\352b\351\277\321\000\213\214.4\307\277\361ZMb\017\320\272\277>\305\300\0257\366\305?SB !A\367\315?\331\014N\376(,\320?\337\310\257Ma\247\314?\204\251\236=\304\377\334\277\314\321\014-\017\030\300\277\375\336\237\304\223\211\332\277?R\367U\035\026\327\277\036FMG\200s\343?\351\213\206\177\306\327\316?\361\214:@\340\266\320?#6\234\372Oz\337?\374\336p\341_\257\333?\2730\0003k8\226\277\340\2712\217r\351\347\277\371>\254\247\200\215\353\277\332\331\240%b|\335\277\374\277\217s\231T\351\277\002\227q\350M\003\341?\232\310h\315W\030\321?\033\267\266\246)7l\277^\342\250\020\273\311\323?>\0260P\256\240\341?\314;\247k\037E\304?\246\311\337\263\216\335\335?K\2569<\277A\352?\017\276!Y\223\334\201?<\350q\0101\261\320\277\374\321Fz\237f\342?\323;\246\367\220\252\330\277\031\341Yf\245)\326?@GD\204-\306\327?\275\227wPuQ\312?h\030\376\000\211n\330?\331\025\3177\337e\263\277#EV\016\326\312\305?\302\275\204P(3\354\277-\301(\2246\214\327\2777xW?\235\365\276?\'\211\230k\260y\323?\367\370\213\326\262\371\313?M}\3071\313\270\331?\'\265U\205t%\330\277`\263\354,\017\301\341?=T\000\030\313\327\331?\321\213\267\215)K\361\277\371\203$#S\010\323\277N\'x\301\225\254\303?-i\014\033IP\332\277\244|\346\006~D\317\277\203\177N&\034=\252?\233n\317\245>o\270\277\226\341Pl\260\225\346?H+\372\373\340m\341?\340\270\355pb\020\353\277_-\301\265\313C\315?\260V\024\334\237 \322\277\002\022M\3365\323\324\277FD2\264\031D\307?\025Z\306\270\242\177\351\277\'\3616\326l\241\332\277,O\022$\317\222\230?I\222\246\376\352\347\342?\"rw=\347\352\345\277\374\335\365q\316\033\264\277St\033\177V\341\333?\306\253[4R2\316?\017\r\272\\\316\312\305\277\346\327\341M\306\213\270\277AW\013\330D\206\332\2777\223S\302\325\206\341\277\035\037\234\013E8\325?4\201\024\013A\200\343\277\177}k\3676\334\275\2775,\013\031\201,\347\277\325U\221\305\004\330\270\277\320\213\246j\034\216\335\277\202\025%p\264;\342\277\300\037FT\277\374\331?\017\203\237\275\304o\316?[=\343`\261\204\333\277\346\334\224\312\371D\323?\373\373\317\361`\316\313\2777\342@\273\305R\302?\211\254fE}\261\321?\350\227c\317\227\245\304\277\213\355n\335\332\255\355\277\345\020\0036y~\335\277\357\023\233\250M\"\326?]\026_d\217.\331?@\220!\303e\341\344\277\375\216\253\347\214\203\321\277\313\204\356\365\203\023\301\277\225K!\201\322L\256\2779@f\207$\237\264\277#\237?\303\323J\337\277\313\206\217\365]\272\350\277G\314\276\3613 \330\277V=\264\215>3\333?0\366\320\032\333z\336\277\001O\312QB9\306?\236\325[R\254:\344\277\377\221(\2524\020\304?\357\213\246\320\276\314\271\277\341\253\037\272\220\212\320?qe\tM:\017\300\277E\306\016\370\343m\334\277\333\263\324bOw\320?\322\004\"S\010l\337\277\031\257\312\342/\331\347\277?\322\260\241D\027\307\277H\266\024\364W\336\335\277\342\2564\225\013\347\337\277cK\304\333]\252\310?5\022\320K\310!\333?\026.!\317\261S\350?\261t\245W6\375\346?\034\032\351\276\371G\254\277/\027\'\240\335\340\346\277\246\245g\321\375\350\305\277\346Z\376\242\215\'\326?&){N&\202\254\277\017Sp\215\371O\321?\357\346=\344\007\320\327\277\310\246\327\277\327\360\325\277\230\361]\227\033b\333\277\027:\353)G\331\323\277d\367\222g\345\263\334?\200\235\327\357\241\303\322\277Qr`\025\300]\343?\001\266\340\036u\334\341\2777x\206<\365\336\324?\005=\023\221\304x\313?\326)\241)\323>\327?\233\245\212\332\253\360\314?{yW\0243\005\352\2777x\300V\211\307\327?aq+\204\264\301\313?J\267\232O\334\375\261?\362i\"\245V%\332??s\2570\256\221\244\277\3467\353\277Ye\301?H\276x\206Z\347\337\277\264\367\351f4<\331?nt\t\327\375%\330?\227Cj\233\251\323\332\277\204\216Z\314\265%\325?\224}--\245q\337?F\252\342\331^\242\341\277\337*\r!\327m\322\277x\364\224\373Kb\332?)\237\277\030O\177\304?\225,\201\233[\233\331?O?\205\240\016g\235?eq\366\266\226\024\314?\240\364_mJ*\337?\272F@f6\275\344?\250M\300S\377\260\321?:Kl5\005\'\342\277\301\333C\265\253\013\302?\254~<\344v\242\336?\276/Rd\254z\335\277Ny-\261\020\266\261\277*I\334_\005\371\317? \206\204\334\356\006\357\277T8n\016\363\353\336?6\241\352C\362J\323\277\223\027\313\2407q\334\277~}\213\263\263\027\324?J;\245\362\021\222\335?\212\200\331P\274\230\315\277\217G:\031\236d\217?\305\214\371\241\377\001\323?\252\242\242\312+\325\260\277\327i\025\307\010m\304?N\342\303oD\305\345\277\3763pgv\342\316?\262\312\356kxP\265?\300\0019F\332\021\320\277?H\235\"\001?\327?`K\234\251?<\266\277\034^FN\255\004\353\277\227\004\027M\034\034\271\277\370\217\216K\301\364\335\277\332\006\2403s\323\270?bT\232~\312\301\326?i\016\001*\321\'\301\277\014\346\035\026Ju\315?G\200\230\257\204\201\267\277\323\370\274y|\'\300?\355\017\351\333\313\221\315?\270\300\007\371\307R\303\277\246\007\3075\341\233\320?\212R:)F\202\326\277,\323\234}7J\315?\351!\264\204\264]\340?\332\340\003!\231\027\302?\354 \234\200\302\246\341\277gj\256\303nG\330\277Od\374\376\304\232\332\277q \234q_\220\332?\203\037\362\363Cp\316?\240\211\033\254\342\271\347?\217t\002\327\2201\337?\360\034\016Ly\254\341?\365\031\334.0\010\344?U\003~\206\213\226\322?\310D\010\364\323\324\340?\303<\233]\026\242\320\277\364\346\240\003\345\365\306?\344\nO+qY\345\277\346\275x\\_\271\313\277sr\203_\336^\342\277S\231/\242\376\323\331\277\267\266\013duk\331?G*\2516\306C\331\277\256\216/g\216x\323? \341\016\330)\243\300?\026I\243\177^4\330\277\216\225\212\341\247N\326?S\217\232\324\361:\263?\303\374\207\302\255\354\320?sj\021\356\275\030\340\277\276\004\261\t\352\003\317?\260\226\261up\203\307?\204\364\241\305\361U\306?\372-\321\004]\327\341?\377`H\351\004?\264\277\310\274C\017\330R\304?\314Vo,C\303\333\277\211\345%\244\256\253\351\277\203\022\007c\023F\323\277\213\211\013\330[\334\262\277\t~zIG\032\351\277\343\211\376\t\240\024\342?\213\274S\034\255\277\273?\217\271\245\376\316?\337\277\340 \\\010s\004\330\277\330{he\030E\350?m\025\330\311\306e\341?\205\356\376g~\203|?T\372\200\331\3513\277\277\343\274\263I-\232\327?\370\330s\204\356T\355\277TF\232v\311\033\326?\320\263k\362=+\302\277\0060K\231\354U\264?\213\225\260\t{B\337\277\346\332\007\207\236<\325?`\035fXLQ\241\277\003)\312q+0\302\277\372\346\230\217\013\002\272?C\376\276\246\316:\344\277\345\366l\023\344\350\300?\231\036+IX\007\222\277\213`\224\330\255\222\340\277\320\021\274v\227\343\267\277\357D\340\261%*\327\277\315\3544\317j\336\335?t<r[\231\334\334?\304\373g\326r\303\304?\016<\260ms\025\301?\232\221\323\366q\330\333?*\236h\357\026\354\321\277i\260\336\200\351+\337\277\201\023\231M\2376\322?\226\315\010\262J;\340\277\r/\362x\357f\323?\005\213\217\361-\237\346\277f\005\210\377W\253\325? \034\241\351\245\362\331\277\177\201\362\364\361\"\322\277\330\365\374\007\346\355\341?\335`D\010\320\253\340?\352h\344O`\030\320?\250\276\377E \316\222\277T\350\252\005Kj\313\277\202\351\270\306\373\375\320?\263g4\374\006\007\322\277\036\'E\352j\253\334\277##\262\305`\206\320\277\001\260\254)\260\362\264\277\224\377:j\350\344\223?1\037\316Go\023\350\277s{\351\214=\315\327\277\353q\013IV{\341?\252\253y\231\261\306\314?l)gy\251j\321?\371\371\300\241\037\254\303\277c\302+\314\274\000\316\277\213~\357\203\246\330\343?6\274?\343\246\261\324?0\332\354.\225A\334?\320qY\220\"L\311?R\266\233\205\373\347\335\277aJ`\215\362:\346\277\014\374\267\235\302\337\257?\357\3140\200\010\026\305?\302\243J\315 \363\205?*p\204\221\310#\260\277\324(\202\\\307)\331\277*Cv\230(\220\317?\337Ku>\341\364\273\277\003n\307|\014\026\320?\221\251\227@u\034\324?Vb\344\344f\260\301\277\231\200\n\264\311T\337\277y`\221\243H\021\346\277\024\300\212\377nf\274?\314\201k\"\243w\322?\274\305%U\nr\337\277\356.c\271K\017\342?\375{\263\330\362\263\342?\031\244\332\271\211S\302\277\301\217l`^\263\342\277n&\253\360\360r\267?\202\022\376d\353\250\261?\211\325\215[\2004\341?\030\314{*1u\321?\243\345\001)i\010\343\277\r\002\330\311\007<\316?\341\346\2447\350\326\263\277#\312\300\247CS\335?\374S\272\304\177V\341?c\316\273\371\265\t\341?\034NW\2160\327\273?\376u\337\225\"\030\317?P\306v\027\032\350\337\277H\213n\357\212\277\332?[\240\257\010\322\203\320?\223\307\310\307%\'\345\277K\277T\271\202\036\346\277g\236\r\333\262\216\346?m\333\225\361\020\251\321\277\276\274\351-\013\274\351\277\307t\201c\'\353c\277\003m\306\371\nj\303\277\3433\303\254\221\340\302?\374\036\245\004\001\202\342\277\306qR\360{\003\332?h\330\311x\275E\357?\341\007\252\212\341c\313?e9\203\006\332n\231?c\323\005\232\237\312\322?[g\236\333\270\314\327\277\252{\217q\330g\307?\200H\000#\002\377\267?T\365\302\310\375\344X\277\310\371m\352\007n\333?\326\373k\006m1\322\277q^3\030\255\326\333?\303\020\230Y2=\322?Gqr\250\321#\337\277Z\214* A\205\341\277\235,u^\253\342\317\277I\032&\371q=\343?\206\356\321\232\330\332\343?BJ\336\253\332$\334\277Lh\320le9\342\277\311m\2267\262\320\306?\275~R_\342\t\300\277\030\274\230Drj\336?]\344\032\354\366\000\311?\303\261y\'c\261\335?\273\304\234\003t\'\341\277\333\340\220\360\323\202\342\277s!\367\341$\305\333\277\255$\231\222+W\241\277C\215\313\376\243\304\311?\274Xb\233\3455\250\277Mo\177\251\372\312\332\2771~&\222g&\322\277\223l\365\377\215\235\341\277\017pv\000P\304\336\277c\023\375\344\235\376\351\277R\340\344\233Y\242\335?O\267\3070\230\260\242?\034\365X\204\001\206\353\2771AI?\235\331\251?>\202\342F\204\\\337?\n_\265\313(\366\337\277Q\006j\376\366\004\250?\'bk\002\375\232\305\2778c\334\207\343f\343?\220\022,\230 \254\323\277=%W\316\221\362\341?A\235~E\3335\341\277\217~\304R\202\351\272?\366O>U\\\337\271?u.`\005L\331\245?\225\267\327\3701\314\336\277\344\333\261\014C\276\345\277\205\014\324;\376>\330\277\205\014:\317\340J\301?\375:\225\361\017\332\242?\374\021\210\016%\233\325?\371\224]\254\312{\331?\027\322Z\2706F\313\277\372g\331\010\"\n\333\277\0133\217\005+\030\330\277|r\325\275\035\243\321?\300\324\262\307\"\361\325\277\267.DUS\321\312?U\324\003$b?\301?\257\227gt@\233\304\277&M! \235\257\323\277\221**\235r\037\322?\021\317=\0307\317\341?\366\364\245DIQ\310\277\233}\223\274\334u\322?\225\267\013*\211b\301\277)j\252u\373`\327?\000\371\031\360\256P\362?|\021\314.L\020\332\2776=\033\356\254\016\311\277w\006\206[\010!\352?\311\366\261\242e\364\331?\355t4\"\325\243\314?\354\243|\273\204\326\330?\255\273\236\265\207\316\327?E\004\215\202\333#\307\277\222\271\227\372\3537\342?\202cL\255\315\360\300\277\242C\202\2055\355\271\277\032B\224|\260\246\340\277/\027IS\253v\270?[\260\240\313\374\241\257\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\003\306\022~\372\025\311\277I\337\232\233R\260\275\277^\2158UY\002\331\277\257\276?P\354\245\333?6\352?\334\362X\302\277\311\326\265\006\356\004\324\277\2750\207\254\r\273\300?K\210\273\343:B\341?.+\215\323\021f\333?\255m\236\272\265B\305\277\207\316\214\310Y\334\225\277F\013\373lp\027\336\277\016$\216\264\202\035\323\277\330NO\023\313\361w\277\223\233b\273\312C\305?h\014|!e\377\300\277Y\303\346\260\355=\345\277\275\322\355\262t5\335\277\367_]\3379\000\300\277\020\016\273\254 2\350\277Wq\021\007\007\022\325\277\223;\276\026\n\311\324\277\227~3\3623\213\315?\r\271\310i\177\303\323?\014mIm\273\321\232?~\354L\306X7\260?\2741?\010\013\203\245?\206\374\017#\375!\341?\370\264\301\201\311\354\267\277\343\210\350\327\365\014\331?\0035\205\247\007\322\341?\322\014`Z\341o\334\277\204\3044k\' \325?*\316htU-\324\277q\366\245\304\250\021\340\277\343M\302\221\261\005\333?D`N\257G\331\303?\334\334\224r\360N\333?D\321W\271B\211\323?\2139N\247\374\245\304\277\220\303\266\034j\033\327?o=\263i\300\030\314\277J~\370v\355\004\333?\305\317\2740\021p\347?\321u\345\016t\273\301\277\340=\026\017{D\252\277\305\216\372,\207 \260\277\352`\334\202\271\200\310?\357\320\004\366_\t\337?\036\330\350\235\003\343\333?\200\304Mh\001\013\311?\341\312I\3369z\265?\325\\\364\364\360\266\305\277\335\362\315\310\027\226\330\2773X\016\004\311\222\261?}\356i\261\n\241\334?A39X\324X\267\277\257(gV\020k\322\277t\302l\334;F\314\277Z;\022\276\310\233\325\277\251i\225\202\275\345\344?Z\347\366\307\227F\323\277\001\025\'\014\300\026\327?Q\316.8M6\322\277\305\260a\033y\021\304\277\253\035\250\302\013\207\340\277\202\232\273O$V\255?\020\021\207\206[\317\313\277\032!\222h\272\247\321?^\327\310Vv\256\302\277\247j\303y\207\003\330\277\2452\307\246p\017\322?VA\217\305\201\323\326?#|>\237\365\302\332?>\370_HF\027\340?\316\337+0\004\324\300?D=\265\323f6\323\277\021\372\230h&W\331?\253\241D\360I1\320?%\236}\022\005\220\340?c\017\234\3048\275\272\277\244\3577\350\033\370\210\277\326x\252\354\227,\333?|V9`\024\301\263\2777\253 \311a\320\322?C:|Z\330\216\302\277\026%E\300\271\312\310\277\341lu\202\376d\323?N\347;\261:\020\336\277\032c\331\235\374\025\312?i\023\302\177}%\261\277\345\030\323\345\372.\337\277\232\244\272&.\004\322\277EK\216\275+ \340?\314^G\314t\247\265\277\343\262\232]X*\321\277\240\2349!2\236\341?\275\'\241\221$\275\335\277\3240\205\034\241P\343?@\344\361\352\022\366\264\277\225\375\004\361\343\317\322?:\016@9\243\216\314\277\370\310W\3700\'\300?}\254M\302\321\240\315\277\343\242\237i\226\314\302?m\274\370\306l\357\333?\237R\351\034l\203\334\277w\\\030\320\245\315\266\2771;\022\265S\215\304\2777^e\376\007\266\322\277\200\206oQV\353\326\277\2344t\350\026e\317\277\013\377V\222\363\342\306?\r0k~Ik\316\277\276\305JRr\213\336\277\001\321\036\267\220\353\310\277\016f\331\277\305R\341?y\327L\027\036\337\341?\007\340T\237\314\265\331\277#\244\317\357\243\326\340\277\005(J\tv\331\312\277]&M\035\243\336\332?\"P\010\206\243R\254\277x\307\205\334d\264\273\277\305\000\374_\266%\313\277`\274\346\252\365\250\341\277\333\256\320j\316\275\326\277\216\307\004g\357d\330\277\353\232\307\271\344\002\322\277\324\256_\352\220\002\277?p>$*y\305\325?=[\370\322\362\225\304\277\226\225\016q\245i\311\277\035\255\276\331\371N\313\277\3775=t\'\206\310?\350R\210\323\221l\320\277E\007\035\325\331\312\324\277\257\006\3264@\017\311\277M\260\300R\336l\302\277\357\214V\022*&\312\277\304\034,\025\016g\325\277Pac6\032A\316?-N{\371\322\234\313?n\001\251\035\337\001\326?{T\226\255\272~\272\277\022\275fB\366{\334\277|\252>\337A\017\341?\226\232\225\325\2628\310\277\021\263\370\215Jb\226?\215 \237\001f\204\326\277e\263\177\363\021g\321\277\277\036\3641\200\333\320?\226\227#,\375\227\327\277\352O2\220_r\301\277~\350d\226\031\270\340\277%u\327\270\234\375\311\277|\263>\267\"=\343?\321s\303\235\232\024c?\025\035\235[3 \310\277\316v^\300^\003\332?%\334\016\220/\307\227\277\355i{\337n\332\275\277H\235\352\023\231\315\266\277EM\315\"\244\352\331?\007\003$\207\020\'\250?\n\326\332\356\234\241\307?\222a\227\002\220\227\312?4JfY\0258\312\277\273\357\337\237p|\325\277\236\252\027\362U.\323?8\224x \007\246\325\277\336\274bVU+\321\277\274\035\275\276i\233\305?%\260-0\356\234\340?\367\231q\313\375\000\343?\257\261\212g\322!\300?\005\213\026\274\037o\273?\344\344d\361\233\003\334?Yfy\223\3522\264\277\221f-\021g:\321\277\320\311\255zYB\340?\376\010\035\002/\005\320?EY \274\326\256\310\277\005!\321uN^\322?ni\320a|o\311\277\346\314n*\215\233\311\277(msI4\330\321\2779\277*<\300\317\276?\227\253\264)?\\\307\277\3510\'\363\333\t\301\277\203\350f\330\366\236\261\277\360\244\344\332\260\220\246?\344Y\024bK \326\277\257+\002Nj\274\234\277y\024\003\023o\314\314\277\334\211\035M\336?\300?\022\036\230\277\316\233\343?\307\335;\220\363\310\311\277G\306(\320~\350\231?\016Vu\264\'\271\326?\331-<\336\310n\255\277\302\177\222:\2529\341?\r\322\264\277\237\223\307\277Hb$t\341\360\275\277\201\247\031K\005p\306\277\004\024\306\027\005[\247?\014\251\2061?\224\345?~\365\225\364~\204\264?=h\014\221$H\322?\246z\365%S\222\325?\203z\223\3233X\320\277<\204F\365\211@\306\277}Z=)\253>\331\277N\303\320\230\253\222\340??(\316\203\327_\346?\320\332%\265\3668\315?nY\356\366\202q\347?\005\257\372\366\221,\270\277#)\232\345\267N\323?4\177\023;\220j\301?\277A\253=!\367\341?Lg/\240k\035\315?\\\370\300\334H\223\266\277\006s\"\354\017\n\251?\032\t&\003\302\325\306\277O\025n\237\211\271\302\277\355\365\306p\227z\300\277\317\241\247\005_g\277\277J\177@\360\036X\234?%\020\364\032W\322\311?[m+s\256\330\333\277\3067\203i\251\315\327?\252d\265\033\016\374\337?\325?]\3367]\300?\026\351Z\246E\335\334\277B\211p\232\002}\322?n\363]T\217^\334\277C*\346\030\367\026\304\277\205z\'\035\337\314\311\277\242\233\034A\251\201\271?/\003\244 \004\212\240\2778p\274P\360-\205?j\t\377e\232\262\327?\235\231\021\026O1\342?\227\014\356=\330\035\332?<\013\325 \n\341\322?\271q\270p\255\205\266\277\336,\023\245\004\345\253?\220\345\354\024*\002\311\277\373\350\216\241\343D\322\277H\205C\035K\334\304\277D\221@\025\035\232\304\277\262\340\t\2271\232\311?\266\024w\233\241\356\307\277f\225\3108\343<\323\277\037\347X\230\322m\327?\230\201\030G\267\005\332?\253\r\225a) \274\277]\226\006\240\335\305\327?\035\206\363l\275\206\331?\202\002`\332R@\341?\324\332\204%`8\316\277\214\024!\2679|\320\277\017A\206\0047\340\310\277i\301\rd\260\370\343\277\\Qoh\245!\262\277\177\020o+\277\255\335\277]\374T\035\227\301\262\277D\354\310}\372\325\270\277.\271COM\221\314\277\362\323\363\305\005+\204\277\272H\375\317\034\344\261?\315j\200C\"\276\300?\347\3066\375\231\240\251\277\321<\222;U\020\344?\221\200\016l\265\017\304\277s\236k\275\333\233\340?\272\362\314%\377R\327\277\213&0\215\225~\315?_2\262\373|l\330?\177O\033o\324.\321\277]\333\335\301YO\322\277y\376wo\210\332\311\277\246Y\252*\037\035\334\277\276J\303\326[\224\327\277\323\021Y\001-\304\333?\006\031\270\225\353\373\275\277y\317+\270\235l\324?W\345\375)\230/\331?\312\251\267\247\021\373\335?]L\017\362\340\340\332\277\311\026@\351\312\335\314\277\315?t[\215\302\275?\352\230*w\320\014\320\277\327ywRX\300\221?\266\330\032\344\274\361\326\277\225\246u\265\3552\324\277b\236\225\207\210N\341\277\376Q\345\317Y\373\333?\1770\247\257\311Z\341?6\213Tz\327I\277?\257\034\322 \331(\326\277\265\207\016\320\376t\334\277Q\240x\246S$\304\277\27591\315\032\013\320?\265\304-\221\032;\331?\220_7\257{\360\322?\027~\205\rMz\326?\274t\033\223!\232\311?\216\020\r\210\255\025\314\277\256\272\263\206\001\370\323?\032\204\221\0135\256\311\277\207\315MQo\231\315\277\236e\345\000\223Z\275\277\225\223>e\250\007\252\277\'\333\363\"\230\373\325?KE\362\2002\343\337?\267.\014\317\265\033\321\277\021\272!\271\335\237\324\277\240MB\020\371\216\245?\335\223\355\344\316\235\330?\0043\357\333\210\377\305\277g\006\215\351A\233\300?\"\265\270\257\270\357\334\277|\222UH\t\274\333?\211\376m\3131\233\321\277\214\037SH\262F\304\277\236\3036\007\222\370\346\277\351\177\016\350\240G\321?VF\233)\376\343\340?;\317\311\266\332\373\302?\251?\243\024+\245\177\277\226o\257\026 \251\306?\021\376\325\221\321\225\320\277\230\264\004\270\340R\341?\233b\r\005\220z\335?\316\270\201\222ft\260?\337\241p6q\033\335\277\207\314+4\002\325\302\277\353\231\213\214\266\367\252?\321\211\274\247\237\373\320?\\\025\333\346\272\006\316?\t\345\034z\365\200\321?,\232X\221\314\017\251?3\216\2330\005R\314\277j\264\365\266d\005\316\277R1$K\321\260\320\277!\331\237vx$\243?\322!\261\311s\305\240\277\247\230\031\017R\371\310?\242- \216\366\373\302\277\005\023\017\370\322l\332?\001\232oI2\'\346?\235\261\277\377\323F\342?\327\206\236\346\0373\324\277\031-\332\302\025\255\320?q\316\032tD\365\325\277I\002@\004\006\t\340\277\tw\372\215\336+\240\277\016\020\324(\344\347\314\277\305B\351\347\347\006\304\277c-\017=s\307\342?n\002[A^\021\334\277*\005\342\202A%\337?.\352%\255\241\244\340?\330\252\365|\377\244\264\277\255\263\270M*\323\300\277\354\340\200\313\326\367\301\277\'|\306)\336l\266\277\373\2313\300\210^\330\277\240\336\242\032\370\304\307\277q\243,N\300\260\315?-\313A\363Y8\330\277]\251\304!;e\314\277*\034\007\0228\212\262\277<\235\234j\371\335\223?\311\204N\276\255\265\271?\303\350J#\003\354\334\277\272t\353\372Mw\316?j0G\'\346\331\334?\0071t4[\007\300\2778%\264\034p{\301?\262\tL\260n,\262\277\327\021\270\256\205\366\327\277\237\027=\202r[\317\277\010b\3707\256\312\265?0\205%\242\013u\336\277\004PN\032k\324\317\277\270\202\036=b\333\330\277\263\257\204\016q\036\310\277\360\\M\375t\326\263?\004I\305/\357\217\330?\274\256\253\321a\266\344?\010\250(\'ou\312?E\001\343\314/K\321?\220\244=\336/\025\322\277\213\352\267\362N\215\241? \240\337\0058\242\312\277Jz\367\375\215\001\320\277\265\033p\235x\177\320\277\271A\332|qn\310\277\364;\307\021l\224\334\277b\300\271\307\277\371\323\277\304O\2365\330T\333?\323$=\224\034)\342?Y(\201\255h\307\344\277t\230\004\323\0107\264?fg\210\223M\335\312\277m\373y\007\224R\270\277\266\213j\222\200\316\320\277jSY\272\362\352\326\277L\336Ud\261\346\246?n\311|$\020#\336?n\225\202\n\245\\\323?\311\034\236\224\034\377\304\2773$\346\002Q%\342?\364\275? G|\270\277\003\330\014`f<\305\277\340\026\200\n\237\020\251?\212\251\346\250\212&\332?2+j\016\322\322\332?\255\276F\361*\"\326\277(\367\257w\026\323\325?Sj\240\322>o\271?\016\320K\022O}\344?\252\256/\020*!\331\277T\350\023\005\213\366\303\277\262\336\232-M\004\300\277\251er\320\372\371\327?o\276\320\215\342\036\344?\032\265S\031\022\215\340?9\026`\2204\026\331?\237 \257\370\352\337\314\277=\t\014~+n\330\277\037\222G\256\320\202\334\277\334\203\216\033.\177\331\277\260\266Bq\325\374\313?\373\216\213\265q\"w?Y\367\223Hb\245\267?\215\262\000\341\320\343\310\277\374\313S\\\236a\323?\242s\034\376\317$\310\277\003\314\346\033\247D\344?&\367r\020mI\246\277W\r\355\036\0356\245?q\243\211\364\2574\340?\221{\344\322\026\224\305\277s(T\331\356\366\322\277\345\242\306^\030e\324?\200/}ip\200\320?\003%\243s\321\024\330?\304;\371~\344_\323?\177O\326\320\367R\326\277T\317\273`/\307\301\277\3758P\354u\n\324\277\325U\310\345M\355\341?wY\211\"Q\362\320\277\003\212\234\310L\272\302?\2731r#\023\203\245?\267\306\352\301\323\232\341?\037\265\264v\253=\327\277D\345\030&\007\\\337\277\206\253\214\270\347\032\344\277\342v\306V\3701\325?]\340\316e\016\343\320\277Fr\013\3550u\327\277\303\266\346\2113|\341?\016\262Y#\264\364\311\277l\\\371-a\327\303?%\022\317j\241\342\307?n\327\022\220\013\356\341?\373\n\3558\026\210\330?\237\305Di\312\227\310?\005\353\231\010~j\333\277\204(Gk\270R\311?\224a/\233@U\344?\263\212\013\361b\370\321\277>\025!,\320\273\303\277\326\031P\336\263\025\220?\n\326\337\022\236\356\336\277\212\3537|\270\010\333?\346\010{\272\213\217\335\277\017\024\231\235H\335\310\277\303\223\347\024\232e\324\277\030\253\326~v\307\331\277\373\306\'\340\0015\316\277U\235):\215Z\262\277\365\033\313\030\301p\276\277\022\267^:*\304\327?\2526\346$\360w\320\277\327Vl\352\304t\277?\273<\346\"\0042\332\277\374\272\235\031\232\316\251?u\344\220P\266\214\332\277E\240\267\215Q\202\332\277\357\230\036\223F\226\264\27722\340r\2139\332\277\352\r:r\022\221\311?\241\014{\332V}\331?\313Lw\230\221\376\322\277RMO\232\311a\333?\363\316\235\242_\203\303\277\013g?03;\267\277Y9b\030\246\022\276\277uI\222?\256B\303\277TK\201\202\3368\330?\335\324{\205\273\306\324\277\005\216gI\337\002\276\277\245\246:[<L\306\277\200uF@\260\331\320\277\036Tm\314\016i\300\277\031a\343;x\273\321\277.\267\202Y\232\220\335\277\376\2266kR\217\331?\225i)%\311\252\341?\3133_w\265\337\340?\t0\022\363\331#\335\2779n\303N9=\205\277p;1\026\271\361\340?\321\243J{L\316\331?\232]\330Qq\235\332?b\300\035,\340\226\322\277(\216o\023~N\222\277\031u~\3351a\336\277n\221\022Bn\017\326?g\336_L\241\210\322?\\\364\330\354[V\240\277\265AK-\311\036\256?\004&\376W*\325\341?\333\224I7,\251\320?5\374+(\024\266\326?;\t\255\247\360\\\323\277@+\325e\0108\301?\276\324I\355\200~\340?x|\377\370\311\026\355\277\260\022\215\346\244\"\260\277\375\213\353\334\345\"\343?^\341\267\344\3712\274\277\246\310\335?\364\010\336\277\200}\325Vr\324\323\277\024[}\223\327?\324?Z\026\202\027q\335\333\277\035\341mE\271\240\323\277\356;\263\277D\020\342?\336=\274e\211\016\340?\334\354o\235`O\344?\'#e\313n9\325\277\206\233\333I\264\027\324\277\230\367\t\325\3364\322?\341\215=\352\343\346\263\277^\236\\\224\220\"\323\277\354:G\375\362o\313\277\253\235PVZo\255?\321:\255>\314{\331?\215\311\354S\235v\312\277\256BR\301\036O\270?\333\225\247[\2320\310\277\222\266\027\tl\323\334\277\245\315\335As\026\323\277BO3\026\205\205\327?\336\247ZS\\\032\320?\256\010?\354I\023\250\277\333\357\277\317\353\370\321\277\"\234+\372?\302q\277\225\320\206h2\332\334?\313\321\361\223r\270\244?\363\310\226\272\300\234\301\277\263\"\324!\177\311\306\277\212\242QH\233\\\231\277\322\202\270\255!\377\326\277\213d\032\177\311H\260\277\025R\022\332\271\333\272\277\031)\'U\201y\320\277\r@`wM\374\324\277\354^\345x\374\232\344?\346\\F\2237\344\346\277\251\322e)\267\325\210\277\221\243J\346\231*\323?\033\253R\335F\021\307\277\336\255\351*F\214\203?\3365\364\362\024\235\324\277\333\244\343\232\243-\321?(s}\r\333\003\333?\364\237<\233\346`\326\277\371\237\3558$\352\340?\330\201\016\337\016\245\311\277o\310\346\215R\225\325\277\032\326\013df\340\333\277\372\366\305\006h\250\315\277\347\236\337t\316:\334\277?\203\335)`\263\300?\230$\001Q\025\217\302\277\r=4\212vK\311\277I\377A\232_\036\326?\177\207\203f\323\261\313\277\220\007Q-p,\322?\221\t\033\261\203\030\342\277\322\3073 \272U\263\277O\254\216\245P\241\332?$:0\350\000\362\275?\273\303i$o%\321?\310\366K0\265\021\327?\371\302j\202\355b\311?\307I\003h\367\213\256\277\352N]e\t\307\335\277M\307g)4u\232?\007\242\206O/\363\266?\274\352\206/NU\316\277]\332\244\035uK\346?`\343V\336\344\373\274?\225\216\232\346X\306\343\277\341,#\256\037\216\303?\303\321;\217\336\304\260\277\276P\340\3556\013\335\277M\332Tuv\300\323\277\034\255Rt&\334\340?\232\220\231F\323!\341?o\323\315wc\323\272?H\347\037\243\037\025\325\277\017/\265\203r_\315\277\314n\367y\371\357\342?g\312\257\344o\367\313\277M\325\222$\300W\304\277\235a\004\343\216Y\342?\204\207\230/\277\276\305\277\317\013b\316\016I\335\277\226=\365\240\344\311\334?\02260n\252\354\333\277\327\272\337X\204\220\321\277\255\200E\3277#\266?|\311;\251\'\212\326\277\272\374K\231\355\317\336?\000:%\235\340^\316\2778_\273em\274\313\277h\332E\316\256\245\317\277b\021\200)`\212\300?R\n\243\325\306\223\325?%2\327\313=\232\327\277\323\031\005\331\367\246\274\277\376\324^\335\307\243\264\277\237\202\317H\215\324\340\277oP\013N26\317?Y>\266\236-\230\277\277\255\344WBg6\323\277\023+\212D\267\336\337?\r\217,7\023}\257\2772?D\312\350\370\312\277+\301\235Z\033\240\270?\235\350\267rb\025\343?\365\251\330\023X\030\326?}\2200\357%=\317?\207!W24\312\336?\035M\300\235\325R\323?\213h\373k\3465\326?\300\033\220\007S]\242?\335#R\274\216\351\264?\003\224\302\315\271\003\205\277L\005\"i\031\345\316?\367\342LY$\263\344\277\245Sb\274\010#\337\277k_,\343\215\341\322\277d\271\257\237,W\333\277^\206\032\367\302\000\320?\236\0369\031\"e\321\277\216;\031\234:\202\264\277\347\231\244\026\253v\241\277\276&K\035\207\232\321\277\350w\037\034,\212\323\2770 2C\200\220\346\277\256\027\312\317\313\234\330\277v<kX\266\371\305?\316\2653\300\347\273\305\277\315\321rik\032\332?\375p\275S\350j\315\277\032IG\370^\210\322\277\236x)\021]\337\317?\213V\243\273\301;\330?\232g\242_\274[\340?\233\230\312\212\340\272\312?f\213\242 t\261\310\277\325\201\226\327\331\271\306\277I\003|\006\311\377\326?\374\036\277\317h\267\340\277@\r?\377\300\004\304?4M\004\352\274K\264?\233 \300\344\225\201\324\277\017\264\003\303J\003\353\277\t\030\277\016\021\306\325?\314\211x\307\315\346\323\277\357\346\2566\247\202\322\277#\032\312UHw\311\277\301\020-\301R\031\260\277|{\233\002\031\222\317\277\203\374w|\2107\310?\210\026\200\323\202\241\354\277\370\302=Ua\357\333?\205\315\230\030\212\347\260?|\245_}\320L\314\277\330\371\305O\343J\341?\375\314`p\353\207\260?\031\334\241\344\302\303\300\277!h\3451\220\217\301?\354\244\020\3711T\221?\034\262\270\0321!\332\277\355P\360ci\375\313\277y\003\014\224\211i\322\277E\026\263$_\241\333?j\230\001\007\177[\306\277\212\366\357\205\204\216\355\277\r\373\245q\360\305\332?\276\320\033>\346\310\266\277\305\315\334\",\241\345\277\r\220\310\0210\216\343?\213\006sIv_\266?\367\313\355TS\336\310\277)\20196\270\004\224?\034\024\242\263\3103\330\277\354\302\261c\361\314\333\277P\0205\352iXd\277gh\\m\036\256\345?\271S\306o\003\235\312\277\027\"oUCX\330?\027\013\022\334\314\016\356?:\211\206\007\2128\325?\255W\273\244~h\331?\263\001\035u\246r\336\277\270\023@\013\033\326\313\277.:\273\315\017\006\336?\227p\256\270\017\322\311?O\217\336#K/\306\277V\034\276\360\264\032\345\277\275\276\374\353 \233\317\277S2\371\254NV\313\277\\5\037bX!\317\277\247\350\306\217\032\240\345?\301\270<M_\242\314\277}LX\222\225|\177?\025\0226\330r\275\315\277\357\"\022\244\267\321\333?\362\270 \320,\357\335?\363\331\221n\026T\300?7\034\361\377\2569\322?V\241\207\301dQ\275\277@\372_\247\221\031\302\277\025\244\"\023$\243\302\277\306\372\377\237\'C\240?z}\361Q\340\010\330\277O\2357\351c\211\342?\316fT\370\0168\353?"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\261g5u\001\372\332\277h\"\225\352\375\347\227\277t\260\221\345\225k\345\277z\311\234\276\013\204\300\277\201\325\311\205+\352\317?\351l\255\rb}v\277\273T\207\027\326-\323\277V\217x\357\313\333\314?\302_H\031\314\301\320?\235?\227i\267\030\315?\214e\203\024\2603\306?Jy\344^\312;\255\277\233\361\\Ll\021\332?\202*\370|\216P\324?Y\233\234\024\272+\257?f\237_\233*\"\311\277%\344\037v\270\236\266?^>m\305\n\264\261?\367<\r\200\304\230\345\277\214_;\352\250\316\330?\010#\233-\324\354\266\277`\375?l\016\303\303?Loj\017\245\001\262\277U!I\reU\223\277_\322\320Yd6\266?\3145\\c^\252\313?\263\260\316\205\206\003k\277=\270\355(\275\t\306?\316\353\250\356\224D\274\277\332c\245\353\021\356\251\277V\326\256\037ML\305\277\314n,\251H\334\210?\000\276\2371\364\007\222\277m\306RE\317\351\313?k\255\252\252\235*\233?\273\341;\'\177C\232\277\204\300\266)\240:\301?\207\3760b\273\'\275\277\2123wyn\241\304\277\256\325m\327\252\353\307?\241\266f\336\376j\255\277\347[G@\316\313\306\277\332\246\234Z\212C\303\277\000_\206\302E\373\334?\023\002\300\001\355\227\302\277*7\245\360\024\214\335\277i\270~3\377E\263?\303\030\332\251\335\202\345\277p\232@\001\004W\262\277 \222\2345\3427\272\277;u\321\332AN\340?\326\210T@\326\022\321\277\370\241#\013\370\204\302?7\346\"\255\356u\275\277\007T\203z\216\264\327\277;x\270\256\254\375\315?\212\260LP\236\006\301?\277\2050@\233\271\330\277]\377vVL\355\314\277\216\250r\350\224\267\263?\232\214\2477\177%\322?\342\362\256\346\216f\302?\372\247\306\3739\213\313?G#\020\t\240\036\331\277\266@\214\230\304\201\206\277\324\364\260\331\350w\223?m#\236\313\033q\306?M\252\037n,R\313\277r\316\220\354\370\211\312?\216\276\022\207}\372\242\277\013\017\265\3515/\216\277\216\\\276*\312\314\262?\201\367pJr?a?\320\205\236o\306(\272\277[?\020M}K\322?\306\361\204C\025\211\324\277\223g\205\365~\240\253?k\"\234\002\\\331\330?\225\2321\023e\230\240\277\226\000\257q\222[\316?\344\325\035\257\333\202\300\277\034\017||\177O\324?\032c9\261l\266\305\277\306\300:1\242\362\323\277\303\213\2555\000y\234?\346!w\260q?\326?\346\321\004x\366\350\341\277\017E1\250oE\332?$\2359\363\332\273\226\277\177\010\227\031\001\223\320?\3427\245$5/\321\277Y2\362\372{K\262?\364\352\022H6\351\324?p\237:\027\227B\300?\223B\234\235\031\365\244?o\355\t\013b\257\312?o\312g\254\017<\237\277\211\271\362\373\261\203\325\277E\323\317\025]5\325\277\316\030h\217\273\343\324?\360Ld~i\321\313?\177\316\217\377H\214\324\2775\257=\264\340E\226\2776K\023\254\354\236\321\277U13\370s\343\326?\343\362\t\267\270f\227?1\336\r\024\026p\270?\235\372\214\231$\014\307\277D\205w\2766d\341?h\262Hk\331J\332\277uHy\272\344\201\245\277\324\333\372:\014\265\340\277|\027\321\256\021\225\325?\333E\323\370X\235\313?\006xx\026r\340\255\277\034\252\177\304\270L\324\277W\214\332\364\035Z\261\277\343BJ\324[\271\327\277C\300\357\270\235F\254??euA&o\276?\333\270\357\237U\367\316?\000\316\022\377\305\226\311\277u<#\204\377\301\226?;\220\345\325o\003\231?M\362\373\371\243\277\335\277\210\272\027\361\313l\234?2S\276\276\347\270\311?\246\260\037k\315\016\247?J\022\300\023\302\247\246?Y\345T.ax\321\277F\365\251\255\207Q\301\277\n\212|\266\023\326\333?\366*>\263\236,\343\277\254[d\010\035!\276\277\266}\234\004x&\305?p7\240\031H\314\316?s\251\323\017\236O\322?\232\340\304\232^N\307\277!\373W[\267\255\254\277\005\357\307\226\204\032\330?;\032ke\201jl\277\212d%V\031\311\313?\027\232\217\276\347\305\343\277\213\267\215\371\246\247\262?\364\306\205\3052\346\324\277\364\343\342\350\230u\276?\033\336\230\027\334\373\312?{\243\321\003D\273\313?\016\225\230\306\342\313\224\277\372\026\34145\206\242\277\371\251\016\211\027\022\334?V\224\247\213.\373\307?\t\220\036\016|0\335?\352\231\244hp\007\305\277\016b\306\"/5\277?7#\340\221\200\354\300\277\264\361\242\256\201N\241\277\332\321\312z\225\031\316?](\364_\022\212\303\277\245\227\tLc\252\276\277;\221\014\345}\250\312?\304\013\025\234US\271\277\232l\355\273 \035\332?\370G\223 I4\301?\203[\214!y\224\335?\357=\"8\257d\307\277r\023\002@\354\262\323\277;Hi&\356\204\302\277\326,Z\316=\021\325?/\202_\025f#\263\277\263\253\217\240*f\330\277\237\303\313\240\217\021\301\277\312F\"\355\001\266\325\277y2$\377\000V\304\277}8\231\304\\\027\316\2773\t\002k\332\256\220\277w\334\275M\233v\274?\316\001\351_de\261\277\216v\260\220\241.\313?\333\236\r\205V/\341?\250\372\272l_%\321?\021\317\227\227d\227\222?\003\312rs\206\'\340\2777\265\365\324E0\317\277m\177\244\221\356\330\321?\301\344\310\327\243\200\250\277\020S\010\357\335\201\300?%\372\234\035\204\270\315\277\217\003*\250@\322\333\277Z\034@\331\256w\330?\201\300\331\361\364\263\305\277\315c\3313\026e\337\277,w\214\350\277,\314?\n*By\267\"\306?\325x\3149\306E\337?\t\215\374g\203\330s?\353{E\361/\244\315\277\006_r\301S\315\255?*3J\307\310I\311?V)\256\007NC\231?\037\207\206<JH\315?\026\357\344\332n\334\223\277\277\006\205h\n\371\334\277\026\306\\\242\277\212\331\277\336\n\020a\261:\312\277\324\275c\360\013\373\325?F\0249\243\'\262\350\277H\210\241\372Q\202\307?\004\217\355)\242g\333\277\024\t$+t\204\306? \215\304\212\247\027\307\277\005+s[;}\334\277\"16a/\332\301?\325\005F\230\250$\256\277:O\274\017\244\271\263\277\362\020\373\204A\272\266\277Di\037\322X;\312?\243,|\304\367\215\324?#\250}\361\023\212\223?\240\360B\213\352\264\302?\224\326\301\013\246L\277?\262\304S\275-z\346\277(\225V\230\352\003\315?\215Kw\330N\277\317?\006\343\225n\250\264\323?\2706\355E\360\214\333\277\272\373MD\203\010\324\277e\2266\016l\270\333?.\3470D)\035\233?\240\204c\231\252\257\316?4u\032r<&\326\277dI\372\005WP\335\277\206\375\003\021\355J\305?r:\320\220\0004\322?6\036\r\253>\332\221\277 \033}\355!z\323\277U\326k\364\342\256\241?b;1\372\233r\343?\377#ev\247\032\300\2779\327\227_ft\321\277\020\\\201\333\272K\255\277?\004\177\013\253\200\324\277`\377\317\301\227\226\306\277\004t\263\210{F\265?\367p@%\240\367\274\277\371\273RK\362o\241?\3324\377\007\2779\243\277\r\232\000\356\332\304\300?\355\320+M`\252\204?\247-XY\371U\325\277\340\013\272\326\303\277\306?6ITXw\266\324?\260\247OV\310\337\327\277GS\255\375X\301\300\277\301R\025\276\272\014\272\277\261.y\331\272\256\311\277\357\212\240j\256\277\270\277\334\203Qz\255G\326?\370\367r\273\326\002\301\277\264\226\322\350=\200\307\277\3601HI\302T\251\277\204\347\037\230s\211\334\277\\\323\006\"1@\331\277i\322%\267\336\035\336?\016\344v\nk\372\274?\217\366\251\237(\261\342\277\230\365\247\004\007>\266?J\035\014\2016\352\326?\204:L\002y\206\303\277\306\251iNo\n\332\277P\260-\224+3\310?\370\336\250\2228\244\315?%\010S\252<\307\313?.e\034\327h\346\264?\027\273\377b\250\340\321?\361Y\345\333\302\241\332\277\306\360\006-z\314\300?\215\271\226\245\341$\335?\r~Q\325t\223\336?\005&\227I\231M\262\277\344\261\006\224\027\242\265\277\016W\275\365\240\241\323?\207\273\375\334\307B\251?\214\326\326\226\373>\236\277R=\035Y\3746\324\277r{M\360\000\203\324\277m\374\342rb\212\303\277\260W\216 v\010\265?\020WG\032\"\024\272\277 5\317\235\023\353\310\277\303\332\307\365\312\214\323\277\021\200\360\205\205\323\274\277t\254X\272\030c\224\277\005G\216>\252\374\253\277\0268\307\200\3166\322\277\270OY\363\235\227\254\277\017\214[Qp\021\277\277\363\304V\333>#\320\277L\351\252\3427D\266?\203\033\215_\224id\277\313R\260\306\321\274\330\277\337\376|{Y\265\301\277s\007\253e\360\367\306\277\311^`\340\227\320\330\277\274\r\374{\262\326\303?\033\3069\341\005\231\300\277\370\371&\027\337\021\250?uz}\310\320\365\275\277\240|\024\313\260\265\302?\344\305\371\350\232r\300?RM1\034\307\000\335?\026\014@\347\017\304\302?4\375\216\236K\004\313?f\332/\275\220\002\265?\372L\376W\361>\316?\2027\345\014:\250\202\277\030\233\313\376n\000\322?\"F\360\312#t\263\277f\213\374\270\213\241\330?\264\022[\021\374S\320?\2776\244\251K\215\264\277\300\217\2477\367\360\300?\204\241\252\016\377\017\321\277_R\315\246\226h\224\277\264F\252\220s\270\300?}a\203\374\324G\302\277\354\356\313\224\220\\\326\277z\231\224@y\255\304?\350eze\320\200\200?\331\263\n\"\275\303\317\277l_\013\356\006\t\346?\224f\327\234\2238`\277\360\345\375\204Z;\333?\264\033\342\0246c\334?\026\251w\322\006\221\202?GX \037\036=\336\277n\236|pZx\306?>j\334\340+\265\346\277_[\305@>C\343\277\304W\260\323\265s\320?S+\210\370\217\037\261?o\217\242\327\315\251\320?\366\rL\376{\001\300?\245-\031d\257\257\327?\022Q\333S\210\230\262\277\205\337\346\203[\355\315\277@Z\210\031\313\264\276\277\355O\026\025\014\354\345\277e\3629l\210+\304?\013;\272\022\036\327\313?\213\227\222b\017\336\313\277\352\301\2509\360\201\314\277I\003\357\277\210\355\321?B\241\342\302\216$\322?\275\334\226\317\351$\266\277\027\365\225*\272\207\221?/V\352\000@O\273\277\322\253t\264L\306\247\277\243\001\325\001\205\350\320?(3\301Y\243\326\340\277\204:[\317\027\242\205?lU\335M\320\021\307?\325\247\206\272\322P\256?\36567L\201\240\312?fe\261\223\204\205\315\277E\344$\252e\215\306\277\212\031\360\353v=\332\277\003\324\262\360\323\345\243\277\033#F\224\267\001\201\277#\243)\013\374Z\271\277\210\302\357j\201\364\335\277\357\200\246Mi\326\312?>W\376G\ti\304?\024\243\020\016pB\270?,\207\\\022oS\304\277\375^\017\212\271c\331\277\016\334\246\2344>\275?\243\235\017\242pz\252\277\254\245\207\316v,\311?\361\265dD\001\233\266\277\3507\233\\\305\345\264?4T\230\254\374\016R\277\311p\370\255\331\005\332\277\264A#%\257\027\247?\347\227\\\377\320\272n\277lq\271\277@\336Z?\206oy[\0176\241?)|T&\324\231\262?Z\2538\3137\363\267?\306\350\252\337(B\261?l\321M\013\350u\316?\342\206\236L\305\301\210\2778c\262\025kE\335\277\346\371\276\302\242\360\340?\030\204mE\264s\304?\030\3553\250\0045\305?m\302\375\261\004A\276?\017~vN\372\n\323?\231\304\310\323\326\243\326\277]]\033\260gk\325\277\321\360T\203\2756\275\2779\372\006\032\235\376\223?\017*\377zl\030\337\2777\220\'H\325\023\274?\353JaP_\321\320\277\217\032\351\206\227m\324?\010\315\246\251\356\002\322\277\236\231d\313Rw\234?\306{\313q<\004\330?\212\037\233\003\313\340\335\2772Ec\366\362(\256?\252%\022Q<\203\320\2777&3\250(\233\243?\231\301\206\274\237\236\267?\207\2750\002\017*\301?+}\266H?\210\324\277\0254\327\226\212\277\270?O\177\360n\023\343\320\277\230e\273\254\010#\317?\024\244\254\363\341\314\274\277\201\273\027\231\017\273\306\277\266fS2\376*\335\277Bi3y\307?\253?\213\346\300~\252\254\274?xp\tY=\237\313?\346TT$\017\355\240\277e>;\310\335\'\346?\372\\E\264\301u\304?\027\337\245VK\021\301\277\312\314H\205\024\360\303?\' ;s\225\307\245\277\341Vx\023\034\366\272\277\376$\201\343\234L\322?BA/h\322*\340\277&u\302s0h\313\277\361\240\220\356-\217\303\277\260R9\230\"\373q\277\310\306p\307;\312\304\277\272Vh\032+\361\326\277C#\016\034}\242\261?\024h:5\353\274\306\277\267S\366\036\370\245\247?%\007/\206\006n\313?B\276\274\275u\302\262?#\322\202\371&\333\242\277\377\230@;\257~\311\277\320\231\320\204Q,\325?5\304\337M>\341\331\277\324\350\261\314\234D\261\277%I\240E\217\216\256\277\365\327\3058\351\206\267\277\234}\276\234o\304\344\277\231\261\3107a\035\321\277\252~\371WP\364\257?Z4C\325\243\314\316\277m\025\00732\376\321?n\032.\305\362Z\277\277\240\307B\350\022\316\270?\177\241r\240\362\036\322\2772\273~\352\035\274\260?\364 5\333\253\257\252\277\330e\243)\365v\267\277\3006e\212>k\241?\273\'F\2332p\327?\336NPz+\235\327\277\220\310\375\265\023\224\272?\001\204\232\304>\336\324?\'\372\255BK\270\331\277\t\251Ir\204\262\303?\234e8\345\026?\320??8\377fG\337\232?6|\262K\362\213\307\277\027F\354\243Z\305\252?\371\216\345\001\302\261\300?\002s\263\212b\354\251?)D\\\306}\215\337?5\204\321\017\207\217\300\2775\313\"\371\345\346\321\277\311\336\205RX8\303?2\301\003-\316\\\256\277i\357>Hom\203\277\311\243u\307\026\245\305?\327\016=\275\014\315\303\277\377\270\202\254\"\334\340\277O\325\027\204\243\247\227?s\220\262\027\367\237\301\277\206Av\023V\262\322?\244\230f\265\375\256\317\277\026\030\377\320*\260\247\277rp\213\252\020Q\334\277\3179\363WK\036\337?\013hlA\277\261\324?\315\347oc\341F\223\277>\302/Ay\266\320?\372B\347\356\213\'\261?\rkM\342\223\'\252\277\320#\307x\220\245\213\277!\214e\037\301\367\267\277[Q\010e\232c\324?T\247\212h\223\335\344?=\301T\215hr\276\277\243\020Io2\214\330\277\256~F\216\013\027\307?\216?\306\353r\376\324?8@\2664u\\\231\277`\267\35379n\252\277\275%\354\344\204*\313?\243H.\255\006T\316\277\3254_`\036\014\310?\241\223\342\311\262o\314\277\220\0027\243\332\377\327?{\035\255\321n\024\240?)!\2161\316\366\246\277T\000L!|\020\302\277\'\200|l\370\253\270?w\337\0072\354\340\242\277\232r\235J\335C\336\277Q\003\000\362\355\222\331\277\251r`H\327F\275\277\244$T\316\315l\261\277\357\365`y]\305\267\277\275I|\330\315_\332\2777C\263\215\026\265\310?C\336^\373\3523\216\277\033F\216T\3122\322?\2541\341j \305\306?\273\355\220cm\300\315\277\256\254[\377\214s\321\277\326\205k=\276\343\307?\335\337x\221\354\312\277?\3530\332\376r\204\252?U\021u\204b7\275\277dA\267U\355}\264?\367\372S\220p\333\305\277\250A&\036L\341\354?6\324o\013\272Y\324\277%\216\021\013\323J\322?\020\231v\242aA\335\277\r\223\265\\)\315\221?0q\257!\367r\260\277k\332\255v\261\232\242\277\221\230!\'\004\253\257?G\'\251\254\222\354\303?2(\306\324X\'\311?\')\363p\325\346\226?\347w\312\\\007g\321?\330\361,^\215\236\261?\023\270\333\024\312\206\304\277\t\247\350\032\2752\273?Olg\300\326;\331?\013\255\001\335|\273\275\277\323&\353\375`\265\332\277\372KaS(\271\273?\275\367\321I\272_\310\277\360\032.\3723T\317?\014P\005\361<\255\272?>\373\275ED\265\302\277\327\342#\334\311W\322?F\263{3bi\321\277\224\361\376\305\326\273\245\277\227?\366\2575\357\332\277\3729\236\302\304Y\250?\2128&\014\352\220\313?f\374v\213\021N\270\277eP\327\'\025\273\266\277Zr\202\251\253\255\327?D\002.\364\037\204\323\277\230\375\335\021\333\251\242?h\270\273\363\304\354\313?>\007|\272\200\031\331\277%Yw\222\257\017\322\277\304c\257\315)\003\332?\365\271~k\004>\313?8a\210L\030-\313?\277\336\311B\030\311\270\277\203\346\305f\005\261\320\277\026\306\313\276e+\336\277\346\267\010\330\242\253\177\277e\203\356\253MF\271?\365c\024\260n\361\322\277\266RS\216\307\033\332?\377mx\227\224L\277?\316F\332)=\275\243?\254\241\262\302\267=\265\277\376\001\305\235M\022\266\277\202\361\325\342\372b\337\277\235s\215\r\231l\322\277\353\\hF\016\364\265?\245(\232uV\315\337\277\324\347\010\020\374}\263?\211\333L\r\225\002\255?@\317g\314cS\324\277Q\335\202\206\266X\323\277\230\350&\3332n\271?\332Jv/B\022\272\277\326#\334\313e\"\304?\370\212\260\210Z\213\311?\361-\241\237\331A\321?k\305\304\332VW\264\277,Kc*\330\326\272?\364\021\036\350!1\274?\346\317\241\256V6\201?T\333H4\004\027\311?\341P\236?5x\301?]\203 7uu\275?A>,\253\365\376\314?\035\245\027D\320\t\353?t0\346\341\215\347\273\277\231A{1\217\277\265?\314Kt-D\245\251\277\342d5Yd#\321?\271P\\\201\200\026\322?\224\3710l\300\243\311\277\031\346\252\251O\240\277?\260\356z\313\222\226\312?\024\213\032C\357\323\303?g\327\3130\307\205\226\277[kE@]\202\301?6\303F\330\267\247\304?\177?\037\030Pqr\277z\177\320t\354\257\312\277\262\004kj\326b\313?a\357\326\003mg\326\277\355d\356\301\317\003\274?a\360\352\226t\266\300?g\264\322\271\200\000\254?\314\207\237Gl\216\306?\257d\236X<-\332?\276^\010\247\360^\324\277\254\302\270N\255o\264?\316\216C\n3\243\247\277\336\223\227\246\301\307\306?)\033\335\355\005a\333\277\033\340>\006\347\335\276\277\265\212\207-\332\036\267\277\234\304<%\307J\300\277\302T+\003~\020\316?`j6\025\375L\257\277QsS\255\310\246\333?\235$\305n]\314\251\277R\033\317\301\314\003\306?R6<\336\247\256\240\277\214\363iPp\004\263?\312\356R5k\247\251\277I\213{F\230O\235?\013I\010\374\r\344\302?mnZ\261\241\211\303\277J\252\321=\220\315\337?~\273.E^\307\271?&\025\275\025\263\321\267\277\000\271\310^6\275\214?\204\033 \224E\002\275?\024\006PD\357)\267\277\305\207\200e\376\200\321?f\216\354\257\241v\267?\201\016\260\347\321m\327\277|\2363\017x\300\320?+9\026aA`\277\277\204\273\304\005*\227\334?\315\005\350\232Q\345\311\277z\237U\005\266B\325\277\034d\350\354o\210\275?D 3\231\263\337\327\277\234wo\004\024{\300\277A\t4\356q\222\314?\014\r~HB[\317\277h\217?\375a\024\335\277\340\350)\237\337\220\270??\260\030\357\230\260\340\277\262\305W\303\312\253\321?\002x\r\354\343\340\302?\345F\370\211e\035\343\277&\320\267\242\256\370\234?\034\323\344c\013\312\261\277\024\362\370\273\226#\331\277\270Z\023\332\034\205\260\277<\312\213wt\222\301\277\312F\202L\252f\353?l@-\245\227\251\334\277\346o\204\342<\344\335\277\353\207\334K\037\335\334\2772\254\373\250\026\210\266?\024\377ux\222>\252?\021\252,\t\357)\326?\037\275\314\007\231\211\257?l\014T\255\366{\325?\252\250Z\027/\214\361?\344\020\273`/\362\277\277\325md\250\007\310\335\277\367\337\266\306\237i\264?\234V\212\355Z$\220?\253\233w\r\321\353\311?\244\303n\'\272\222\333\277.\026\203\300J\375\316?`\255\244.N\212\361?#\240c\264)\325\303\277\205m\355\311\352*\306?w\372*.\351\341\305\27755\346\303\367O\340?\320\354?\366i2\307?i\362/\315f\255\340?\212\264\300^\n\227\322?\326\374\203\025\250]\260?p|\220\"u#\222?\221\276w\326\352>\267?\273\332\317Z\367\325\246\277\377\276\013\234\347\020\316\277I0\345\020\020t\300\2774\316\217\330\351Q\355?\347\216\177x\006\332\312?\224\3230\215Iv\226\277\347q\353\010\357\361\323?\2567: +\315z\277\027\364\353u-\030\302?\322\377\326$\253\263\332\277,\336~\210\253\217\300\277o\267\025C\340j\204?\240AN\244=\367\302\277\351\370GQ\272\267\320\2774ZQ7N\241\324\277\217\255\321c\243\332\331\277A\363\037 \222\212\275\277\244\305\232\254\313[\336?xJ\201\363\244A\257\277]\211Y\220\357\250\326?\333\303\350\300\204\374\210\2778@\303\370S\244\336?4\343\324\376q\272\265\277\215bO+\241\316\307?O\241v\342\177\367\310\277P\335c\310\300\205\325?\320Hh\223\366\301\275\277W\034\322\334\346\320\231?0\035\212\357mX\336\277I\022\377H\336\237\350\277\016M\373\226)\342\327\277\302>\254\367\031\002\327?g\277oG\372\207\327?\003\204\r\340\276\220\322?\223\241\232\344\236n\301?\322\352\364\003\227/\341?\034\t\266\340Y\026\270\277\265Sd\027:\237\320?Fs\367]X\347\270\277}\353ns\364\312\226\277\240D\377F>\323\275\277\025\010\203\240Y\321\324\277\350\033\300\340\350\007\301\277\3047\232>\263\350x?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\317a\032T\236k\307\277\254\354\223\0258.\274\277\363!\013\331\034\316p?$R\223\331~!\322\277\033y@\277\350F\255?\267\243\"^\371\006\216?o\235\233+Am\317?oH\200:U\321\320\277E\3573\nL\321\325\277`\'\305I\301\036\324?F\214`@\313\227q\277+\273\026\337]\253\305\277<;\"a\304\030g?\344^v\231A\024\261\277\243\"\207\243\273\277\267?K\241|\336\325\212\303?\277d\3122\234\025\341\277\004\374\333v\361W\261?\'\013\216B\3606\322?\377\211\264su\333\322\277U\267\017\311]\337\262\277(\337\037\225!B\277?\231e9DN\345\302?!\305\261\226\026\342\322\277tn#\202\024\326\321?AT\313\204\025\037\272?q\242q7\030H\270?L\245\025V\350\314\322\277\"\336\204o\014d\261\277q\034K\033\033\002\320\277\021\0321?\310\356\334\277\372z\266\315L;\273\277\251\306Z\\\362=\271\277a\007zxj*\306?\003\261\230\0349\330\316\277\315\206\251\347\326_\223\277{/!d\216\034m\277X\362\365\211,\260\325\2771\275}\260\031g\311?\024i:\263\223E\326?H ]\327\361|\274?m\245?\304\311\236\227?4h\027\276\274[\320\277\023\267\"u\252=\316?|\265\201\235\370\235\244?E59\370\344}\305??B\365\204Ky\246\277\303\035Z7\032x\317?\300 \320\366\251\337\261\277\245\211P\223\006\003\254?P\013\243\355)t\302?\001$\2610\"y\257?\320\177\022)\212?\261?\216\233N\033\370\274\234\277\201\307\000\376\306\313\250?\255|Cos\226\271\277J\372\260h\257\204\325?\260\371\332\354\240\363\316\277\033\214\005\224\333\231\232?\024\241E\251\346u\314?\315\377\014i\355n\302\277K\272\326w\357\254\301?) \247\300\002L\303?\376~\305n\2635\321\277\363\331%\366*6\310\277\352\206\252\250Y=\304?Z\\m\273\rA\316?6$#\203\340d\246?t\0149\202\310\023\241?\021HUe\351h\272?!Sp\254\344;\264\277e\355\037b\307\'\325\277\217\360\251\252\033\205\257\277\251\232\347x\327\241\326\277\177\005\203\305*\366\315\277\274^\014\310\202\350\321?\356s\274\317\332\365\236\2770\227\300\213\211E\206?\021a\323\367*4\314?#/\\\277\245;\315\277=\n\372IS\016\267?\255U\3161z\245\310?\244\310\370]n\272\213?\337\252W\304\333\303\246?\206\316\355\216\355\234\212\277$\256\215`\256M\305?\027w\326o\275\232\336?}\371\363\020\243\271\336\277\336>\347p%\335\276\277G\206N\001\240O\271?-\030\354g\027.\311?$6\305F\204\'\304\277\014#\343\255\2478\245\277\216X3\2550\300\325\277\260\344a\247\327\t\300\277\270l\007\034\331\177\322?\3330\351&\372\310\310\277i\222\246\340\033\252\265?&\014a\270\246\216\304\277\310\275@\20691\323?[\243v\372\361\000\314\277\267\013\200T\275Z\300?\374\r\342@w\350\322?=Cy\363)c\320\277\031\366\265\240\177\005\255?\014\360L\263\211G\271? ?\256\256Tf\274\277\352\206I\254H\233\221?N\322\2719\3704\307\277\362N\240\\hJ\304\277K)\331oc\014\262\277\372(y\3717\251\305\277\243\374\232\003,\326\267?{\232B\202j\240\303?\331\326VL\227\313\276\277\250_=\3511/\303?\300]6M^\305\302\277\310\017$\251\357\225\325\277\225O\363\250\216\006v?62s\003I\370\310?#$\247d\222$\264?2#.\357\305\327\302\277H:aB\202\377\326?\216\021d2\204\205\260\277\375@\\Y\374\341\306\277 \335xz%\271\310\277M\001\320[\364e\305?\t\020wf\226\337\245\2770\2179\310\201\217\270\277:\231!\367\243z\235?\357M\220\nbR\325?\205\336\304\334\313\\\316?\270?\2271\303\r\336?7\202\202\313\024N\226\277\332#\360}^\013\311\277\244\"\360\260\233!\267?\267\021\216_\2114\302?+>\234\361m~\227?\\\251xzv\260\304?\214&\376\360\016\264\245\277H\3123\375\351\314\243\277`0A\n\240\301\231?FA\263\227\002\253\325?\205\264B\030\235\250\266\277\266\233\250M\222\355\302?\343=N_\341)\270\277\300\340\236\024\202\332\263\277\316[L\243\266\251\306\277_.\360\014O\031\277?f\203g\302\235p\271\277\314\216.\250\260Q\226\2774\030\006\350\244\006\273\277[\275\005<\314\203\332\277\371\232\201\3532\205\246\277X\003n7\177_\310\277\231\275\251\267\241\321\267\2773\314|\336 \215\300\277\334@\002I\242+\312?\353S@\272\333\355\261\277\207C\261\024?\253\330\277\261\\\337\206u\372\311?\344\360\271[\371 \216\277\357\2245\246\354\255\264\277\3124\215\021\255\350\313?=sH\204\256\225g\277U\206\327J\033\341\341\277\027\373d,/\227\306?.\352/(uGV?\340\307\035 \353K\272?OR6\277d_\312?\2363\3054\234\355\314\277\244\235\257I\263\032\206\277\007\024IS\316T\304?\003N\270\350\255R\326\277\251Y\t\350\335\372\332\277\374\330lK\036f\251?\323E\250\367,\376\320?b\254^yy\035\276?\"f\340\211\260?\274?\273\310\000\361\221\t\244?u$\220s\261\225\307\277\360\345\232\314\246\361\304?0*\\W\200-\315\277\026\331.\013a,\260?\022\355#r|\232\321?\t,\246\303\033\003\236?\230\361i\326\344\325\267?e\250\333$]r\277?\264!S.\317}\307\277\020\343)\267C\276\305?xh\203e\t\220\271?\266B\177I\334\365\335?\2525P\354\267\026\324\277O)-\322\006]\302?r6\361\240^\252\244\277\017\035\374q\361\370\320?l\272\235\225y$\326\277hj4P4\275\315?e\224\213\212\'%\325?\312r\322\"\311q\325\277\004X\201\365\276Q\323?\314\360b\266\0202\232\277p\3336+\351\376\306\277\254~-\210K\367\253\277\216\234\341\004\002\222\243?}\267\376\035\246\'\251?N\177N\277:[\322?\351\006\312U\315U\305?\207i\230\nqM\321?\316\330\264:\344\001\201\277b\202o\214M\235e\277\347g\357\007\343:\311\277\313m\300\313\037\356\276?\210v\267\322\343U\251? \036P\000\276\023\311\277$HW\263\217\261\314?M\346\027\010=.\264\277\003!\341\263,R\325?I\310Y\r>\371\276?o<U\326\323\026\261?\026-\366y\036c\314\277\025\371\016\346\251\331\311?F\210\312`\357;\323?\332\2075\307\3538\321?\222I\356u\371\207\306?.X\316\303QC\310\277Ja\315\334\033\252\350?\t1\277\265\202\251\320?\271\030`mO\210\313?0\316_h\003.\267?\306\373\004\351L\342\320\277(\253\366\235R1\315?\024\300\001\243x\376\263?\3262G\222\2417\255?\270\221\304\312I\377\265\277\230,I\361\342[\250?\364-t\nS\217\274?\343\373\347w\264g\303\277DitV\201p\210?\272-a\302\373\000\261?\'\036(\006\\\251\322?8oe\300\307\202\274?\334`C\371N\264\313\277\toc\364\335s\310\2777\317wG\365\007\303\277\263\033\345\312\225\343\323\277c>`;_\024\322?\355\204Xj\n\031\263\277m\372\355\323A\225\237\277\\\356Y{\210\206\310\277y \211\332?+\270?\251W+NR\337\306?n\205\317F\3110\276?\341s;\360\277M\304?;\275w\021\020\274\246\277;\334\270\366\261\340\307?U\254\326C\244C\325\277b\002w2\263T\305?&V\214\306\372[\276\277\316\032\306V\363\231\306\277y\n\016\025\204J\263?G}}\252l\302\310\277\236$\327\332\024\220\316\277b\276\334B\245\270\324?\251p\r\3508\210\273?\'\022\336&M\035\320?\371j\234\310\307 \306\277\260\255<\300bb\315?f\342\0025\217\177\240?\264TGq\322\364\305\27763\366oo\206\274??\000UA\362\026\322?Q\237\n\325TZ\247\277\"\201\345\177\247\237\262?\317\002\037 \n\035\310\277\347\332-\332p\222\271\277\007\367\035b\364\346\300\2770\301\321m\224\254\332\277-FH\006\231P\272?>)\356\006\310<\317\277\350v\031?>\025\236\277!\252O\345T\210\250?>\333\242\';\307\303\277A\355R#\336\004\300\277\010Z\353n\234\353\324\277m\337vhh\345\317?\005\274\215\277]p\226\277\360\254S\344d\240\234?[;\003\373\027`\215\277\352S\030-\337?\337\277\255\215\310\006\362\n\324\277\001\246\251*\221]\301\277\217\330\230,\256O\322?\365\204p\035\375\001\253?\334P2*SB\327?\372\205\364\322\016\227\233\277\334A\275\2538\375\245\277u\223\300o\206\341\247\277\006R\265\nV\303\313\277\324{\355\322\300\017\254?\251\014\252\224\304\261\320?A#\356\220\004\323\234\277t\267\276u\232\357\317\277G\005\271\341\200b\313\277M\266{6\222\\\270\277E\r-vU\017\311?\014K\257\020\232\273\264\277\216]\206Q\034\214\313?H_m\356~\273\270\277Z\254\272(\371;\245?e\305\271\233k-\313\277\362v\325\037\000\341\327?\035\254\206\237\372\035\306?A\033\003\3242\004\321?\341\233\026\036\340P\322?\332\316\004\222\033\036\325\277\210|Y\330\216p\263\277e\006\256i\207E\261\277e\221\247\005 \234\254\277\002\231\325`\025Z\323?\352\005\222?\342r\321\277\344\356\350\016\031;\304?\205\232bB\246E\341?|\300?\201\335\002\273\277\220\000A<\321\036\320\277\317S\201[p\332\231\277:\241\3447\311\034\316\2771\325\347\367)R\306\277@#R\037\030\250\322\277\030WE\316E\247\214?gP\312\353\363#\307?\300\256n\200\362w\320?\341\263\302\0248\265\252?\230t\313}2\271\240?\022\006\222\362G=\243?\303XJ\354V\376\330?\377\212\353\351\247\221\322?\326\177\326U\212\031\321\277]~\243\335\267\276\265\277\376\325\244ab\206\316?\366\213\325\362\275\215\262\277\001\217\261\373Ed\247?1\206\313\021\363n\241?q}\361\341\315\005\233?\271\201bL\005\320\261\277\225E\3524\3343\256\277GK/\332b\370x\277j\375\213[\222\306\343?djV\374\025\365\243?\ts\364\221\227\202\242\277\237\205\243\036\325\313\246\277!\216I/\270\214e\277\250N\247\333\306B\305\277\347\2550W\021\214\314\277\005\355\263@\017\037\241\277\262\371\033tu\006\271?\304\357\215\"\201a\301?\323U\333ltK\273\277\361\013\244\314\\7\306?\311\2167]\303E\217\277\007^\211\007\3547\327?9\3445\264/\301\304\277L[\331$>M\301\277-\211\376\030\256\340\313\277\216\341|\347\024G\316\277[g\3669\005\234\301?%D\001\204PT\272?^M\242\020k\256\341?\273\001\365\360\301i\226?\250\203d\250\331U\251\277~l\231\302\3052\313\277\3504\210\312\350\\\254\277n\364\023\005\316\307\316?\000\2107\227\\\210\310?\237\030\250N\242O\214>?7\2159\276\304\266?3^\305\240\376f\322?^\300\3462\024\243\260\277\223HE\264l\322\252\277r\346e_\\\205\304\2778\\\262\020\006\207\305?\035\025\244\033\027J\324?H\032d\303\301\000\215\277\303\316J\317W>\311\2770\347>jxM\301\277e\257P\007Y\355\324?\276\251\326Q\211\211\276?\304A(\275\001\336\211?\350\272P\356;\177\274\277\0270ik\353\321\314?\236\037\331\017i\373\340\277\343E\002r\214\025\266\277_\014r\225N\016\234?H1_.\227\232\300?\274\336\261\201p\323\301?\344Q\324\256iY\312?\235\321\204;=\373\312?i\246\267\234&\036\260?s\261\347\241\013!\320\277U\006\316\306\002\020\306\277X\016\241E\205\373\236\277\036\203\255\3277\306\300\277\314\372\215\263\004\275\273\277\360l\353\357\345\232\306\277\342\357.\031A\372\334\277\210A?\375\264K\316\277\255\241[\234\264S\342?!\302K\346DZ\331?p\rU\337\007\t\325?\336\244\000\311\332F\320\277s\226\324\212B\211\274\277\253j\030\353|\372\321?\310\320\276\031\357\321\206?\275S\243\215\031\203\302\277\255\3045RT\301\327?\275\312=hS{\302\277\244hsC\247\262\314?u\227\227(\275y\324\277\321\177\373\030\312\212\312?;E\203\266\203x\326\277\005\361\251Y\025[\270?\337m\263\261&\321\312\277M\343\036\345$\217\315\277\321m9\332b\220\302?x\003\316\037Ev\304\277\243\332\310m\033\270\303?\211#\363\262\255V\260?\314\353\013\376KI\323?\201\177\177\312P^\277\2771\014h\035\213\313\305\277\212o\231\244\227*\262\277t\307h\004b\317\267?K>\024>\246+\316?\253\023\320Hh\240\305\277\255F\302\020\036\262\323\277\032\300\013X\301\024`?\214\251\312$\370}\276?`\354\'\374<o\310\277M\336\366\036\263I\301?Ox\323X\317\177\275?:E\220\241\307V\333?\002\016\026r\255$\321?\227\271nB\205C\300\277X\327\201a\353E\312?J\312\354\014E\034\302?oR3\333J\204\330\277\357t]\013\007j\324?\021\376\266Y.\215\320\277\252RH.:`\315\277\363\\(4\036v\250?\177\365\306c\'s\332\277\220\240\353\020\272T\331?\013\234]M\362\372\321\277pP\333\267\002\365\236\277A\205\366\241\300\272\250?\300\030\264\007\270T\321\277\367%\300\203\321\231\200\277\201&\321\253\222\217\322?a\036\337W5\017\333?\363\\tP\314\204\304\277\351\3159\243R\236\270\277\364\272\317.eL\245?r2\nxYb\300?f\343\366\255\346L\303\277\373\223\375D\363\361\250\277\324^\213@L\225\300\2779ztd\237H\324\277`\326\270sf+\317\277\212X\207\006\262\t\317\277\222\013\233\323\267\202\234?\245p\264\017\337\245\273\277`$\027c\237\350\315\277Z\250\224\275\327=\240\277\266\t\371\013  \270\2771\362\314\306\2172\265?+s\331\226\023i\241\277\006\373\022\234n\217\244\277\262\351\336\031jP\277?\030\345\372ul\232\302\277\324~\237e\354\\\267\277\"\313\000O\315\305\326\277\254\240\006x\225\323\302\277\320J/\361\311\212\307\277\031\345\375\307\202\243\320\277O\337\366\332\337\t\306?>M\230\230Z\306Q\277_\301\351\036\220-\327?\306]\272\241\322\302\312?\303R\017\033M\245\322\277\201q?\246q\230\307\277Bv\221D@\315\272\277\314\003\023\346\237\027\271\277\310\301\036\303\324c\331\277Q\014D\243\"\371\325\277\273\327\210\372=\210\250\277\352\232\314\341.\337\300\277\365\222\335\036\027\364\221\277\372\006R\247 \"\317?w\024\230oy\277\200\277\275\t\236G\240\362\267?\321;\025\034j\201\331\277\303\366c\225\254\013\206\277\335P{\006\367\377\244?\235\021\342\024\344\321\324?\230\007\343\371\037\262\252?\366V\002\026\350\352\327\277N\023\227\351?\270\306?P#\021\002u\022\311?\330\025$\276\321a\320?\363\027_\377\035\242\255?\310-\372\364(\203\322?\276\3216\374\257\370\212?\rh\016\232\362z\271\277\2602[{\0105\325\277?=T\353$\363\303\277\227N\020\022\317\274\314\277\237:\243\356\224D\305\277\237gN\333u\360\306?\235\231n{\177\312\300\277\240\3018\017\353.\323?1\300z\343\213\205\304\277\207P$\037\347\033\312\277I\n\214\274i~\245\277\r\214\000wsL\275\277Zb+\341\343\312\241?l\222Q\303\212\337\273?\361\235\210:\244\310\301?x\237L\332\013\245\307?\315\235L\241\033\247\315\277\332\177K\210F\010\267\277\223\214\364K{\362\301\277+\214\354\212n\330\245\277\337\356\005\357\177F\311?\376\3464X\301\236\332\277U\254!\315\342&\334\277=\310ou\253M\275\277\251P\022\363\243\314\315\277:,x.\264\205\307\277\013\263`\251\344\240\272\277m%\20628\030\306\2775x\356\225fg\267\277\263\030\347m\n\304\262\277jkT(%\271\304?\361\2100]g\201\316\277\317\213\364d\327#\226\277\031\221~d\243,\303\277+|\327k\"|\264\277\323\344`\256)o\247\277]\3440]\263I\252\277(\375\\\221/\275\310?\0075\347\204\356\036\270?\016\312\312\034K#\312\277\0170\221\217o]\317?\222\333\333\331\271\303\270?ef\371\3473\030\277?`\"\033=\230\000\322?\031\246\201s;\240\245\277n\276k\2305\251\304\277\002\366\355\323U\027\317\277\375_\025\201\032\327\321\277J\017\372\351\363<\324?\2575;\244\351b\202\277:c\302\335\372\020\315?\022V\330\303\277\263\260?E\364\227%j/\257?\315\004\333\335\332-\326?\352\336\244\030\242)\302?\331\214)-0-\312?\261?\005\377>\341\305\277\311\330w\305f\344\320\277\017x\002\t\363,\311?\301)zs\231%\225?C^\222)\320\221\312?\332\265C\310\243y\307?\367@5g\035<\265?\327\272)\200\277!\231?\337U\031K\226\231\344?\247\235G\rG\031\317\277\370:\210\226\270\214\306?\334\\sg`c\307\277\302\220S\013\315\030\220\277`\260\367\322\035\221\275?F\362(\007]\014\270\277\355\372\201\204\030-\267\277l\241\233\201\350\361\256?\2351\205O\314V\270\277\344E\261A\205\316\324\277\020\273\016\200\223u\271\277j)mH \005\321\277\213\242\313+\356\277\263\277b\316\240}\274N\312?\303\354\201t1\020\253\277\030A$\275e\007\321\277\013ai\214Y\236\266\277\203\334=\306\373K\262\277\026\'\221\246A\250\216\277\033\325\r\325\212\n\300\277\363\263w\340\276R\317?\002\310\324\364\222\206\333\277\216J\203\326\327&\274?\252E\275[\347\322`\277\364\267\0227|\234\324\277c\316\214\357.\335\222\277\330\303\376n\213E\260?^J\013\027\342\332\271?R\004{\014\204\351\317?\345\317;@|\203\340\277\256[|q\210\275\267\277\202\333+2\370\341\277\277\005\213\237B6\346\301?K\212\315\211A]\321\277\257\374\225~\311H\236\277|\023\232\216\366\235\252?\'V\205\213\004\344\310\277p\222\0249\314_\270\277-\327\351\2715(\263\277\336\2328\227\247\210\306\277\307\036\355Hx\210\314?\357\246bh\327\021\304?b^\266\362i\265\275?\035y4\236\226\306\327\277nM\031\241\260_\311?A~\003\364\005\341\353?C%\354\205\335\220\305\277\002\277w\250\246\347\305?a\320y\007\266\022\271\277R\341\206Xiw\245?\337l6\310\222[\331\277;\352\213S+(\272\277\000\206\270\214\242\036\307?\264\017\366\355\261\013\270\277Si\036\301\007<\313\277\223\006M\027\312w\313\277\363\243\265\223\215\210\262\277\307\370\341^\014\245\273\277S\304\205\320+\263\265\277\2149>x\234\t\340\277CKYs\375n\275\277N9\207\211\262C\223\277v\244\265\272,<\254\277\265\375\263\312\372\217\314\277\273\366\0342S\314\307?\246\327>\000\031\262p\277~<\312\020\362\204\307?\234\277n\265\333 \254?\342mY\361\240d\241\277\255j\360m\026K\262\277/\322.G\002\250\253\277X\320-\256Sm\277\277\014\n\347\217DH\314?\300\177\010A\366\014\262?B\210\304gL(\320\277\321\213\367d\304\017\310?\002\351\007x`\021\275\277\271\307\354vM\325\273\277L\207\035s\031o\275?~Z\367\262\203z\313?\2378\031\247\202\014\330\277t\344\030g\rT\324\277\260\306yd\016\221\226\277\334g\351\242(\321\321\277\270\253\314D\307\272\300\277\341$?\372\360\017\310?\r \354S\017\337\226\277D\322)a\2053\320?\006\313\'\245\365\037\326?o\246\202\"\307\037\332?\334\016\3018>\252\240?\230\225,\354c\"\227\277L\021\221Z\301]\326\277\226\200SDE\234\270?\347IN\340\374\363\325?\351:\336l/\346\263?\337g5\377^\267\250?\374\224<\222\307\214\312\277\223\236 \2234~\311?\373\321\216C\235\260\324\277\347Ny0J\314\352?L\002\t\211\337\002\332?\3407\355\263\225\227\310\277\022\n\306\251\341\"\311\277\232\237\337\210\326r\324\277n/\031gZ`\300?\320/.)\314\353\242?E\243?u~s\312?+\305\026\306\022\350\246\277\276#\360c\352\220\340\277!\305\373\n\213U\321?>q\320\312W\177\256\277\023\375\023\364\275\375\321\277\202\205)\362\n*\237?\257\003\311\360\227\013\307?\201\313\032WB\345\304\277}\345\245sM\354\252\277\016\006e\334\256\033\340\277vl\301\007\026\010\301\277\232\3242\223:J\316?D\231\302ym\022\257?\236\005\n09\347\256\277\227\"\312\325\215\022\321?k\375\266\247\345\355\300?\375\236\344b\227k\247?\303\n\312>\356{\261?\314\201+\006g\321\276\277\251\017\3069}~\303? \316g$\217,\276\2774\\G\374\232,\252?jny\330\260\315\266\277m\327\366\240Y\242\334\277\274\013.\204]T\302?\303\255\273\342{S\243\277>\250|m\324\037\306\277S\221\\^\235m\300\277tF\367\\\301\334\305?n\257]m\261\010\313\277\317\261\247+\200\000\320?\032\212*\365L\035\273?\362\301]\203_p\344\277\227n\234\265\030X\313?\212\315\3712\t`\321\277\367\237\0347\334\353\304\277\034:\213\017\311\n\325\277\311\375\303\310\252R\263?\3742=.\355\246\304\277A\025V\257\256M\231\2775\342\350\017\331i\274\277`q\317\0251\202\270?\252\362<\320\217l\311\277\352\256\2038\233\260\276\277\247\324h\256J\032\201\277oy\210\003\377\363\322\277*\020\322o\275\252\310\277\200\311\247\274o\211\316?\021t8\220mE\243\277d^\271tOB\322?\246{\350d\265\312\352?\333\027\027\251\036W\277?\375\277n\016f\344\261?\252,Q<\007\200\270?g\016329F\316\277Q\322\260Py\223\247?5BO\224\210h\303\277\372\336;\253\242A\222\277\205H\273\336\2129\245?\010\226\037L\270_\255?c\355G\027\257\001\306\277\010\027\222\324\035=\323\277VO\260\367\213\367\263?\023\n\251!^\033\331?"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_contentt\000\000\000\007\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\006\000\000\000\002\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\006\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\005\000\000\000\002\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\005\000\000\000\005\000\000\000\007\000\000\000\005\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\004\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\007\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\003\000\000\000\004\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\003\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\007\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\t\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\004\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\007\000\000\000\003\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\003\000\000\000\t\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\005\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\001\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\004\000\000\000\010\000\000\000\005\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\007\000\000\000\005\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\001\000\000\000\t\000\000\000\t\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\002\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\006\000\000\000\004\000\000\000\002\000\000\000\006\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\004\000\000\000\003\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\tt\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\007\000\000\000\002\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\002\000\000\000\002\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\010\000\000\000\001\000\000\000\006\000\000\000\005\000\000\000\006\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\005\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\004\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\006\000\000\000\001\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\002\000\000\000\006\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\007\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\003\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\007\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\005\000\000\000\003\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\005\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\006\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\003\000\000\000\003\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000\t
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_2"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_3"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_4"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_5"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.40824830532073975
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40824830532073975
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_15323"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_15322"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_15393"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_15392"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_15462"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_15461"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_6"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_11"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "ExponentialDecay/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/initial_learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/logits/BiasAdd"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/labels"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/Assert"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims"
  op: "ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/losses/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp\\part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "global_step_cond_true_15192"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_15323"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_15461"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_15322"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_15393"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_15462"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_15193"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_15392"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}
