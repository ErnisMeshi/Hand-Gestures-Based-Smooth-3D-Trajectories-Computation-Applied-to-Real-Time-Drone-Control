node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_25302"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_25301"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\273Z\244\253O\222\326?>\361\003Or\353\361\277\305\351\352\264\0239\301\277\006\006\257]\334\254\323\277S\273\006\030\005\244\365?\236L7\023\021_\356\277\350\367n9\362?\323?\366\025\314EU\316\363? \206r<j\361\363?\321i\nu\3135\372?\302\"\022\237\005 \363\277\177\272\343\366\020\177\361\277i\233>i%\263\363\277~o\342\232\262\306\373?\215\222\232:I\273\362\277\361>\327\313\3150\326?\373\016\230\030\351\201\313\277sa\202/\305\264\364\277\027y\037\322K\224\302?\005|\031\t\223\370\300?$Z\3255\364\214\321?\335\371)\026\303\001\355\277\352\234\023\215HQ\365\277\232\3119*\313\237\320\277\364\320\304\240\323^\355\277\244\333\216+\256X\360\277\222!F\256\217\t\366\277\235\214\310\305\320[\350\277\220r\205\224&\027\362\277\006w\350\334[\034\322\277\370>B\376`o\301\277\326\225\372\263\001z\363\277 \213\243\260\2552\342\277\327m\235T\034\"\356\277\331bqH\231;\361\277\305\327\002qU#\311\277\222\323\'\354\344+\343\277y}\001\017\036\000\323\277\207\355\023<a\261\352\277\335\357\027\214\375\245\365?\375\316 \017\352\226\361\277I\202\334\325\371j\314?Z\236[\251\327\375\321\277\264\t\303\003[\'\367\277HVB\003\221\307\314?\347\210l\251\223\216\332?\366\0362\243\255l\361\277\r\204S\321v\347\340?\213\333 \362$6\363\277Ix\227\212\200P\357\277RT\312Iz\311\362\277\251^\377KE \366\277\211k\351D\347\003\373?\200u\210T\367\324\313?k\00786\252\037\306?i\027\202\377\255\353\365?C\301u\257Z\260\371?\372\333o\325\024.\324?\225\003\032t\206\217\311?7S&\244\n\t\354\277\330%\177\267\276\311\364?\371C\316y\273>\355\277\215\345\220\003\031\331\363\277W<\322\366D\211\332?\230\216&\000\340\246\320\277\263\303\302\004g\350\355\277\320\354]5\000\335\267\277\354R\234y?\377\311?\233Y1>B\274\360\277\036\355\354\033\021\257\366?\237\004\021\221/\375\361\277\315!\216\031j\026\327\277\256\3460\323\006\345\360\277x\372\036\200g\303\325\277\310\243~F,\237\363?;t\204\351\261\252\371\277\262`\266G\347\037\320\277|\020\313q!s\362\277dG\302\350\344Y\260\277\032\211\264\203f\004\364?\005\300\315c\366\207\366\277\216\t\326\261-\220\205?q\237\204\247\263\362\360\277L\232!&\352\346\317?O\342\\\234\304k\357\277\376\221\343\221\370\367f\277>w\267B\023\327\336?\371\240\365\330U\354\364?\337\263\200\004\006/\363\277Bb\034\250\364\004\364\277\316er\341[?\332?\253X\325Q\357\270\363\277\340\340c\332\272?\366?\021\022C\031\345X\370?\256z\321D\210\373\370?i\3707^55\356\277\341\\!\212\305F\364?\023\207\247\245\001\234\337\277\275\214\266Dr\300\335\277u+m\007\\\250\277?\264\036\036\255{\005\370?\204p\351P1m\322?\022_\237NE\220\307\277\010sy.U\017\331?\3730\313g\227\310\362\277>\tPKUt\345\277m\010X0\223\220\363\277\304\223t4,\347\317?\206\022w\306\026\210\367?\370\024}\231\252\347\326?b)bi\203M\316?\360\317\013\216\346\255\335?d\352\034\327^\341\363\277w\321\005SR\353\355\277\036\370.\240\226\005\363\277\377\252\t\326.\215\355\277\020\342j\225\\q\364?\030\010\300\203\360\264\341\277\014\245\343\364\251\213\305?\177+4~SN\357\277I\300DL{S\366?\317X\343\213\036w\265\277\035w&\313\305\376\323\277S~\007\253\006\241\311\277\330\216fi\301Z\335?\315qm\025(\360\361\277\202\321\221\260\345\311\356\277\253\tC\324_Z\362\277uo\356:Vm\370?\203\341\371\001\302\264\370\277L\037\021\263\205\327\371?\361E\004\004\362\206\237?\t+\271\262C\277\321?3\260\212\2546\352\303?Md\037Pm\252\364?\n\305\344[\254l\356\277\315i\352\260\364\372\352\277\261IN6\364\252\320?\236\203\025\265\236\242\352\277\323\271\253\003!\013\364?AT\356J\351\311\351\277&\230\377\267{\311\364\277\257r\367\370\321\234\316?\330\303_D\372,\362\277\200\010!\356\355\177\317?Y\020\333\260\243\230\363\277\2505\342\334\266R\364\277\343]\306\201\364\366\360?2)\246\234\230\340\360\277\270\207\336R\304\345\322?}o\340\256\035\256\363\277\201\313h\231\260\261\360\277l\022\370\332:\351\275?\275v\245\026\005>\360\277hu\357\244Pd\312?\373\027\346u\355G\265?\245\327\246$\030\361\362?\246\271\037\325\317\325\236\277D\357J\306R\247\264?\356\231>?J2\316\277\251\260\361\004\251T0?\232\364f\232\205(\353\277\2468,~\203E\365\277\t\200\343u\322\372\361\277\035H\\\251\2157\364\2775\273\261hM\000\304\277 \357\224B:R\364\277\033\365s\021\177\263\317?\314HM\244\323}\352\277\345Q\346\325\266\001\264\277\225\324\3311^3\326?z@`\262\332o\321?\177\311\352\306^$\321?\204\250\\\271e\350\306\277_\2279\313\2166\314\277~\006\372\202\336\376\363\277\261(\352\335\r\207\304\277\276x\260`\304(\355\277q\034\265\026]\261\366?G\317\353\326\001V\363\277L\300\004o\333\257\367?\205-\247\376\344\237\241?\241\321\307\233\005\371\340?\013\025)\317\376\311\315?\3406>at\307\367?eN\026\230\351e\363\277,\r\016\t\340v\357\277\211?\320\003\331Y\304?\317`\3525\200\276\334?\002\274X4\006\245\364?&\203\317U\210\303\311?\215\252\'\207\235\356\344?\376!\215c\321\210\321?\203\333\221.-t\331?\237\300T\273Bc\365\277\265\315nQ\235\314\257?\365\2021\340\234\020\315\277j\305\2762M\311\365?v\304\002P\021\035\370?\036?\225\177\034\353\363?|L\2541\203\356\245\277\377\333\322{\037\364\350\277\211\343T\347~\205\325?\302\201HC\365\277\332?\370r\022#p^\316?\026\350\244^ue\360\277Q\214=q\000\224\317?\305\345\345\221\000\301\242\277L\355\316\263\2627\332?uY\247O\321\025\361?\375\261\347e\361\347\320?\315t\231\030\013k\341?\357\330\303n\361_\355\277.\331sv\321\353\362\277\227uMQI\240\347\277\374\210\005\237D\317\305\277\303\233\333\212e\255\363?\327\341Fo\327!\315?f6\241\310\006\267\306\2778\033?\222]X\365\277{\021\207,\306\245\364?\266\361o\217`\334\331?\217\341<\037\372\034\366?N8\252\002H\274\276\277\242\320\352\252-\035\370?\224g\010\014\373\266\333?\272\347\244\315\365\353\364?&\363L\355\211gz?\037\020#\356\363\354\360\277\034\202\267\274\277\t\371?xm\300\243K\264\305?\317\260\311\364\355y\327?\352\303\366\212s\010\363\277\324@c\t\224\350\265?%\377m\007\367\213\363\277$\266\3374U#\320?\306J\207\"L\337\357\277>\\\210T/\223\366?\262\36181\025|\372? \352\324\020\251\"\316?\263c\230\177\255\267\351\277\254\352\314\304P*\323?\325{,\370\244\231\310\277\323\220\265\236Yk\350\277lW\272Q\254\363\314\277\340\341K.\362\304\332\277V\251\376\301\376\267\362\277\202LJa\221\303\304\277\370s\213\2505T\364\277\361\004\343Tc\330\313?\365J\245X\227\337\366?\\\267\320&E\265\364?8\212\\\367\264C\321?\026\024\237\313\333\252\331?Z;\t\241\\\231\364\277\263M\205\276\342\016\305\277\323O\222\n\350X\321\277+e\267\346#\n\372?\270\010\214\253\2033\353\277sZ\005y\215F\305\277\223\250\322\372|R\363\277\2651\375\014\t\247\331?\265;\350\362\345\220\335?\255\243?g\037\033\266?w\360_\303\3138\345\277\237\236\371\300\032\330\266?\335\352\3409\240p\306?\360\371^>\256\233\271?\373N\256\224\372-\326?8\260\212\234\250K\324?$\363?\010 9\262?YQCc\027\246\301\2772\010\230\376\217\350\340\277>b\325\264\353D\364?\340\275w\3333\226\365?\362&\313\017\340\346\344?\272\247\262\020\027\322\357\277\336V?|/\242\273?Ia\303\277\020\354\362\277=#\300JO\247\307\277\360H%\024\300\014\307?[\320\321<e\371\364?\271\023z\273:\350\362\277U\013\365 \002\267\360\277\352Q\010TR\035\330?\317Xs\027\021\302\306\277sU~^\313\013\303?\002\305\326\206F\035\360\277\346q \221\004c\341\277\266\352\273w\274_\304\277\031\371\362\035\233\377\307?\027\230o\335GW\365?K\212\022\246R|\303\277\020\357\035\n\271\265\360\277}\364\343\373aH\323?,\227B\244\277\014\364\277\311\313\356T\007?\320?z\031\371\260X\t\271\277GX\241\337\243T\364?_\216,&b{\362\277F\260\023Ffj\327?B\313\220\320\211\357\315?\'\264/\374*\242\320?v\022b\325E\336\332?\232*\000c\255\310\337\277x8\0262\362\327\263\277Q:u\256\205\374\357\277\0166\215\003\370\211\261\277\203\333\240<\200\317\360\277\325`\230\005\263R\366\277>+\277X\270\033\364?\237\362\000\300N\276\365?\365\232\362U\203T\370?\216\333\272B\347\352\372?F\341\321\006\004]\366?q\255\3245\334\273\323\277\216\340\303xv\351\357\277\232Ao*RG\212?\202\370\363\373h\252\363\277\202\247\321}\'l\315\277\325\375\316)\371c\270\277\027\267\306\316\255\354\365?\351\305\245\364PG\340?p\000\025f\033\243\363\277\215liq\2605\364?\007\227}\014<S\320?\006\310\n\367E\030\331?(\253\241\353\343&\310?\275vr\252\252\315\324\277(\302\254[\036\005\320\277ji\256\255\340\311\342?.[\356\310\360\256\364?=\240+\267n\277\363\277x\031\204SX\306\363\277\014\367\375\207!\262\362\277i\323\324\271Q\264\314\277\300\343\225\304\347J\270?\2647G\367\220\226\336?3Q\216\014\303\232\330?\223\334A)Q\225\252\277\211\377\'\301yS\357\277\252u;\305\016\035\363\277\221\243\375\267Vn\362\2779;7\317[j\367\277u\3522\356\342\352\313?p\230\254k\327\275\304?_o\372\027l*\314?)M-ih\260\344?\242Hs?Y\326\367?&(C6\361W\341\277\250\3158\032\333H\302?\227!\205C\2567\302\277\363\271,\374\263\026\362?}IfU8\364\363?<4\274[C\276\312?!\305\212\207\006\323\361\277h\327\014\325\227\366\353\277\322\354B\275\372\271\240\277\347\211\317\367\261\215\235\277\035\2744\230\300\300\331?\364\230&!\276\231\374\277X\220\205\226=\245\363?J\367\303\031\277\345\360\277\2737\237/\001\222\366?\231Iy\317\252r\322\277\232\236NW\262\\\321?\257$\226\374E6\327?k%\3254Y\025\326\27750\323\246S\200\305\277:\200*\302\343\360\315?\010\r\205R\310*\342?\237\314\242\221\362\276\340\277\356\024\027m\200\000\355\277/\366\036D\251=\370?\215\331\221\t\023\020\310?\r_\310hB\260\311?V\272\262\354P}\275\277ZX\367\307:\350\362\277\003\2255\237\257\253\345\277\277t\302\227\r=\312\277\332\257pH\266_\365\277]q\0223\273\217\306\277\022\3265\213\275\370\343?W\000\037q\017f\314?\225\250=\372J6\276?MR\205R\260\275\260?\2031;$\3375\355\277\0230\364l4n\362\277\343o\323\024ru\361\277\022\'\322\202Q\375\365?\325s\242\\\253\004\353?*$\217\227\221?\344\277\201\327\023\336U\"\327\277\373T\271\254\024\267\364\277\317z\022O\204\361\302\277\2117\000\274\275\304\370?\317\362\271VW\203\244\277&\331\021\217u6\365?\315\002\231\305\3671\325?\262\3106B\034/\340?\274\273\212\360\232\206\311?\260\033\355^\2556\361\277NVr\355\223\241\305?\333u\"\303\265=\363?\233\3167ugI\324\277z\236\235v\023Z\260?^\243\332B3\026\343?\200\243+62d\365?\377\365\230\257\3553\257?\347\221\244\231\304\227\336?9\240t\213\270U\314?\364Gw\277\356\210\341?\342\\\261\346H&\361\277\332G\264\231\001^\336\277\321\244\017\023:\255\364?\005y\327\377=j\305\277c\033\234\000\014\317\365?\364\031&\205\213n\316?{*i\336[\221\257\277\237y\220\037\016\252\321\277\327\022\254\233B_\362?\020\210v\2024-\332?\330\220\242\337\221\376\362?p\333\270t!\377\223\277\n\nU%5\205\362?\266P\033\312\224\342\356\277\302\235\260\372\021k\373?\340\230P\306\264\\\367?\262\034G=\242\216\260\277\266L\344d.\224\363?\357\"%\020\317D\346\277:\034\255\340\325l\353\277G\267\257l\024\023\367?\356<\000\242\224\231\323?x\235T\261\031\355\307?S\244Z\251\362\222\316?\317e\236\254<\365\360\277\2651\251\245e*\315?\210\037\240\207\302)\324?\030t\344O&\274\366?\036=)M\"W\363\277\324\013\220\232\0147\355\277v\315\313\017\301\341\362?\304LMQV\355\367?\203Ro\3138\316\361\277\320\207\375\365\024d\324\2772M\252\347\204\351\367?\310|\\\311\206\356\335?\255\010\006\310\360\303\315\277 \346\345a\333\005\362\277\206\264\274\273\250\361\303\277Jy\252\240\016\257\325?\251;\010\007\215\244\320?\r\313z\223)\350\364\277\312}\276GF9\320?\260i:\362\261\360\363?\031\217\300-\000_\321?\273\037\202M!\025\312\277\177g\330v\022\200\336?\177FF\265\003\312\362?  f\362\354X\314?K\342I\234\317\232\374?7\003\n:\230\037\352\277de\253\365\320\276\363?\372\330(\336t\225\335?\313\222\266\242\000\227\315?\317w\333\267\335\210\365?\3743\242O/\034\342?W\004~\353\372j\366?M\346\343\206\360\217\364\277i\311Z\214\363;\347\277\352T\377\210\311x\321\277gJ\267u\240\377\361\277\330\327\211\264\322\336\331?= \367F-\364\361\277\306\326\367\311\341\370\366\277\276.F\252\021v\320?\322\2239u\206*\317?s\006\277}\362\022\374?\255\226,\245\242\337\362\277\237\212`!n.\327\277\324(k\322\221N\327?-\025\274\031WU\360\277\373W\002\031\250@\321?\3375p\032zP\355\277\220w3\346i\357\362\277\245\030\030\217\346\222\302\277\326i\274F\330\275\325?\303\341\257Ta/\304\277\355\200\232\305\332;\330? \202A\206\226o\335?N\257\255\022\3033\364\277C&3\245QA\354\277B\246\177V\204~\321?i\327\3640&k\363\277\3017o\276\211M\347\277\365LIiT\311\316\277\305\002g\354nW\314\277\335\004\222\371#O\362?b\341\013U\200\303\371?(\330\243~2\r\316\277\370M-\373\n\200\334?\265\241M\332\021k\365?\n\341~\373\342}\314?\241\302\206\230}j\366?j\236M\375\324H\322\277z-L\024\245\274\355\277K\320o\247R\001\340?4\324\307\002l\324\367?\214\251\024\207x,\307?/\332\200\020\003\221\370?G\'\330\205\024K\362\277P\241R\334A\241\363\277\266*\031\030Ad\301\277,\342\264\210\361\341\363?G)\365!\222\307\347\277\256\336#\014c\217\255\277B\365a\2722\262\225?\200\025Dg@\016\364?K\372\202\005p\276\364\277\326k\267\013s\256\314\277_\366\267*\005\n\321?\333\376\243D^\021\364\277\354\204u+\005\245\363\277Z\261wm\303\246\374?\200\266\263\314\037^\354\277D-q\235N\177\333?\216\324l[,y\327?\352\237\023I\225R\365?\320}L\221\271\'\362\277\023^9\371\316C\337\277\300N\200\366\325\207\320?\234\202\360\211\021\324\267\277nb\324\350\024\370\320\277<\274 \366\354}\227?\340\247\237#\371(\343?{d\\\333\r\216\364?\237\252\021\306\000?\337?\021U\276g\227\240\363\277\202318\342t\320?v\302\341\364E-\311\277`a\204\017\221N\363\277\035^\021\200\212\031\356\277U\313\205\375a\274\362?#\010c\241-\212\353\277hy|\032\336\037\362?\360\202\310\254\266b\323?\361\016\301E\007A\320?B{\200\237ep\361\277W\'t\002\355E\370?\230\202\340\036\311\024\330?\207D3\003\320!\331?\255\314\253\202e\277\301\277\330\353\027\371c\302\314\277\32524\367\372M\367?\3761\217\367a\t\304\277Kv\200\020\330Y\303?\025\006oSb8\330?\233\3029K\327\253\322?\\\364\210nS@\322\277\'\371\256\005\r\314\333?\274\t{\002\027\237\371?\034e\254y\312e\367?\030\305\365bcA\330\277\004\245\352{\250\374\361\277\276\035\314\342;\033\327\277\230\344\244\265i{\317?\271\272 *n>\366?\2768\275Xq:\361\277\336\3537\266\326\325\330?\273Y\227\004Y\300\323?\321\006\3757\000*\357\277\037O6\317XO\356\277P\362\236\374\267\017\356\2773 H\211\203\265\354\277A\016M\235n\214\251\277\220\372\321g\240S\346?8\2178\353?\245\321\277\273\000W\363\322\317\367?:\363\200 \220\250\343?\245\354\017PR\335\363\277e\213B\034\226\203\363\2770\002\332y%\301\361?\356f\260\205\006\030\320? 3\305\364\324\202\362\277\236\033\2018[\322\330?\272\016\201eu=\326?\253\230:\233\024\204\363\277m$^*\241c\342?\302\215\311\245n\237\363\277\255r\273T\335\377\217\277\366\230s\320\350\031\322?Y6\335\304}\347\333?>6x\315=I\341\277\211.\304<g,\277?Q\021\325hw\027\361\277\241\362\341\307\255,\302?\326z\346\240\364\304\367?\332\354\243\276\025\346\305\277\231\255)S\377e\363\277\312+7w{k\341\277Gv\242\025- \312\277o\003\215\226\203\202\340\277\320\257\231\001\034\316\360\277\215L\016}\177~\356\277\244\360\317\351\257\366\261\277\"\246B\244\232a\361?tg\027\240\365\351\261?\250\232\016\342T.\362?\264\033\252\363\321(\350\277\373Oh\001\265\207\306?}\215\025\336:\256\346\277\rP\366\307\233\037\324?`H\323\206]E\220\277\305nt7\n\251\362\277e S\276\303y\361?\332\233\007\353\230\243\341\277\017\0373\241/N\253\277I\216U\311{\225\351\277\r\216\201HhS\360\277\227pK\336.g\266\277\316\272\'\2208\334\366?\2261\177\217\236\331\355?P\003i\032\003\021\363?\212\333\244p2\300\366??A\245\2443\021\363\2773\001\203>2\022\363\277kDc\377 \013\302?Q\307_*\354\252\327?dl\2227\001N\226\277\265\034R\201\355\305\314?\236`k\371\375\317\365?d\224et\335e\334?\010ka\244\2137\266?\326\007E\340\315I\260?l\322\212\305\210=\225?\242\220[-\246\372\343\277\'\234z\217#6\305?4\353H\277\233\352\363?\275\235\361\353S\362\365?u\372m3\303,\246\277\333/+\376C\222\206\277-\364IUX%\367\277\177 gZ\313\037\352\277j\214\305Eb\272\362\277\006\357\023\363%G\363?:`\033\235gq\277?\225\036\273\363w\271\362\277\327a\374;QP\373?\030\330_\206\007{\261\277\316\343\243Y\225\337\363\277\353TqJs\350\363?|\237L\337\270\365\205?\360\323:z\235\327\355\277=\233\370Oy\000\372?\016\360\344l\304h\331?\211\317\210\240\241\302\206\277\257fNU0\361\277?:U\277 \221c\302?/\373P\347\254\036\363\277`\237\017Ja$\331?+\014\377vBv\306?x2R(\021\373\322?\226\033\377\036>\277\320?\315s \346\376P\367?\241\313\361K9.\343?\335H\372\243\027\346\335?Idf$\276\226\365\277\302\000bt\t\215\311\277\034a\230\025\366\334\320?l\202\001\235\031n\363\277\232\"?P\356G\327?\2203y\277\027\232\365\277\230\005\304\274\256\261\363\277i\020\022\241\3433\312?\3161&f\004\201\243?\010[X\005T!\302\277\223v\351\363b\330\333\277\026\365#\303Gj\352?\253\222\227(m&\331?\365\036\332\366\340\031\322?\357\217\255\177\325\263\363?\357uvH\362\201\355\277\2676\361\236\244\260\363\277\235\"m\213\352\325\361\277}\204)J\360\373\363\277M\274~\304\324\224\204?\312\007\333\374\321!u\277)\371\276\201\300\243\326?\260\003\r\372\313\315\307?]\307\3213\203\275\366?\220\245\341D\202\271\366?U\006\345h\334\237\333?o\343\223\\\031>\340\2777\376\220\353\251\226\241?b\026s\237b\311\323\277.\377\347\330\301\330\301\277\327)\007\312\235\270\316?\345\304\324\313BT\364?\002\271\243\217\270\221\250\277D\310LIS\373\374?\215EA\rhu\363\277\375\320\204\375%\321\201?PS\321\276\277\313\313?\3403\256tz\236\365?\353\021k\206@\237\231?\352\203de\242\r\205\277m\327k\246\355\357\273?\020\016\203G\372\320\237?\271#\240\352\330\236\366?{\312\347(\326\372\365?\371w\235\217V\374\266?\025\274\313\323\256\226\343\277\334\230\001\000CL\206\277\230\250\273<0\315\337?r\343\256y!\213\364\277\366h\373\023\221\333\357\277\216\2214\236\272\347\340?\251\2509\003jz\337?K\377\025(\301r\323\277\261\254\n\272\276\215\324?\032H\376\361p\303\323\277R\0312\'\210\316\362\277$\203\335(\335G\303\277d\334j\276\325\310\362?\303\230\264\037\364\214\246?m\306\264f\233\253\365?\254\207\242\210<\t\330\277$\240.s\343\305\364?@y\203%j\016\305?5\332\021\036\352Z\304?\2214\027\233\004y\361\277\260?\r\201X\007\367?X\223\213\030\217O\303?\310\344\202\350\341R\320?\201O\203\331\321G\357?R\363T(;>\356\277z|g\350\373\342\371?\031\027_\"\253D\362\277\212O\332\257n\273\363?\224\2078jEE\362\277G\033j8Q\225\362?\303d\243\207:\343\363?{q\252\302\227\341\366?\023\300\362\274O\003\322\277\3668\010\307\320\250\312\277~\264\214p\037\034\320?\203\262\031\362%\322\362\277k\247B\007\325\371\335\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\350\367j\334\005\236\362?\3706}\026\362=\340?\021!\021}\203t\341\277\303\353\363 \000\373\350\277B\302\\T\357\225\312?\007\\\033x\246k\343? ISA)\276\342\277\306@\273!;u\341?\345V\216d-\234\340?O4\220\030\017\277\330?\242\327\331\244\2143\332?\262/\335\356\311\025\341?z\016\\\327\310\006\321?e\000\313\370g\212\323?\343\316*:\007W\345?o\271:K\265\245\354\277k\224\010\234#B\347?\3423\000#\266\020\337?\035\214\262\370jx\357?\245\240U\002<\306\353\277J\022K\357\252\355\357\277\321\334\201B\\&\322?\340\034\346j\364\341\343?f\302Zr=\200\353\277\310w=,\373Q\325?@\3421\204\0375\304?\n\201\021\372*\322\342?\031\345\\\327\"\316\352\277~\346s\374U\250\341?\257\331\027\211\321\331\344\277\246\321b\332\177\004\347\277\365\377\276\261\340\202\337?\010\321=\001\371\204\350\277\315e\341\357\027S\304?\360T\033\345\314\305\337?\227\274\221\3751\265\343\277\216k\213\363\231\277\323\277\257\302\301\261\252\343\350\277\237\365Bq\340*\350?\230\364\222\027j\213\307?\363=\331-\305\020\344?\335\336B\000\037\257\356\277\270\357r\246\373?\346\277\r\263\242\217\n\272\333?\346\355i\306\232?\353\277|5\010\303i\242\360?\003&\353\0212\372\334?H>\010\3556u\304\277\327\020\3148\355+\342?\247\267\005\027\250\035\345?\227\266\347Jbk\352?\023D\347V\310\'\271\277D\357\241\013\353\256\327?\264K?\221\006\202\361\277\245\020\352\010\257\251\357\277_\274\235\302\021\345\340?\257LHO\303\223\320?\345\250\372\213\226\236\362?\332\003\243\001\342\245\361\277.cQ\016\362\263\327?\203\212\\\016 \336\336?\353\306\322\231\237\334\313?\377\376\255\265\312u\343?uQgLs\212\362?2\tU\327\006\264\337\277\256\020\334ys\271\336?\017\n\"\352\t\270\340\277\326\001\306Z!\213\356\277,+\0370\275\301\345?\372\026\r\341\264\r\310?\333\t\272=\n\320\342?G\320\316\372\035N\354\277\274\261\3071\216!\343?\003\224\250\374Dq\353\277\277\201u\323Xj\340?m\263\315\225\247\306\323?1\230B\377\200|\343\277zi\237Z\3208\341?w\352-\355\324\213\342\277Y\316\365E\354\356\340?\350i\204\022;3\340?\336\351\037\340\211\313\343\277\242\033\374\026*\352\346?\332\3664q%\022\356\277N4 \272\257H\343?f\323\367\312\006\375\341\277\215j\024\226+\336\360?\315j\342\214ey\300?\232\"\355]x\"\340?\206`\314\225@P\343?}{\220.9\'\353\277g\030{\345\240\312\335?G\342\242p\034F\242?&\243H\316eE\343?/\255\207\2259\272\330?\276\243\030\254\247\000\274?5\345]\003\315]\346?H\001\020.\316\343\346\277\363\232NHP\376\346\277yN-\005\365\026\323\277 \010\317\315\324\356\331?\n\001\365\243ix\360\277\237W\333f\\\363\324\277\\%\202\020\254\273\362?\177\314p\3403\315\343?\341\210\221\231\'\346\334\277tK>\024\341\275\335?HY\321m\316Q\355\277l\007X\234\270i\226?\205\003\217?\257U\361?n?\0304\3059\360\277\240\206i\322n\345\362?\351\r\0277\305\267\343?.\331\010\306>\307\302?\315\364\032\242B\307\340?\257:i\375C\304\330?PJZ?\332\306\343?\r\252\246\254<\357\357\277L\035\037\352r6\355\277\367\016\314\301\"\013\334?\253\205\274M\017I\312?\242\226yF\316\006\345\277\200w4w&%\321\277\263\303\027s\240n\340\277b;\353\177\324\003\363?D\347\337zIr\331?\n\372\004\264\245\311\244\277\320\231\203\245Y\230\340?\260\367\210d\363:\317?\260k\016\351\312\354\306?m\255\200\030\301=\331?\024\025)\252\200\222\335\277\260i\372\340\201\331\360? \326\3067~i\350\277x*\323y\331\337\343?!\247%F>i\301?$i\3274\024\325\247\277\372C\371\363\027%\357\277\201<\265\370\364\242\344?\3560A;l-\231?\n{.\350\036\337\343?F\262yokN\343?.Qp\2027\221\360\277$\212\001\316\3572\342?Q\267\377\263\323\354\353\277\364\271<\260\367t\335?\370\256\'I\374\256\340?=\026\\X\260g\320\277\226U)(\265U\352?\266\370\344(\361\r\357\277[<\005\323\017J\310?\251\010=V7?\343?\316\315\222\226\025\351\354\277i\357\264\305V\204\342?\302\211\004\025\000]\355\277\375\341Z\352\026[\361\2773\270\322\251f\312\344?o\254w\377\334w\345\277O$\363\'=\324\361\277\323\252N\324I\211\347\277\257\330\032BO\356\344\277\2269Pr7\010\346?\206\355Q\223v\020\310?\343\337\241*\371E\345?F\322\316\251\345\001\313?=\353\350wB\315\344\2775\346E\031)X\304\277\206\215\266[\331\211\357\277\260\271\003q3V\214?\365\251\311#\010\237\347\277\317\325\341\317\034r\361?\311\336QWK\321\355\277\340\025\230(\305\234\354\277\240BK\216\233\256\346\277\375&\030\317x\223\350\277@9a\231\276y\345?U\312\231\256\034\371\337\277)\306\331\316\337\203\337\277\000:q\233s\222\311?\240#\312\243\357$\325?\275Q\036\002\267\301\335?\224\2145n@^\343\277=?G\361r\033\364?X\227\261&\331\017\345\277\205\262\005\000\217\361\305?\232\257E\023\002\220\336?\257\213*\215P\322\301?B\362a^]i\361\277\310\243\351[\020<\362?C\"a\246t\366\275?\020.\350A?\021\352\277\255qB4\024\211\346?\027?\370\017\247=\355\277A\217\014T\276\220\345\277\255;\351\334\222\321\315?\255\205\000\277[A\337\277\213cM\340\327E\351\277\271\030nXb@\311?\202\321\230\355\365]\314?p\212\037{\323\010\350?\270\031Q\374))\340\277{c\032\304\340\030\350\277\261U\315\311 W\362?\317\257\031*\301\r\345\277\321\335\3036\315i\360\2771b!\3557\377\307?\246\246\252 \r!\327\277J\351\271\221\224\243\351\2773\201\347c\330\361\337\277\316(u\367]\232\344?~.H\322\247M\356\277\221\013\213\366\225\216\362?]\036\213\300\374\t\320?\324\336A\315\355\224\342?z\353\272\033\361^\350\277i\364 \312\001\210\337\277\036\005\214\007`?\340?\3148\247k8(\271\277\227\3525{\305\251\350\277\266;\256\221kE\343?\246\036/x\225\243\345?\036\370\007\'\355\r\324\277~\250\260\205!\026\315?s\311\024\000\356j\341\277\007X\250\224\3549\304?\216\334\261\350\265N\362?\203\371\324\346\271\355\343?m\014A\360m\250\331\277\233\377yU\2163\343?\376\347\367\354\334\270\332?\377\\q\270Y\006\361?\205[^\257\363t\346\277\344+\037}v\232\343?\2218\230!\030\251\370?!+\341x\242!\341?\375\360\004\267L\017\312\277\010-\275H\'A\337?\216\010\321\371DE\240?\355\'.}z\352\326?UC\225+[p\356\277\027#\374#\345s\342?\226[\356\372\004\233\353\277\307\333\3541\371\212\350\277\213\252\327\023$\316\350\277\330\031)r\245\'\342\277=1c\334\215\313\352\277\211\367\003\001\320\177\326?\003\303S8\223\331\344\277\264\023\0307D\264\341?d\202\n\306\227u\361?`=\344*DL\302?\010\001>B+j\273?\345/\251q\200\227\355\277\314\030W\240\3662\352\277?\365\323\252\270\306\332?/\360\260^\206\035\337\277(\363\203\340\226\306\351\277Q\206\353\333\000\021\303?@\017o56\331\351\277\251Y4kY\306\345\277\246\327\024:u\212\342?\301\236\010<\034M\362?\343]\317+\357\214\362?\250\3345\223h\375\301\277{\353d/\024\177\320?\353v\307\212\031N\360?\330Axk\022\212\353\2776\255\375\220\004\225\330\277\303\001\\\321)\'\352\277+\206N&\235\221\362?2\235\347\330\215q\345\277e\033\215\006\346\301\344\277\016~.\037\354\241\324\277\3449\213\303y\201\254?\337&v\031qy\336?\237\262]\251\217R\357?\260\035\025\314\020\000\345\277\231Ql\334E7\355\277\203J\300\371S\022\344?\257%\004{\263y\343\277\331\003\311C%\235\360\277\306\017\200s\210\350\274?\267\'\226\324\344\203\337?$\204\204\250\334\366\341?\2611\215\271\226\263\361?\304GV:\227\241\306\277V,m\034\370B\361\277\206\306\001\340\016H\345?\245608k]\340\277\276]\036\342w\\\350\277\222Y\20142\\\361?Ls>|*\304\301?\024\316\026\3475\017\326\277U\315S!\2468\325?l\333\223\254\324\323\347\2772;\262\035\265\364\342?\372\234\223z\350\'\357\277\267\247$\037D\214\366\277`#-k\034\354\344?\262\334G\233\216\211\342?\366\366d\036\235\"\346\277\036X\352\033p\025\360\277\227\002\272\327 \022\353\277\276B\300\231\266\272\362?;\227\253.\374\030\323\277\303\304\256.E\327\343\277\314\355\337\3407\311\342?~_0\215\304C\345\2777\360\222?&\231\345?I\235z\004\262g\340?!\253\020\032\023\033\305?\372@\241\255\354>\305?\\S\276S\351\325\307?\230H%\230\331z\325?\252\360~`s\345\310?8@=\030\234j\352\277r>BX#\n\343\2772\230\237|W\037\354\277\326\324\272\217L\020\322?\264\230m\3521\'\341\277m\371\377\224\001\317\341\277m\305K\021x\030\306?\271{\207A\302\265\327\277\223:2\231\r\371\340?\273\322\212\'\301\264\344?c\366 R\332\257\356\277\036}\321\326={\363?\251\225\026v\230U\361\277\010\260C\315\n\223\353\277\251\277fw\243\255\313\277\025\036\365,]\306\367?\342\315\201\220\276\343\313?\355\275\366\276\031\371\350?\240\023\256\r\3216\322?FqX,\323\204\341?F\200h\335\221\313\337?3\256\001\275J\004\341\277\272\235\372\335\341\265\362?\251(\305\020\034\277\362?p\261\276.a\264\344\277\215D\\Y`\333\343?\227\001\334Ldd\334?\321\312\300pA\330\347?w\354yo\353O\327?\305<\353\330\230<\357\277\016\363\266\265-?\365\277^B\302\030,\275\356\277>y\346\324gd\320\277co\311\326L\272\304?\205\220qok\305\326\277\215\316.\014\346)\360\277\002~\036\236C\\\331\277\336\314\343\306\336Z\341?\\%{#e\216\336?\222\010\0138n~\355\277\3271\000?\005\026\345?\032,\232L\323\216\345?\301\360A\352~2\362\277}\336\233\0008\320\341\277\371OK\0067\037\363?\314\316z\221\300\t\321?u8\177\224/\003\342?8~\010\002lB\337?\350\024Ls\026\302\337?\215\316 \353\255*\351\277\242\373b\"x\321\352\277\323Kj\223\330\315\351\277c\244\016\320N\245\262?\252\261\260iC#\347\277\030@\230uS\036\361\277\213\312\260R\342M\362?\026Q7t .\327\277=\366!\373\227\205\314?y\262\375\367\343\215\315?Pu&3\rT\360\277\177\031\n\037\2525\354\277/\326Ze\327\315\333\277%\261\305j\017\"\342?\0279\265E\001\350\321\277tt\310\204\220}\342\277t\204\203G\254\363\302?\0053s\362\260\177\324\277\222K.&b`\355?\022+o\233\314\256\357\277&)\363\215\265k\361\277:%\205#\257\264\340\277T\237\236|\353*\327?\367\026\2140\322\242\343?2\377\335)1~\333?6\317X?O\000\311?\277\242Ef\337\363\260?$\3260\353\n|\332\277\266\017\372>\213@\320\277)\215\001\334\0162\345?\355\360\261R\335(\346\277h>$AJ\200\314?\275\237`{l\016\346\277f$\375^\210\210\271?\231\244[\244\242\235\362?\000IC\334 \037\361?\341\314\002\005\r\373\351\277\262OY\204c\317\340?\267\346\3318\304\007\354?\275~:\300\355\227\344?\026\317\347\361\256\303\355\277\302\265\000\276$J\357\277\260\030\324^?\226\315\277H\010\n~\244\315\306?]\305>\005a\362\305\277\246\204\211_]\312\362?Q\300N\000_\206\351\277\261Y\001En\006\337\277\373e\340k\203R\343\277\'0\340\204\275D\337\277\010\237\026\005\034:\310?\314i\366z\305\206\263?7.\267\314Y\222\307?\343xYd\006\232\362?\245w\005\376\272 \347\277me\264\033\355m\345\277\026\252\336\275\374\332\347?A\237\230;\023m\362?\351\356\271\001\204R\350?\030\261\037<\007\013\344\277\206\335\210-\251\213\352?\223\307\325\254\177\207\341?\240Kz1\250\243\321?\373\341\220\346\177\274\316?\203\341\204\002[\360\332\277^G\322\336\231*\344?\367~\263(t\010\346\277R1\342\202\343\002\342\277\212\260;mR\035\305?5\255\022\331\r\271\362?\226K\211\314\022\366\356?\026\003\231\202\306\343\361\277\217&\261\r\005\323\344?l\025\276\277S\037\364\277\034\346(\023\243\234\353\277H\2574\016)1\314?\243w?\270\0221\330?\275V\352\273J*\332?d\003\253A6\021\342?\227E~m\311_\320?\016*S\326\316\365\342?\212\262\236o3S\355\277\002\221N\371\321\000\313?\001\327V\376\371C\362?\217(\271\352\324=\350\277\247l\344+I\"\347?\241\307\031\0208\302\346\2770)5\316\010\024\350\277\374\360\2225[0\361?\340\361\311ZU\217\340?\\\351\370\030\242d\360\277n\333y\216=l\340?\233\263\354#.*\356\277[\003\334\002vx\336\277b\021;\332\231}\332\277\332fe\304\210&\343?\352{Q\250\265W\357\277\017\207}\336\037\334\353?%;T\013s\200\326?\345k\333\344\264\302\321?<\'\207\214\322a\364?Q\201\t\207Y\363\351\277\033)\324Vk\372\330?x\263\224\007\360\205\362?\003F\375h\225\304\351?\340\377\301G\001\222\342?\332\371\277\032\316B\350\277?\275\030N\333\355\361\277\026\334[8{+\343?\357\306\n\265\215\032\357\277\357\221\240!\254\306\342?\247g\361\023\257\360\331?\366N\242K\315\333\356\277\034r \313\354\340\351\277\177\347[\367\333\310\333?\247>\311\301F\267\341?\374\225`\313\247\020\355\277W\312\'\365\355\271\357\277D\2207C\265\317\336?\277%\306\331{\203\361?\242\331O\362\267P\330?@G3\330\236\304\344?\303&\345\334\n0\325\277@paI\274\177\342\277Q\356\355`\013*\343\277\277\221\344\236\310r\362?\266\235Jeo\216\363?#N\223  =\324?/\373p\001\2104\355\277\023\005\"\231\231\035\355\277\262\355|\242\311\243\337?{\310\030D4\013\360\277bN\254\2151\r\347\277\231\345:\243\334\022\331\2778\272_2HS\320?\315\274\253\365\231\345\323?\211n\362\222\344Y\347\277\301\257\2066\236\341\345\277\010\346+\231@\350\305?\374\'\341\320\300\325\273\277\035x\212\314\243\340\322?6\277\332+\366a\351\277\346<\356\302\227\272\303?Bx\363\030l_\345\277l\370\342\376\007\311\306?\263\r\250\214\222{\360\277\0132\216\004\"\255\310?4\237\344\026R\001\323?\357\323~\352\205>\340?\307\317R\023\236o\345\277\331\205D\351\345\266\343?9\343\033$u\354\351\277\300my\205\266\034\352\277\254\302\343\304m\006\363\277\327|\034\2672c\343?\205\020\327\340\237\314\254?\030\371g^\247i\341\277\331\261\373\220\336\205\362?uy\304j\260\034\333?H\017~\347\3716\341?u\236\367\002\'\267\321?h\037\254z\350f\347?\204\355\243\023\204\337\342\277\210K\205\035~X\342\277\004\004\333\010\013\251\342?\276\314\201\307\035\306\345?\246\262e\3572n\336\277\213\260(\311\257\360\356\277\037\205\321fja\347\277{\314\214\346\3460\355\277mU\307\352\270.\333\2771\\:\200\026\246\362?\036n8\021 \321\336?\324\323D\370\271_\362?\327\240\016\317\022p\337?U\031 \'L\234\354\277ou\351\320;,\333\277\307\245\217\034JI\337?\370L\356F\335\352\271?l\010\374!\331\325\344?\366w\262\032\332z\344\277\304\013\272\020>\254\347?\202E\006\300\000\"\347\277I\313Y}\211l\357\2779\327\302\"u\244\344?`a)\317D\337\305?J*\344\2071\344\350\277Y\250S@yZ\362?\223$1\270\216\337\334\2775\271\256\034~\341\327\2770\333\345\346\207\223\303?gSdH\270\322\335\277\226{\237e8A\360\277143\026U\306\344\277W\265\034\3467\241\361?\334\\c\237\305w\346\277p$\313^\0060\341\277\201\023\017 \023E\344?\002\355:\303\313\004\311?w\030\231<\336\252\350\277$\225;\256\027\214\344?6\253j$\004S\332\277g\203\324\340D1\356\277\335\277\\N*x\313?\202u\305\212\236\220\325?\006\252<\235\014\212\361?\231|A\363/k\352\277@\343,\354\244\223\233?\307\237\342t\n\316\312?\350\225\030\016}\323\303?z\034\022I\202S\341\277J*\222\343\321`\357\277U&\373\335\226\244\334?\243\250\301\010\364\023\350\277\216\035\211vo\005\317?\354\247\027\031\377\221\362?\334\3215@\006\\\321??A\273x\343s\343?\305e\337\255\373\212\335?\014\035\202?\320\206\357\277\357\342\001\200\307h\343?O\017\223}`e\362?Q;\320\352\203\217\361?\364\376$\2715\215\334?\376\026\363\300yq\363?w\022\361~\3744\337?B#e:\375\305\340\277\024\317c\251\032/\341\277n\324<;Y\262\362?\025tp\351e\327\331\277\370E\242\001 \342\360\277\326o.\341\366\030\345?\207ZJI<l\357\277\373\332\037\235k\027\314?^\306\302\177\204a\343\277p\037\215\354\220)\343?\221\236\365\317\307\216\326\277W\004\r*\255\276\346\277}\205\374\376!\021\327\277\374\217\317{yj\324?\270\320M\312y\320\324?\313\222\t\006\251\345\342\277;\350a2\316\233\364?\1777\377X\006\201\361\277\220\255\352\302\262y\345?c\234,O0L\346?\237\366\276hKO\354\277\031\233<\200,\246\321\277#\265\207\"O\344\350\277\375\225\265N\205\031\361\277\216\325\252/\250U\333?\205F((\305\213\352?\341\250\267=f-\347\277\213(\246\321\310\372\344\277\225\004\303\353\331\314\267?\277f\326\226\235:\341?\262/sN_(\343\277Z\370\361\352aa\302?\351\256\t\304\357\345\346?a\354\346\r+v\343?\013z\206\357\320\223\310?\243Y\267\355\311\211\337?#\246\267\303+\237\343?\010P\257\024\034\033\356\277h\027\243\251\213N\362?\231::)\344\267\351\277\2670c\244]:\355\277r\323?\200\257\344\343?k\323\342\3749n\363?\'\370\000\334\315\304\361\277\341\370\305\303\354i\362\277\324\006\025\226\361K\344\277\253\037\342\236\210Y\352\277\240L\320\370\256\366\360\277\253\353_\357\2266\253?\006L\317\254\317X\334?\024\t\232\247\270\330\360\277y\225\377\026\367R\345\277\214\005\346\2605L\252?\251ys\377\221|\345?\265,\224\271\227\316\341?c\342\010\247\n\313\346?\036(1\376\367|\360\277\351\316\351\225\310\255\304?\214m\223r.\322\344?\225u\313(s\364\346\277\331,pC\251\266\342?M\341\354\311$\252\344?\3169\247\"&U\313\277\0359\354S[\331\347\277?\243\277\326&\245\340?$2\\A-U\352?\347h\226\252B\200\341\277\304\366\312\3637%\354\277\007\242\322:Cm\350\277}Dv\316f`\346?\202\206)\270\365\313\362?<2&Q$\370\356\277 %\002\260\017B\360\277\377yD\256\262c\356\277z\026\"\032\025\312\327?\315\266B\306Y\251\327\277\241/D0\244\312\355?\330\363\377\035\177\265\336?\033{\333\373T\375\331\2773?\367\224\375M\355\277\273\227\016\271\250\205\344?\270l\016\2444V\361?O\003\n})\214\332?h7\214\322\303\014\344?\3460B\001\033\334\361?^?\033\305\3222\345\277\031WkA\254\271\342\277Ff\020Z\214\365\343?\235r\324N\367Q\305\277\360\0050W\241x\362?\023\264\323PK\372\362?\243\227\342[\205\037\350?3\206\257\332/\230\337?]\302\023n\214x\344?i\2635\226\326\325\343?M/\243F\212-\322?\347Q\301\371\\\240\232?\025C\"#\345`\336\277\234\301\332R\220\260\362?\203\337\\}\177j\356\277\265].h\363\223\324?\010\242s\"\342\322\303?\212\256\250&\004\215\362?\362\325\014\246\302\244\331\277\342\372o\314GH\266\277\211\342;<r\265\343\277\336L\260\017\235\265\342\277\021s\216\017hV\353\277\254\002.\321\301\250\326?\251V[\221(\265\341\277\355Z\317Vlu\330?\251\227\344\366\314B\343?\215\334\'\245da\345\277\223M\243\323\264%\356\277\271\352\t\232p\377\307?\0213\004\'~\255\363\277f\n\235$*;\325\277\233a\322Z\346\340\360\277\000\231\231\0149W\327\2779\243M\347\352\210\340?2^\262\375\3276\302?e\315\242\032fQ\356\277-\304\253\3056t\350\2774\311P\325\007\224\352\277k\236\336\375\3435\362?PA\220h\313=\324?\272\347\035\312b\217\245?x\210\335\344Z\377\346\277}D\330\327\303V\341\277\321Mj\221#\202\350\277i\312d\222\234p\362?U$T\217F\314\351\277)\337\362\225\336l\324\277Y\035\036\300\357\305\346\277/\230\361L\232x\322?\247\240s3\311\366\360\277\242x\363NV?\242?K\324)<*\275\353\277\222{+\214\267\362\322?\340>\370\307\2447\360\277*\027D:`\244\352\277\364\\\264uh\342\341?\026\307\355\0344w\313?\303\246\214\177\204@\352\277\nD\010\377-3\322\2772\217\341\253M\277\350?S\206.AD\017\266?\256\370\t\005\316\022\312?\347\355\252\004\240\265\342?\230P\273\351\303\324\345?\375\237\327\322`G\346?\201w\304\305\207v\330?\366\200\273\310S\352\354?\370\242\336\376\261o\334?\3253%v\326\304\353\277L\023IB+\246\352\277\273\223\006\260>8\361?\032\272\202\321JF\346?\357Q\301Fl\353\361?"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "@\317c{(\276\334\277\214\215\003\216\305\325\327?\007\n\3145\005/\330?5\022Ul\026\276\327\277\322\231;!\032*\341?\352m\023\265\245\017\270\277\263\"\201.\213`\343?\366b\360\200hm\325?\3658^:\204\362\330?\252/\264)#\215\270\277&\330v\321^d\232\277\362\335\000\274\204\204\305?[\034\304/\031p\340?W\212\352\266\246\240\344?\"\306\202\0360i\331?\025\377\301Lm\246\342?F\n\t\252\252W\342\277\270\271\232\325\202J\312?8\231WXc4\333\277WL\002EM\375\316\277\235\025\022x\341\224\303?\325\306fw\334\327\240\277\350$ \225k\"\321?V\370\347\001\2122\330\277\240C\333tIm\327\277\233,\367\013\316\020\317\277{KO\337\233\264\325?\315\036\271\355\310=\337\277~&\211\247\210\325\330?W-$\213\204\342\327\277\265hO\275\365\035\300\277\247@\203\372\310p\315?\223u\341v\265k\345\277\010y\217*\224B\270?\311\215\322\334\\N\314?u\263\230gu*\313\277\010\242.\335l\376\327\277\027q\367\331\360\253\326\277\332T\235\016,\325\331?\272\206\342M=\366\303\277\035 \375\227|\222\341?m\022\352dY$\340?\177\322\271\010y\240\323\277\300\n\253\036\301\222\261\277`W,\006\330\361\342?\373\354i\275D~\343\277,\220Hi\205\334\260\277\2304\013\336\264\023\351?\221\0250])\350\331?\372q\217\216m\246\325?`\323\025W\221P\317?#\211L\275o<\305\2778\276\267\207\006\225\254?)\357\355\231\237*\312?J0&$\254%\347?Y\247\215%\333x\276?\334\215\340*\303k\311\277\345\263\205\247\220\212\336\277\327\253\264\222\247V\343?\nE|\322\310\260\267\277\352\243}N\353g\333?h&\226-\332=}?\007\010\245\200\202\200\314?\010\306*\251\277\240\335\277\271\341zuL\317\300\277=\322\257\355VF\265\277;\025\236\340\260\027\351\277J\013z\231\365`\335?b\200|J\274^\340?\253}\274\351\364Ay?M\311wc=E\244?\016\235\030:\276\223\341\277v\016\036\373u\336\341?.z\312\002\360\240\331\277-\204P\204\324\356\331?\272\261xQ\276^\324\277_:s\217=\224\312?\030Cc\304\017\215\332?\362\217\247\240@}\341\277\224M,\255E\246\325?\363P\220\3456h\302?\242\216\356\371\026)\351\277\301\324\343\321\213T\323?\365G8j7J\323?xw\362%z2\342?#\336\371\177w\010\353\277\372\r\260\"[&\321\277\305\364tad&\316?)\250</\005\263\321?\226it_\325\302\332?\003\371\336\351l\225\343?gr\347}\312n\321?\240F\257\254)\r\246\277\310}\2240\005\372\310?\313\343G\255!\354\346?\211\256(\206\222\035\270?Xt\027\211\350\262\277?0\255c6\244\364\335?\316\351\016\365t\234\336\277\325Y+z\307\367\352\277\300A\357\022Q\354\306?\033\354\213\310\2026\316?E\246\374e\335C\351\277\373\037\330\224\302\230\340\277Q\2274{P\021\337?U\310[\213v\362\326\277MY\217\337\255\311\321?\233\365p,\364G\343?\013\030\262\346\007\351\311?/\231\317\261\321\216\327\277c\214\372c\265W\220?\254\274\\\300\225\324\334\277\326\274\361+H-\333?3\334U\275\350y\225?m\253\232\274\016\376\311?\212\337Md\002\355\274\277\325\372w\310\243\362\302?\246-^7\217\337\332\277\307\314\350\272\212N\320?0\352\362K\370\037\247\277\376D\361\233-\253\341?J\215_\365V\336\267\277\030k^`v\251\353\277IB\212\337jJ\307\277\334\375\274\252\301\025\334\277\000\205\231N\303\337\326?\377(\305\207]\200\266?\274x\n\215 \357\304?\032\210\301\001}\321\304?\352\302\2109\300e\302\277\245nX\301T\336\333?\033\244\273\203\261M\353\277V\276\rJ9\000\324\277\276c\333\302f\n\320?\214[:\3276\300\330?g\340-\200\217\343\260?\021\302\357\323\305y\251?\342\\\204:\375P\343?\252\334]\3677\361\263?>\24722\332\300\250\277S\3254\002\031;\232\277?W\3476X1\336?D\371\341\245Q\243\345?\010\217O\201\021\233\343?\271\235g\375\260\001\342?\233Y\037H\303\304\326?5\362\n.K\255\331?-5+\374\330\222\321?\307\031\320p\035\254\325?\212\005X\314\236\033\301?A\030-R/D\340?@\345\256j@\363\341?\244\3775T\374E\313\277l\257\246\253.\201\333?F\360\230\244\036\327\255\277\213\307\035R\177\212\341?\177\031k\272\307$\314?K \310\356f\267\350\277\326/\315\204\204\376\341?}i*\245r8\321\277\333G\370\202\357\232\347\277R\000R45\261\321?\351\224\271\007X\372\326?\224azS\340t\315\277Y\350#|\374z\244\277\351}\354\351h\334\315\277P@\263\212\345\031\336\277\240,\216\\\260_\342?\350\332!\177\325\314\265?([\340\022\341\005\341\277\201f&#&\r\341\277u\014\207\2031X\314?\303s\342}\370\341\353?E\212\225+nZ\316\277\033@insz\306\277P\001E&PM\334?f\224\237\212U\211\351\277\033\021$t\366\213\347\277\231G\r\212<;\312?\374\352\027\004\217\000\343?f\367)\264\334\226\335?\255\351}\336\222\225\342\277L3Sj\\T\340\277\315$\316\036\364\276\344?-_\243\370;:\303\277\034\000G \247\213\312?\036\r\227R\217\244\242\277\245\257(\333J\213\354?\350\246\320\326\034\"\333\277r\324\362\000\230+\303\277>\346i\310K=\342?d\274\364\260E\274\326\277\250\222\037\331;s\212?\001\234r\347?*\326\277S\326\3575L\307\333?<\266l:d\272\350\277\226+\270\342\261s\303\277w\326\306b\276\351\304\277\211\271y\325t}\304\277mNg/\270s\301?.+\0278\r\270\353\277\221&\366\031\333y\343\277\342\322\200\277\024<\333\277\306yC\2723\324\323?\223D\2364o\322\342?oK\211oC\205\330\277\017\331\324;\241\312\363?\370\037C\027l\301\346\277\201H\010\326^\231\345?p9\307G\256E\341?f\241\340\244\271Q\316?\363a\335\036\256H\331\277\327\330_\216\371\251\261?4\371\2075;\273\333?]\215\026sr\246\341\2773\376\340\344\245\357\344\277\016Q\r\357\247\276\330?\273\305\'E\256\377\352\277\032\346\2238\233\001\325\277l\230\355\004\276\310\330?\341\231\254|]#\311?\251\253+\306\354u\343?!M\005\207\222\313\303\277\305\260\036\204\320R\353\277\336\233\016j\317\372\262\2779X\221<\256c\331\277\360\037\304\352\352`\317?k\236\255`\370\324\354\277\3221q\354\377\246\302?\366A\300G\031Z\316?\376\331q&zn\340\277\n\031\223\315\340\201\355?\306[\0376VD\333?2\203\220g\312r\340?9\213h\230\371\232\314?\341\034/\244\323s\263?\356\036rG-\344\266\277\021\217-\303\261\263\273?\"\347\362\266\245\253\306?\233UZ\335\323\351\350?]vr\370\3202\334?_\235\335%\372t\346?nW\221\211\250\246\303\277Dy\240a\236\034\340\277\350\233=z\020\242\331\277\236\2079\002\310\324\345\277\014\255R7\0225\327\2773\354\312\223\274\335\321\2771\377\334\244\253\250\323?\017G\366\232\257\360\340\277\235\312\305\360\210\013\246\27710y\351\350\360\275\277M\266\013\027\244\272\353?c\361\304,h\342\342?\372e\\\026\272\354\315?z\017\246\355\2429\334\277\306\014W\254\033\342\327\277\357\222\345\017\302G\260?\226;\023\217\375\010\341\277ey\336\022\0175\303\277\300\250\220\n\213C\333?$DH\273&.\331\277\325\223\036z\267\033\334\277\224~\337\026\3678\354\2773H\247\247\332\247\275\277\301F\031\266U\002\332\277{\305\367\235\3234t?2j(Z\0108\352\277\3710\213\017\370Q\345?\330\177:\314M&\333\277\365\001\002\004M4\346\277.\357\267\323_\336\350\277\265\332\240\345\2348\315\277y>\013\325\313\247\325?\313\344F\314\\4\331?{oN\227&W\333\277TJ\273\266p\243\333\277\261^\250<Q5\315\277\037.\254a\337\313\323?\202\340\235\310\350\t\326\277\3066\3060n\275\335?G\263\255\230\266\325\260?\371\266\253!\3221\333?{\004\200\347\226\335\307?\363m\024\032\323,\340\277\230[\306$\022\250\324\277S\277\027\330\3153\346?=\024*<\370/\341?\326\213u\327,X\332\277O\007i\356\247}\311\277u\324\302\331s\211\341\277\364\233\363\035\346\016\322?R1!|a\236\351\277<Tp\017\206F\274\277\n\300\235\362\374\242\323?D\022\215F\234\"\276?\307\353\355\226Py\304?\007\263;Q%\312\330?\271Gw\207*2\320?|\330;/\'\275\333?K\032P\010\336-\347?{\243p\303V\323\303?W$P\313\373\326\327?W\323g\206\347\322\333\277.ls\037OL\321\277\300c\211\275\352k\327\277\325\252<\031\t\000\344?\345\267\013\325\025/\335\2771P!_\326\031\341?!\017\206\177\211\276\270?J\202\037\'X\225\316?5\370N\312\246 \307\277\0010\221\001\272\031\264\277\003\217\2424!\324\261\277Fc\365{\376\324\266\277p6!\271\302R\333\277\354\257U\035{\352\331\277\024\267\275\277\253\360\270\277\005r\255\372\317\367\340?\036\005tg\352b\351\277\323J\213\214.4\307\277\230DMb\017\320\272\277B\034\300\0257\366\305?\334o !A\367\315?<,N\376(,\320?\251\211\257Ma\247\314?G\311\236=\304\377\334\277\375\030\014-\017\030\300\277[\323\237\304\223\211\332\277g\344\367U\035\026\327\277>\254MG\200s\343?\352\227\206\177\306\327\316?k\234:@\340\266\320?\2560\234\372Oz\337?\201\215p\341_\257\333?o\271\0023k8\226\277\357\2612\217r\351\347\277\204X\254\247\200\215\353\277Jo\240%b|\335\277\320\204\217s\231T\351\277W\307q\350M\003\341?r\266h\315W\030\321?\212\366\263\246)7l\277_\362\250\020\273\311\323?\255\0260P\256\240\341?{t\247k\037E\304?\\\013\340\263\216\335\335?\363\2769<\277A\352?F\021)Y\223\334\201?8\325q\0101\261\320\277\345\333Fz\237f\342?\002I\246\367\220\252\330\277\323\355Yf\245)\326?\315XD\204-\306\327?\037@wPuQ\312?c\031\376\000\211n\330?\256\025\3177\337e\263\277\234\344U\016\326\312\305?x\315\204P(3\354\277\2336)\2246\214\327\277\010:V?\235\365\276?\300\240\230k\260y\323?\201o\214\326\262\371\313?lb\3071\313\270\331?kkU\205t%\330\277n\270\354,\017\301\341?#@\000\030\313\327\331?\023\250\267\215)K\361\277Ee$#S\010\323\277\234\025x\301\225\254\303?\355\213\014\033IP\332\277\225\270\346\006~D\317\277f\263N&\034=\252?\307/\316\245>o\270\277>\325Pl\260\225\346?d&\372\373\340m\341?\365\314\355pb\020\353\2776\'\301\265\313C\315?\327N\024\334\237 \322\277L\262L\3365\323\324\277{k2\264\031D\307?\202{\306\270\242\177\351\277~\3716\326l\241\332\277\227\364\020$\317\222\230?\177s\246\376\352\347\342?\350\223w=\347\352\345\277C\343\364q\316\033\264\277\354M\033\177V\341\333?j\315[4R2\316?\270\203\271\\\316\312\305\277H4\344M\306\213\270\277\030\263\013\330D\206\332\277O\007T\302\325\206\341\277_\324\233\013E8\325?\256\220\024\013A\200\343\277\325\321j\3676\334\275\277\002!\013\031\201,\347\277\010{\221\305\004\330\270\277\032V\246j\034\216\335\277\371)%p\264;\342\2770+FT\277\374\331?\203\306\237\275\304o\316?\257\343\343`\261\204\333\277\251\276\224\312\371D\323?,\217\317\361`\316\313\277s.A\273\305R\302?\356RfE}\261\321?\203$c\317\227\245\304\277n\373n\335\332\255\355\277\336\017\0036y~\335\277\231\032\233\250M\"\326?\036,_d\217.\331?s\241!\303e\341\344\277S\310\253\347\214\203\321\277\322\213\356\365\203\023\301\277\026%%\201\322L\256\2776\244f\207$\237\264\277\013X?\303\323J\337\277\210\\\217\365]\272\350\277\336\362\276\3613 \330\277\022`\264\215>3\333?k\036\321\032\333z\336\277\223\\\312QB9\306?p\260[R\254:\344\277\352e(\2524\020\304?<5\246\320\276\314\271\277M\355\037\272\220\212\320?[K\tM:\017\300\277\255\277\016\370\343m\334\277\033\250\324bOw\320?\032\372!S\010l\337\277\351\263\312\342/\331\347\277O\016\261\241D\027\307\277\362\275\024\364W\336\335\277\276\2524\225\013\347\337\277Z\224\304\333]\252\310?\262/\320K\310!\333?\210\030!\317\261S\350?\331\222\245W6\375\346?\\v\350\276\371G\254\2774~\'\240\335\340\346\277\335\301g\321\375\350\305\277\255u\376\242\215\'\326?q\325{N&\202\254\277\303ap\215\371O\321?l}=\344\007\320\327\277\210\346\327\277\327\360\325\277\364\364]\227\033b\333\277\234/\353)G\331\323\277.+\223g\345\263\334?j\212\327\357\241\303\322\277@\205`\025\300]\343?\004\275\340\036u\334\341\277\213\221\206<\365\336\324?\2645\023\221\304x\313?\357)\241)\323>\327?*~\212\332\253\360\314?<|W\0243\005\352\277\307\020\300V\211\307\327?\372\341*\204\264\301\313?\345.\232O\334\375\261?\231\304\"\245V%\332?M\234\2610\256\221\244\277\357\337\352\277Ye\301?t\336x\206Z\347\337\277\023\371\351f4<\331?\302[\t\327\375%\330?\004Gj\233\251\323\332\277\371\212Z\314\265%\325?#i--\245q\337?\257\201\342\331^\242\341\277+S\r!\327m\322\277o\353\224\373Kb\332?\032\366\277\030O\177\304?\0105\201\233[\233\331?\350\254\202\240\016g\235?\327_\366\266\226\024\314?s\r`mJ*\337?d\030@f6\275\344?,O\300S\377\260\321?J\030l5\005\'\342\277\366\017D\265\253\013\302?\203\241<\344v\242\336?(%Rd\254z\335\277t\324,\261\020\266\261\277/`\334_\005\371\317?R\243\204\334\356\006\357\277/%n\016\363\353\336?B|\352C\362J\323\277E\007\313\2407q\334\277\202\327\213\263\263\027\324?\301\036\245\362\021\222\335?\321=\330P\274\230\315\277F\0379\031\236d\217?\210\223\371\241\377\001\323?Y\353\243\312+\325\260\277\222+\025\307\010m\304?\025\347\303oD\305\345\2770\311ogv\342\316?\253\316\357kxP\265?\345:9F\332\021\320\277\314\032\235\"\001?\327?\276{\235\251?<\266\277\255\202FN\255\004\353\277\304\217\027M\034\034\271\277\376}\216K\301\364\335\277\337\226\2403s\323\270?\002b\232~\312\301\326?\273\341\000*\321\'\301\277\355\353\035\026Ju\315?}\257\231\257\204\201\267\277v$\275y|\'\300?\321\'\351\333\313\221\315?`\276\007\371\307R\303\277\225$\3075\341\233\320?_x9)F\202\326\277\3349\234}7J\315?NL\264\204\264]\340?5\224\003!\231\027\302?20\234\200\302\246\341\277\340i\256\303nG\330\277IT\374\376\304\232\332\277K\n\234q_\220\332?\223J\362\363Cp\316?\007\232\033\254\342\271\347?\372\347\002\327\2201\337?\305\001\016Ly\254\341?\266\020\334.0\010\344?8\356}\206\213\226\322?];\010\364\323\324\340?\263-\233]\026\242\320\277H\266\240\003\345\365\306?o\363N+qY\345\277Mux\\_\271\313\277\307\203\203_\336^\342\277\272K/\242\376\323\331\277\177\256\013duk\331?\203\\\2516\306C\331\277\003\233/g\216x\323?,\302\016\330)\243\300?\273q\243\177^4\330\277&_\212\341\247N\326?\325O\232\324\361:\263?\276:\210\302\255\354\320?\017<\021\356\275\030\340\277F@\261\t\352\003\317?\204\262\261up\203\307?\250\222\241\305\361U\306?\313,\321\004]\327\341?8=J\351\004?\264\277\263\317C\017\330R\304?\260No,C\303\333\277\256\356%\244\256\253\351\277\214\365\006c\023F\323\277\014\370\n\330[\334\262\277NlzIG\032\351\277\207\221\376\t\240\024\342?r\030T\034\255\277\273?\331\311\245\376\316?\337\277\226\302[\010s\004\330\277\367\204he\030E\350?>&\330\311\306e\341?\255\302\022h~\203|?\030\331\201\331\3513\277\277\246\\\263I-\232\327?2\363s\204\356T\355\277bL\232v\311\033\326?Vuk\362=+\302\277\345#J\231\354U\264?:\306\260\t{B\337\277\317\000\010\207\236<\325?c\235fXLQ\241\277\354\233\311q+0\302\277\203\203\231\217\013\002\272?XQ\277\246\316:\344\277\322zm\023\344\350\300?W\375(IX\007\222\277\027C\224\330\255\222\340\277\356=\273v\227\343\267\277^ \340\261%*\327\277j\3624\317j\336\335?\016br[\231\334\334?9Xg\326r\303\304?\3451\260ms\025\301?>@\323\366q\330\333?+\347h\357\026\354\321\277i\337\336\200\351+\337\277*\010\231M\2376\322?\033\302\010\262J;\340\277e!\362x\357f\323?\347\216\217\361-\237\346\277U\256\207\377W\253\325?T\354\240\351\245\362\331\277Gc\362\364\361\"\322\277|\365\374\007\346\355\341?\344{D\010\320\253\340?-\242\344O`\030\320?\233\003\001F \316\222\277]\213\253\005Kj\313\277\262\275\270\306\373\375\320?>\2464\374\006\007\322\277\250\356D\352j\253\334\277\341\377\261\305`\206\320\277\323\217\255)\260\362\264\277\r\365;j\350\344\223?9\330\315Go\023\350\277\252\246\350\214=\315\327\277\"`\013IV{\341?W?y\231\261\306\314?(Ugy\251j\321?\3727\301\241\037\254\303\277s\312+\314\274\000\316\277\262\220\357\203\246\330\343?/c?\343\246\261\324?X!\355.\225A\334?\372\363Y\220\"L\311?\206N\233\205\373\347\335\277I\'`\215\362:\346\277\330\201\266\235\302\337\257?\276\0231\200\010\026\305?K\rD\315 \363\205?\312\345\203\221\310#\260\277\234\310\201\\\307)\331\277XJv\230(\220\317?\363au>\341\364\273\277\013l\307|\014\026\320?\204c\227@u\034\324?@\204\344\344f\260\301\277\032\231\n\264\311T\337\277\2159\221\243H\021\346\277\326)\212\377nf\274?;\243k\"\243w\322?\264\214%U\nr\337\277\244\037c\271K\017\342?0s\263\330\362\263\342?A\007\333\271\211S\302\277{\022m`^\263\342\277\376\361\252\360\360r\267?\247\310\374d\353\250\261?\237\337\215[\2004\341?\231\220{*1u\321?\360\310\001)i\010\343\277e]\330\311\007<\316?g\363\2447\350\326\263\277\330\200\300\247CS\335?\335x\272\304\177V\341?\023\336\273\371\265\t\341? \276U\2160\327\273?\262\301\337\225\"\030\317?x\216v\027\032\350\337\277V\202n\357\212\277\332?\202\254\257\010\322\203\320?\211\333\310\307%\'\345\277\033\264T\271\202\036\346\277\265\244\r\333\262\216\346?Q\342\225\361\020\251\321\277f\233\351-\013\274\351\277\363\221\312c\'\353c\277\217\177\306\371\nj\303\277\206\n\303\254\221\340\302?\2267\245\004\001\202\342\277\321\202R\360{\003\332?-\352\311x\275E\357?\002\335\251\212\341c\313?9b\177\006\332n\231?\305\275\005\232\237\312\322?E7\236\333\270\314\327\277\324\243\217q\330g\307?\001\320\375\"\002\377\267?^l\323\310\375\344X\277\320\363m\352\007n\333?g0l\006m1\322\277\257\2013\030\255\326\333?\314\373\227Y2=\322?\']r\250\321#\337\277\314\242* A\205\341\277T;u^\253\342\317\277\201F&\371q=\343?C\334\321\232\330\332\343?$\204\336\253\332$\334\277\307]\320le9\342\277\236\212\2267\262\320\306?\306XR_\342\t\300\277q\244\230Drj\336?}\261\032\354\366\000\311?_\264y\'c\261\335?\263\327\234\003t\'\341\277\247\353\220\360\323\202\342\277\351i\367\341$\305\333\277\033\327\231\222+W\241\277\250\255\313\376\243\304\311?O|c\233\3455\250\277I\257\177\251\372\312\332\277\010p&\222g&\322\277hy\365\377\215\235\341\277\003Vv\000P\304\336\277\030\002\375\344\235\376\351\277\'\364\344\233Y\242\335?\006T\3070\230\260\242?\333\327X\204\001\206\353\277}#K?\235\331\251?\025\201\342F\204\\\337?o2\265\313(\366\337\277\327Pi\376\366\004\250?\361dk\002\375\232\305\277\215b\334\207\343f\343?z\002,\230 \254\323\277M\032W\316\221\362\341?\007\254~E\3335\341\277\264N\304R\202\351\272?\370Z>U\\\337\271?\341Q`\005L\331\245?\030n\327\3701\314\336\277U\311\261\014C\276\345\277\007\362\323;\376>\330\277I\004:\317\340J\301?\236\276\225\361\017\332\242?\321X\210\016%\233\325?\370\201]\254\312{\331?\311\301Z\2706F\313\277\330\177\331\010\"\n\333\277\335\330\216\005+\030\330\2776\363\324\275\035\243\321?\253\326\262\307\"\361\325\277\364\366CUS\321\312?\"s\003$b?\301?z\365gt@\233\304\277\251\312! \235\257\323\277\220\356)\235r\037\322?\237\332=\0307\317\341?\301\213\246DIQ\310\277u\262\223\274\334u\322?6a\013*\211b\301\277\300-\252u\373`\327?\377\361\031\360\256P\362?p\264\313.L\020\332\277\345\\\033\356\254\016\311\277R\035\206[\010!\352?\177\260\261\242e\364\331?\036S4\"\325\243\314?TY|\273\204\326\330?Z\226\236\265\207\316\327?\3710\214\202\333#\307\277\244\333\227\372\3537\342?\327qL\255\315\360\300\277\023\227\204\2055\355\271\277Ae\224|\260\246\340\277\205\210GS\253v\270?cX\237\313\374\241\257\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\232x\021~\372\025\311\277\017\266\235\233R\260\275\277*k9UY\002\331\277PaAP\354\245\333?\004\237>\334\362X\302\277\005\233\263\006\356\004\324\277p\211\207\254\r\273\300?\003\313\273\343:B\341?i\032\216\323\021f\333?P\013\240\272\265B\305\277\252\303\230\310Y\334\225\277\235)\373lp\027\336\277\337\301\215\264\202\035\323\277\277#\213\023\313\361w\277\321\315`\273\312C\305?w\253z!e\377\300\277>\002\347\260\355=\345\277\354\276\355\262t5\335\277],_\3379\000\300\277\324\341\272\254 2\350\277K\005\021\007\007\022\325\277\222+\277\026\n\311\324\277\316\3473\3623\213\315?B\344\306i\177\303\323?\201\323Dm\273\321\232?T\036N\306X7\260?l#?\010\013\203\245?\000\346\020#\375!\341?0J\301\201\311\354\267\277\205\227\352\327\365\014\331?\212<\205\247\007\322\341?\030\255_Z\341o\334\2774|3k\' \325?\221\351htU-\324\277@\351\245\304\250\021\340\277o\'\302\221\261\005\333?-\311O\257G\331\303?k\244\225r\360N\333?\327pW\271B\211\323?J\376P\247\374\245\304\277x\024\266\034j\033\327?\277K\263i\300\030\314\277\334\265\371v\355\004\333?\002(\2740\021p\347?\246\233\344\016t\273\301\277\213\267\005\017{D\252\277\262\253\377,\207 \260\277\333\305\337\202\271\200\310?\257\276\005\366_\t\337?\224c\351\235\003\343\333?k\021Mh\001\013\311?\242e?\3369z\265?\257\236\364\364\360\266\305\277P\004\316\310\027\226\330\277\312\024\014\004\311\222\261?\271\277i\261\n\241\334?\00589X\324X\267\277\224\215gV\020k\322\277t\035m\334;F\314\277^*\022\276\310\233\325\277\025\233\225\202\275\345\344?\031\306\367\307\227F\323\277\230\250&\014\300\026\327?\025\311.8M6\322\277\206\300e\033y\021\304\277\237\221\247\302\013\207\340\277\001\006\300O$V\255?\030A\207\206[\317\313\2775\210\220h\272\247\321?\035\262\310Vv\256\302\2777%\303y\207\003\330\277o.\306\246p\017\322?\177n\216\305\201\323\326?u\022?\237\365\302\332?at`HF\027\340?\203Z*0\004\324\300?W\202\265\323f6\323\277\247\000\232h&W\331?b\214D\360I1\320?S\017~\022\005\220\340?\336\006\236\3048\275\272\277\325<%\350\033\370\210\277\347/\252\354\227,\333?\"\2728`\024\301\263\2776\241 \311a\320\322?\001\225yZ\330\216\302\277O8E\300\271\312\310\277\213\242t\202\376d\323?\034c<\261:\020\336\2772\375\325\235\374\025\312?T\210\302\177}%\261\277\326g\322\345\372.\337\277\255\327\272&.\004\322\277\343#\216\275+ \340?\262aG\314t\247\265\277HV\231]X*\321\277\03169!2\236\341?|\256\236\221$\275\335\277\260v\205\034\241P\343?\027\014\361\352\022\366\264\277\207J\005\361\343\317\322?AU>9\243\216\314\277I[X\3700\'\300?CVN\302\321\240\315\277\375\013\237i\226\314\302?gc\372\306l\357\333?e\342\350\034l\203\334\277#\006\032\320\245\315\266\277\243E\022\265S\215\304\277\251\352e\376\007\266\322\2775\306oQV\353\326\277\233\354t\350\026e\317\277\311yU\222\363\342\306?\371\200k~Ik\316\277#\232JRr\213\336\277\356\'\035\267\220\353\310\277\366\215\331\277\305R\341?\370\201L\027\036\337\341?5\037U\237\314\265\331\277u/\317\357\243\326\340\277r\274I\tv\331\312\277\206\360K\035\243\336\332?\317\350\023\206\243R\254\277\331\354\213\334d\264\273\277\346&\374_\266%\313\277\016h\346\252\365\250\341\277i\034\321j\316\275\326\277\201\221\004g\357d\330\277\322Y\306\271\344\002\322\277K\323^\352\220\002\277?z\215$*y\305\325?\246|\366\322\362\225\304\277\262*\017q\245i\311\277&\367\275\331\371N\313\277\364\214Bt\'\206\310?\203\367\210\323\221l\320\277\016}\035\325\331\312\324\277+z\3264@\017\311\277\246\220\275R\336l\302\277&(U\022*&\312\277\2735*\025\016g\325\277\tw`6\032A\316?T\362y\371\322\234\313?K\213\247\035\337\001\326?.S\227\255\272~\272\277\2718fB\366{\334\277\376\345>\337A\017\341?\313\277\225\325\2628\310\277\334!\351\215Jb\226?\371\315\236\001f\204\326\277\217\344~\363\021g\321\277\245\343\3631\200\333\320?C\226$,\375\227\327\277\323B2\220_r\301\277E\355d\226\031\270\340\277t\324\327\270\234\375\311\277}\255>\267\"=\343?\245U\347\235\232\024c?\252d\235[3 \310\277\363\246]\300^\003\332?_\375\374\217/\307\227\277]\034w\337n\332\275\277\\~\354\023\231\315\266\277\233\007\314\"\244\352\331?{\034*\207\020\'\250?\201!\332\356\234\241\307?o\231\223\002\220\227\312?\324DfY\0258\312\277O\315\340\237p|\325\277h\247\027\362U.\323?\343Ey \007\246\325\277UibVU+\321\277\323I\275\276i\233\305?\354\271-0\356\234\340?\314\033r\313\375\000\343?U3\210g\322!\300?\303\247\034\274\037o\273?ARd\361\233\003\334?\313Jz\223\3522\264\277 \342,\021g:\321\277\022t\256zYB\340?\354\313\034\002/\005\320?\007\357!\274\326\256\310\277j\025\321uN^\322?\367\274\322a|o\311\277\226\026m*\215\233\311\277|\251sI4\330\321\277M\374%<\300\317\276?N\244\263)?\\\307\277\344\273)\363\333\t\301\277\340\265f\330\366\236\261\277xB\335\332\260\220\246?\262\235\024bK \326\277\320\240\025Nj\274\234\277\264\231\001\023o\314\314\277\370-\034M\336?\300?\260\177\230\277\316\233\343?\272\322:\220\363\310\311\277t\275\036\320~\350\231?\275\016u\264\'\271\326?\213\274:\336\310n\255\277\253\320\221:\2529\341?\327$\264\277\237\223\307\277j\007(t\341\360\275\277p$\031K\005p\306\277F{\303\027\005[\247?\024\021\2071?\224\345?\251\241\227\364~\204\264?7\230\r\221$H\322?f\305\364%S\222\325?N\016\223\3233X\320\277\350}G\365\211@\306\277\250u=)\253>\331\277\307\347\320\230\253\222\340?v2\316\203\327_\346?\265\212&\265\3668\315?P\224\356\366\202q\347?\357\035\375\366\221,\270\277+\336\231\345\267N\323?Pm\021;\220j\301?6\375\252=!\367\341?\257|.\240k\035\315?*\252\304\334H\223\266\277\202\267-\354\017\n\251?#\364%\003\302\325\306\277\246\340m\237\211\271\302\277\327\347\304p\227z\300\277Z\351\240\005_g\277\277mOG\360\036X\234?C\361\360\032W\322\311?\022\025,s\256\330\333\277\215d\203i\251\315\327?h\276\265\033\016\374\337?\327<e\3367]\300?c\021[\246E\335\334\277\202Qo\232\002}\322?)\356]T\217^\334\277\375e\344\030\367\026\304\277\344\376%\035\337\314\311\277\014\341\034A\251\201\271?\022\t\234 \004\212\240\277\211\342\306P\360-\205?6\305\375e\232\262\327?Q\013\022\026O1\342?\007\202\360=\330\035\332?K\010\327 \n\341\322?A\261\265p\255\205\266\277t\255\025\245\004\345\253?k\242\356\024*\002\311\277 p\216\241\343D\322\277i\361B\035K\334\304\277?\302C\025\035\232\304\277q/\n\2271\232\311?l\303t\233\241\356\307\277\340&\3118\343<\323\277\t\304X\230\322m\327?L(\031G\267\005\332?\001Y\231a) \274\2776\177\006\240\335\305\327?\027D\364l\275\206\331?3\005`\332R@\341?\271\026\204%`8\316\277{\\!\2679|\320\277\244\330\204\0047\340\310\277\354\206\rd\260\370\343\277\303`oh\245!\262\277\271Ao+\277\255\335\277\216IQ\035\227\301\262\277\010\207\310}\372\325\270\277r\324BOM\221\314\277\257\272\375\305\005+\204\277/\342\002\320\034\344\261?G\212\200C\"\276\300?\271}5\375\231\240\251\277\226?\222;U\020\344?9\272\016l\265\017\304\2775sk\275\333\233\340?]\366\315%\377R\327\277\324\270.\215\225~\315?\202\357\263\373|l\330?{_\033o\324.\321\277\031i\336\301YO\322\277\3421xo\210\332\311\277\307S\252*\037\035\334\277D<\304\326[\224\327\277\311\317Y\001-\304\333?\001:\271\225\353\373\275\277\234E+\270\235l\324?Zx\375)\230/\331?<\206\270\247\021\373\335?\214\362\017\362\340\340\332\277\200\253>\351\312\335\314\277\241!u[\215\302\275?\257\217*w\320\014\320\277\374\361cRX\300\221?\277z\032\344\274\361\326\277?\236u\265\3552\324\27797\225\207\210N\341\277q\207\343\317Y\373\333?h\351\246\257\311Z\341?\267\254Wz\327I\277?\300\340\321 \331(\326\277\364\235\017\320\376t\334\277B\344w\246S$\304\277I\2221\315\032\013\320?\177c-\221\032;\331?\255\0277\257{\360\322?\025\212\205\rMz\326?\254Q\033\223!\232\311?rn\013\210\255\025\314\277)-\263\206\001\370\323?\273\364\223\0135\256\311\277J\351OQo\231\315\277\257+\353\000\223Z\275\277\010\351Ae\250\007\252\277*\275\365\"\230\373\325?\036\330\357\2002\343\337?N\243\r\317\265\033\321\277\367\274 \271\335\237\324\277\021Q>\020\371\216\245?.\263\356\344\316\235\330?\033Q\357\333\210\377\305\277\203\023\216\351A\233\300?\341\235\270\257\270\357\334\277k\035WH\t\274\333?\016\366m\3131\233\321\277\265\273RH\262F\304\277.E6\007\222\370\346\277\226]\014\350\240G\321?\272\323\233)\376\343\340?\307\306\320\266\332\373\302?\221`\266\024+\245\177\277\201\223\261\026 \251\306?\201\251\325\221\321\225\320\277\306\305\004\270\340R\341?\1779\017\005\220z\335?\377H\177\222ft\260?\266\336p6q\033\335\277U\217+4\002\325\302\277\275\257\217\214\266\367\252?\225\030\274\247\237\373\320?\324H\336\346\272\006\316?}/\036z\365\200\321?-\006Z\221\314\017\251?B\245\2330\005R\314\277N\007\371\266d\005\316\277\357\365#K\321\260\320\277\t\t\236vx$\243?M\177\262\311s\305\240\277}w\034\017R\371\310?\245\241\037\216\366\373\302\277\034i\020\370\322l\332?g\207oI2\'\346?\364\242\277\377\323F\342?\025\224\236\346\0373\324\277\253/\332\302\025\255\320?O%\031tD\365\325\277\300\245?\004\006\t\340\277I\261\367\215\336+\240\277\305\303\323(\344\347\314\277\305\r\351\347\347\006\304\277.d\017=s\307\342?C\236[A^\021\334\277DU\342\202A%\337?<\022\'\255\241\244\340?\177\216\365|\377\244\264\277\214\220\267M*\323\300\277ms\206\313\326\367\301\277)s\304)\336l\266\277Jq3\300\210^\330\277\257\006\243\032\370\304\307\277\014\000,N\300\260\315?\225CB\363Y8\330\277\343\244\303!;e\314\277\360\202\005\0228\212\262\277c\020\246j\371\335\223?\317\355Q\276\255\265\271?\201\360J#\003\354\334\277D\'\352\372Mw\316?\201sH\'\346\331\334?\354;v4[\007\300\277\261p\264\034p{\301?[ J\260n,\262\277\253\033\270\256\205\366\327\277\032\244=\202r[\317\277\0332\3727\256\312\265?k\252$\242\013u\336\277\006\035P\032k\324\317\277\005K\036=b\333\330\277\004\214\204\016q\036\310\2774\333Q\375t\326\263?\211]\305/\357\217\330?B\304\253\321a\266\344?\374\"\'\'ou\312?\355\'\343\314/K\321?\262\211>\336/\025\322\277\000d\301\362N\215\241?}\271\336\0058\242\312\277\000\257\367\375\215\001\320\277y\321o\235x\177\320\277EE\332|qn\310\277\346\212\307\021l\224\334\277\335\354\271\307\277\371\323\277\370[\2355\330T\333?E\023<\224\034)\342?98\201\255h\307\344\277\217\206\t\323\0107\264?\243\211\212\223M\335\312\277\300\314y\007\224R\270\277h\225j\222\200\316\320\277\231\023Y\272\362\352\326\277oeYd\261\346\246?C\235{$\020#\336?\365u\202\n\245\\\323?\215#\241\224\034\377\304\277\342$\347\002Q%\342?\362.A G|\270\2772\026\013`f<\305\277*\025\206\n\237\020\251?M\344\346\250\212&\332?\326\030i\016\322\322\332?\rGG\361*\"\326\277\256\312\257w\026\323\325?\371\022\244\322>o\271?\255!L\022O}\344?\333R/\020*!\331\277\256A\027\005\213\366\303\277w\202\233-M\004\300\277d\005r\320\372\371\327?\353`\320\215\342\036\344?\232\262S\031\022\215\340?v1_\2204\026\331?\374\324\261\370\352\337\314\277\270\001\014~+n\330\27727H\256\320\202\334\277\tq\216\033.\177\331\277\250\222Aq\325\374\313?\313[s\265q\"w?\3337\226Hb\245\267?\356\347\000\341\320\343\310\277Z\023S\\\236a\323?\270q\034\376\317$\310\277\253\271\346\033\247D\344?\301\200p\020mI\246\277\003(\357\036\0356\245?\264\022\212\364\2574\340?s(\347\322\026\224\305\277\r\375T\331\356\366\322\2777\265\306^\030e\324?(0|ip\200\320?Q\377\242s\321\024\330?`\203\370~\344_\323?\305\277\325\320\367R\326\2770\372\274`/\307\301\277\212\272O\354u\n\324\277\220y\310\345M\355\341?\275;\211\"Q\362\320\277\216\241\234\310L\272\302?ps\202#\023\203\245?\203\206\352\301\323\232\341?\247\372\264v\253=\327\277\371K\027&\007\\\337\277\240\027\214\270\347\032\344\2772\243\305V\3701\325?%]\317e\016\343\320\2776C\013\3550u\327\277\313\220\346\2113|\341?5\262Z#\264\364\311\277O`\374-a\327\303?O\212\315j\241\342\307?]\004\023\220\013\356\341?\331\376\3528\026\210\330?DPDi\312\227\310?Mp\231\010~j\333\277G\304Ek\270R\311?\351\376.\233@U\344?aR\013\361b\370\321\277\276\314\037,\320\273\303\277\331\022T\336\263\025\220?\364\350\337\022\236\356\336\277\270\2239|\270\010\333?\022\244z\272\213\217\335\277?\331\230\235H\335\310\277a<\347\024\232e\324\277\236\241\326~v\307\331\277\232+)\340\0015\316\277\206\024*:\215Z\262\277\014<\305\030\301p\276\277\000\207`:*\304\327?z_\346$\360w\320\277Q\357q\352\304t\277?a\276\345\"\0042\332\277p\266\243\031\232\316\251?8\034\221P\266\214\332\277/\354\266\215Q\202\332\277gq \223F\226\264\277j*\341r\2139\332\277(\0349r\022\221\311?\002\251{\332V}\331?j\251v\230\221\376\322\277_\251N\232\311a\333?\034\247\235\242_\203\303\277\264\323:03;\267\277\240\020d\030\246\022\276\277h\330\220?\256B\303\277\r\324\200\202\3368\330?)\236{\205\273\306\324\277\335\037eI\337\002\276\277\307:;[<L\306\277\303mF@\260\331\320\277\016om\314\016i\300\277\305S\344;x\273\321\277a4\202Y\232\220\335\277i\2126kR\217\331?\\\312)%\311\252\341?}\222`w\265\337\340?:>\022\363\331#\335\277U\002\304N9=\205\277NY1\026\271\361\340?\374\246H{L\316\331?\007\370\331Qq\235\332?v\233\035,\340\226\322\277zEn\023~N\222\277(b~\3351a\336\277,=\022Bn\017\326?%\375`L\241\210\322?h\036\334\354[V\240\277\263\207Z-\311\036\256?c\363\375W*\325\341?x\332H7,\251\320?\251P,(\024\266\326??\363\254\247\360\\\323\277\267P\325e\0108\301?\341{I\355\200~\340?(w\377\370\311\026\355\277Hv\216\346\244\"\260\277\270<\353\334\345\"\343?^\255\270\344\3712\274\27786\336?\364\010\336\277\363\007\326Vr\324\323\277\243~|\223\327?\324?\212)\202\027q\335\333\2771\247mE\271\240\323\277o\306\262\277D\020\342?/x\273e\211\016\340?\226to\235`O\344?OEe\313n9\325\277\245\315\333I\264\027\324\277S\025\t\325\3364\322?NA=\352\343\346\263\277\nl\\\224\220\"\323\277\232yF\375\362o\313\277\236\346UVZo\255?\226\276\254>\314{\331?\372\326\354S\235v\312\277\260\240X\301\036O\270?\345q\246[\2320\310\277\010\277\027\tl\323\334\277\350\364\335As\026\323\277=\2464\026\205\205\327?$\337[S\\\032\320?\254\211>\354I\023\250\277\274\300\277\317\353\370\321\277\270G\217\372?\302q\277\305\341\206h2\332\334?\321\222\345\223r\270\244?\332\334\226\272\300\234\301\277L\334\323!\177\311\306\277u\023aH\233\\\231\277\252\277\270\255!\377\326\277\201\r\033\177\311H\260\277\306\216\023\332\271\333\272\277m_&U\201y\320\277\353\034`wM\374\324\277\327n\344x\374\232\344?J\373E\2237\344\346\277\372\365\\)\267\325\210\277w\203K\346\231*\323?5\266S\335F\021\307\277?\256\n+F\214\203?\302\354\363\362\024\235\324\277,\335\342\232\243-\321?JF}\r\333\003\333?\366\251<\233\346`\326\277M}\3558$\352\340?\370\017\017\337\016\245\311\277&\033\347\215R\225\325\277\324\025\013df\340\333\277K\256\310\006h\250\315\277\017{\337t\316:\334\277)l\334)`\263\300?\t\032\002Q\025\217\302\277\353\3753\212vK\311\277\244\251@\232_\036\326?\347\\\202f\323\261\313\277\331\243P-p,\322?\356\276\032\261\203\030\342\277\361\2419 \272U\263\277\354\037\217\245P\241\332?\004\3570\350\000\362\275?6\256j$o%\321?\254\322J0\265\021\327?\204Am\202\355b\311?1;\003h\367\213\256\277\025\343\\e\t\307\335\277Qa\200)4u\232?x\243\213O/\363\266?\001\227\206/NU\316\277\327\306\244\035uK\346?\361\202V\336\344\373\274?<n\232\346X\306\343\277\377\204!\256\037\216\303?f\2148\217\336\304\260\277\243]\340\3556\013\335\277\266\376Suv\300\323\277=\361Rt&\334\340?\027K\232F\323!\341?J\007\317wc\323\272?X\375\037\243\037\025\325\277oV\263\203r_\315\277?|\367y\371\357\342?\207\356\256\344o\367\313\277R@\222$\300W\304\277\232\231\004\343\216Y\342?\010\254\227/\277\276\305\277\247\323a\316\016I\335\277c\220\365\240\344\311\334?d\2310n\252\354\333\277Ft\340X\204\220\321\277\033\331K\3277#\266?\227\023<\251\'\212\326\277\241\267L\231\355\317\336?\023\302%\235\340^\316\277N`\273em\274\313\277\253@F\316\256\245\317\277\306D|)`\212\300?\202}\242\325\306\223\325?\206\r\327\313=\232\327\277\302\352\004\331\367\246\274\277\247\216^\335\307\243\264\277D\307\317H\215\324\340\277\nq\013N26\317?%\224\274\236-\230\277\277\214\207VBg6\323\277\357\331\211D\267\336\337?\376\304\"7\023}\257\277\"#C\312\350\370\312\277\212u\232Z\033\240\270?16\270rb\025\343?\261L\330\023X\030\326?]\206/\357%=\317?4SX24\312\336?Wj\277\235\325R\323?\377\014\373k\3465\326?\037v\217\007S]\242?\267\304X\274\216\351\264?\005\t\271\315\271\003\205\277\375\222\034i\031\345\316?\246\217LY$\263\344\277Qpb\274\010#\337\277j\031,\343\215\341\322\277&\224\257\237,W\333\277DH\032\367\302\000\320?U\r9\031\"e\321\277u\371\037\234:\202\264\277\001z\233\026\253v\241\277\372\227K\035\207\232\321\277\0257\037\034,\212\323\277\220\0002C\200\220\346\2773o\312\317\313\234\330\27756jX\266\371\305?\264\0314\300\347\273\305\277\016\251qik\032\332?\020%\300S\350j\315\277\241\254F\370^\210\322\277YZ\'\021]\337\317?\373\213\244\273\301;\330?\237/\243_\274[\340?9m\311\212\340\272\312?\002\215\242 t\261\310\277:\330\225\327\331\271\306\277\241\361|\006\311\377\326?\307\205\276\317h\267\340\277O0=\377\300\004\304?\252\303\005\352\274K\264?oO\300\344\225\201\324\277\037J\003\303J\003\353\277u\354\276\016\021\306\325?P\305x\307\315\346\323\277R\204\2576\247\202\322\277y\326\312UHw\311\277&\027/\301R\031\260\2777\342\233\002\031\222\317\277Zvz|\2107\310?\000\242\177\323\202\241\354\277\000=?Ua\357\333?\227\001\233\030\212\347\260?\247\245_}\320L\314\277A\312\305O\343J\341?l@bp\353\207\260?}\237\240\344\302\303\300\277\356\346\3441\220\217\301?\335\t%\3711T\221?<\332\270\0321!\332\277\206\332\356ci\375\313\277\242\013\014\224\211i\322\277Y\335\261$_\241\333?\260\202\001\007\177[\306\277\260\251\357\205\204\216\355\277\333d\245q\360\305\332?V\257\032>\346\310\266\277z\217\334\",\241\345\277\021\260\310\0210\216\343?u/rIv_\266?Wg\355TS\336\310\277cfA6\270\004\224?\314\037\243\263\3103\330\277N\237\264c\361\314\333\277\2168\017\352iXd\277\247z\\m\036\256\345?!\334\304o\003\235\312\277\251\266oUCX\330?\341\377\020\334\314\016\356?Yu\205\007\2128\325?|\036\274\244~h\331?\213\230\034u\246r\336\277v\370>\013\033\326\313\277\252\236\272\315\017\006\336?\022\303\253\270\017\322\311?\322y\336#K/\306\277\303\006\276\360\264\032\345\277\n\260\373\353 \233\317\277\252\360\367\254NV\313\277\\\255 bX!\317\277*\265\306\217\032\240\345?:o=M_\242\314\277\223\214\264\222\225|\177?\315\2544\330r\275\315\277\026\251\022\244\267\321\333?\0324!\320,\357\335?\324D\222n\026T\300?\261_\356\377\2569\322?\370\032\200\301dQ\275\277r\372_\247\221\031\302\277\324I%\023$\243\302\2772\225\361\237\'C\240?BP\362Q\340\010\330\277<J7\351c\211\342?@iU\370\0168\353?"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\3465$u\001\372\332\277\330\004Q\354\375\347\227\277\206\345\213\345\225k\345\277\367\336V\276\013\204\300\277\243Q\311\205+\352\317?O\332I\007b}v\277\255\211\203\027\326-\323\277_\303\223\357\313\333\314?\031\033P\031\314\301\320?\\{\253i\267\030\315?,\014a\024\2603\306?\037\005\324^\312;\255\277\314@mLl\021\332?\224+\325|\216P\324?\304x\263\024\272+\257?\265\263Q\233*\"\311\277X\"-v\270\236\266?\314\232\216\305\n\264\261?/\031\027\200\304\230\345\277\201\2476\352\250\316\330?J?g-\324\354\266\277X\270\034l\016\303\303?@\327M\017\245\001\262\277\304Wb\017eU\223\277\024\003\206Yd6\266?\260\305[c^\252\313?\r\331N\200\206\003k\277\354-J)\275\t\306?I\006\317\356\224D\274\277\344\377\204\352\021\356\251\277\315E\252\037ML\305\277\316+l\250H\334\210?\310\233\0312\364\007\222\277o(ME\317\351\313?\203_#\253\235*\233?c\310a%\177C\232\277\366\206\255)\240:\301?\370}\341a\273\'\275\277=\030qyn\241\304\277k\365f\327\252\353\307?\035\017\007\336\376j\255\277\325\301K@\316\313\306\277 \347tZ\212C\303\277\316\355\205\302E\373\334?\324?\272\001\355\227\302\277\205\322\224\360\024\214\335\277\020\300\0163\377E\263?\036\t\324\251\335\202\345\277\235\325*\001\004W\262\277\262\326\2565\3427\272\277>\324\310\332AN\340?\221jR@\326\022\321\277\024\217(\013\370\204\302?\355\351\r\255\356u\275\277\311\304\202z\216\264\327\277\3044\302\256\254\375\315?j,]P\236\006\301?s(,@\233\271\330\277\r{hVL\355\314\277\261\243N\350\224\267\263?\332\305\2757\177%\322?\310Q\223\346\216f\302?\311\277\254\3739\213\313?\321\266\003\t\240\036\331\277\234P#\234\304\201\206\277\367Q\006\332\350w\223?\371\351\203\313\033q\306?=\032\034n,R\313\277\030\013\200\354\370\211\312?\345\234\277\206}\372\242\277xG\354\3515/\216\277f\274\200*\312\314\262? \340\037Lr?a?\253\017Oo\306(\272\277\341o\021M}K\322?z\224aC\025\211\324\277.28\365~\240\253?\206d\212\002\\\331\330?#L\235\023e\230\240\277\227*\327q\222[\316?\354\034=\257\333\202\300\2778\030\214|\177O\324?Q\365J\261l\266\305\277\332\344D1\242\362\323\277+\361\3426\000y\234?\232\333\214\260q?\326?q\010\007x\366\350\341\277\272\340\035\250oE\332?gR\366\363\332\273\226\277J\270\177\031\001\223\320?\354\352\245$5/\321\277\230\314%\373{K\262?ND\nH6\351\324?\305\271D\027\227B\300?lA\217\235\031\365\244?*\330$\013b\257\312?\361_:\254\017<\237\277\360\\\326\373\261\203\325\277\013-\301\025]5\325\277\0020X\217\273\343\324?:9a~i\321\313?\233\177\212\377H\214\324\277Wg\205\265\340E\226\277\001<\r\254\354\236\321\277\335\305.\370s\343\326?\014\226\240\267\270f\227?q\013\030\024\026p\270?\031\276\225\231$\014\307\277\334)n\2766d\341?\267\032Xk\331J\332\2778\307\201\272\344\201\245\277\2369\371:\014\265\340\277\344\320\315\256\021\225\325?~\345\305\370X\235\313?\256L\304\026r\340\255\277\212\362r\304\270L\324\277F\227\243\364\035Z\261\277I\034<\324[\271\327\277\'J\243\270\235F\254?z[\226A&o\276?gw\001\240U\367\316?\216:p\377\305\226\311\277\326SP\202\377\301\226?\271U\026\324o\003\231?H\303\365\371\243\277\335\277\007\350\210\360\313l\234?w\274\264\276\347\270\311?\005\346vk\315\016\247?=\307h\024\302\247\246?\354\370L.ax\321\277\rP\321\255\207Q\301\277\205%\236\266\023\326\333?\375\224C\263\236,\343\277\034\023x\010\035!\276\277\200\275\310\004x&\305?T\025\205\031H\314\316?\334\371\316\017\236O\322?\0234\313\232^N\307\277\363\362\377Z\267\255\254\277h\r\303\226\204\032\330?\002\373\307Z\201jl\277\004\260\010V\031\311\313?WS\214\276\347\305\343\277\266\r|\371\246\247\262?K}\204\3052\346\324\277\360\276\006\351\230u\276?\272\241\212\027\334\373\312?\367\000\305\003D\273\313?\376\214_\310\342\313\224\277\262\337s45\206\242\277\313\324+\211\027\022\334?\311l\244\213.\373\307?\331\260\026\016|0\335?D\037\324hp\007\305\277\213a\263\"/5\277?\\\212\343\221\200\354\300\277\326\371>\256\201N\241\277\375O\356z\225\031\316?\221\006\362_\022\212\303\277\tVILc\252\276\277\361\3624\345}\250\312?\275\007#\234US\271\277\302=\361\273 \035\332?G\364\231 I4\301?k\276\234!y\224\335?9\270q8\257d\307\277\213\243\025@\354\262\323\277N\031h&\356\204\302\277d\007J\316=\021\325?#\305\265\025f#\263\277,!\225\240*f\330\277\374i\322\240\217\021\301\277\216.*\355\001\266\325\277(d>\377\000V\304\277\210\347g\304\\\027\316\277\3002\017j\332\256\220\277~\357AN\233v\274?Mw\353_de\261\277\240\020\275\220\241.\313?\233T\037\205V/\341?\302\231\306l_%\321?n\346\261\227d\227\222?\024\034ts\206\'\340\277[\025&\325E0\317\277f\324\237\221\356\330\321?_#\257\327\243\200\250\277r\204\006\357\335\201\300?\017e\246\035\204\270\315\277\350\210\032\250@\322\333\277L\275\036\331\256w\330?\0166\342\361\364\263\305\277\001\334\3663\026e\337\277\242E\210\350\277,\314?\341\2450y\267\"\306?[\233\3439\306E\337?\2637\307_\203\330s?B2\035\361/\244\315\2770+\016\302S\315\255?\375@A\307\310I\311?Qn\341\007NC\231?S\034\231<JH\315?$$\274\332n\334\223\277o_wh\n\371\334\277\211\235m\242\277\212\331\277\272\253\373`\261:\312\277\257Q]\360\013\373\325?\320\0176\243\'\262\350\2779\\\230\372Q\202\307?Ug\355)\242g\333\277\307J\r+t\204\306?$\337\304\212\247\027\307\277\316\004x[;}\334\277y\366/a/\332\301?;c\214\230\250$\256\277w\336\016\020\244\271\263\277Y\365R\205A\272\266\277\305lH\322X;\312?\377\312O\304\367\215\324?\315\246_\362\023\212\223?\330\244G\213\352\264\302?&\235\366\013\246L\277?\244\023\\\275-z\346\277\305\352B\230\352\003\315?\360\305\333\330N\277\317?\237\371\227n\250\264\323?\001=\345E\360\214\333\277\271iUD\203\010\324\2773nj\016l\270\333?G\352\005E)\035\233?\026+\006\231\252\257\316?\310\001\036r<&\326\277\016\204\362\005WP\335\277W \342\020\355J\305?!h\377\220\0004\322?\371G\336\253>\332\221\2779\177\236\355!z\323\277\322\362F\364\342\256\241?\276\224.\372\233r\343?n\377iv\247\032\300\277\233\251\224_ft\321\277U\355\366\332\272K\255\277@/s\013\253\200\324\277\314\263\342\301\227\226\306\277J\336+\211{F\265?\266~\267$\240\367\274\277K\261@L\362o\241?u\3222\007\2779\243\277a\235\366\355\332\304\300?\245>\333K`\252\204?\373\240JY\371U\325\277 \362\300\326\303\277\306?\375\3549Xw\266\324?\230\370HV\310\337\327\277\261\200r\375X\301\300\277` M\276\272\014\272\277 >\225\331\272\256\311\277x\305<j\256\277\270\277\226\262Dz\255G\326?Xd0\273\326\002\301\277\377\204\302\350=\200\307\277\274.\241I\302T\251\277J\002\023\230s\211\334\277\311u\024\"1@\331\277\024;F\267\336\035\336??\025}\nk\372\274?\233\023\253\237(\261\342\277Yj|\004\007>\266?\332\t\022\2016\352\326?\252\000S\002y\206\303\277\303\243WNo\n\332\277\323<\026\224+3\310?\340B\001\2238\244\315?q\262?\252<\307\313?6\350\007\327h\346\264?\227\220\005c\250\340\321?S\251\345\333\302\241\332\277\202\177\024-z\314\300?\232\322\217\245\341$\335?\223\353>\325t\223\336?\326\307$I\231M\262\2778\365\320\223\027\242\265\277\032T\307\365\240\241\323?\026\333\263\334\307B\251?x \022\227\373>\236\277\305t&Y\3746\324\277\335Al\360\000\203\324\277P\022\343rb\212\303\277\023q\235 v\010\265?\201\372_\032\"\024\272\277f\300\262\235\023\353\310\277t<\316\365\312\214\323\277%\316\213\205\205\323\274\277\206s\244\273\030c\224\277\237e\214>\252\374\253\277l\201\361\200\3166\322\277\257\371\037\363\235\227\254\277\366zsQp\021\277\277\206]2\333>#\320\277H\207\374\3417D\266?\014\301\221l\224id\277#\343\242\306\321\274\330\277\311\350\200{Y\265\301\277\0215\267e\360\367\306\277\340YP\340\227\320\330\277a\016\336{\262\326\303?/cf\341\005\231\300\277\020k\277\027\337\021\250?\361\376\335\310\320\365\275\2773\010&\313\260\265\302?E\347\037\351\232r\300?\362\224*\034\307\000\335?\342M;\347\017\304\302?\341\257\214\236K\004\313?\362\001E\275\220\002\265?\332$\355W\361>\316?M\224\320\007:\250\202\277\320\377\243\376n\000\322?y\n@\313#t\263\277{\353\022\271\213\241\330?\225\307g\021\374S\320?\242\010O\251K\215\264\277vA\2657\367\360\300?h&\306\016\377\017\321\277\317\3422\247\226h\224\277\0242\335\220s\270\300?\360\273\224\374\324G\302\277\213\"\316\224\220\\\326\277\262\322\310@y\255\304?\266\204\031a\320\200\200?-\323\035\"\275\303\317\277\343\271\"\356\006\t\346?\202\210&\234\2238`\277\325\'\013\205Z;\333?\225\025\375\0246c\334?\374\326\253\320\006\221\202?\304\374\020\037\036=\336\2771\342]pZx\306?\316Q\344\340+\265\346\277\360\347\300@>C\343\277\257\351\321\323\265s\320?\335!\246\370\217\037\261?\305)\266\327\315\251\320?\362vZ\376{\001\300?>\005-d\257\257\327?\325q\261S\210\230\262\277\026+\375\203[\355\315\277\364UU\031\313\264\276\277B\375\023\025\014\354\345\277\312\253+l\210+\304?s\'\324\022\036\327\313?\336}\206b\017\336\313\277\346\025\3169\360\201\314\277\363O\365\277\210\355\321?\214\026\353\302\216$\322?s,\307\317\351$\266\277\206\200\215*\272\207\221?\367\260\250\000@O\273\277\036\2279\264L\306\247\277A\267\315\001\205\350\320?\212\251\303Y\243\326\340\277\336\303\246\317\027\242\205?\277\234\010N\320\021\307?\231\216\241\272\322P\256?\024\3038L\201\240\312?\244\220i\223\204\205\315\277\353A\031\252e\215\306\277\256\306\357\353v=\332\277,\017\177\362\323\345\243\277\346\032\360\224\267\001\201\277 \214-\013\374Z\271\277\024\344\341j\201\364\335\277\331\377\202Mi\326\312?\200\317\346G\ti\304?\366l\\\016pB\270?uVB\022oS\304\277\001\260\016\212\271c\331\2770\357\222\2344>\275?5\177\224\242pz\252\277\2329\\\316v,\311?\237\0310D\001\233\266\277\255\367z\\\305\345\264?\2200\006\300\374\016R\277\256\331\366\255\331\005\332\277\220\353\037%\257\027\247?\032\\\001\374\320\272n\277a3\272\237@\336Z?\356\314\352[\0176\241?\034\344\"&\324\231\262?\377\014Q\3137\363\267?\256\214\333\337(B\261?)LR\013\350u\316?\314\377UN\305\301\210\277.g\336\025kE\335\277\335\033\266\302\242\360\340?\320S\211E\264s\304?\356\"J\250\0045\305?HMH\262\004A\276?\215\237~N\372\n\323?\035\335\305\323\326\243\326\277\217;\033\260gk\325\277\246\270[\203\2756\275\277Sb\356\031\235\376\223?t]\005{l\030\337\277%i\352G\325\023\274?5\326\212P_\321\320\277\217o\334\206\227m\324?>#\263\251\356\002\322\277F\210\013\314Rw\234?.\215\320q<\004\330?]\221\230\003\313\340\335\277\337`\002\366\362(\256?\322\210\024Q<\203\320\277\321D\272\250(\233\243?\377\341\177\274\237\236\267?eV.\002\017*\301?u\177\274H?\210\324\277m\211\322\226\212\277\270?\254\357\333n\023\343\320\277\030\221\001\255\010#\317?\304\207\324\363\341\314\274\277\251\3543\231\017\273\306\277\007\367U2\376*\335\277\006\360\242x\307?\253?\376\365\001\177\252\254\274?\212\323\010Y=\237\313?\206\337x$\017\355\240\277\242`0\310\335\'\346?E(N\264\301u\304?Th\363VK\021\301\277\266\316K\205\024\360\303?\277X\006s\225\307\245\277t\321i\023\034\366\272\277\262~r\343\234L\322?s\237*h\322*\340\277\014\037\326s0h\313\277[\272\210\356-\217\303\277\206\225\370\225\"\373q\277t\305\207\307;\312\304\277\303\272]\032+\361\326\277\35311\034}\242\261?\333\357b5\353\274\306\277:\370e\036\370\245\247?|\r-\206\006n\313?v\370\304\275u\302\262?#\263\025\371&\333\242\277y\274\016;\257~\311\277,/\307\204Q,\325?e\300\350M>\341\331\277\277\330\265\314\234D\261\277\370\344\233E\217\216\256\277\337\003\3608\351\206\267\277\365t\304\234o\304\344\277\\\222\3007a\035\321\277U\007\rXP\364\257?\272\0138\325\243\314\316\277;\222\02432\376\321?\243\207C\305\362Z\277\277\201\026m\350\022\316\270?\326\367m\240\362\036\322\277\205\256L\352\035\274\260?\307\260v\333\253\257\252\277sx.)\365v\267\277|\275\254\212>k\241?\225X>\2332p\327?\266\270Vz+\235\327\277\246\275\027\266\023\224\272?\202\334\225\304>\336\324?t\371\261BK\270\331\277\251lDr\204\262\303?\345\3458\345\026?\320?\241\rqhG\337\232? \266\303K\362\213\307\277\314\002\313\243Z\305\252?!\274\r\002\302\261\300?\021U\302\212b\354\251?XLJ\306}\215\337?\r\205\326\017\207\217\300\277\035\014\027\371\345\346\321\277\240\304nRX8\303?9cg-\316\\\256\277\220;\024Bom\203\277z\215\227\307\026\245\305?\243\324k\275\014\315\303\277i\214{\254\"\334\340\277\\\377=\204\243\247\227?\313\374\334\027\367\237\301\277\2505h\023V\262\322?\363\241@\265\375\256\317\2779(?\320*\260\247\277K\013\213\252\020Q\334\277\233\315\376WK\036\337?\336n\177A\277\261\324?\254\340\'c\341F\223\277\266y)Ay\266\320?\200+\350\356\213\'\261?c\203\236\341\223\'\252\277\344b\241y\220\245\213\277\223E\242\037\301\367\267\277\004\264 e\232c\324?\254:\207h\223\335\344?I\360\230\215hr\276\277:\000Qo2\214\330\2778\302?\216\013\027\307?\203\303\225\353r\376\324?\374\370\0135u\\\231\277\'\274M89n\252\277rQ\354\344\204*\313?k\344B\255\006T\316\277%7\202`\036\014\310?Ze\341\311\262o\314\277\265_,\243\332\377\327?F\315=\321n\024\240?\001\361\2371\316\366\246\277\211\316_!|\020\302\277\212m\330l\370\253\270?\334\330\n0\354\340\242\277\'\243\245J\335C\336\277Xj\364\361\355\222\331\2778[\037H\327F\275\277\214j\315\316\315l\261\277Xo+y]\305\267\277\223,k\330\315_\332\277\331\326\302\215\026\265\310?\323@M\374\3523\216\277\304\014\221T\3122\322?\023\360-k \305\306?\241N\245cm\300\315\2772\334=\377\214s\321\277V\024h=\276\343\307?Q\005V\221\354\312\277?wj\226\376r\204\252?L\307\216\204b7\275\277g$\177U\355}\264?\312:r\220p\333\305\277z\224\"\036L\341\354?\333gz\013\272Y\324\277\352R\024\013\323J\322?\000vq\242aA\335\277\3704\004\\)\315\221?\254g\305!\367r\260\277-V\177v\261\232\242\277L\205\020\'\004\253\257?k}\270\254\222\354\303?W\224\310\324X\'\311?\021\256}p\325\346\226?Q:\275\\\007g\321?N\306\376]\215\236\261?\t\315\371\024\312\206\304\2770T\323\032\2752\273?j\346L\300\326;\331?\376\0132\335|\273\275\277\245\362\334\375`\265\332\277w#\244S(\271\273?$\022\374I\272_\310\277RU:\3723T\317?\021=\224\361<\255\272?\301\213\247ED\265\302\277Q(\034\334\311W\322?\355>}3bi\321\277a\270\376\304\326\273\245\277\024\270\344\2575\357\332\277T\275\177\302\304Y\250?\244cP\014\352\220\313?\333\321\345\213\021N\270\277\201\245\037(\025\273\266\277U\036\207\251\253\255\327?\221\373.\364\037\204\323\277i\2464\022\333\251\242?\010_\177\363\304\354\313?m\357v\272\200\031\331\277B\337{\222\257\017\322\277|i\251\315)\003\332?\307\316\300k\004>\313?a\372\212L\030-\313?X\037\"C\030\311\270\277Z\350\252f\005\261\320\277\'\021\315\276e+\336\277\375\037\304\326\242\253\177\277\255\361\006\254MF\271?\'\332\017\260n\361\322\277\3675l\216\307\033\332?Vzm\227\224L\277?\224\231\351)=\275\243?!Q\255\302\267=\265\277s\353\367\235M\022\266\277\022\323\317\342\372b\337\277%_\220\r\231l\322\277\246]nF\016\364\265?\\\250\254uV\315\337\277\226\025\001\020\374}\263?\301`\255\014\225\002\255?lJo\314cS\324\277\364\250s\206\266X\323\277\362`\262\3322n\271?\247bR/B\022\272\277c\273\335\313e\"\304?\235\374\307\210Z\213\311?\000\223\227\237\331A\321?V\264\266\332VW\264\277\005\274o*\330\326\272?vL\371\347!1\274?\n\313\332\254V6\201?GZY4\004\027\311?<\253\226?5x\301?$\370,7uu\275?;\243\211\253\365\376\314?\275%\010D\320\t\353?\017\010\332\341\215\347\273\277I\311\2321\217\277\265?\024\3017-D\245\251\277\225N1Yd#\321?\210JJ\201\200\026\322?m@\nl\300\243\311\277L\316R\251O\240\277?\214\237\234\313\222\226\312?\372d+C\357\323\303?\311\t\334.\307\205\226\277\032\325U@]\202\301?\263\3465\330\267\247\304?\311\206!\024Pqr\277\323o\337t\354\257\312\277g\033\225j\326b\313?\361\316\312\003mg\326\277\253\"8\302\317\003\274?\0071\375\226t\266\300?\245M\263\271\200\000\254?\333/\216Gl\216\306?z\033\241X<-\332?\365z\033\247\360^\324\277\206UEO\255o\264?\246\230\231\n3\243\247\277\t\366\267\246\301\307\306?\356[\336\355\005a\333\277\020\264-\006\347\335\276\277\203\263\200-\332\036\267\277\233\343\222%\307J\300\277\205\001\035\003~\020\316?\250s\t\025\375L\257\277\246\242K\255\310\246\333?\347\377\354n]\314\251\277\034\267\262\301\314\003\306?\327\222H\336\247\256\240\277r\312APp\004\263?\231\r\3124k\247\251\277\250\022DE\230O\235?^\002\023\374\r\344\302?\003\0369\261\241\211\303\277\rM\272=\220\315\337?\376\222\205E^\307\271?\260\\6\026\263\321\267\277\037E\034_6\275\214?\031\364s\224E\002\275?\250\347dD\357)\267\277\355\023\230e\376\200\321?x\364\376\257\241v\267?\334n\223\347\321m\327\277\270\3507\017x\300\320?\244\320\253aA`\277\277\374\003\307\005*\227\334?\307\217\025\233Q\345\311\277\202mW\005\266B\325\277\251\032\336\354o\210\275?\313\275\035\231\263\337\327\277\247\217w\004\024{\300\277\340\236 \356q\222\314?\234x\215HB[\317\277\241vA\375a\024\335\277A\220J\237\337\220\270?kr#\357\230\260\340\277\245\341Q\303\312\253\321?S}\016\354\343\340\302?u\357\376\211e\035\343\277C\363\007\242\256\370\234?\363\300nd\013\312\261\277\346\211\355\273\226#\331\277NhX\332\034\205\260\277j4lwt\222\301\277\2142\221L\252f\353?\260\3557\245\227\251\334\277a\373\177\342<\344\335\277(D\317K\037\335\334\277\316m,\251\026\210\266?\257\205\236x\222>\252?\005\225*\t\357)\326?\370\313H\010\231\211\257?~`b\255\366{\325?\001\366X\027/\214\361?D\237\037a/\362\277\277\342.i\250\007\310\335\277\322_\244\306\237i\264?\240#]\356Z$\220?\017\356l\r\321\353\311?\'\226w\'\272\222\333\2779\223\225\300J\375\316?\247\023\244.N\212\361?u\001^\264)\325\303\277a\203:\312\352*\306?\0204\035.\351\341\305\277\325\314\345\303\367O\340?_\261S\366i2\307?\177L.\315f\255\340?\256H\310^\n\227\322?\233\364\255\025\250]\260?B\350\036\"u#\222?.\340\206\326\352>\267?\230\006\224Z\367\325\246\277\316\3521\234\347\020\316\277Rj\346\020\020t\300\277\223/\217\330\351Q\355?\017\025Ox\006\332\312?\tZh\215Iv\226\277\203\311\350\010\357\361\323?\306s\314\036+\315z\277\022h\331u-\030\302?\275\253\320$\253\263\332\277\236\346o\210\253\217\300\277\205UsB\340j\204?&\300\202\244=\367\302\277_\014OQ\272\267\320\277U\247_7N\241\324\277Q\356\307c\243\332\331\277V\346\013 \222\212\275\277\004\270l\254\313[\336?\030\220\201\364\244A\257\277\201\235t\220\357\250\326?\357\210L\301\204\374\210\277\013\376\274\370S\244\336?\266\275\351\376q\272\265\277z\214\014+\241\316\307?\350\227h\342\177\367\310\277\344\261X\310\300\205\325?\206\317v\223\366\301\275\277\t\263\345\335\346\320\231?+8\212\357mX\336\277\304\021\000I\336\237\350\277\305J\373\226)\342\327\2776H\271\367\031\002\327?\205?sG\372\207\327?\r{\004\340\276\220\322?R\303\257\344\236n\301?\352\r\366\003\227/\341?eLX\341Y\026\270\277\332(\201\027:\237\320?\345\027\377]X\347\270\277\366\337%u\364\312\226\277\006\340RG>\323\275\277\273\374\217\240Y\321\324\277\200v\365\340\350\007\301\277\017:BB\263\350x?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\0023\037U\236k\307\2776\364\037\0238.\274\277\035\267\307\312\034\316p?\277Ky\332~!\322\277C-\252\277\350F\255?R>\211J\371\006\216?|\375f+Am\317?Y\352\320:U\321\320\277^IU\nL\321\325\277\273EoI\301\036\324?\033\304j#\313\227q\277vBW\337]\253\305\277\250V\0101\304\030g?\260\363\032\226A\024\261\277+\201s\243\273\277\267?\354]\n\336\325\212\303?\337\300\3332\234\025\341\277V\235\322u\361W\261?0\236\014C\3606\322?\016\007\222su\333\322\277\017\037`\312]\337\262\277\254\004\245\226!B\277?7\203\361CN\345\302?\036\340\346\225\026\342\322\277x\337\241\202\024\326\321?+\241\362\204\025\037\272?)\021-6\030H\270?\373_[W\350\314\322\277\367\032\016o\014d\261\277<\351>\034\033\002\320\277\243\000;?\310\356\334\277_Q@\315L;\273\277~\315\272[\362=\271\277q\216xxj*\306?^\216\003\0359\330\316\277+\033\030\362\326_\223\277\004]TQ\216\034m\277&\312\210\212,\260\325\2771\016>\260\031g\311?{ x\263\223E\326?0\351\367\325\361|\274?\342o\366\303\311\236\227?\226\266\241\276\274[\320\277\311\240\022u\252=\316?\022\347X\235\370\235\244?\346\003\035\367\344}\305? \205\212\177Ky\246\277\247X\3016\032x\317?\350\273\370\366\251\337\261\277\345\244\271\225\006\003\254?\307\224\262\356)t\302?\346\211\321/\"y\257?\372,\225(\212?\261?\376\376T\036\370\274\234\277\265\252\326\375\306\313\250?\323\236\006ps\226\271\277\323%\200h\257\204\325?\332\t\037\355\240\363\316\277\263\240\261\217\333\231\232?\262\271\215\251\346u\314?\344\207Hj\355n\302\277\027i\201x\357\254\301?\030\333\370\300\002L\303?\264\327\025o\2635\321\277\3760\237\364*6\310\277E\017O\250Y=\304?xM\001\274\rA\316?\257_\000\202\340d\246?\327M\035\203\310\023\241?\005\210Hd\351h\272?\252\002\226\254\344;\264\277\224\375\342a\307\'\325\277\202\302\327\253\033\205\257\277\311\t\217y\327\241\326\277\217\230\211\305*\366\315\277\370\350\036\307\202\350\321?\264\201\377\312\332\365\236\277\375\031\221\235\211E\206?_\326F\370*4\314?TdS\300\245;\315\277\334\355MKS\016\267?\374\320\3330z\245\310?J\005^in\272\213?\034k\306\306\333\303\246?\252\265\026\242\355\234\212\277u\031\222_\256M\305?\n\251\322o\275\232\336?\245\310|\020\243\271\336\2772\214\333o%\335\276\277\032\300$\004\240O\271?\240\232\013h\027.\311?\311\214ZG\204\'\304\277\314\'K\254\2478\245\277\260\226_\2550\300\325\2770\247V\247\327\t\300\277\350/Z\033\331\177\322?k`\362&\372\310\310\277e=\030\336\033\252\265?\023\226\023\271\246\216\304\277\252\272\240\20691\323?r\"E\372\361\000\314\277C\'0T\275Z\300?othAw\350\322?\325\006\235\363)c\320\277C\214:\242\177\005\255?;S%\263\211G\271?\222\032\353\256Tf\274\277\356\315\260\256H\233\221?\231\364\3568\3704\307\2773\014\311[hJ\304\277%\022\337oc\014\262\277\204Z\217\3717\251\305\277\2133\036\004,\326\267?)yz\202j\240\303?\022\222yK\227\313\276\277X\024\244\3501/\303?\267e\311M^\305\302\277 \034\200\251\357\225\325\277\336\220\260\272\216\006v?\3413\376\002I\370\310?\367\240\277c\222$\264?:\237\326\354\305\327\302\277i\230BC\202\377\326?\374\3143/\204\205\260\277\2051\267Y\374\341\306\277y\250\336y%\271\310\277\031\260\266[\364e\305?\367\246\034i\226\337\245\277b*\303\312\201\217\270\277S\357t\363\243z\235?\315\363\275\nbR\325?\242\375\r\333\313\\\316?F\273\3241\303\r\336?(\265Q\311\024N\226\277\313\206\356~^\013\311\277\360\202(\262\233!\267?w\220\237_\2114\302?ji\225\361m~\227?\244\235\366yv\260\304?\213\310\037\360\016\264\245\277[\203r\001\352\314\243\277Y\263X\021\240\301\231?\321\031z\227\002\253\325?\271\027\322\027\235\250\266\277\257\331\213M\222\355\302?O\203<`\341)\270\277\005H\261\023\202\332\263\277\022\254\375\242\266\251\306\277\013U}\017O\031\277?\342v\261\303\235p\271\277I\2331\263\260Q\226\277:j\372\347\244\006\273\277`\237\310;\314\203\332\277\273\332A\3472\205\246\277\331\220#7\177_\310\277`\264d\267\241\321\267\277R\300\001\337 \215\300\277\372\227\021H\242+\312?\271\207h\272\333\355\261\277?\020K\024?\253\330\277Y\222\320\205u\372\311?\367\342\361Z\371 \216\277 \252\013\246\354\255\264\277\353\n\236\021\255\350\313?\365E\346\255\256\225g\277G\273DJ\033\341\341\2775\246Z-/\227\306?t\270\232\022uGV?\202\317\217!\353K\272?@\261\003\300d_\312?pxm4\234\355\314\277%\275\013F\263\032\206\277\366\334\272S\316T\304?Z|V\350\255R\326\277W\333\272\350\335\372\332\277\235\236ZH\036f\251?\372\374\361\366,\376\320?\024?\312xy\035\276?\3159\002\211\260?\274?\"\356,\352\221\t\244?\031\353.t\261\225\307\277|\223,\314\246\361\304?(ILW\200-\315\277\200A;\016a,\260?S|Pr|\232\321?,]\272\301\033\003\236?MJQ\326\344\325\267?s{s%]r\277?>\252+/\317}\307\277\221\227=\271C\276\305?\365/\031f\t\220\271?\025\023-J\334\365\335?&fG\354\267\026\324\2779\242\264\322\006]\302?<\245\014\245^\252\244\277\224O\327r\361\370\320?\256\005\026\226y$\326\2778\317\001O4\275\315?\311\207\324\212\'%\325?\305\315\352\"\311q\325\277[6Q\365\276Q\323?\377\266\246\267\0202\232\277H4\307+\351\376\306\277[\376\252\203K\367\253\277\360\030-\002\002\222\243?\220%\223\037\246\'\251?M9>\277:[\322?\203\372\320U\315U\305?\315\221\225\nqM\321?\376\302z5\344\001\201\277\2264(\210M\235e\277g>\224\007\343:\311\277\256^\375\313\037\356\276?\260\226\206\325\343U\251?F>\203\377\275\023\311\277\030\357\257\264\217\261\314?p\272\217\n=.\264\277\000\"\345\264,R\325?\335\272\276\013>\371\276?\241QW\326\323\026\261?\200y\301z\036c\314\277T\0309\347\251\331\311?N%<a\357;\323?\254\244\362\305\3538\321?13\275u\371\207\306?pU/\304QC\310\277\313 \320\334\033\252\350? hk\264\202\251\320?\213\354\313lO\210\313?\t}\333l\003.\267?\200\362\357\350L\342\320\277\000\264t\235R1\315?\021\220\373\244x\376\263?g\252U\210\2417\255?\315L\261\311I\377\265\277t&\263\370\342[\250?\316I\340\nS\217\274?\267\224\203w\264g\303\277m\326\017Y\201p\210?\035|2\302\373\000\261?\303}\257\005\\\251\322?GF \277\307\202\274?TH\341\370N\264\313\277\260\247}\366\335s\310\277\317\254VI\365\007\303\277O\003\250\313\225\343\323\277q\304\315:_\024\322?%\301\355i\n\031\263\277\270AQ\321A\225\237\277\360\324\361{\210\206\310\277\223\024%\332?+\270?\256\022\317OR\337\306?\'\377\033F\3110\276?\242w\266\356\277M\304?_\274R\017\020\274\246\277k2\\\367\261\340\307?Ez\211D\244C\325\277\302\24713\263T\305?\tM\237\311\372[\276\277f\'UW\363\231\306\277\021\370\270\026\204J\263?\237\365\'\253l\302\310\277\323Z\336\331\024\220\316\277*3\376A\245\270\324?\247\204\n\3508\210\273?\352\256\305&M\035\320?\223L\000\310\307 \306\277?4\277\277bb\315?S\334\3625\217\177\240?\177S;r\322\364\305\2777\374fqo\206\274?W\375K@\362\026\322?\t4\027\323TZ\247\277n\007\022\200\247\237\262?\014\027u \n\035\310\277\027{.\332p\222\271\277)@\365a\364\346\300\277\023\214\232m\224\254\332\277\240\\\271\007\231P\272?\342\372l\010\310<\317\277\214,\013E>\025\236\277\257\254P\343T\210\250?/\373,\';\307\303\277Sx:#\336\004\300\277\325\302\260n\234\353\324\277T2\373ih\345\317?\261h\353\275]p\226\277\361\331P\343d\240\234?\235U.\365\027`\215\277{\247j-\337?\337\277?\233\244\006\362\n\324\277\350\351\361+\221]\301\277\213\"\032-\256O\322?\341j\365\034\375\001\253?\263\341V+SB\327?@\303\317\326\016\227\233\277\256\335`\2528\375\245\277\027\202#w\206\341\247\277\205\035\222\010V\303\313\277\372\345O\331\300\017\254?S\232E\224\304\261\320?\025\237\304\217\004\323\234\277\241\274\032u\232\357\317\277\211p\275\342\200b\313\277-\302\3514\222\\\270\277R\206\022wU\017\311?\211\002>\023\232\273\264\277\254urR\034\214\313?sQ`\357~\273\270\277\033\306\245$\371;\245?P\306f\233k-\313\277?x\000 \000\341\327?\223\344\233\237\372\035\306?>\017\323\3232\004\321?\362\344{\036\340P\322?\202H\034\223\033\036\325\277\036\243\263\324\216p\263\277V\246\251g\207E\261\277J\006\326\t \234\254\277\\_|`\025Z\323?p\031\t@\342r\321\277\341{\214\016\031;\304?\300\373\274B\246E\341?a\250\320\200\335\002\273\277\354l\346<\321\036\320\277\276CWWp\332\231\277?K\2377\311\034\316\277\273\222\202\371)R\306\277\210C\214\036\030\250\322\277\252\026\250\333E\247\214?\203\t\345\350\363#\307?K\005i\200\362w\320?\327\327}\0218\265\252?^\007\307x2\271\240?[\021^\366G=\243?d\321\365\353V\376\330?\307\315<\352\247\221\322?#poU\212\031\321\277\2525L\337\267\276\265\277\274\307\303_b\206\316?\272\326\327\363\275\215\262\277\207if\370Ed\247?$@G\020\363n\241?\263\207p\331\315\005\233?\032\'NM\005\320\261\277\240\n\3512\3343\256\277\\\257s\364b\370x\277\347\271z[\222\306\343?\320#\370\374\025\365\243?W\254\212\224\227\202\242\277]F\005 \325\313\246\277/\254{\351\267\214e\277\273\034\004\334\306B\305\277Y\254\260W\021\214\314\277\016\264\350=\017\037\241\277\343\246:tu\006\271?$\216\273!\201a\301?4\031\\mtK\273\277u\264\026\315\\7\306?8\354\227U\303E\217\277\326\366\234\007\3547\327?\326\311H\265/\301\304\277\217\346\035%>M\301\277\370\355\013\031\256\340\313\277\320\216B\351\024G\316\277\354\361\2409\005\234\301?\321<8\204PT\272?2\000e\021k\256\341?\034\317E\362\301i\226?\262\035\377\247\331U\251\277\211\200!\303\3052\313\277T\007\342\306\350\\\254\277K=\226\005\316\307\316?J\331\017\226\\\210\310?\t\234\263\357\177F\214>\3709{9\276\304\266?\336\022\362\240\376f\322?\353p[1\024\243\260\277\275fL\260l\322\252\277HEN`\\\205\304\2771\353\366\020\006\207\305?\350x\'\034\027J\324?\315\254\034\305\301\000\215\277\272\276D\317W>\311\277\275\216SjxM\301\277n\234\036\010Y\355\324?-\034\357O\211\211\276?\353\327_\306\001\336\211?x!\356\356;\177\274\277?\221\233j\353\321\314?\360k\315\017i\373\340\277\244\372\030p\214\025\266\277\334\003(\253N\016\234?\215Mf/\227\232\300?\265\035\016\201p\323\301?\3047O\256iY\312?\265\007\231:=\373\312?\"\337\313\233&\036\260?\330_\t\242\013!\320\277\217O\267\306\002\020\306\277\223\306\302E\205\373\236\277\322=\256\3277\306\300\277\254\350\360\261\004\275\273\2778\277\037\357\345\232\306\277\033l@\030A\372\334\277\201\207\261\374\264K\316\277\307W\217\234\264S\342?o\n\006\346DZ\331?\'2I\337\007\t\325?U\001\025\311\332F\320\277?\030\331\211B\211\274\277\205\n\027\353|\372\321?\253b\366\r\357\321\206?\357\302g\215\031\203\302\277k\324TRT\301\327?\233\243\211gS{\302\277b3\220C\247\262\314?\240?0)\275y\324\277\3565(\027\312\212\312?\\{D\266\203x\326\277\242\300\276Z\025[\270?\246\261\203\261&\321\312\277\356}M\344$\217\315\277\221*R\331b\220\302?\016{\306\037Ev\304\277\363\220\006n\033\270\303?h\024\206\264\255V\260?\206\001\357\375KI\323?\\\026\267\306P^\277\277 Lv\035\213\313\305\277\223\3557\245\227*\262\277\204b(\004b\317\267?\260b\006?\246+\316?\005\305GIh\240\305\277\224M\207\020\036\262\323\277lD\224H\301\024`?\233\217\007$\370}\276?S\345|\373<o\310\277\365IF\036\263I\301?e\321\327W\317\177\275?\031oS\242\307V\333?O%\201r\255$\321?7`\215B\205C\300\277\212zta\353E\312?\250\277A\014E\034\302??6\351\333J\204\330\277\016T\305\013\007j\324?\002j~Y.\215\320\277\262\343N.:`\315\277H\363\3033\036v\250?\260\316\226c\'s\332\277\351\303(\021\272T\331?,\245\215M\362\372\321\277\215\246k\272\002\365\236\277\342H\005\241\300\272\250?e\326\r\010\270T\321\277\000\317\210~\321\231\200\277\356|\223\253\222\217\322?\357\357\333W5\017\333?L\323\263O\314\204\304\277L\356>\242R\236\270\277\021\251\261(eL\245?Y\327\336wYb\300?\274X{\255\346L\303\2775\344\310C\363\361\250\277\212j\333@L\225\300\277\337\245Td\237H\324\277\361\371\202sf+\317\277\233\001\216\006\262\t\317\277W\322\357\323\267\202\234?:\312k\022\337\245\273\277E\223\206b\237\350\315\277PX1\274\327=\240\277\002\303<\016  \270\277/\375\275\306\2172\265?\365q\205\223\023i\241\277*)\221\233n\217\244\277\021\254\242\030jP\277?@\337\022ul\232\302\277\336\273fd\354\\\267\277\031\311RP\315\305\326\277z!\357x\225\323\302\277\367/.\360\311\212\307\277\313\211b\310\202\243\320\277>\353\253\332\337\t\306?c\262h+Z\306Q\277\316\027H\037\220-\327?\r\031\343\240\322\302\312?\313\343\262\033M\245\322\277\000\002I\246q\230\307\277\207A\024F@\315\272\277[\202\255\347\237\027\271\277\217yL\303\324c\331\277\263\261\035\243\"\371\325\277w\224\271\372=\210\250\277\003N\312\342.\337\300\277k\017,\034\027\364\221\277P\247\370\247 \"\317?\254\017\322\200y\277\200\277\t\025\310G\240\362\267?\321\356\255\033j\201\331\277\361}!\214\254\013\206\277;\215t\007\367\377\244?ta\036\026\344\321\324?O1\361\372\037\262\252?F\326\304\025\350\352\327\277\004Rr\351?\270\306?gU\210\002u\022\311?h\310\271\275\321a\320?\312\307I\377\035\242\255?Q\314_\365(\203\322?<:\344\005\260\370\212?S\233\360\231\362z\271\277\007\020\032{\0105\325\277h1\221\354$\363\303\277NBj\025\317\274\314\277\363\315\372\355\224D\305\277%\352q\332u\360\306?R\333\024|\177\312\300\277\310\204\372\017\353.\323?\370I\030\344\213\205\304\277\347\031\374\037\347\033\312\277U\234\327\275i~\245\277Z\345ovsL\275\277\267\207\353\337\343\312\241?\353\202\014\277\212\337\273?2<:;\244\310\301?\3633\356\330\013\245\307?Q}0\241\033\247\315\277\025\361\'\207F\010\267\277\253\221\213K{\362\301\277V\235t\211n\330\245\277\313q\221\357\177F\311?\233\362\346W\301\236\332\277\221I\354\314\342&\334\277c\373\326t\253M\275\277L\0015\363\243\314\315\2778~\207.\264\205\307\277\253Sa\250\344\240\272\277\003E:28\030\306\277\217F\005\226fg\267\277\362\246Xm\n\304\262\277Lr\367\'%\271\304?\372%x]g\201\316\277\007t\301c\327#\226\277\370\t\003d\243,\303\277\312\217\355j\"|\264\277E\204\356\252)o\247\277\223\267\211[\263I\252\277\305C\377\222/\275\310?\246\203\355\205\356\036\270?(/w\035K#\312\277\346*\320\216o]\317?\261g\260\333\271\303\270?\017\342<\3473\030\277?\217-A<\230\000\322?\"m\310u;\240\245\277\247@\370\2275\251\304\277\201\266\307\323U\027\317\277\3454\356\201\032\327\321\277\0267\207\351\363<\324?\330y\215\241\351b\202\277\241Z\226\334\372\020\315?\303\356h\306\277\263\260?gl\217*j/\257?\204\032\313\335\332-\326?Jk\261\030\242)\302?_\306\222,0-\312?\365Ll\375>\341\305\277~\301\204\305f\344\320\277E\346\027\t\363,\311?R\211Hu\231%\225?k\315\315\'\320\221\312?\357\373\022\310\243y\307?=-lj\035<\265?\t\3123u\277!\231?\005j\020K\226\231\344?^i\271\rG\031\317\277w\202\034\226\270\214\306?\362\334\310g`c\307\277\323Y\202\024\315\030\220\277\216\361.\323\035\221\275?8\203\355\006]\014\270\277\266\000\237\204\030-\267\277\375\3761\205\350\361\256?4\261\310O\314V\270\277\322\330\212A\205\316\324\277KZ!\200\223u\271\277f\330\000H \005\321\277\rf\201+\356\277\263\277 \242~~\274N\312?\216\241Tr1\020\253\277\365T\223\275e\007\321\277\034\357\334\211Y\236\266\277\264|&\307\373K\262\277o\267\005\250A\250\216\277\372\305\267\325\212\n\300\277\324\332\024\341\276R\317?O\340\327\364\222\206\333\277\246\010\222\326\327&\274?\036\351j2\347\322`\277u\344\3306|\234\324\277\257K|\363.\335\222\277.Z\233o\213E\260?H\240\246\026\342\332\271?\256\252\373\t\204\351\317?\032\250\357?|\203\340\277\230\035\210q\210\275\267\277Dr\2622\370\341\277\277\342\226EB6\346\301?\367&\254\211A]\321\277\311\215\323w\311H\236\277\346\221\200\212\366\235\252?\313\3354\212\004\344\310\277%O\374:\314_\270\277\250YL\2735(\263\277CU\374\230\247\210\306\277\010\341\\Hx\210\314?\354\034\334h\327\021\304?3T\021\361i\265\275?3I\353\235\226\306\327\277\316\021\361\237\260_\311?*k\305\363\005\341\353?\376\317\325\206\335\220\305\277\310\331\376\247\246\347\305?\276\377\373\006\266\022\271\277\n\024\365Ziw\245?p8D\310\222[\331\277\"d\230Q+(\272\2773\332\345\212\242\036\307?h\261\276\354\261\013\270\277g#\t\302\007<\313\277\300\260k\027\312w\313\277ok\340\223\215\210\262\277\320\213\334^\014\245\273\277\3351\225\314+\263\265\277\213g\006x\234\t\340\277`\037\336s\375n\275\277\r\212\214\205\262C\223\2771\203\264\271,<\254\277\024r\326\311\372\217\314\277\207\'\3711S\314\307?\254\244W\367\030\262p\277\357\257\375\017\362\204\307?\240\310\366\271\333 \254?\027C\312\362\240d\241\277\347\367\265o\026K\262\277\3624\275A\002\250\253\277\372\217\221\260Sm\277\277\343\304*\221DH\314?I\205\347@\366\014\262?\204CHhL(\320\277R\300Se\304\017\310?k\246|z`\021\275\277TGTwM\325\273\277\252\341>p\031o\275?o\253\230\262\203z\313?V\363\014\246\202\014\330\277\271\344\037g\rT\324\277\002S\327[\016\221\226\277|\350\306\242(\321\321\277|\\\254D\307\272\300\277\216\365+\371\360\017\310?\321\201\320Q\017\337\226\277\030\246\255a\2053\320?\246\356W\245\365\037\326?&\211v\"\307\037\332?I\263\3616>\252\240?\311T\355\340c\"\227\277\t\tnZ\301]\326\277\350\344_DE\234\270?e\342\263\340\374\363\325?\377\205\322m/\346\263?T\323c\005_\267\250?\213\332\315\222\307\214\312\277\361L\027\2244~\311?z`\352C\235\260\324\277\027Y\0130J\314\352?*\304\\\211\337\002\332?S\334\364\263\225\227\310\277l\235j\252\341\"\311\277\354\352-\211\326r\324\277\355\340\303fZ`\300?\303\231\356)\314\353\242?\347D\246t~s\312?\324\341\334\310\022\350\246\277(\007\331c\352\220\340\277\252\356\227\013\213U\321?Q\245V\311W\177\256\277\031\335\364\363\275\375\321\277u\333\370\354\n*\237?\221\0051\361\227\013\307?$\337}VB\345\304\2775I\177uM\354\252\277\375\367]\334\256\033\340\277O\000\354\007\026\010\301\277\231\320L\221:J\316?`\317Mxm\022\257?\007\257\254/9\347\256\277Q7z\325\215\022\321?j\367\237\247\345\355\300?\365\024sa\227k\247?\242\244\243=\356{\261?3\234W\005g\321\276\277\t\244|9}~\303?\205#\026%\217,\276\277\361\251\326\377\232,\252?6\tD\330\260\315\266\277\373\332\352\240Y\242\334\277\235\005I\205]T\302?\346\306[\342{S\243\2770\017Im\324\037\306\277\033^\322^\235m\300\277\214\320F]\301\334\305?uR\313m\261\010\313\277|un+\200\000\320?\036\316\202\365L\035\273?\274\250\034\203_p\344\277\322\224\374\265\030X\313?\265\270\2172\t`\321\277\307(|7\334\353\304\277\325t\306\017\311\n\325\277X\327\351\315\252R\263?\317%\245,\355\246\304\277\307\360\234\271\256M\231\277m([\017\331i\274\277XW\207\0261\202\270?\253\267v\317\217l\311\277\264\221>5\233\260\276\277\234\240\270\265J\032\201\2775\032+\003\377\363\322\277\036u\310o\275\252\310\2772\304\263\273o\211\316?\343\345\253\217mE\243\277\020\323\334tOB\322?\210L\320d\265\312\352?P\177\346\247\036W\277?\017\001\021\016f\344\261?\365\251r=\007\200\270?\224\030\25129F\316\277\243\260\037Qy\223\247?\342\2562\222\210h\303\277b\022d\270\242A\222\2771\315\244\336\2129\245?\n\333sP\270_\255?\267\246\343\025\257\001\306\277\305\252$\324\035=\323\277\257\234\271\372\213\367\263?\323C#!^\033\331?"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_contenttt\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\tt\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_2"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_3"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_4"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_5"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.40824830532073975
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.40824830532073975
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_25432"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_25431"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_25502"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_25501"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_25571"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_25570"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_6"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_11"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "ExponentialDecay/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/initial_learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/logits/BiasAdd"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:6"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 9
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard"
  op: "If"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_false_25704"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_true_25703"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard/Identity"
  op: "Identity"
  input: "head/losses/check_label_range/assert_less_equal/Assert/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard"
  op: "If"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/labels"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_BOOL
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_BOOL
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_false_25729"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_true_25728"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Identity"
  op: "Identity"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/labels"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/AssertGuard/Identity"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims"
  op: "ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/losses/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 6
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 6
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 6
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp\\part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_true_25728"
      input_arg {
        name: "identity_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_25501"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_25302"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_25301"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_25570"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_false_25704"
      input_arg {
        name: "assert_head_losses_check_label_range_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_head_losses_labels"
        type: DT_INT64
      }
      input_arg {
        name: "assert_head_losses_check_label_range_const"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Labels must be <= n_classes - 1"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x <= y did not hold element-wise:"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (head/losses/labels:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert/data_4"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "y (head/losses/check_label_range/Const:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_4"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_head_losses_check_label_range_assert_less_equal_all"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_head_losses_labels"
      input: "Assert/data_4:output:0"
      input: "assert_head_losses_check_label_range_const"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT64
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_head_losses_check_label_range_assert_less_equal_all"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_25571"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_less_equal_Assert_AssertGuard_true_25703"
      input_arg {
        name: "identity_head_losses_check_label_range_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      input_arg {
        name: "placeholder_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
    }
    node_def {
      name: "NoOp"
      op: "NoOp"
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "NoOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "identity_head_losses_check_label_range_assert_less_equal_all"
      input: "^NoOp"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_25432"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_25431"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_25502"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "head_losses_check_label_range_assert_non_negative_assert_less_equal_Assert_AssertGuard_false_25729"
      input_arg {
        name: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
        type: DT_BOOL
      }
      input_arg {
        name: "assert_head_losses_labels"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_BOOL
      }
      is_stateful: true
    }
    node_def {
      name: "Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Labels must be >= 0"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_0"
      }
    }
    node_def {
      name: "Assert/data_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Condition x >= 0 did not hold element-wise:"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_1"
      }
    }
    node_def {
      name: "Assert/data_2"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "x (head/losses/labels:0) = "
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/data_2"
      }
    }
    node_def {
      name: "Assert"
      op: "Assert"
      input: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "Assert/data_0:output:0"
      input: "Assert/data_1:output:0"
      input: "Assert/data_2:output:0"
      input: "assert_head_losses_labels"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "assert_head_losses_check_label_range_assert_non_negative_assert_less_equal_all"
      input: "^Assert"
      attr {
        key: "T"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
            dim {
              size: -1
            }
            dim {
              size: 1
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}
