node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_25068"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_25067"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "~Z\244\253O\222\326?%\361\003Or\353\361\277\003\352\352\264\0239\301\277|\006\257]\334\254\323\277S\273\006\030\005\244\365?\316L7\023\021_\356\277\317\367n9\362?\323?\345\025\314EU\316\363?\026\206r<j\361\363?\306i\nu\3135\372?\262\"\022\237\005 \363\277~\272\343\366\020\177\361\277p\233>i%\263\363\277\217o\342\232\262\306\373?\204\222\232:I\273\362\277\304>\327\313\3150\326?1\017\230\030\351\201\313\277ua\202/\305\264\364\277\222y\037\322K\224\302?\367{\031\t\223\370\300?\350Y\3255\364\214\321?\300\371)\026\303\001\355\277\340\234\023\215HQ\365\277\365\3109*\313\237\320\277\325\320\304\240\323^\355\277\243\333\216+\256X\360\277\223!F\256\217\t\366\277\341\214\310\305\320[\350\277\217r\205\224&\027\362\277\217w\350\334[\034\322\277\345>B\376`o\301\277\323\225\372\263\001z\363\277\007\213\243\260\2552\342\277\310m\235T\034\"\356\277\335bqH\231;\361\277\r\330\002qU#\311\277\210\323\'\354\344+\343\277\311}\001\017\036\000\323\277\204\355\023<a\261\352\277\342\357\027\214\375\245\365?\002\317 \017\352\226\361\277=\202\334\325\371j\314?\260\236[\251\327\375\321\277\257\t\303\003[\'\367\277+VB\003\221\307\314?}\210l\251\223\216\332?\335\0362\243\255l\361\277\374\203S\321v\347\340?\211\333 \362$6\363\2771x\227\212\200P\357\277=T\312Iz\311\362\277\236^\377KE \366\277~k\351D\347\003\373?-u\210T\367\324\313?\202\00786\252\037\306?\\\027\202\377\255\353\365?;\301u\257Z\260\371?\362\333o\325\024.\324?x\003\032t\206\217\311?!S&\244\n\t\354\277\276%\177\267\276\311\364?\321C\316y\273>\355\277\200\345\220\003\031\331\363\277\"<\322\366D\211\332?*\216&\000\340\246\320\277\267\303\302\004g\350\355\277:\354]5\000\335\267\277\321R\234y?\377\311?\223Y1>B\274\360\277\023\355\354\033\021\257\366?\242\004\021\221/\375\361\277\224!\216\031j\026\327\277\256\3460\323\006\345\360\277\274\372\036\200g\303\325\277\275\243~F,\237\363?Rt\204\351\261\252\371\277\234`\266G\347\037\320\277o\020\313q!s\362\277\010G\302\350\344Y\260\277\003\211\264\203f\004\364?\357\277\315c\366\207\366\277\203\001\326\261-\220\205?_\237\204\247\263\362\360\277\262\232!&\352\346\317?k\342\\\234\304k\357\277\251\270\343\221\370\367f\2772w\267B\023\327\336?\017\241\365\330U\354\364?\317\263\200\004\006/\363\277\032b\034\250\364\004\364\277\315er\341[?\332?\263X\325Q\357\270\363\277\335\340c\332\272?\366?\t\022C\031\345X\370?\250z\321D\210\373\370?\207\3707^55\356\277\332\\!\212\305F\364?^\207\247\245\001\234\337\277\340\214\266Dr\300\335\277\356+m\007\\\250\277?\270\036\036\255{\005\370?ep\351P1m\322?\223^\237NE\220\307\277\357ry.U\017\331?\3570\313g\227\310\362\277G\tPKUt\345\277q\010X0\223\220\363\277\000\224t4,\347\317?\203\022w\306\026\210\367?/\025}\231\252\347\326?C)bi\203M\316?\355\317\013\216\346\255\335?Q\352\034\327^\341\363\277i\321\005SR\353\355\277\027\370.\240\226\005\363\277\n\253\t\326.\215\355\277\000\342j\225\\q\364?\007\010\300\203\360\264\341\277m\245\343\364\251\213\305?\206+4~SN\357\277G\300DL{S\366?\302V\343\213\036w\265\277\250v&\313\305\376\323\277\217}\007\253\006\241\311\277\323\216fi\301Z\335?\303qm\025(\360\361\277q\321\221\260\345\311\356\277\257\tC\324_Z\362\277Yo\356:Vm\370?\205\341\371\001\302\264\370\277E\037\021\263\205\327\371?\354=\004\004\362\206\237?\030+\271\262C\277\321?k\260\212\2546\352\303?3d\037Pm\252\364?\347\304\344[\254l\356\277\304i\352\260\364\372\352\277\267IN6\364\252\320?\273\203\025\265\236\242\352\277\315\271\253\003!\013\364?pT\356J\351\311\351\277\013\230\377\267{\311\364\277\225r\367\370\321\234\316?\315\303_D\372,\362\277}\010!\356\355\177\317?e\020\333\260\243\230\363\277\2345\342\334\266R\364\277\345]\306\201\364\366\360?\025)\246\234\230\340\360\277s\207\336R\304\345\322?\222o\340\256\035\256\363\277\201\313h\231\260\261\360\277\377\022\370\332:\351\275?\256v\245\026\005>\360\277\221u\357\244Pd\312?(\030\346u\355G\265?\233\327\246$\030\361\362?0\276\037\325\317\325\236\277[\357J\306R\247\264?h\231>?J2\316\277_j\360\004\251T0?\250\364f\232\205(\353\277\2408,~\203E\365\277\000\200\343u\322\372\361\277+H\\\251\2157\364\277\332\271\261hM\000\304\277\001\357\224B:R\364\277\007\365s\021\177\263\317?\253HM\244\323}\352\277\021Q\346\325\266\001\264\277\254\324\3311^3\326?\177@`\262\332o\321?\222\311\352\306^$\321?\034\250\\\271e\350\306\277\341\2279\313\2166\314\277v\006\372\202\336\376\363\277\201)\352\335\r\207\304\277\273x\260`\304(\355\277e\034\265\026]\261\366?]\317\353\326\001V\363\2775\300\004o\333\257\367?\266,\247\376\344\237\241?\242\321\307\233\005\371\340?\252\025)\317\376\311\315?\3476>at\307\367?kN\026\230\351e\363\277\"\r\016\t\340v\357\277\344?\320\003\331Y\304?\226`\3525\200\276\334?!\274X4\006\245\364?D\203\317U\210\303\311?\252\252\'\207\235\356\344?\375!\215c\321\210\321?\261\333\221.-t\331?\252\300T\273Bc\365\277\304\320nQ\235\314\257?h\2031\340\234\020\315\277R\305\2762M\311\365?}\304\002P\021\035\370?\024?\225\177\034\353\363?\244M\2541\203\356\245\277\363\333\322{\037\364\350\277G\343T\347~\205\325?+\202HC\365\277\332?\224r\022#p^\316?\t\350\244^ue\360\2775\214=q\000\224\317?\323\345\345\221\000\301\242\277#\355\316\263\2627\332?{Y\247O\321\025\361?\364\261\347e\361\347\320?\334t\231\030\013k\341?\336\330\303n\361_\355\277\027\331sv\321\353\362\277}uMQI\240\347\277_\210\005\237D\317\305\277\241\233\333\212e\255\363?\274\342Fo\327!\315?y6\241\310\006\267\306\277(\033?\222]X\365\277h\021\207,\306\245\364?\005\362o\217`\334\331?\240\341<\037\372\034\366?\356:\252\002H\274\276\277\233\320\352\252-\035\370?ig\010\014\373\266\333?\264\347\244\315\365\353\364?\322\303L\355\211gz?\'\020#\356\363\354\360\277:\202\267\274\277\t\371?\227m\300\243K\264\305?\243\260\311\364\355y\327?\316\303\366\212s\010\363\277\265=c\t\224\350\265?\032\377m\007\367\213\363\277\240\266\3374U#\320?\272J\207\"L\337\357\277<\\\210T/\223\366?\261\36181\025|\372?\010\352\324\020\251\"\316?\334c\230\177\255\267\351\277\202\352\314\304P*\323?}{,\370\244\231\310\277\017\221\265\236Yk\350\277\243X\272Q\254\363\314\277C\342K.\362\304\332\277b\251\376\301\376\267\362\277dLJa\221\303\304\277\346s\213\2505T\364\277[\004\343Tc\330\313?\360J\245X\227\337\366?v\267\320&E\265\364?+\212\\\367\264C\321?\237\023\237\313\333\252\331?J;\t\241\\\231\364\277xM\205\276\342\016\305\277$P\222\n\350X\321\2772e\267\346#\n\372?\306\010\214\253\2033\353\277\274Z\005y\215F\305\277}\250\322\372|R\363\277\2111\375\014\t\247\331?\370;\350\362\345\220\335?\210\241?g\037\033\266?\203\360_\303\3138\345\277d\236\371\300\032\330\266?&\353\3409\240p\306?$\371^>\256\233\271?\tO\256\224\372-\326?\001\260\212\234\250K\324?\243\363?\010 9\262?jRCc\027\246\301\277\'\010\230\376\217\350\340\277;b\325\264\353D\364?\324\275w\3333\226\365?\362&\313\017\340\346\344?\250\247\262\020\027\322\357\277\\W?|/\242\273?;a\303\277\020\354\362\277\n$\300JO\247\307\277\216H%\024\300\014\307?R\320\321<e\371\364?\266\023z\273:\350\362\277U\013\365 \002\267\360\277\007R\010TR\035\330?\035Xs\027\021\302\306\277\235U~^\313\013\303?\003\305\326\206F\035\360\277\322q \221\004c\341\277\360\352\273w\274_\304\277(\371\362\035\233\377\307?\375\227o\335GW\365?\270\211\022\246R|\303\277\t\357\035\n\271\265\360\277\023\365\343\373aH\323?5\227B\244\277\014\364\277\323\313\356T\007?\320?L\033\371\260X\t\271\277gX\241\337\243T\364?<\216,&b{\362\277\007\260\023Ffj\327?=\313\220\320\211\357\315?c\264/\374*\242\320?8\022b\325E\336\332?\202*\000c\255\310\337\277\2007\0262\362\327\263\277}:u\256\205\374\357\277\0305\215\003\370\211\261\277\213\333\240<\200\317\360\277\343`\230\005\263R\366\277G+\277X\270\033\364?\247\362\000\300N\276\365?\365\232\362U\203T\370?\201\333\272B\347\352\372?R\341\321\006\004]\366?\357\255\3245\334\273\323\277;\340\303xv\351\357\277\230Jo*RG\212?\221\370\363\373h\252\363\277\307\247\321}\'l\315\277\347\376\316)\371c\270\277\020\267\306\316\255\354\365?\t\306\245\364PG\340?k\000\025f\033\243\363\277oliq\2605\364?\"\227}\014<S\320?\n\310\n\367E\030\331?,\252\241\353\343&\310?(vr\252\252\315\324\277\026\302\254[\036\005\320\277\363h\256\255\340\311\342?.[\356\310\360\256\364?D\240+\267n\277\363\277\206\031\204SX\306\363\277\363\366\375\207!\262\362\277\347\323\324\271Q\264\314\277\371\343\225\304\347J\270?\3527G\367\220\226\336?\363P\216\014\303\232\330?z\340A)Q\225\252\277\231\377\'\301yS\357\277\270u;\305\016\035\363\277\230\243\375\267Vn\362\277=;7\317[j\367\277;\3522\356\342\352\313?\317\230\254k\327\275\304?\354n\372\027l*\314?)M-ih\260\344?\243Hs?Y\326\367?B(C6\361W\341\277w\3158\032\333H\302?P!\205C\2567\302\277\346\271,\374\263\026\362?oIfU8\364\363?\2334\274[C\276\312?\031\305\212\207\006\323\361\277\221\327\014\325\227\366\353\277\201\355B\275\372\271\240\277\360\207\317\367\261\215\235\277.\2744\230\300\300\331?\363\230&!\276\231\374\277@\220\205\226=\245\363?H\367\303\031\277\345\360\277\2627\237/\001\222\366?&Jy\317\252r\322\277{\236NW\262\\\321?\263$\226\374E6\327?\213$\3254Y\025\326\277\0200\323\246S\200\305\277\035\200*\302\343\360\315?\372\014\205R\310*\342?\204\314\242\221\362\276\340\277\326\024\027m\200\000\355\277\027\366\036D\251=\370?Z\331\221\t\023\020\310?\374^\310hB\260\311?C\272\262\354P}\275\277QX\367\307:\350\362\277\342\2245\237\257\253\345\277ku\302\227\r=\312\277\321\257pH\266_\365\277\331p\0223\273\217\306\277\n\3265\213\275\370\343?D\000\037q\017f\314?\301\250=\372J6\276?\242S\205R\260\275\260?\2161;$\3375\355\277\0060\364l4n\362\277\346o\323\024ru\361\277\004\'\322\202Q\375\365?\330s\242\\\253\004\353?\r$\217\227\221?\344\277\327\326\023\336U\"\327\277\344T\271\254\024\267\364\277S{\022O\204\361\302\277\2017\000\274\275\304\370?\377\364\271VW\203\244\277\031\331\021\217u6\365?\303\002\231\305\3671\325?\245\3106B\034/\340?\250\273\212\360\232\206\311?\253\033\355^\2556\361\277\256Vr\355\223\241\305?\347u\"\303\265=\363?\337\3157ugI\324\277\r\237\235v\023Z\260?i\243\332B3\026\343?{\243+62d\365?\371\364\230\257\3553\257?\304\221\244\231\304\227\336?~\240t\213\270U\314?\353Gw\277\356\210\341?\345\\\261\346H&\361\277\324G\264\231\001^\336\277\327\244\017\023:\255\364?\352x\327\377=j\305\277a\033\234\000\014\317\365?2\031&\205\213n\316?F.i\336[\221\257\277ry\220\037\016\252\321\277\337\022\254\233B_\362?\035\210v\2024-\332?\335\220\242\337\221\376\362?\001\337\270t!\377\223\277\005\nU%5\205\362?\250P\033\312\224\342\356\277\302\235\260\372\021k\373?\331\230P\306\264\\\367?\010\033G=\242\216\260\277\261L\344d.\224\363?\360\"%\020\317D\346\277\'\034\255\340\325l\353\277U\267\257l\024\023\367?\311<\000\242\224\231\323?\302\235T\261\031\355\307?;\244Z\251\362\222\316?\320e\236\254<\365\360\277\0342\251\245e*\315?Q\037\240\207\302)\324?\021t\344O&\274\366?\001=)M\"W\363\277\263\013\220\232\0147\355\277p\315\313\017\301\341\362?\276LMQV\355\367?\212Ro\3138\316\361\277\022\210\375\365\024d\324\277AM\252\347\204\351\367?\366|\\\311\206\356\335?\353\010\006\310\360\303\315\277\033\346\345a\333\005\362\277A\264\274\273\250\361\303\277\206y\252\240\016\257\325?t;\010\007\215\244\320?\016\313z\223)\350\364\277\262}\276GF9\320?\236i:\362\261\360\363?%\217\300-\000_\321?\325\037\202M!\025\312\277Zg\330v\022\200\336?\210FF\265\003\312\362?[ f\362\354X\314?&\342I\234\317\232\374?@\003\n:\230\037\352\277ge\253\365\320\276\363?\021\331(\336t\225\335?\232\222\266\242\000\227\315?\323w\333\267\335\210\365?\0104\242O/\034\342?X\004~\353\372j\366??\346\343\206\360\217\364\277\220\311Z\214\363;\347\277\223T\377\210\311x\321\277_J\267u\240\377\361\277{\327\211\264\322\336\331?9 \367F-\364\361\277\274\326\367\311\341\370\366\277\302.F\252\021v\320?h\2239u\206*\317?p\006\277}\362\022\374?\242\226,\245\242\337\362\277<\213`!n.\327\277\204(k\322\221N\327?!\025\274\031WU\360\277\275W\002\031\250@\321?\3355p\032zP\355\277\177w3\346i\357\362\277#\030\030\217\346\222\302\277\203i\274F\330\275\325?\214\342\257Ta/\304\277\361\200\232\305\332;\330?\320\201A\206\226o\335?X\257\255\022\3033\364\277$&3\245QA\354\277N\246\177V\204~\321?j\327\3640&k\363\277\3107o\276\211M\347\277\257LIiT\311\316\277c\002g\354nW\314\277\305\004\222\371#O\362?U\341\013U\200\303\371?\247\327\243~2\r\316\277\032N-\373\n\200\334?\265\241M\332\021k\365?.\342~\373\342}\314?\232\302\206\230}j\366?D\236M\375\324H\322\277v-L\024\245\274\355\277V\320o\247R\001\340?)\324\307\002l\324\367?\216\251\024\207x,\307?5\332\200\020\003\221\370?5\'\330\205\024K\362\277Q\241R\334A\241\363\277]*\031\030Ad\301\277\r\342\264\210\361\341\363?\224)\365!\222\307\347\277_\335#\014c\217\255\277\013\363a\2722\262\225?m\025Dg@\016\364?,\372\202\005p\276\364\277=l\267\013s\256\314\277\'\366\267*\005\n\321?\334\376\243D^\021\364\277\343\204u+\005\245\363\277O\261wm\303\246\374?\301\266\263\314\037^\354\277c-q\235N\177\333?\024\324l[,y\327?\342\237\023I\225R\365?\300}L\221\271\'\362\277\353]9\371\316C\337\277\310N\200\366\325\207\320?\362\201\360\211\021\324\267\277\'b\324\350\024\370\320\277\317\274 \366\354}\227?\347\247\237#\371(\343?td\\\333\r\216\364?\214\252\021\306\000?\337?\001U\276g\227\240\363\277\240318\342t\320?#\302\341\364E-\311\277[a\204\017\221N\363\277\035^\021\200\212\031\356\277P\313\205\375a\274\362?\377\007c\241-\212\353\277iy|\032\336\037\362?\010\203\310\254\266b\323?\034\017\301E\007A\320?5{\200\237ep\361\277h\'t\002\355E\370?\256\202\340\036\311\024\330?ZD3\003\320!\331?\014\315\253\202e\277\301\2775\353\027\371c\302\314\277\31724\367\372M\367?\3372\217\367a\t\304\277\363u\200\020\330Y\303?9\006oSb8\330?\220\3029K\327\253\322?\306\364\210nS@\322\277\326\370\256\005\r\314\333?\272\t{\002\027\237\371?\005e\254y\312e\367?\276\304\365bcA\330\277\337\244\352{\250\374\361\277\252\035\314\342;\033\327\277\250\344\244\265i{\317?\260\272 *n>\366?\2418\275Xq:\361\277\315\3537\266\326\325\330?\306Y\227\004Y\300\323?\320\006\3757\000*\357\277[O6\317XO\356\277N\362\236\374\267\017\356\277\343\037H\211\203\265\354\277\006\020M\235n\214\251\277\205\372\321g\240S\346?n\2178\353?\245\321\277\263\000W\363\322\317\367?$\363\200 \220\250\343?\263\354\017PR\335\363\277`\213B\034\226\203\363\277+\002\332y%\301\361?\334f\260\205\006\030\320?\0133\305\364\324\202\362\277\233\033\2018[\322\330?\271\016\201eu=\326?\253\230:\233\024\204\363\277\213$^*\241c\342?\274\215\311\245n\237\363\277Uk\273T\335\377\217\277\"\231s\320\350\031\322?\0336\335\304}\347\333?\0136x\315=I\341\277\033.\304<g,\277?P\021\325hw\027\361\277R\362\341\307\255,\302?\335z\346\240\364\304\367?\307\354\243\276\025\346\305\277\222\255)S\377e\363\277\277+7w{k\341\277\363u\242\025- \312\277\207\003\215\226\203\202\340\277\312\257\231\001\034\316\360\277\215L\016}\177~\356\2778\363\317\351\257\366\261\2778\246B\244\232a\361?xg\027\240\365\351\261?\234\232\016\342T.\362?\313\033\252\363\321(\350\277\014Ph\001\265\207\306?Y\215\025\336:\256\346\277\266O\366\307\233\037\324?\361A\323\206]E\220\277\323nt7\n\251\362\277O S\276\303y\361?\022\234\007\353\230\243\341\277\357\0373\241/N\253\2771\216U\311{\225\351\277\035\216\201HhS\360\277#pK\336.g\266\277\270\272\'\2208\334\366?d1\177\217\236\331\355?<\003i\032\003\021\363?~\333\244p2\300\366?5A\245\2443\021\363\277$\001\203>2\022\363\277XDc\377 \013\302?|\307_*\354\252\327?\240t\2227\001N\226\277\000\035R\201\355\305\314?\211`k\371\375\317\365?d\224et\335e\334?\032ka\244\2137\266?\357\007E\340\315I\260?\026\332\212\305\210=\225?x\220[-\246\372\343\277\366\233z\217#6\305?<\353H\277\233\352\363?\300\235\361\353S\362\365?\037\370m3\303,\246\277I2+\376C\222\206\277\035\364IUX%\367\277\242 gZ\313\037\352\277R\214\305Eb\272\362\277\372\356\023\363%G\363?q_\033\235gq\277?{\036\273\363w\271\362\277\270a\374;QP\373?\265\326_\206\007{\261\277\306\343\243Y\225\337\363\277\322TqJs\350\363?\271\243L\337\270\365\205?\367\323:z\235\327\355\2774\233\370Oy\000\372?\202\357\344l\304h\331?\273\320\210\240\241\302\206\277\367hNU0\361\277?\035U\277 \221c\302?\035\373P\347\254\036\363\277P\237\017Ja$\331?H\014\377vBv\306?;2R(\021\373\322?\245\033\377\036>\277\320?\340s \346\376P\367?\233\313\361K9.\343?\333H\372\243\027\346\335?Ldf$\276\226\365\277\036\000bt\t\215\311\277&a\230\025\366\334\320?a\202\001\235\031n\363\277\265\"?P\356G\327?\1773y\277\027\232\365\277y\005\304\274\256\261\363\277\376\017\022\241\3433\312?\3263&f\004\201\243?c[X\005T!\302\277\030w\351\363b\330\333\2770\365#\303Gj\352?\222\222\227(m&\331?\252\036\332\366\340\031\322?\337\217\255\177\325\263\363?\371uvH\362\201\355\277\2526\361\236\244\260\363\277\242\"m\213\352\325\361\277\200\204)J\360\373\363\277\177\275~\304\324\224\204?\205\367\332\374\321!u\2775\371\276\201\300\243\326?\305\003\r\372\313\315\307?N\307\3213\203\275\366?\223\245\341D\202\271\366?m\006\345h\334\237\333?\206\343\223\\\031>\340\277\317\375\220\353\251\226\241?\216\026s\237b\311\323\277\035\000\350\330\301\330\301\277\263)\007\312\235\270\316?\337\304\324\313BT\364?\004\272\243\217\270\221\250\2775\310LIS\373\374?\207EA\rhu\363\277\322\312\204\375%\321\201?\217S\321\276\277\313\313?\3263\256tz\236\365?8\021k\206@\237\231?Q{de\242\r\205\277\302\327k\246\355\357\273?\374\014\203G\372\320\237?\310#\240\352\330\236\366?z\312\347(\326\372\365?\033x\235\217V\374\266?\"\274\313\323\256\226\343\277&\227\001\000CL\206\277\203\250\273<0\315\337?}\343\256y!\213\364\277\340h\373\023\221\333\357\277\271\2214\236\272\347\340?\251\2509\003jz\337?\t\377\025(\301r\323\277\214\254\n\272\276\215\324?+H\376\361p\303\323\277 \0312\'\210\316\362\277Z\202\335(\335G\303\277H\334j\276\325\310\362?\226\231\264\037\364\214\246?h\306\264f\233\253\365?R\207\242\210<\t\330\277A\240.s\343\305\364?\027y\203%j\016\305?g\332\021\036\352Z\304?\2244\027\233\004y\361\277\237?\r\201X\007\367?t\223\213\030\217O\303?\352\344\202\350\341R\320?mO\203\331\321G\357?i\363T(;>\356\277v|g\350\373\342\371?\020\027_\"\253D\362\277{O\332\257n\273\363?\222\2078jEE\362\277r\033j8Q\225\362?\240d\243\207:\343\363?{q\252\302\227\341\366?\323\277\362\274O\003\322\277\0018\010\307\320\250\312\277\251\264\214p\037\034\320?e\262\031\362%\322\362\277\340\247B\007\325\371\335\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "|\370j\334\005\236\362?\3135}\026\362=\340?\032!\021}\203t\341\277\023\352\363 \000\373\350\277\267\277\\T\357\225\312?!]\033x\246k\343?\211ISA)\276\342\277\356@\273!;u\341?\306V\216d-\234\340?e5\220\030\017\277\330?v\326\331\244\2143\332?\275/\335\356\311\025\341?\216\016\\\327\310\006\321?\275\374\312\370g\212\323?r\316*:\007W\345?\241\271:K\265\245\354\277\020\225\010\234#B\347?O4\000#\266\020\337?\312\213\262\370jx\357?\220\240U\002<\306\353\277\355\021K\357\252\355\357\277\305\333\201B\\&\322?\260\034\346j\364\341\343?D\303Zr=\200\353\277\'w=,\373Q\325?\347\3421\204\0375\304?,\201\021\372*\322\342?\321\342\\\327\"\316\352\277\017\346s\374U\250\341?\367\327\027\211\321\331\344\277i\321b\332\177\004\347\277Q\377\276\261\340\202\337?\244\320=\001\371\204\350\277_e\341\357\027S\304?\025U\033\345\314\305\337?\207\273\221\3751\265\343\277&k\213\363\231\277\323\277\203\301\301\261\252\343\350\277[\365Bq\340*\350?\230\363\222\027j\213\307?\344=\331-\305\020\344?M\337B\000\037\257\356\277\240\356r\246\373?\346\277T\263\242\217\n\272\333?k\356i\306\232?\353\27776\010\303i\242\360?;$\353\0212\372\334?k?\010\3556u\304\277x\020\3148\355+\342?\354\266\005\027\250\035\345?\223\265\347Jbk\352?hB\347V\310\'\271\277\210\357\241\013\353\256\327?\244K?\221\006\202\361\277Y\021\352\010\257\251\357\277\201\274\235\302\021\345\340?~MHO\303\223\320?0\251\372\213\226\236\362?\371\003\243\001\342\245\361\277\rcQ\016\362\263\327?\211\213\\\016 \336\336?\265\304\322\231\237\334\313?\214\376\255\265\312u\343?\337QgLs\212\362?,\013U\327\006\264\337\277`\021\334ys\271\336?\245\t\"\352\t\270\340\277\r\002\306Z!\213\356\277\220*\0370\275\301\345?Z\030\r\341\264\r\310?\345\t\272=\n\320\342?\'\320\316\372\035N\354\277t\261\3071\216!\343?\256\222\250\374Dq\353\277c\201u\323Xj\340?|\266\315\225\247\306\323?\303\230B\377\200|\343\277[h\237Z\3208\341?C\352-\355\324\213\342\277\303\316\365E\354\356\340?Wi\204\022;3\340?o\350\037\340\211\313\343\277\325\032\374\026*\352\346?\235\3674q%\022\356\277\2544 \272\257H\343?\343\321\367\312\006\375\341\277\261j\024\226+\336\360?\210g\342\214ey\300?\357!\355]x\"\340?\002_\314\225@P\343? |\220.9\'\353\277\270\030{\345\240\312\335?\003\337\242p\034F\242?2\243H\316eE\343?\252\253\207\2259\272\330?N\252\030\254\247\000\274?\034\345]\003\315]\346?\323\000\020.\316\343\346\277\352\231NHP\376\346\277\354M-\005\365\026\323\277\177\007\317\315\324\356\331?\006\001\365\243ix\360\277|W\333f\\\363\324\277\260%\202\020\254\273\362?\273\313p\3403\315\343?!\210\221\231\'\346\334\277(K>\024\341\275\335?\024Z\321m\316Q\355\277\237\362W\234\270i\226?`\003\217?\257U\361?j?\0304\3059\360\277\325\206i\322n\345\362?A\r\0277\305\267\343?\237\330\010\306>\307\302?R\364\032\242B\307\340?\325;i\375C\304\330?\234JZ?\332\306\343?J\251\246\254<\357\357\277\364\035\037\352r6\355\277\254\017\314\301\"\013\334?\217\204\274M\017I\312?0\230yF\316\006\345\277Ux4w&%\321\277\241\304\027s\240n\340\277\271;\353\177\324\003\363?\301\345\337zIr\331?k\373\004\264\245\311\244\277#\232\203\245Y\230\340?\023\373\210d\363:\317?am\016\351\312\354\306?&\254\200\030\301=\331?\t\021)\252\200\222\335\277\257i\372\340\201\331\360?\230\326\3067~i\350\277\326*\323y\331\337\343?\035\245%F>i\301?\374j\3274\024\325\247\277\215D\371\363\027%\357\277\343<\265\370\364\242\344?\036/A;l-\231?\365{.\350\036\337\343?\"\261yokN\343?ZQp\2027\221\360\277p\211\001\316\3572\342?\276\267\377\263\323\354\353\277\373\271<\260\367t\335?E\256\'I\374\256\340?E\027\\X\260g\320\277QT)(\265U\352?S\370\344(\361\r\357\2777>\005\323\017J\310?+\010=V7?\343?\010\316\222\226\025\351\354\277T\356\264\305V\204\342?\342\211\004\025\000]\355\277O\342Z\352\026[\361\277W\270\322\251f\312\344?\007\253w\377\334w\345\277\211$\363\'=\324\361\277)\253N\324I\211\347\2772\327\032BO\356\344\277g9Pr7\010\346?B\354Q\223v\020\310?\002\340\241*\371E\345?m\324\316\251\345\001\313?\225\354\350wB\315\344\277U\347E\031)X\304\277\371\215\266[\331\211\357\277K\222\003q3V\214?\017\252\311#\010\237\347\277\364\325\341\317\034r\361?\036\337QWK\321\355\277\372\026\230(\305\234\354\277\331BK\216\233\256\346\277\317%\030\317x\223\350\277<9a\231\276y\345?\275\306\231\256\034\371\337\277m\304\331\316\337\203\337\277\223:q\233s\222\311?\353$\312\243\357$\325?\327Q\036\002\267\301\335?\250\2135n@^\343\277m?G\361r\033\364?\370\230\261&\331\017\345\277\274\261\005\000\217\361\305?\251\257E\023\002\220\336?\336\213*\215P\322\301?\321\362a^]i\361\277I\244\351[\020<\362?n\027a\246t\366\275?\321.\350A?\021\352\277\016qB4\024\211\346?3?\370\017\247=\355\277b\217\014T\276\220\345\277\001=\351\334\222\321\315?u\206\000\277[A\337\277\253bM\340\327E\351\277\271\034nXb@\311?\025\320\230\355\365]\314?{\212\037{\323\010\350?\255\030Q\374))\340\277\322b\032\304\340\030\350\277\027V\315\311 W\362?\350\260\031*\301\r\345\277\341\335\3036\315i\360\277\232b!\3557\377\307?\275\250\252 \r!\327\277\237\350\271\221\224\243\351\277D\202\347c\330\361\337\277\n(u\367]\232\344?\276.H\322\247M\356\277\243\013\213\366\225\216\362?\367\035\213\300\374\t\320?\347\335A\315\355\224\342?{\353\272\033\361^\350\277\371\364 \312\001\210\337\277\243\005\214\007`?\340?\'>\247k8(\271\277\307\3515{\305\251\350\2778;\256\221kE\343?\006\037/x\225\243\345?\320\372\007\'\355\r\324\277/\246\260\205!\026\315?\310\306\024\000\356j\341\277\304X\250\224\3549\304?\340\334\261\350\265N\362?N\371\324\346\271\355\343?\326\006A\360m\250\331\277\331\377yU\2163\343?U\344\367\354\334\270\332?)]q\270Y\006\361?\013\\^\257\363t\346\277\347*\037}v\232\343?H9\230!\030\251\370?\206*\341x\242!\341?]\366\004\267L\017\312\277\344,\275H\'A\337?O\003\321\371DE\240?O\'.}z\352\326?\370C\225+[p\356\277[#\374#\345s\342?\313[\356\372\004\233\353\277\344\333\3541\371\212\350\277\217\250\327\023$\316\350\277\037\030)r\245\'\342\277y/c\334\215\313\352\277\352\371\003\001\320\177\326?\322\302S8\223\331\344\277$\023\0307D\264\341?\335\202\n\306\227u\361?\367=\344*DL\302?U\370=B+j\273?v0\251q\200\227\355\2772\030W\240\3662\352\277\371\363\323\252\270\306\332?\032\360\260^\206\035\337\277\314\361\203\340\226\306\351\277\312\203\353\333\000\021\303?\336\ro56\331\351\277\022Y4kY\306\345\277\244\326\024:u\212\342?,\237\010<\034M\362?\301]\317+\357\214\362?Q\3245\223h\375\301\277\327\353d/\024\177\320?\"w\307\212\031N\360?9Bxk\022\212\353\277\340\252\375\220\004\225\330\277\211\002\\\321)\'\352\277\266\206N&\235\221\362?\013\235\347\330\215q\345\277*\031\215\006\346\301\344\277\036~.\037\354\241\324\277\0014\213\303y\201\254?\236&v\031qy\336?\004\263]\251\217R\357?e\035\025\314\020\000\345\277\305Ql\334E7\355\277\267I\300\371S\022\344?@$\004{\263y\343\277\326\003\311C%\235\360\277N\022\200s\210\350\274?p&\226\324\344\203\337?\345\203\204\250\334\366\341?\3001\215\271\226\263\361?FJV:\227\241\306\277\274,m\034\370B\361\277&\306\001\340\016H\345?x608k]\340\277 ]\036\342w\\\350\277\271Y\20142\\\361?\343u>|*\304\301?\340\315\026\3475\017\326\277\317\315S!\2468\325?k\335\223\254\324\323\347\277u;\262\035\265\364\342?V\235\223z\350\'\357\277A\247$\037D\214\366\277\207!-k\034\354\344?$\333G\233\216\211\342?\010\367d\036\235\"\346\277:X\352\033p\025\360\277t\003\272\327 \022\353\277RC\300\231\266\272\362?\242\227\253.\374\030\323\277\013\305\256.E\327\343\277/\356\337\3407\311\342?\261_0\215\304C\345\277\022\360\222?&\231\345?\004\236z\004\262g\340?\035\251\020\032\023\033\305?x@\241\255\354>\305?7S\276S\351\325\307?/I%\230\331z\325?q\356~`s\345\310?F>=\030\234j\352\277o?BX#\n\343\277\343\230\237|W\037\354\277j\325\272\217L\020\322?w\227m\3521\'\341\277\223\370\377\224\001\317\341\277\262\306K\021x\030\306?\353}\207A\302\265\327\2776:2\231\r\371\340?\177\323\212\'\301\264\344?\361\366 R\332\257\356\277B}\321\326={\363?\n\225\026v\230U\361\277\330\260C\315\n\223\353\277\"\300fw\243\255\313\277\351\036\365,]\306\367?\026\315\201\220\276\343\313?5\276\366\276\031\371\350?}\024\256\r\3216\322?+pX,\323\204\341?K\201h\335\221\313\337?\350\255\001\275J\004\341\277\333\235\372\335\341\265\362? )\305\020\034\277\362?T\257\276.a\264\344\277sD\\Y`\333\343?g\002\334Ldd\334?&\313\300pA\330\347?Z\355yo\353O\327?\364<\353\330\230<\357\277W\363\266\265-?\365\277IB\302\030,\275\356\277hz\346\324gd\320\277\323n\311\326L\272\304?\340\216qok\305\326\277\261\316.\014\346)\360\277\270~\036\236C\\\331\277\316\314\343\306\336Z\341?m%{#e\216\336?<\t\0138n~\355\277h1\000?\005\026\345?\323,\232L\323\216\345?\274\360A\352~2\362\277\364\335\233\0008\320\341\277\363OK\0067\037\363?6\316z\221\300\t\321?\3628\177\224/\003\342?\036~\010\002lB\337?;\024Ls\026\302\337?\341\314 \353\255*\351\277\342\373b\"x\321\352\277?Lj\223\330\315\351\277\005\233\016\320N\245\262?\211\261\260iC#\347\2770@\230uS\036\361\277\356\312\260R\342M\362?\332Q7t .\327\277\206\364!\373\227\205\314?\023\266\375\367\343\215\315?nu&3\rT\360\277\373\031\n\037\2525\354\277\362\324Ze\327\315\333\277g\260\305j\017\"\342?\3649\265E\001\350\321\277xs\310\204\220}\342\277\271\202\203G\254\363\302?\3372s\362\260\177\324\277\033L.&b`\355?\035+o\233\314\256\357\277e)\363\215\265k\361\277\264%\205#\257\264\340\277\315\240\236|\353*\327? \026\2140\322\242\343?*\377\335)1~\333?\013\322X?O\000\311?m\242Ef\337\363\260?\243\3260\353\n|\332\277\237\022\372>\213@\320\277\027\214\001\334\0162\345?\343\357\261R\335(\346\277\035@$AJ\200\314?W\236`{l\016\346\277\330\'\375^\210\210\271?\343\244[\244\242\235\362?@IC\334 \037\361?8\315\002\005\r\373\351\277pOY\204c\317\340?\203\346\3318\304\007\354?\325}:\300\355\227\344?N\320\347\361\256\303\355\277I\266\000\276$J\357\277}\033\324^?\226\315\277X\n\n~\244\315\306?q\301>\005a\362\305\277\357\204\211_]\312\362?\371\300N\000_\206\351\277GZ\001En\006\337\277\357d\340k\203R\343\277\0050\340\204\275D\337\277\240\236\026\005\034:\310?sg\366z\305\206\263? .\267\314Y\222\307?\217yYd\006\232\362?\226u\005\376\272 \347\277ce\264\033\355m\345\2771\251\336\275\374\332\347?e\237\230;\023m\362?)\356\271\001\204R\350?\315\257\037<\007\013\344\277_\335\210-\251\213\352?\204\307\325\254\177\207\341?3Jz1\250\243\321?\360\342\220\346\177\274\316?7\343\204\002[\360\332\277\'G\322\336\231*\344?>~\263(t\010\346\277\2220\342\202\343\002\342\277L\256;mR\035\305?\226\255\022\331\r\271\362?\246K\211\314\022\366\356?\026\003\231\202\306\343\361\277`&\261\r\005\323\344?\r\026\276\277S\037\364\277Q\346(\023\243\234\353\277\277\2604\016)1\314?\354v?\270\0221\330?\003V\352\273J*\332?%\003\253A6\021\342?\301E~m\311_\320?A*S\326\316\365\342?;\261\236o3S\355\277\232\217N\371\321\000\313?\n\327V\376\371C\362?C(\271\352\324=\350\277Ql\344+I\"\347?\222\307\031\0208\302\346\277&*5\316\010\024\350\277d\361\2225[0\361?\315\361\311ZU\217\340?]\351\370\030\242d\360\277\241\333y\216=l\340?\006\264\354#.*\356\277\036\001\334\002vx\336\277\324\021;\332\231}\332\277\035fe\304\210&\343?M|Q\250\265W\357\277\301\207}\336\037\334\353?\177;T\013s\200\326?\353j\333\344\264\302\321?U\'\207\214\322a\364?s\201\t\207Y\363\351\277\032(\324Vk\372\330?\224\263\224\007\360\205\362?\350E\375h\225\304\351?H\377\301G\001\222\342?Z\370\277\032\316B\350\277e\275\030N\333\355\361\277q\333[8{+\343?G\306\n\265\215\032\357\277\212\221\240!\254\306\342?lf\361\023\257\360\331?>O\242K\315\333\356\277\016r \313\354\340\351\277\357\344[\367\333\310\333?\371=\311\301F\267\341?\210\223`\313\247\020\355\277\325\311\'\365\355\271\357\277\032\2167C\265\317\336??&\306\331{\203\361?!\332O\362\267P\330?lF3\330\236\304\344?\344%\345\334\n0\325\277\001paI\274\177\342\277\004\355\355`\013*\343\277\367\221\344\236\310r\362?\330\235Jeo\216\363?eN\223  =\324?\201\372p\001\2104\355\277S\005\"\231\231\035\355\277D\355|\242\311\243\337?1\310\030D4\013\360\277\337N\254\2151\r\347\277;\345:\243\334\022\331\277?\273_2HS\320?\272\274\253\365\231\345\323?\337n\362\222\344Y\347\277y\260\2066\236\341\345\277\234\345+\231@\350\305?\310/\341\320\300\325\273\277\361w\212\314\243\340\322?%\277\332+\366a\351\277\322<\356\302\227\272\303?\343x\363\030l_\345\277\016\373\342\376\007\311\306?\313\r\250\214\222{\360\277\0100\216\004\"\255\310?\020\236\344\026R\001\323?\267\323~\352\205>\340?\345\317R\023\236o\345\277\206\206D\351\345\266\343?t\340\033$u\354\351\277~ny\205\266\034\352\277\256\302\343\304m\006\363\277+}\034\2672c\343?\337\006\327\340\237\314\254?=\370g^\247i\341\277R\262\373\220\336\205\362?/y\304j\260\034\333?\332\016~\347\3716\341?S\235\367\002\'\267\321?{ \254z\350f\347?y\356\243\023\204\337\342\277\023K\205\035~X\342\277\260\003\333\010\013\251\342?\333\313\201\307\035\306\345?\265\262e\3572n\336\277\351\260(\311\257\360\356\277\337\204\321fja\347\277\273\314\214\346\3460\355\277\330T\307\352\270.\333\277C\\:\200\026\246\362?\231m8\021 \321\336?\014\324D\370\271_\362?\213\237\016\317\022p\337?\260\031 \'L\234\354\277\317t\351\320;,\333\277\266\244\217\034JI\337?VN\356F\335\352\271?b\010\374!\331\325\344?\254w\262\032\332z\344\277(\013\272\020>\254\347?\374E\006\300\000\"\347\277\005\314Y}\211l\357\277e\326\302\"u\244\344?\353\\)\317D\337\305?\306*\344\2071\344\350\277\312\250S@yZ\362?\345!1\270\216\337\334\277\353\271\256\034~\341\327\277m\334\345\346\207\223\303?mOdH\270\322\335\277\250{\237e8A\360\277\23743\026U\306\344\277\205\265\034\3467\241\361?A[c\237\305w\346\277m$\313^\0060\341\277\324\022\017 \023E\344?m\360:\303\313\004\311?_\031\231<\336\252\350\277\327\223;\256\027\214\344?]\251j$\004S\332\277\272\203\324\340D1\356\277\364\301\\N*x\313?\022s\305\212\236\220\325?C\252<\235\014\212\361?\366|A\363/k\352\277+\341,\354\244\223\233?^\245\342t\n\316\312?\371\225\030\016}\323\303?\036\035\022I\202S\341\277\201)\222\343\321`\357\277\224&\373\335\226\244\334?\324\247\301\010\364\023\350\277\361\036\211vo\005\317?;\250\027\031\377\221\362?\223\3225@\006\\\321?\272@\273x\343s\343?Xe\337\255\373\212\335? \035\202?\320\206\357\277\336\341\001\200\307h\343?n\017\223}`e\362?o;\320\352\203\217\361?\215\376$\2715\215\334?\344\026\363\300yq\363?\251\021\361~\3744\337?/#e:\375\305\340\277\327\317c\251\032/\341\277\353\324<;Y\262\362?|up\351e\327\331\277\022F\242\001 \342\360\277to.\341\366\030\345?QZJI<l\357\277\035\331\037\235k\027\314?\031\306\302\177\204a\343\277\034\037\215\354\220)\343?\326\236\365\317\307\216\326\277B\004\r*\255\276\346\277\033\204\374\376!\021\327\277\266\217\317{yj\324?\365\320M\312y\320\324?C\220\t\006\251\345\342\277\023\350a2\316\233\364?\3007\377X\006\201\361\277\214\255\352\302\262y\345?z\234,O0L\346?\247\366\276hKO\354\277\350\233<\200,\246\321\277\363\264\207\"O\344\350\277\226\226\265N\205\031\361\2771\326\252/\250U\333?\316F((\305\213\352?+\247\267=f-\347\277z\'\246\321\310\372\344\277E\001\303\353\331\314\267??g\326\226\235:\341?\376/sN_(\343\277\340\373\361\352aa\302?\r\260\t\304\357\345\346?\324\354\346\r+v\343?\234{\206\357\320\223\310?\316X\267\355\311\211\337?j\245\267\303+\237\343?\337O\257\024\034\033\356\277J\027\243\251\213N\362?\2338:)\344\267\351\27781c\244]:\355\277\341\323?\200\257\344\343?\255\323\342\3749n\363?c\370\000\334\315\304\361\277*\371\305\303\354i\362\277\'\010\025\226\361K\344\277\346\037\342\236\210Y\352\277\224L\320\370\256\366\360\277\271\345_\357\2266\253?\200J\317\254\317X\334?\202\t\232\247\270\330\360\277\304\224\377\026\367R\345\277\346\374\345\2605L\252?_zs\377\221|\345?v+\224\271\227\316\341?\037\342\010\247\n\313\346?\016(1\376\367|\360\277\206\312\351\225\310\255\304?5n\223r.\322\344?\377u\313(s\364\346\277l,pC\251\266\342?\327\341\354\311$\252\344?b8\247\"&U\313\277\2567\354S[\331\347\277\252\242\277\326&\245\340?z3\\A-U\352?\334g\226\252B\200\341\277O\370\312\3637%\354\277\324\241\322:Cm\350\277\231Cv\316f`\346?\265\206)\270\365\313\362?\2702&Q$\370\356\277A%\002\260\017B\360\277YzD\256\262c\356\277\253\024\"\032\025\312\327?\231\267B\306Y\251\327\277\0170D0\244\312\355?8\364\377\035\177\265\336?h}\333\373T\375\331\277o?\367\224\375M\355\277?\227\016\271\250\205\344?\225l\016\2444V\361?\241\001\n})\214\332?\0066\214\322\303\014\344?W1B\001\033\334\361?\215?\033\305\3222\345\277HVkA\254\271\342\277$g\020Z\214\365\343?\264v\324N\367Q\305\277\'\0060W\241x\362?\226\264\323PK\372\362?\377\227\342[\205\037\350?\000\207\257\332/\230\337?\262\301\023n\214x\344?\224\2635\226\326\325\343?Z/\243F\212-\322?C[\301\371\\\240\232?\242C\"#\345`\336\277\250\301\332R\220\260\362?\271\337\\}\177j\356\277E^.h\363\223\324?\367\240s\"\342\322\303?\203\256\250&\004\215\362?\216\324\014\246\302\244\331\277\033\367o\314GH\266\277\351\341;<r\265\343\277\256J\260\017\235\265\342\2776s\216\017hV\353\277\213\002.\321\301\250\326?eU[\221(\265\341\277\n[\317Vlu\330?l\227\344\366\314B\343?\224\333\'\245da\345\277\344M\243\323\264%\356\277\036\354\t\232p\377\307?>3\004\'~\255\363\277&\013\235$*;\325\277\353a\322Z\346\340\360\277\n\230\231\0149W\327\277M\242M\347\352\210\340?\225]\262\375\3276\302?\233\315\242\032fQ\356\277^\303\253\3056t\350\277\306\310P\325\007\224\352\277\300\236\336\375\3435\362?jA\220h\313=\324?Z\344\035\312b\217\245?\203\211\335\344Z\377\346\277\020E\330\327\303V\341\2772Nj\221#\202\350\277\302\312d\222\234p\362?\245#T\217F\314\351\277f\343\362\225\336l\324\277\"\036\036\300\357\305\346\277\215\231\361L\232x\322?\315\240s3\311\366\360\277[w\363NV?\242?\210\324)<*\275\353\277\235x+\214\267\362\322?\371>\370\307\2447\360\277k\027D:`\244\352\277\272\\\264uh\342\341?2\312\355\0344w\313?D\247\214\177\204@\352\277\241F\010\377-3\322\277\344\217\341\253M\277\350?\262\213.AD\017\266?\323\365\t\005\316\022\312?/\355\252\004\240\265\342?\274P\273\351\303\324\345?\215\237\327\322`G\346?\233s\304\305\207v\330?K\202\273\310S\352\354?\277\241\336\376\261o\334?\2074%v\326\304\353\277:\024IB+\246\352\277\251\223\006\260>8\361?\361\270\202\321JF\346?dR\301Fl\353\361?"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "/\020\334\227*\007\226?\351\212\257\366\020\333\227\277#n\315 \203\330\265\277\021!\177\037\235H\265\2779z\215\025\352\'\217\277\327\207\223<k\251\277\277H\205;\224lf\262?\010\256\3032\244\235z?B~\217&s\007\243\277\021u\237W\177\"\225\277\325>+\312\004\316\254?\\\204\351\304\025@\310?\304jl@i1\314\277\252\322MJ\220\327\247?\2652K\215\035+\247?F\207@iq\211\262?u]yR\334\233\311?\262\201m\3047+\270\277g\356\366\347\262\346\225?5\302\244\237\202\'\224\277\350_\372_K\214\261\277\346K}Lo8\202?\003]\320\273\026\211\205?%\317oN\027\026\272\277\304\277\006\356\352%\227?\314\\\312\212\036\244\240?\334\312\245\247\234l\212?\023\240^\3123\374\257\277s_\375\216 \204\235\277\202\203\200JQ\316\267\277\227wB\353`\265\260\277^\342\363\201m\245\263?\260J\312 \005\247\256\277akI8\251\001\200\277\212\201\034\3027l\307?\006m\240\223\227s\331?\367\357,\255S~\256?\207\002\302\177G\005\274\277/p\234\023_\014\216\277+7\240*\010\305\204?Yfl\222\363\0161\277\267d\231R.6\267?\322\255\226W\014Z\266\277D\356\205(\2360\201?\361<\365\311\233\267\303?\206\212\3202\376\235\246?p\250\000\312\314\227\276?dg\016\202{I\231?\266\313.\335\236|\254\277\342\360\207\022=O\250\277\354\'\031\357z\214\301?\277!\003\307\347K\247?\332\327\201\343\252\243\241\277A\025\022\323=\260\275\277\213\215&\205ZB\266\277\240\031\t\222\034\211\301?`\346\322\230\275\205\203?\243\264\271\'jE\221\277Z/}+\372\365\260?j@\343\251\357O\222\277\316`\376Sq+\220?@\020\3244\321S\234\2777\316\265\350\261\255\261\277\22069\321\271\301i\277q\312\351.\245\357\255\277\307\330\230\375r\337\226\277\332\201\000\247\373\343\265\277\222\207\356\t&&\260?Q\252k\034\253\343\244\277\221K\366n\363\251\257\277\014U\337\326\240\350\306?\035\227y\320\356\026\270\277>\"C\346_X\244\277x\313\346\202\366{\272\277w\354\211bFB\242\2774{\233<\277\177\275?T\267\201\246\265N\233\277\232\020\307\253\365<\216\277Z\266\313\320\313\013\307?+\020\200(\tw5\277\241| \204\260+\251?\'\301\2648\217\220\245\277\206\305\235\260Co\264\277t+\264\363]\320\262\277\201\336\227\313G/\240\277\244:\320l\3306\301\277k\317\277\344\335\033\206?\342\220\t\217\223\"\224?\367J|m\n\213\253?u\312{\242\232\275\253? \303m\250%\n\244?|/\251\321\316\037\270?`\203\362\252B\371\260\277\260\260\206\213n\302\223?\245\346\035\222~\236c?\007\373\312\315\016\034\221\277\215\236\227\252+\253\256?\323\262\267\311[\262\256?\030\222\265\254\236\244y\277`\340f\207\271\240\313\277Dy\237\256F\002\255?\247\360N+\265\345\262\277x\'\250\312hj\310?\252\333\226\0210\324\210\277\"\025\307\365\326v\253?\330\360\346E\203\200I\277w\367\033\332\236\351\226?\226\203X\022\2225\263?Q\217\034\244\345\240O?\335 \262J\312\t\231?Xk\215n/\200\255\277x^`7\177I\203\277@\334\376y\344\026\251?So*~\210b\240\277\177q\234\316aL\300?\017Ak_#r\220\277\251\005\273\177y\316\256?]t\252\361S\205\300\277I\"Wh\371\213\246?\036\371\006\005(4\210\277I\252K\272s\312\216\277\275r4h\343l\240\277\376;\242\213G\314\236?\215\251\211_\242j\260\277\214\353\351\223\236\314v\277+\231_\007t\373x?\3404\326mb\330\221\277\213\007\264\305\373A\265?\245Og\324{\210\243?\242\323{\325A\272\256\277\017\361\321Y\002\354\320\277\324N\346k*\214\306\277\r\177\224\022\315F\206\277\271k\211\370,\223\251?\224\031\276\306\263\030\204\277/\376\0270\004r\221?\010\342\302@\307w\226?(C@\204;\321\262?\272g\320\243\324\'\263\277n\014\363\236\352\026\263\277o\231p\331\247\027\306\277\017\007\312U\241\020\227?\027r+\223,\267\271\277\371\244\033u\370\021o?uT\377\034\006\303\223?\354\266\325\254\007n\254\277\027\301\201\002\r\361\264\277\264z\340\202\236\331\252\277\376\340\245\341\311\343t\277\353\001\216\363\370s\263\277\357\201\026\333H\026\306\277\220\313\311w\355*\222\277\002=\202\253\306u\206\277\\\024\216J\021\300\242\277\223S?+\014g\243\277\244\020\327\002\313N\262?(J?\203p\014\262?i\226\305\203\375\227\223\277\2641\275|\256\371\261?\013\317\255\014r\364\240\277\226xMh\263M\254\277\\\222i\377h\326\243\277\371T\206T\207\324\304\277M\310\211\220F@\302\277SHL\351x\264\236?\251\215w:\301\227\300\277B,\364x\241\334\273?v|d\010.R\272?\311\375\035[\335_\217??N\356\267\023\377\301?0O\306x\033\225\231?\231\230\376\236\013\317\260\277\300 \323J\251\223\203\277\341U$\200j,\254\277\224\344\316QK\266\255\277\365\354\275\370o1\241?\306\312\334\371!\371\272?xg\215f\014y\212?1\300]\222]\304\215\277d\266\374\001\306\323\314\277\243\305\370\n\305\251\214\277\016\201\n\326\327&\277?^\\\263\370\216&k\277c\3338\224\353\024\214?\243\305/=\343#\221\277@\340\244A\016\266\272?s\322[\222\022s\232\277L\270w}\266|\277?\321KJ>\300\235{?\335\210\247\317\003\"\255\277@\213\324\331mC\304?\245$\2150(\234\252?fq\305\332\210\002\260\277T\036\006$\213\326\255\277\222:j}*\022\310\277\241`\263+1\342\233?\343\263\315\017\332(\260\277\007\253y\210\034\340\223\277n\305\317\327\256@\245\277\371\254\3230\210\375z?\226\371x>).\270\277\356m\242\327\315\014\252?\344\017\254\375\232\237\241?\027\200j\214\224f\273\277\343U=\346\300\313\265?%W\230\205\335\262\207?N#p\355\350\215\312\277\331\350{\307?\267v?\337\351\274\272J\202\267\277\253\201|\036,s\260\277K\006V\342\000!\253\277\275\210`\372\205\254p?\271\326Rf\242}g\277\206\260Eh\034\245\253\277\307N|\032\036z\205\277\0138\026\373O\345\315?\363\t\035\242)\031\256?):\315\307\026\207\320\277\216\230\241T\036\353\324?\314\244\265\233\274|\240?\232`\203T7\215\246?\303\335d\033\311\277\273\277\300\276\361\246A\251z\2771\362\266h\216\261\222?\363\037\231\267\2141\230\277\267\2641\351\252\353\222?\233\001\233\006D\326\306\277\340\3141\340W\343\302\277\274\033\230\316\3773\252\277\270\375\271\256\331\215\275?\237\361\241F\261\264\210\277\230;:qEu\264\277\261\271\320h\236\370\252\277\322~R\331\342\374\253\277}J,L\371\005\256?\273\014\314\342s\"\205?\021\336\234\377\255\373\242\2775[\236\200\300\370\237\277\020\314\344!\254\302\260\277\277\237\207\341\272\364\220\277\365g\021\331\367\202\236\277/\240\034@\343\201b\277\256H3\340\003b\267\277\302-y.d\264\214\277\306lD\363q\204\261\277\377c1\215?\301\275\277\\\377\330\240\325.s?\262\206D\215$t\242\277&\317%\345\0024\261\277R\322\352\024\256\271\275?\216\347\310[g\346\244\277\020\016!\202\020v\244\277V\220f\"9Y\240\277*h\327\372s\253\302?\3131\013\362\202\037\255?\024\000\254\021\300~\324?\314\255f_N\224\266\277l\340\376\252\341Q\247\277Ed\244A\\n\257\277\260\036\320\372\347\033\223\277\243AAXF\367\243\277\321L\360\006\323\364N\277\020\303\242\250#&\232\277\'\304,\263\tO\324\2779\360}\177\321\336\273\277\200@\212\313\314\334\253?\261C\306zs\364\241\2776\363\325\332\332\321\302\277\346\362J\317\'/\257?iSpl\026\242\222?\267\334\211Q1\360\264\277\274\201\324\t\030\'u\2775\177\207f\363 \253?\224R\372E\263\250\237\277\2252\271\203W\336s?\t\252\325\337\237\214\254\277lO\223B\017q\262?\246\377\347\375M\002i?\036;\254\035\2753\313\277C\225u\357\220\360\264\277\'\216\370?\355\334\303?\362\306`\357u\270\235?\264\006.\034\360\360\264\277\206t1\t\250i\251?\r\016\325\216\256\312\250\277\272y\320\370\026\354\327?\274\360xw?\305\261?k\000\214\274\025\274\217?\211\217\231\005\361\360\223\277!\334 s\257\364\262\277\270\255}\231vd\216\277\266\226\234\350`*\232\277i\343t\227\322\251\303?\237\310\367jD0\262?v*g\371T\204\265\277\371\020\305\204\000\337\304?\371\356uZ_\246\265\277\322\360(0\367\213\322?2\204w^w\315\242?\371\236\"q\321S\250\277cu\020_\272\332\260\277!\300\220U\265\360\263\277\361\376P\307r\360\271\277\377\305\212\n!\027y?\341K\263\364(\306\251?\023\244\330\360\314\204\320?\311\307!y\335\010p?\242[i\301\216U\306?\014S>iw\004\223?=j\223\316\2027t\277ssh,\207\034\260?\375\022cV\177\323r?\020\266\226\277Zs\220\2773-\364\2638\n\261\277\371\240\\\250*\374\207\277\2708\353\342\322\215\265\277hX]\272F\337\243\277\016\314X5H\221\267\277z\t,\330\337\200\302\277?\365Y\205-\027\242?a\177dG\210\300\265\277\025\276\003k\354(\214\277\364\233\270\246\202R\264\277u2/\177pw\261?\207\304t\036\242\202e\277sC\002+\2050\260\277\004\305:\'\023Y\241?D=\267\327SN\\\277F\234_\032\300H\271\277\236y\001[>\352+\277<Y_\321\205\325\261?`\352\030;\356\177\265\277\236rw\345\324\251\276?\027T0\327T\326\317\277\304\031O\372\234\203\246\277\202\255Uy\237\376f\277\363\340\352\340\237\331\274\277sh\034\345(\365\270\277\003h\333\006\265$\261?[?\277C\357\362\216\277\330\361\335\010v9\240\277\360\360e|\230\236\266\277\313|\210i\213\346\223\277\027\304\'\003\031\247\316\277J\033\244\211\263\311\271?\216\244\230\365K\225\302\277\350\324\tzVD\304?L9\352\261yK\271\277<l*Ah\220\267\277I\247\211my\235\246?aj\326x\316k\273?nb\357\350\313\371\244?\347\333!\346d\245\246?\274\037\222\261t\372y?y>\'3:\335\245\277\355\233\246j\247\025\212\2775\"\021gX\213\263\277\323I\355ar\tW?\004\377\006+M\355\243\277s\371\036\377\273@u\277\271L\367`Q\351\247?\232\314P\366\253\337\240?@ \263\3669<\251?\006\200\272z\273\221\205?\207}V4\276H\256\277\251\376\263\210\362q\272?\227\307\000@P\014\270\277{?\266l\004d\301?o\265e\305r\334\210?IT\214\311\354\251\266\277b\315\252\3130F|?\261Y\246\323\000\232\257?t\240\256\033\351\357\244?q\355\302\300~q\233\277K\266\243\220\305\214\261?\203\035t\212\321%\242\277\276\030\311\372\nZ\254?j\302\374\024\230\225\240?\366\203\'_\255\210\251?1\016#\331\305\334\255\277\33797>\273\324\267\277\001\000\367\242\353(\307?V\354\315\032^\000\247\277x\0353\260\326_\241\277\366\342\352\243JK\270?\213\250\017hY+\263\277\304\376.\205\352nY?\006\300\237\334\023\301\275\277\252\201\337\350\020=\253?\277\261s\202m\315\224\277\\%N\001\202\370\255?\253\302B^\271H\263?\263o@\355\000a\302?Z&\343\360\302\016\262?\024#s\212\037g\300?\353\330\272\031\262!\224\277\035\231\021\350*Zi\277h\214\312a\003\271\245\277\273\374\265\335wG\213\277\332^uI\032\203\250?R\261\030\350\010g\312?\032\364\266\317-\230\235?N\272Wv\340N\230\277\330\355\227\216c8\247?\237U\330G\232\r\253\277\336\276\177\301PL\324?uW\237\254\302\251\230\277\2324\302\325\014\236\211\277*JN\367+\225\320\277W^\3631\013.\246\277\330\\m\245\301\260\306?\307ZW\222\026\262\267\277Z\307\321K\026S\267?\257D\222\264_\324\234?\264\2124\216_|\223?\016\321\232u\003\353\307?\033\246\374i\217C\245\277\263\212s6S\375\261?\266\306\304\337\204\363i?\315<\217Cqm\267\277.G\213\203~f\264\277\360\031\352\262\254\017\245\277\005T q\301\320\204?r\273\373C_P\300?+\212\023D\205\030\255?\251\232\335fi?\231\277\3637E\206\004\271\264\277A\014\264\243\234/u?\331\225\005G,I\223\277,U{\216\017\272\263?K\267\310\206\000S\221\277\345\376\305\270\215\303\212?\256\251:\316F\023\241\2773Z\3018\226P\240\277f\235o\275\n\035\242\277!-&.3\331\264\277\202\320\214H\030o\223?N\027\245\014\366\253\302\277T\303\327\000<\224\226\277\346\313\201*\305\201\243\277\006\226\225\313H\353\313?bmRLk\214x\277}\014\323\346\032\210\233?\354\006\025)\245\330\261\277|\213\366O\277\217\244\277\317\233J\231_\340\262\277\325[3G\3035\215?M\340\177\251_\315\220\277\202\353\025L\322\365\271\277\350f\013x\350)\241?\343\243.\351\343\022\275\277\356\317-#]\331\276\277\344\276\177\032\2431\245?\001\274\204\211Q\317\271\277\304z\007\021~\237\260\277\252\247\22417#\220?\237\260q}\350P\251\277\342\001\235\356\313\260\272?\237k\260\314\211\364\233?z~\235\214\335?\252?\235\r\177\2056\246\263\2778\270*\310\325\352G?<g\230\343y\017\271\277\235\n\325@\337$\262?Kt\233\"J!\301\277\360\307C\002\303\017\321?\267e1\250\221\370\243\277\326\361\216\002\237\003\201\277\310\252\344]\263\260\262\277<\251\217\362\325\257\245?\0014\231-\251\234p\2772ko\262W\376\274\277\306\274kMy\251\236\277\260;\020\240u\n\236?HMN@$[\256\277>\252\355hR_a\277\252\215\256\342\033\334\261\277\tM\311\031\275G\246?\0179M\007Mp\262?\367L{(u\031\233?\357\204}\254\375t\262\277\037(\250\261x$\221?\007\254\272\327t\366\250\277\365\264\316\022\353\275~?\315c\241\227\2142s?j\371\315\245Y8\236\277\003V\217\334\326\221\263\277\263\377O\366\305C\264?\252\353\313\310\345\370\264\277\2677\356\354\006\033N\277O\221it\266\340\266?\316\202\344e-<\307\277\344\032V\302dB\244\277e\244e\305\224\227\260\277\273\365\336\311\030\363\224\277\344@\025\202\375f\307\277\234\275\023\034\302\355\264\277\341\036w\271I\005\322?\r%I\356\343\223\302?yw\316\031\373X\262\277\330\333\235\354P \260\277\354\246\305\022E\352\270\277\357\010P\267\306)\244\277\270%\233\366\206\306\321\277\263\006!\033\032\216\261\277\237(\251@\016\033\272\277\325q!\231\2172\202\277\240^\355q.\335\255\277/^\223\004\220w\224\277\020\\a\301\336V\256\277\262\214\227\007p\260\231\277\224\234L\331\307&\241?\332\022X\216cE\272?\262\031\261W\177r\254\277\357 \210\333\277\206\231?c\240&\277h\'\272\277i\242\t\311u\300\311?\251S\244\356\245\340\245?.\025q\371\340C\252?N\253\217ph\342\236?u\014\322\334\3614\252\277O\236\356\201\266\345\211?\231,<\272q(\310\277\026d\246\305?\034\262?\030w\260\2258\364\233\277{O\350\236\360\312\231?m\274\220\253\307\240\265?\025\263\241\367x\222\244?Ot\2745E\311\233?\021\ta\231\244\"\241?.\223\3534\373\257\235?\216\254\256\300\215\027\262\277\276\313\273\'\2510\260?\277}\263\300\323\336\265\277\356:C\234y\"\252?\242\317\221\2032\006\264?\035\375\t)\013\237\246?R\231\345\342.\220\212?>\312\310\303!A\257?\267`L\031\030\371\262\277\212\334`\204\244\363\324?\247\246Udv>y?\031\t3\037\007\021\244\277\276\333ZJ5\334\244?\210\225\347%\204\334\240\277\202g\333d)H\260?\n\031\017\021cFw\277\034\024wn\3125\261\277U1\315\213f\350\237?M\274\247\010\031\330\255\277\225\362\307\231\307\227\246\277N{\274/4\217J?\202\177i\317\212\306\272?\235@\002\240!\314\334?\262\235\0161\030W\207\277\342\225\r\241\225\036\273?\267\243t\333\335\240\303?uY\203\275\265g\246?;v\320M\234L\225?\274-x\244\222(\275\277n\352\345\341\030+\264\277?\335/B\263\276\206\277\271\030\374\014)O\221?x\3103\357/\217\241\277\276\371\003\235\333\234\243\277\252+p\232\276\036\262?M\2704\352\3029\262\277\205\177\274`l\177\250\277\2066Lt\253\315\252?]\313*q\037\"\233\277\343\306\332\372r\036\261\277\005\232*\3168h\263?\257\'$\215\336e\216\277\365=\366\023F\030i\277\257L\3576n`\253?\014\032\211p\010F\322?:\252j\276\335>\264\277sW\376\344\326u\267\277u\257rn\'\031\240\277\0338|\021\323Sx\277\027\353\2107\0044\311\277H\243<\345Y\307\223?&\020\240\265M\270\255?*\337.\234\tU\267\277\307)\250\270\n\322\244\277\371V\244& \220n?\025\221\261\250\264\031\226\277\363\315\231\026\331~\261?\375{U6\214\317\246\277,\206E\372Y\246\220\277(\033>6/\343\257?\331^\n\020\323c\247\277G\312d\022$,h?\244\273\254\241\214A\250?5\000\341\360\t\000\303?Y*\301\374\006\240\220?\351l3\202s\236\321?P\034c\216&l\224\277p\375\323a\361\\\300\277\301\006zE\240\361|\277\030\327\305\211\235\210\244?\234\261\001\342\r\330\264\277\351\253\364\227\262\301\247?\t)\3500@\310\232\277\213\245\365\\\332\210\230\277\341\316\255;\235\024\201\277=\"N\322)\037\256?\003eo\271\313R\271?\227B\336|\241T\262?Xj\224\332I\021\224\277\036\207s\317\271\316\240\277\371\001\252\240r<\247?B\300\234\345\253\231\302?\360\003\021\254Gg\304?\264\005\2264\314\274\272\277\017\332\331c2\300\177?^#F.-j[\277\262\261#\345\212\233\200?\361h\213<\005\037i\277\354\211\264\210mX\247\277\353\036\337E!\266\261\277\013\013\\\247q\024\222\277\356A3\210\017\016\260\277XG\271d)\235\245?\231`\000\010\032\226\240\277\303]-\375B\336\253?\322\232\214\266\354\201\241\277\2750\372\370\320\375\213?\355\261=\261@S\264?\304x\276\327\244\275\245\277\231R\340\220\274V\267\277\'n\032N\037\365l?\005?_\317\\\247m\277\370\363tV\361p\266?\235i\234\247\036a\301?L\245:}SJ\262\2778\317#\027\371\300\274\277+Y\0370v\224\230\277F\372\010\303\351Tq\277\301Y\337\275\331\373\244\277\034\251\327m\330m\306?\252\222\002\031\306B\273?\367%\252^_-\267\277\035\027}\271\365\331\260\277\316\313\014\373\240\304\221\277\301%\003\3542\201\261\277\302\353yJ\340\330\305?P-\220\3622z\265\277\360\261\352HSl\256?\013\261\337\230\031\007\303?\220$\321\217\022\330m?K`=C4}\213?\266t\262R\207s\250?\363f\036\347\250\313\270\277\200`\370\004FS\232\277\212\354\371\237\333\017n?\344w\364\317\357\351\236\277\323\r\224\231\220p\300\277{\253\310;\376\032t\277j\024\001\232\323V\254?\252\332.85\r\207?b7fQ\373\346\313?\006\010>\357\200\351\237?\014@\326\201\227\223\255\277\347\252\262\352\226D\224\277R\233\311X\326\365\274\277W{>\304]\214\261?\2764\225g\222\223k\277\316\373\367\232,W\301\277\200>O\274S\316\263\277`\003\335\307\302\327\245?\276Z\367)\253W\204?\022Z\266tyV\222\277\236\036\021\336\243\246\270\277\2558C\225Te\215?j\313\326?o\360\251?\214\200\325\237\352\"\267\277\250\'\020\024S\343\306?\242r\357\357\344\371\267\277\346\204[\341\006;\241?\014\3618\035U\210\257?\375\027\030I\262\212L?r\312\205\311QZ\232\277\266wc\001\366l\264?\273\004\276\177\377>\203\277L+\027\256iw\303\277\254C\333\327u\315\255?p\033\312\235\223\264\301?\007b\037\336@\t\232\277\236\'Ae\"\363\261\277>\361\376n\355\377t?\330\021NthP\245\277\020\222r\024I\304w\277\251\013\320o\035\312\251?z\\RU\037\370\266?\2319\272\243\027\206\260\277\216 \254G\245\312\263?9\361\363s\253$\267?\273d\262\240\001\257\300?o\021\002Ix\331\202\277\355DC\030\036\265\262\277\314uK\\\232\311\221?GL\334\307H\200\244\277\036oS\333\020\366\262\277\365#\277\241<\037\251\277\313\237\230\244}\030\307?(\362Q\227\263\235\321?4\\\250\341\026~\267?d\2209Ym\302\255?\366\212\351)y\336\301?\\!\360m}\035\272\277\355n\214\206\006\263\326?\356\233\026k$\335b\277\215m\310\272\210\r\215\277\376\332u\247!GZ?AR\353\320Zb\275\277\271\304*\013\256\225\251?\235Q\370\025\027\354\313\277\243\251\374\347^\242\260\277\252\302C\354o\302\245\277H\343p\217\330\262\226?e\332\t\221\373x\266\277\305\221p:w\365\300\277\326\336B9_\263\243\277e\233{\000\026\246\303?\032\343x \351\255\223\277\'\373<\372\t\003\254\277\341t)\232!\244\265\2773\226\000\344\024d\260?\2369l\327\037\204\240?-Aw\377\350+\226\277)c\376[\371\235\302?7\303I\265\323\326\250\277a\007J\177\025\307\266\277>\r\224\204^F\305\277\265\210\335\371\364\375\234\277U\374}#)\347\216?\r#\233\025L\030\247\277\'f$\232\306L\214\277\334\243\355s\"\326p?\306+\231n\037\030\255?\004\366?\315~\316\260\277\235^\034}\007>\306?\252\335\374\375\242\001\263\277\3078<;t\303\237\277\t\375% \274\242\272\277\265Z\024\345\310g\257\277\005\306\304Y\024D\266\277\372\304a\232\204\001s\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "N\206\002\032\364|\247?\000\220\261\304\2464\237?\014\375@\322\216q\306\277\207r:\350\211/\204\277U\322\375\214s\251\271?R\370{q\216_\253?/x\273n\247\203\247?\255(\272I\353\256\251\277xt>1\n\366\250\277\324oI4\313y\237?V\321\014\342\305*\264\277MWM\210\270\307\261\277\007%\335\2731\336n\277\035\371\344\244#,\217\277\204\375\035\017\232\277\275?\200\216\276\271Y\267\223?\312!i\203w\320\246\277\036\364\177\221>\314\221\277x\350\014\002\024\347\301\277|Y\247\340\317\247\261?^\356\032u\030\236\256?\001\204\215\251gC\201\277x\244\361~\254o\270?\253\2511l\357\210\266\277\242\030\364\210\322\261\203\277\243@\r%\221\364\263\277\263R+~D\377\304\277\334\254\323=\242\365\244?U\214^*{\352x?Gr>\263(\334\265\277#f\335\252\017\363\260?\320\231\204,U\231\223\277R\241\233J\000\033\277?\343\235%S\213\276\241\277\353/\2168\356\341\274\277\351\355\236\342\261\312\305\277vh\203\275\271\330B\277\272\236*#M\302\274\277Y\315H\005$\003\266?\325\370N\302T\307\240?;\217\334\237o\214\261?\234\3077\261\321\200n?\355\237\021\363\264\312\207?9\027U\377\027\016\261\277\216\364\002\372\327\230v?g\274|`T\332\337? \261\350\013\275\t\303\277\313F[\367\203[\303\277D\340\004\334x\315\243\277\247\177\177\372\367\375\245?f\371F\264\205\235\230?\366\027\017\377\3702\233?\236\273\254\234>\216\241\277\201\336\226\215\316\220\222?u\rp\211\300\241\254\277\220\325d\371\226q\305?N[\021\323\001h\260\277^\017\301%#\211\235?w\254\226\310\0203\225?\354\272j\005\n=\266?\277~\346\374\3563\244\277\255\347.\237T\271\241\277\036\215t\276\267\247\223?j*\322n\371\335\247?\273\003\357U$i\221?p\366\243\253Y\177\240?mG\362\020\324\032\220\277v\341%\261\235\007\231?\022\344\001/L\024\261?;Qg\200O\226\300\277\257\0243P\326\336\252\277B\227m0\247\216\306\277X\036\320i<\320\221?\340\254\300\000=5\256\277\247G\275\315@\301\253\277{j\217\273\2662\276?0%M\301&\264\260?\2414_h\224\306\263?bB8\202\r\301\251?\350a\206t\327\260\260\27790s@_)\256?k\337\010\332\233\276~\277\306\357\003Jv>T\277\350\303\226\362\243o\224?\006&\200\303f\361i\277\331\356\305\222\262\343\262\277\355\017\233\317\266\233\320\277/P\"3\035g\245?!\2405\325\245\317z\277\021\262\270\017\206 \303?P$\215K\022\315\237\277\301J\007\235\022\263\246\277\303\350#58\260\225\2770o\346\254?v\244?\000\223\262\346R3\215\277\030\016\327\262b\260\252\277\367e\362\377\214C\233\277+P\351\250\017\313\274\277\315$\321\200K;\260?]><\311\220\312\235\277\317\025\275\323Ww\314?\026\374yI:\304\250?\357)\302\275\022\243\242\277\301\302\232\237\242;\203\277\377\325PO\372w\273?\003m\326\211\340\233\256??\363\310\251\244\371p\277b6y\372\255A\217?B\373W<\013c\240\277\311\235b\277\255q\225\277\204?\005>6\267\254?\372\351`?\225:\263?>P0\326\255\230\274?\243\317\236\002\350\301\262\277c\n\255\322p\267\226\277\331\027w\345\275A\250?\335\210\2330\351o\211\277J\306\204\254\314\t\300?\001\320\005\266g\272\244\277\t\341\362\332\316\341\225\277\265d=G9#\270?\013\356\021\272\3328q?(\037\354\201\365c\242\277\360\331}\240\315\345s?+8\353\343\274\312\266?v\016\233\034s\016\231\277gj2\244\254\223\264\277Z\365H\324\223\032\267\277\360\211z\342\2724\306\277K\307%\245\272D\260?\007\242D\303\240\330\314?\277\001\206lk\"\263\2774\300\226\306AJ\317\277\234\355\255\277\302\343\263\277\217\312\036\250V\306\231?\305x\314\307\307u\241\277\013\345\303;\032=\251\277\317\224\216\357\215\310\240?\341zU\010\311(\217\277&=\266\300\216\014\240\277I\314\225\032\227\262v?r\354\334\277\257S\276?\242O\236\020T|\222\277\245\376\223\247@<\212?u\034\334\261\257\022\246?\004O2\0071\244\021?\237P\360B\331\200\214?\377\374S \226\\\303?\312s@\000\374T\276?\377\005\202t\316\201\255?\2430c/\257\367\223\277\000\352\243\257\307\311\221?\337\013\"\240$&\277?0\347\331\241\004\211\205?\314\361F\341\021\232\250?\333\303\267\374\022\247\250\277p\200\036)\304\330\250\277\212c\236 \320\222\227\277\2377\013\021\323\007\252\277\304\032d\364\333\340\224\277\3052f>\276=\224\277m!\223~h\274\243\277d\225+K^\332\260\277 \232\324K\314\307\304\277/\335\345\233\211\365\251\277\266\224q\346T\347\304\277A/uAk\223\267?\323u+{5\266\223?O-$\351\360\n\244\277\\\276\224\' \232\243?Y\3279+&d\244\2776<\347\370\261X\211?\251\nOXV\324\232\277\357\201\260E\246\220U\277\036.\244\242\222\013\265?\003\230\3103\203\275\257?\313\213\215\301\252}\270\277Q\2268i\316\273\267?\361\270\231\032\277\202\256\277\3760\017\342\253\303\225?5\330\254\233\210B\263?\321\3616\356\0305\260?5\337s\270\255\354\264?`&(dC\356\261?:=\267\342\213\306\205\277\260\301\352\337=\313\252?\300`\277\036\250\031\251\277D\320\004\312g\004\271\277\376\351\331\004v\327\260?L\2064}j\233\207?\3310\372\370\223\376\206\277\0169\304\301\313z\313?c\272h\225\277C\271?v\337\322,\300\253\261?a\233)\2570\001\232\277o\024\367\025^\n\266?\334\022\254\037\354\265\260?_\220\263\277\242W\222\277\363=/\335\321\233\206\277m\007\274H%\214\207\277c{*\'\027\262\205\277\023\267@\347\254\227\271?\363\227t \036\323\221?f9\310\245HM\301\277\333\313I \240_\244?\365M\340\333\253$\270\277)\001\036\017G\017\224?o\023\035@\202\317\241?W\324\031\303\366h\271?\236\222\256m\243L\306\277e\023\370\010\330\271}?\310\370\334\n\351V\251?\020\"\010Ph\265\230\277\361\341l\177p\"\256?\\6\357\330j\331\263?EG\233i\021\036{?\214\232\374q\007\035\236\277_%\306XA\363\225\277\332\234\315\2779\253\230?\357\314\271\370\350z\272?\350\341I\230\311\331\234\277\014\327`\010\377\274\315\277^Qfx\301U\207\277h\221\202\022\217\314\267\277\233\016\242\007_\240\205\277\216\210<\241\t\334\223?\n\032\243\342\033\361\264?\326V\213{e>\267\277Q\033\315\300?\262\241?\250E3\rt\222\274?g\362\327\033\006\000\212?&\336G\217\307o\251?\020\003\300\036\272\004\264?\302r2\020}\271\312\277\020\021\323\026\340\'}\277Jxf\357\222\254\300\277G|\007\212\345$t?\nm\020H!&\275\277\372\232:Pmn\226\277\230\355[m%\371\222\2777\226\316=\035\246s?\010\310\022\000\033 \245?\034\r\032\340\033 \261\277\3676\to\033\355\260?23\206|\311\220\247\277\337P\215~\026:\266\277\263\343\240\247(\226\252\277\032T\371\334\335Y\203\277t}\242|R\013\177\277Zm\235J\032(\242\277\322\267\307\254\221\204\241\277\026wBP\317\345g?h\253Hq\270\231\220?\251\221\313\t`\016\254?\343\250\016n\025\341\226?V\345\341\306\2054\230?j\332\336\276\333\270\242\277\211D\354\327Q\002B\277\"\033\201\240C\\\273?\2370\226\343\232\303\225\277H\322\010\243+\341\260?\372\351In\277>\242?k\261x;36\233?wNV\270J\362\272\277&\347\353i\363\024\276?\241\356PXE\367\306\277\000z*\007\002\242\222?#dc\016u\362\224\277\212Rv*\013\274\252?\002\362\325U\341\030\252?X`0\265i\321\262?\201\270 \340\000s\235\277\001_;[f/q?U\271\223\373\366\221\237\277\303gu\322\267\247\213\277\210h\n\205\0063\324?\273;\260\033\355\331\203\277\014\305\016\306\r\300\276?Ak&@\232\321\217\277F\352\334\265bq\244\277\310+`\247\021\320\206\277\272*\027\230s\340\\\277\3766\3770\034\023\242\277\343+\337\310w\350\264\277N\351\212\006+\022\205\277\032\317\340LUk\177\277\301\300\334i.\350\253\277\030\032p\256\005\310\264?\003^\374\303Z)\256?\213\247\327%\332\321\250\277\251n\313\021J\244}?\005\334\"L\337\016\276\277\311\327\234\025\t,\234\277\240\314\036\344\277P\256?\230\014\n\272V\322\261\277\373d\277\321\025\222\261\277M\304\030\323k\003\232?\325\300R\252j|\210?\231\347F\247\3420\264\277\347\362V\014\264\203\261?o-\212\247\305*\262?x\334\213\0245}\232?\023\017?\305)\004\303\277(;\356o\373}\254?\353\233z\213\333<\264?\204c\255\271\347>\241?\035\204G*\216z\212\277\305\226\232S\324\003\231?\262\256\323(\373p\201?\351\372\333%\300#y\277+\245\306L\303^\276?\303\370\232!\t\237\240?\346m%&\222\250\240?\001\351\237e\265\023x\277\263\366\020m\020\317u?E_<\367\361:\267\277,\240\217\300\357\274\205\277\360\203\234\002\346l\256\277:\326\033`Ic\251?\030\r7\240K]\177\277\233\342Or\366y\250\277V\256\370\274\304]\260\277k\276\0056B\340\300?\002q\212\214y\260\204\277\014\004-c&\333\227\277$\265.\304V0g?Z\237,\270\277\353b?\313\030;\244\223o\270?\261\030]l\204\317\303\277<\260\201\350\230\030\263?\022\306Z\002\307\325\314\277\344\2277\261\363>\216?\340V\222\006U\275w\277t/-\314\316A\231?\026\345K\030\352/\243?h\321\3037\241\n\241?\223X\212*\007\321s?\270\323~\341\364L\332?\335\364\276E?H\276\277\'\271\231\"&\\\225\277*\022h\221\302=\240?\217\032\351\255bR\242\277\335\000S[\352\322\304\277\204<\221e\301\220\244\277Q2\247\3560\205\220?\000\021k\016\3661\262?N\211[,\331I\225?\243\002\211\215o6\304\277\251L\364\206\020\213\257\277\346\277\357v$v\221?\365U\246\354\200*\207?^\242<\264\013\316\241\277<\001?\016\240)\266\277;E<\377\301\202\257\277o\207%{\007s\204?\321\254\227\2161\262\273?\375\031V\005\314\303\220?\264U\220G\223y\260\277\n\246\304}M\312\240?u\337\375\300\277\322\264\277W\357\370\247\254;\314\277\257\374v\023%x\246\277\343\177\261\217\253B\263\277_~\003\240[\217\231\2778xutO\025\256?\365~r\031C^\'?b\373\316r\204N\240\277\220\3369\324\351\256\227?\377.F\216ZI\240\277\272\251\303\005\363_\236?\365\256\345p|\273\254?Us\001\356\250\254\211?\231T\362\360\207\020\270\277\035sl\222\245\027}\277\340 \214\373\324g\235\277\256&A~\224\273\270?\t\272v\275\340\305\256\277\312Y\000\036\362\247j?\366\302\357\266\311\214^?Y>a\230\244l\255\277R\316\275\260\362\035\251\277\003\243\332\333f\316\244\277\335\254\204\344\335\211\331?X\035P\275\370\370\266?\037\367\031|@\306\251\277\222879\032\232\240?\326X\342\243KL\202?r\272\376\311\242m\244?aC0\241L\340\265\277\2712\354=\345\343\216\2776\241:\222[{\321?z\nz\213\360M\230?c\353\002\371\354\306\267\277B\223RG\2553\300?[\321m\257\001Q\240?2g\025Vwa\245?h6\016\373\203\334\256\277\245\210\013H\202\300\221\277\376xy\343\350,\221?\300\\\365\373zd\252?K0\254gi(\246?\351\311.P\210\344\263\277\004v4v\022\027\302\277\203\350\327\352\244\334\276\277\004y\031\271\224\227\233\277\"\265(\351\025\240\243\277\177\235\306\376\007n\262?\242\362v`\305\'\243?+\000\016\332\"\342\270\277:\003Y\021Ax\233?\224\305v\003\222\375\240\277c\025\2254\312T\177?Cq\251\327>\246\222?\205\277\227\246R{\265?\351\014\235\316\372N\253?\203\371[F\331\365\242?\266\247\364\006\313\023\222\277\326g\003\370s~\245\277i+\230*\000\213\246\277J\274)\223uC\270\277\321#b4\241R\307\277M\212\032\025\216-\255?\3263q\000\215\327\260\277\354\363\344\240\310\"\233?\302](PJ\336\224?\256A\t\343\267y\206?.\016n\3234\025\237?\223v9\231l\026\223\277\213\344\236\220)x\270\277\000t\177\203\241\037\256\277\260p\206[\341\300\260?\026\205\217\267\376i\265?\006*GK\356Y\222\277\200\200\271\223\215\021\265?F-\212\033\216,\303\277\035\317\367\231dK\222?n\177ru\266\242\270?~\330\247\351r:\314?\004Y\357\333@\327\251?\347t\250\311nR\254\277\213\2750\343\255~\311\277&\253\202)\313c\262?I\341\332\347\366\177\256\277\2347\222\007\252H\251\277\315\332\021\"\274\354\244?\274\275o\253\317\351\230\277$\003\346\032\001C\242?\236`@-\225&\244?-\340\227qNX\272\277`\\\\\001>\335\247?L\\\201\273\225,\266\277\312\365\r\304B\203\233\277\251\216g\273\017~\225?\347{\242\027PT\247\277\032\254\250\016\221\204\250?y\0274\030\3569\264\277a\326(\366\346\340\216?\314\270\315\210\331g\261\277\347v\372G7\301\271?\365\237\334_1\323\263\277\275\336`B\314W\235?\263pa\036=I\266\277\361{\202\'\361\370\247?\033\240d\237z\327\303?\211\2104k\221!\\\277\305\024\327\346Sy\217\277\234o\257;\204?\245\2778\254\026+\362\355\242?=\301\314\010\334.\267?\276\r\261\217-\227\270?\024\237\327K\320\177\234?\234\204\007-\363z\275?\266\265\366\314\245\357\235?\241Q)^C\230\266?\032X\235\202S\353\264?\226\010\322\247,\373\215\277B\206H\327at\220?\240\233N.5 \260?\252\200\263\343|+\260?C\177\032$\266\266^\277\223\305\260\027#cl\277\003\373\253\036\352\275\265?\032O\224&\243C}\277\025\313vK\307\324\234\277\352A\340\013>\275s\277\222\250!\342h\034s\277\335Nhj\242\247\213?(T\274\203\010\026\250?VR@\300\231\372\243\277\347s\273\311\002z\243?\254\230SG\326\351\322\277\207\202>}\367\315x\277\033\265\323\331\3055\222?\362\351\022@\317&\266?\252\202\255\262\005M\206?d\025`w\377\334\226\277qU\241\204\247\376\245?K0P\035\317\272w\277\034\345k.\007\217\271?-\226\354wuB\246\277\331\364LP/M\243\277\262,\270\201\207\037\275\277d\353\326W\353)\266\277hk\211\305\020ay\277\205\305\251\'\341\313\246\277}\273\363 \003{\274\277.\204\007e\255\336\224\277\352tk\036\005{_\277\222\223\327\273\310\033\257\277\314\335\341y\256\366\214?~\006}\216\322\2459\277\277&\240\014\025\315b?\242\027\n\263y\030\233\277\344\256\211\231[i\263\277\033\003>\360\343[\251\2774\252\2074\214\260\275?\003p\226\237\016\010\302\277\004\361\317\274\274$\236\277\357\3647\035\341?\231\277\320\252\203\331\036\356\277\277\270G\257V\250\333\225?B\2059\3249v\220?-Zv\232\212z\241?f\244j\232\315\026\205\277)Uuu\321a\260?\233\362\252\271\217\301\255\277r|E\331\205\007\237\277\255\314D2{\\\263?&r\320\370\306(\231\277\317=\023\341\020\231\227?\245\217\354\377\275-\254?\030\01661e^\227?\327m\265R\037\242\230\277Fl\255\353\321LC\277\365\3130\224\376\310\265?\025\235:T\317\332\207?\260]\341Q\241 \270\277\306\004\236\220\311Wv?\023\332sF=S\231\277\254\231\271\304\351\307u?\005\263\274\276\003=\321\277\205\337\262:\013\240\222\277$v\'\025\017\264\236\277\244\034\256\033\370\373\265\277\365\t\270\314\331l\260?\310\313rW\262\362\265\277m\211\234F\332\243u?#X\'B\215\241\201\277\024r|\325\366\224\264?\000p\213\211FV\201\277\356\212v\303\224:\177\277ML\355\301\341\266\230?wx\306\311e\025\256\277H\262\252x\343h\204\277;:{x\260Q\210?\265,\305\2752J\267\277\233E\230[j\321j?\034\220\026\355\202\336\260\277\226\367\333k\232Ri\277\246\267\020l\356L\304\2774\301\004qC\322\266?\345\275\304\312\343O\262\277\276O\217\317\217\004\213?\210\361s\3235\220\254?\"\005\237?\267\226\246?\000lv#i\303\202?(F\020\311\372\263\206\277\177\276q\324L\226\240\277\177\267\r\370\247\231\301\277t\223\275:\017\200\232?\302\311*\374\275\331|\277\3335\320\017\224\212\267\277\310!a\357x\304\230?1\374\214WZU\241\277\303\373!Y\220\364h\277\330\330\212\376\211\215\254?\337\026\343\324\351\346\212?\365\351\371\372\223Z\264\277d\010ny?\247\206?9\344\342C\315#\203\277\361k\261\036\210@F?\310xz\314\305R\301?\352La\313\266r\211?\304=\036\330E\275\252?\020\242\207\007\347\t\262?\352\273p\016\333O\266\277\213+H`\216\232\234\277\003\324(h\354a\217\277\232Q\231R\263\013\266?\325\021)B\031\021y?\0305\023\0165Z\250?`\204\376\267\247\037\300\277\237u\350\376d\244\203?\\\341\215\232m\254\270?\357_Zdu\365\214\277\023\311\334\341\rf\264?\2708*>h\342\250\277\221\305\023\220\206f\200?5\326\026\223\030,\307\277|\214\354\233\017\372\263?\256h \314\"\237\257?QI{Jb\351\274\277\226\030\271\344\241\033\240?\376l1\261\244\222=\277\260\327\307!\005\337\240\277\255\201\265\013\364\363\255\277\272W\035\034SX\275?\271^\222\332\263T\257\277\224Oz\277\021a\250\277\006\335&\346\237\022\205\277\312\t\030N}\232\260?\002\322\346\3345\305\241\277(2\236$\277\345\246?n\023\323\200jf\270\277\311\213\356\253\371#\201\277\300\322y\247\2411\237\277\252a\177_Z;\254?\177S\327\225\004\364\244\277U\013*Pyz\200\277\277m\365P\006\252\214\277\213\014Aa\031\301\255?\315\222t\220\036\245\206?\320z\037\263\225\327\274?\021+A\374fR\251\277\n\247\263\326\032>\213\2779\013H\352\367\344\200?\006h\225\2452\311\232?s/\264\261\034\264\276?\201\224\271\231\r\302\231?\215\030\004O\3076\262\2770/g\201\340\233\211?\264\314`\342E\013\215\277aX\305*S\203\263?.\356Gt\356T\247\2771Z\026\371\362\210\264\277\301\372{D>u\303\277\256o\330\313Y\216\274\277~\302\307\030c\003\260?\366\313\312\001\372\036\244\277z\2177\\\204\226\276\277\324!\375<\007>\273\277\301\275:f\370\323\242?\235J\255\335\232\034v\277\240\241\326\270\277\345|\277\372\207\233\031S\326\264?r\226\200d\360\331\303\277\006\257\235\330\276;v\277\300S\006~f[\200?\351\266T\206\325\231\303?s&\025\226\236\023\252?\233\322\007^O\370\272?1\270\375\024~-\236\277\333K8\356A\233\314\277~\244p\370\365\374w\277\337N\200a,Q\220\277\236.\010-\334\200\323?.\2179kq\376y?\324Z\342\311\231\370\254?\224\220\375\032 \247\232?\342s\237)\264zn\277:P}\262\300N\216?%\347\200S\177\314\237\277\031\350Z\372\375\354\223?a\335\360-\230\303r?\312\024\325\233X\034\313?\\\035\242\273\235i\243?\260\215\257\341\246\313\305\277\275T\342\360#\231x?\177d(\377\230\215\262?\205\220\300\230\325\207\270?!\346\315\212p\267\275?\300@\250\340\230\213\315\277[\250\323\233\025\270\253?\376\337Bi\031<\253?\205\345\263s\033\305\241?r\350E\237\357\021\246\277C\324r\023\263\216\263\277\316\307oT\311\374\302\277\332\316\2207\372\023\302\277\202\274I\371\035\216\231?&\002T,\000E\260?@~\305y9\210\222\277\210\362\212\"M`\226?\024p\000\340\025\245\272?\326y8q&\377\261?\307=\261\230o7\230?\255\273E\251wt\247?U\310\213\363\344\202\201?Y\312\260e\366\307\223\277\320\r\017F.\002\262?,\321\252\305\037~F?\346\316\0328\207{\226\277\223g\317\356\327)\203?U\300!3\000\322\213?\rm,q\rK\255?\242\264 \263v\0247?^X/\000\350\005\264\277U\222\327\017Hj\260?79e\320\274T\305?gb@0\"mx?\333\024\330\0060\003\223\277\210\231\016\352l\016\254?2\206R\352\3164\271\277\017\334*\345\233\362\241?\362\332\313\272M2\242\277\355\275\214\355\265}\262\277\227`\\\332\3530\303\277\331\244\355\244)\005\241\277\034j\317y\240G\260?oj\301WT\207\310?\001&\307`\251\371\270\277V\370\376\222F\337\216\277\" \26675P\275?\340\334\215\006\255\222\221?4\254\007\277\032\240\240?\240\305R<\341\014\250\277\377.\3062\035\037\276\277-\034\246\030\260\243\242\277:\014\344\345\351\220\222\2774 {\r\023\314\264?\222\002\305\n\301\277\034?A\361\324\340k\321\247\277\307\333\t\321\215\271\303?\233f\332\031\203A\273\277Xu\024\013h?\300?]\022I&>\t\240\277q 9s\372\345i\277\357L\203pQ\304\221?Z\346\305\320\250\252\250?\032^\335\303)\263h\277{\371\2650M\342\261?\202\375ub\'\344\264\277\237\265\310%I\302\233\277\335\202\"\324i\363\300\277\300\036\220~\004\211\232\277CYD(\215V\302?\007^S\242\253\023\246\277(\374FW\265V\235\277\327\324\210\344\335\317\266?&\270\214\004\002N\247\277\217\014V\370\273f\242?D\231\217\021\331g\322\277\33617#\226/\322?\323\363\242R\013\361\271\277O70\372Bb\271?\032\r\003\367$\006\233?\031a[w\264L\217\277\306\371\245\013\353\000\267\277\024\355&pUM\242\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "HD\303~\246\177\275\277\243\313\226p{kz\277$\0377\250\353\300\262\277Y\317G/)\230\256\277\215\271\376h\313\232\250?\372\000o\036PR\252?\343\034\230s\037\220\263?\237A\270\204\252\005^?\276\306\345\265\305\267\250?\3350\373QS6\245\277j\226M\334D\353\220?\377\226\r\2046\321\251?+::N\246#\230?\030\304\370\370\021\211\247\277.\261\341\365j\244x?$}7\342l\213\243?#\244\232\350A\267\324?6\327\367\023C\375\271\277e\013\310B7N]?\252N/eQ\360\251\277\314\nb\207\302\254R\277\275D\006\223CF\260\277\346\016\316\365\262\334\253?\334:w\206X\266\263?``\240\224\226\263\270?\220\370=\370uv\204\277\370\272\203\216\022\251\303\277\"\236\302\340\341\303\230?\3648\202\356_F\230\277M\336V1\357y\263\277Y\325\316C\347\334\272\277H_\333{\222\255\241?\224(\331\236\035\341\262?\274l\377\036X\235\220\277p~\236\330$\263\250?\251\356i\345\300\245\262?Q\025\021 \370\362\202?\371\023\336\2343X\261\277n\017h\213{\217\221\277\262\3135i\354\344\272\277Hl\372\364\030?\255\277W\031M\367\025\026\242?%\236@\035Q{\274\277\334L\353\355`\244\262\277\304I\201\350\201;\260?\3751\001\261F\231W\277\0259\267?\264\357\237?T\334=\266 \371\242\277\033\203\230\214\201\223\262?L\300\001\333\030L\301?e\202\017+\376D\236\277\314\331\232\352\225\243\300\277?\304\305F\310[u?\215\007\216\271-\214\243\277\022\374\000\374T!\231\277\027%\250c!\355\301?\363D\206\306Q\222\250\277\373z\t*\316\330\251\277\351\360\003\3332\332\201?\2175\340\235f\013\233\277J\231\371>\214\336\224\277\010nN\270@G\256\277\326\006\317\035\366\267\240\277hi\362k\331m\227\277l\"\2129\310\033\315?\317\232\341\200\"A\270\277Z\022\177\301i-\261?N\325>\017e\370\261?\254d\356\301\233S\253\277\027i\213\016\034`\227\277\200\231\022@\266q\265?x\241wv#R\264?\216\2514n\r\331Z\277L\316\256\302Q7\253\277Z@\347f\364\021\200\277Q+\245\260\325^\216?\313~\310?\373\\\251\277\243\255\271\211\036\010\223?z\014f=\357\315\255\277\222~Q\343\271\376\231\277\232\361\227yj\375\252\277y\241\343\241p\230\270?4\201\254\233s\022\277?\200\215\233\341\321LY\277\306\276Qm\211\362\231\277\201\tdi\006\035\301?o\375\264=,V\270?\304L\004T1\333\302?\r\2371\254\372\004\233\277\177\303|\002\373\306d?\017\354\017\207o\213\241?\245\270b[C\210\250?\375\247`\264p\007s?\320\225)\326\n\346\270?\214k\256:\033\267\220\277\265y5\370\330%\276\277\221\317\007\014^\235\262\277\264\006)>\242\207\241\277%\232\261$\205>Q\277\203\0268L\222\340\200?\031\214f\223\221]\300?\352\003\363\2314\334\244?.u\23480@\265\277K\365\327#Ok\302?FT\207\001\356\240\240\277\033\241\210\336+e\265?\006\216\307\326L\357\234?=8F\001[h\247? Ty\354\305L\231?\311\260)3u\342\261\277LX\231\247\231\237\230\277\213e\351\267\033\251\262\277\217\216\026Y\257?\242\277\0019\234\235\364\013\231?W\000\336\370\251\375\241?\2544\014\371\241\364\255\277\231<\372U\226.\305\277\017X8\316\262\013\307\277\357\277K\365\240\322\232?\037\377\325w\277=\274\277\260\027wPY\313\244?~\026\346\037\267@\255\277VZ\206\007\347\356\256\277\021e\320-\243\007\305?\374\004\210\0141\265\275\277\021\352\245\024\\d\232\277\260p\324~\250\205\272\277\260\265\033+FwZ?\307\341^7A\335\246?f6\245\307tP\240?\244\233\352=\'\310\307?\221\302qji\035\277?*\305\241\266\211b\260?\366\254\235<K\375\177\277\231\236\200\372\363/\276\277}\261f$\323\372\231\277l\274L\302\0200\300\277n\344\247\310\216\007\236?9\375\tx\253\"\215?\024]\326\327jN\224?\014T\373\314\337p\250?_\376\247u^\241\242\277w\375\200\314\270!\237?w\254\300A\212\366\250\277\026\321h\272\374\326\260?\027\347<\277\010\013\235?d\342-\256o\026\260?:\273 \316\223?\304?\026\2234-\373X\263\277\267\356\366\302]\022s\277\354luP\2241\267?\201\240\206\210:\337E\277\007\252\031\255M}\246\277$\242H\221\'\340\261\277\200\025,\342\002\245\245\277\200\010W\n\365wu\277\031\377y\027\216^\302\277\267MK\353N\331\264?\261\273\275#\334\246\223\277\272\321\274\237\211\\\234\277\211I#\177X\000\271?\244/\323b\215[\227\277\374]\354\3207\235\241?qa\216\273\2324~?\037\360Y@\002\370\226\277\326\354~\225\260C\265?\275\250\030\346\312\276\245\277*\025\266\361\016\r\243?y\033\307V\364\234\263\2775f\335i\324\242\260\277\031@\000@\023\036\277?(\374\023\251\216\034\221\277\274\023d}H;\237?\270\002B\327\016\177\251\277c\274\r0\033\016\300\277]z\265 \372\371\240\277\265BZ\232\207%\245?\306\355\227X\362|\267\277\225N,]\362\240\233\277\331\237},\225\'y?*\257\357@}*\252\277\033\025\177\206\321\341\220\277V\351\347\025=\345c\277\037{:\364\241\036\264?Xw|N\006\252\263\277{\274-\251\021\360\221?\267\351\277#\346=\257\277\346%\325Z\364Z\231\277\\\376x\033\273\266\302\277\311\214\223\342Y\005\257\277\"iY\006BY\242?\243\377\330\204\375\251\272?\355\350C\220/\236\254\277-\226\225\327\201\353\264?g\251KR\003\243\260?\310\310\343\016\035u\251\277=\216\247\270\325#\302\277\224\351M=\325\304\217\277v\233\261\324\213|\252\277\310\003RY\2521\216?\277x$\255\255\324C?\370,\016\311\024A\202\277\300\332\236\344\206\270\242\277`g[\031\255\243\254\277\030A\344\263\235L\222?P<\024F\024l\274?B\355\231\204\330\323\252?\222\245N\2033r\262?e\233\003\021\253\035\260?Z\254\346\330G1{\277\021\n\206\274\251\"u\277\022\306\026\211=\227\266\277:,+\350\n0^\277\002\233\356\227dU\260?\324\372Y\253\304S\240\277Q\225%\023\306\367\247\277\255\247\372\314%\207\272\277\332+\311.\344\320\272\277\337u\333UIB\250?\021{\001\270\234?\231\277\315\325\370\366\371)\235?\367&x\306\372\342\207\277~7O\361\027\206\257\277I\021\366RV[\276?caVE&\205x\277\032\221c]\312n\263\277\252i\024\327&\254\301?J\201\3776ar\277?\337|7+\266\262\223?F\323f\tX\235\225\277\030\037\331\000\337\237\263?\357\312\312.L5\263?\216\246m\362#\316\213?B\231\003\'\016\375\245\277F\237\n?\302-p?\336uV\312\006\206\250\277n,\210\363\204\363\226\277\256\366zU\235\256\250?\212\343=\344\363\314\263?\363\006\331,\276\363\177\277\357\277\231\026q\336\316\277\323d\177\2572,\246?\251\246\031\'\341\005\264\277\204\005\222\226e\234p\277:i\"\342\332\345\302\277\260\275\274\034\230\303o?\230\212\343\007\002\377\260\277\257\020M\306V\331\275?b\226d\2335\244\240\277\270\325i\330\224\262\265?\330\256\tj\t\005\231?\232\201\027H\360n\260\277\341\317\347`\257\t\225?\317\023v\267\031\330\231?8\273\340\234\021O\242\2771L_n\201\363\252\277b\021\275%:4h?\372\327\n\342r\237\267\277\023!\274\335\0357\271\277\223*\252\235\340\265\266\277\340\332\274[\243\366\247?\357\253\220`\016E\273\277/\014e\025\315tk?\350\250\177c\257[\270?\2661M\244\377-\254?\203\352\340\372\212\016\230?.\016\341|\003/\252\277\262\302\177N\337\223\240?\276\222\241\004\204\333\275?\316\377\271\372\263\263\302\277\te\365\342\301\275\241?.\217\366Y\212\246\274?\361X\317\252QF\217?C\'\310\007a\003\250\277j\"\367\352\340c\234?\016=\270~\320S\301?\214d\330\210(\034\300?\334\241\355\357wQ\243\277\243%\2417D\013f?\231\"\177\032\n\207\206\277\320Z\2539\271\360\250?\347{R\376\345\325s\277\r/\306E9Mx\277\244^j\034\342\373\205\277J@L\357\310U\306?\351G\316\274\260\216\303\277\314*]\315\355\330\231\277J-g\353hj\213?q\234\202\222\216[\241\277\020\277\025\034\020&\243\277?RE\256\267\263\300?\376@xAA\374\267?j\257\241il\237\265\277\375\364M4\332\223\300?\241\325\257\325\007\357\254?]\263\244\242\003\365\204?\\\035\370\312d\026\237\277\276\251\240\263\246\366\252?\357`\027]\221\323\247?\201\276\233\240\236\000\251?\266\020\361\225-\006\252?\267p(\013\030D\223\277R\247\231\371\334\314\260\277\001\374\210\325\023\007\272\277\250\037*\034\331X\223?\"\220\001W\027\351\264\277\335\275\2169\254\017\240\277\343\312\006\001\304\244\266\277p\nK20x\235\277hp\021L\362cf\2772\202\016\226\226\244\271?\2554A\'\0346\274\277N\024\024\367B&\244\277\005)\352\211\201\370\247\277P\357\361\320#x\250\277\200\3564m\374\336}\277\177\304\221\247\032\003\275?\3737\\>\334U\236\277\2576\245\305\006\232\234?^)\260\250\201\021\243?\'\034R\326\024\376\223\277@8i{I\247\211\277?\262\"\255\234\363\250?\211\240\020$\241!\226?\251\352\022\';\333\254\277\337\364\267+I\345\220\277\025%)\017\272{\255?;\337@\211\367:\226\277\371#\240\305\316\301\244?\215\343\314\304\354\276\316\277h \\b1(\251\277$*\013\004\270G\251?\237\004\266\257rW\223\277k\260U\006\310Q\224?\304\005\203[\210\355\252?\315f\000\204\372\255\261?<|l\017-!\210?\262Ut\370(\372\241\277\200,q\206\224\233\272?\253y\025Br4\273?\304\222\340\331F\225\222?\221\016\'P\343\375\274?[N*\254H\006\242?\265_xr\305\343\235?\233\333\366N\200\256\263?\030\310\223\036\313r\244\277;\254\276\210\332\257\247?\354\336\222J\353\350\212\277\003\321\177\344P\305\260?\307\021\367\373\207\333\242?\277\301\245\332\210C\226?\266\365\370%\277i\313\277\346\213C\377\231Y\216\277\360\3225[\310\\\221?C\315\021\372cB\217\277;$\242;\310l\241?\234\301\357\367\303\212H?D\003t\372\256\312\265\277+\rM\365\326!\270?\276I\322\000\te\233?\370!\322\331\025\206\226?7\312\273\375hx\265\2776\347\020x\344\357\216\277)\210\212\313\270A\263\277\376\333\221\030|\305\307\277\254\227\271v\301o\267?C[x\326\252\\v?\226M\275\364\277\031\304\277$\212\0234D_j?Zz8\027\331/\241\277ZrV\223\327Q\263\277m8\217\235\377?\204?Ia\327\376\\\371\272\277\303>?\310\264\260\202\277<.\341\345\356P\224\277 \027\255o\tq\275?\253\261\316\3231?\201\2775\363\001%\235\226\241\277\370\354?\264\375\024m?\257\326*\223\257\347\273\277/\363\303\253J^\204\277\332\327)\346\340!\265\277E\346g\n\031F\265?\300\222\312\213\3533\235\2770\261\204[j\345u\277m\321\013\245v\307\266\277j\026\231\004\330~\300\277\364{\036\270\322B\265\277\300KP7\262\261\223?\002\260\311\306?T\205\277\n%\366\372\024\302\272?\230\215T\304\207L\214\277\331\246\375\030\304j\252\277\030\302\364\347\336_\252\277\312\346\016\357\017-\263?\201O\317\032n)\230\277\233\342G\262k\337\265?N\221ac\266>\240?p^7q\236;v?\365\274D\262\342\235\310?\371I\203a\2534\262?\374\3432\206\200I\224\277\225]\365\252N\225\272?\245\213\372R.\365\240?\343to{I\033\262\277H]`>5\237\222\277\2567\352\210\037\030\201\2775L\332\337\237\330\273\277\271}>\266\366\024\230?BI$$>a\254?M`h\277\202B\210\277\t*\010\375o\375\257?\367\257d\304m\350\251?\037\352ZZc7\227?\022b\320\\\340\210\272\277)\021\226mQ\325\301\277@\316\303@4\274\250\277\343\003#\334[\242\262?\341\201@\212T\020\273?\331z\036\245\206\026\225?\001{\332\010s\377\266?\253|\034\223\320\375\220\277M\034D\321\242\\\223?\023\364\007\205\350h\240?\362\235\342\177\362\370\245\277\214^fuT\333\265?\326\220\332\355\217!\250\277\t0\224\341\021r\237\277\241>m\354\r7\241\277\022C!\306\260\020\232\277\033\232\373\326^)\251?\2146\343\274\203\335\266\277\236\237\320`\277\305\262\277\276\3336\224G\305\301\277w\"\036\261\374=\262?|lOy\222i\211\277\025\261\333bV\323\213?|\266\002?\205\275\254?B\305\277I\032@\253?g\222{>\375\342\241?\234\213\247\300\320\377\302?\232|\264\374\344\340\224\277c\217\225\364\024\322\260\277\311$\263a\364\r\221\277_\014}=\254Zo?\314\031`y\351l\261\277\207\311p\241*\220\220\277\311\006\231\265v\261\241\277\325:\231\257\371\217\244\277\226h\230\325\300\016\210\277\223\030] \375\204\247?\177\317\203\3375\241\253?G\326km\357\346\307?i\tY\033\003\t\225\277~\244o\013\255\265\226?-W \345\254\216\241?>\333\241\301y\305\220\277\200\204Iu\034\177\241?\320<\256\217_\216\244?\311\022}Lk>\247\277[\207\251\225\037_\241\277\021\316\330\355\303\'\241\277^a9\321\376\241\250\277@\027\256MnT\302?5kvU&p\243?.%\025\211)\306\201?p-\275l\236x\256?\251\300\027\230\250\260r?\252\216\233\013\030\253\307\277\241\243@\207\356\365\241\277M\020\332=\224/\263?\304\206\'\357\023\374\244?\363G\261_l[\225\277\243\3223\216\035Nu\277\307\375\234@\207_r?\r$`\353\353/\255?E\363>\202\221p\203\277\3454XRq\372\266?A\211)\360\336M\253?\327E\211\260\203\350\232\277\233\271l7&\224\216?n\2428m\201k\217\277$b\314\344mQ\253\277\277}\177\222\033\237\230?\000\314\030M.\251\305\277\010z!\023C\365\260\277\264\037b\036T\017o?O\304\'\031t>\272?\257\253\014\374\357I\211?\204\312\2171\316\265\261\277uPy\034\361\032\304?\363y\245x\223I\225?\014\r\377FK\243\255\277\234\313\022\233\202w\254\277tp(V\313\030F\277\311\004\347\345kz\306\277\355{\274\355\347n\224\277\200\354\326T|\350\265\277,\364\356\343\242.\200?\013\027\3029\370\205\274\277\205v\324\231d\314\255\277VK\250\251\270\002\220\277Zg\364\260\031\207\246?hav\010\342\215\271\2774s\341ouA\265?\326X\250o\262\026\227\277\366\006\255\255\004\371\223\277\374\275C\276\304+\250?/\321;\205\314F\257\277\004e\006\313\013f`\277\022\220.\ruZ\265\277\354\270\354t{W\207? \343\263Y\241\235\204?\355\013\347\204\336\246Y?\372\"js\363(\277\277\273\274V\222\266>\262\277\200\365\277\270\022\222\227\277\350\305\243\324\321\306\253?n\376\027\274\317A\304\277\204\300\034\203P\024\262?<\003v\367\017\215\263\277\036\'\014\201\257\234\246\277L\271\206H\226\375\237?\tye\217\265\267\216?\307\r\227|E\337\234?\003\360\226\013\263\257\272\277\302\345F\254\331\375\244?\271\311\262\312[\213\277?\231d\275L.\337\224?\025\221\334/\241\212`?\334]\225\215\014t\252?0@\314\343\376\224\221\277Sb\356h%\256t?$\t:\034\324\212\261\277\300\245\020\361\233V\237\277\337q\202Q=f\251\277W\\4n\371\t\202?\244\222KW\372\003`\277\004\320X9\220Z\240\277\036u\243~\020\246\254\277\n\010\330\264\031\352\233\277\032P\334\327N\246\245\277H\303-\241O\355\261\277\321\323NV$H\262?7f\327\330\361E\265?\276\261\026\326\212\251\262?00=\311\001(\232\277\307\350c\n<\316\245\277\320\220N\333q\355y?\275\365\276.\nb\236\277\337c\014)\032\235\245?)\214ke\271\321\263\277#n\n\255,\250\234?4\003Qj\303\357\275\277GA]j\026\032a\277\267\272\226\212\021#\243?4\262\03779\264\247?+HB\342\264\314\335\276k\343,\r\303\321\270?\300Wk\016XX\222\277Zc?v\220^\237?\n\312\266Sz\247\244?\247\372G\213y]\270\2775s\336\264[\'\271?$Q\352\026D\215\271?\361\206}\250[q\243?\272\223fl\023w\236?/\'\035\236\214$\207\277\211\005\263\037\377G\220\277\353\233\353!#\226\264?\344\331]1\257r\261?v\214U\266_\363\241\277\010\303)uc]\242\277\374\215\300\210n\024\222\277-\024G\243V\217\272?1\237\033\346p\037\307?\302\2716\2434\373\263?\255<\025\243\3171\234?N\370;\244\'\205~?H\274V\241\221\274\270\277\241\021\276\201\206\320\243?*Z\376\234\010U\241\277\240e\314\237|\277\277\277A\264\364^\233\351\177\277\'v\252\222\361\003\253?\ti:\334\001\352\225\277\010\275\025\377\022:\305?\037=Q\'\020\027\244?\222\021\235\303z\274\263?g\230\227qs\376{?\334?\351\314\304\322\231\277\265\001\350hV\266\251\2778=q1\005j\241\277\021KN\244g\214\253\277\035\366y\213\210\210\221?\346-\315n\3258|\277\240\260\347\240\343\354\233?\027`ki\264\241\265\277\361\023\273(\220\215\242?.=v\237r\243\230?\177\300$~F\312\212\277_(#\243\037\212\237?\224\260\007\214\2270\231?*\217\002+\253\257\226?\350H\205c\216\325\252??Q\325\261v4\270?\251A\230`u\272\340?\206\2607\277wS\230\277\344\311\366A\217\241\273\277\353P\023f*\377\245\277\274\207\355j\270\263\241\277GSd\367\033\027\261?\310\227~\r\212\200\247?\203Q5\375\024\254\250\277\354K+&\016\016\226?\246\375M#AF\250\277awrl\270\r\224\277\"\264\344a\370`\243?%\236\177\227\036\242\266\277\201\255\177\316;K\226\277R\203\360\235\016\325\301\277\231O\016\013\324\245V\277\253$\364r,\321\301?:Rk\t\361\267\270\277\204j(\237\205\351v?}\177%[6\302\224?\334I\000%\370S\252?\267B\237\217\200\333\244\277\3567\033\212\267\213\245?\252\nI`f1\256?\353\352\323K8\242\251\277\211\365\202o\344\247\241\277\323\244\246\243\2642\251\277o\375=\350\2232o\277\275xfM&\270\222\277\264!\265\342\313\233\247\277\220\350\312M\217\030\243\277b=a\366\276\013\214\277\007\360\334\rcA\240?d\022[\342\217zr?\377V<\255\006\224\247\277X\301X\262n\376\220\277\346\005CV\013\373\232\277\230\004\254C=\033\230?z\270\027S>\'\251?\326\365\353\214b\217\255\277\025L\304,\332m\242?\277\007$\"\261_\262?5T\261\335\335\377\275\277\007\375L\275\234\302\272\277\256\243\337\243\213\330\254?Pn\370\325\002\276\242\277\327\315AI\366g\261\277fy)\201T\211\251?]6\037\214\220:\203?.\020\225\037\214\222\266?\032\035\321\222\036 \253?(Ml\346\334@\255\277x\350\200\305\034\364\265\277\260\2026N\\\237\251\277]\302Y~\274\301\307?\203\301,9 /N?iN(\230\037zv\277Q\177\0020\343@\213\277d3\356\330\254\301\266\277o\376\324\025\337;\260?8\332\2631/\313\267?\253k\320\323\362\356\227?H\t\245\235\020\010\250\277\256\310\351/\216\261\254\277Jn\221\037\000_\242\277\325ek\256\311\003\300?\321k2]\227,\206\277\300\217\236\363\300\272\266\277\007\034\371\244#\323\202\277\251\250$\006\217\313X\277\225\007\257\336\025d\234\277\026y}\303\303|\300\277\225\340I\013\276\236|\277\246q\242}\240v\235\277\207jt\265\210\327\265?\253\311\305Xr&\240\277\243\003k\360K\353\247\277Y\355j\273\313\336\242\277\000~\245\014\r\307\244?\377\002k\302f\226\243?p\205\354\307\366S\267\277\234\225\242=j\350\266\277\031\273\241\205Y\256\234?\037\350\020\317\033\\\243\277\220\262\025<\271\211\255?o;M\230\271&\207\277\300\345\203G@\022s?5\021\024\010\364\214\254?\306\177\252p\270\310\256\277\225i\353\237\341Z\275\277\313\276\271\250\177\302\277?\326*ie\3727\303?\010n\215\307\035\232\237?k\2426C5!\223?[\372\363\030&\016\266\277\314\\\210/o\300\256\277L\320\030\214\314\243\256?m\0160\231!\245\233\277E\002\\b+\217\241?\303I\213\237qu\241\277i\034\331\320\215^\304\277\304\337\320\305\370@c\277\202\347)\361>\331\255\277)X\200\217\251>\244?\346\3363\231\t\200\253?251\362`X\237?qr\370b\376\325\226\277\026\225P)\244\313\261?\375\321,\321Y\337\261\277w\374d{ra\231?3\225A\254g\227\301\277f\324#\200\304\321\302?}\001Ef\031\013\235?\326\260\364d]\023\301\277\252\273kh\265\335\267\277\013\342\272Kv\357a?S\023\216\353u\222\220?\317\212h\n\306\227}?=h\205b\316\212\207?9\275C\t\245;\257\277\332]q\235\372\365\223\277\225\221\366\033H%\311?\0213r\007\016\202\226\277\243Fg\034>I\236?N\267\232\0304}\245\277_\336J\332g`\261?\346\256\346\257\022}\201\277f \n\217R\265\266\277\340\006\\v,B\243?B,\225Sd\322\301?x\226\0101\263e\211?8~\353\330M%\242?\005W\023\273\336\030\220\277\335\2348s\275\252\177\277\262\210\201^\213\256\257\277\305\256\203\214\205P\251?R\002b\203<\203\273\277\267\017n!\035\261\221\277\303\332R\240\246\237\302?\2319!\177\324y\260?k\310\t:\257g\307?pV2t\333\306\270?ez\300K\017y\270?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\031<H@\312e\213\277\231_\336\361_]\260?t\331v\211l\034\241?\365\204s0\343\326\260?>\334(\376\004n\300?\304\305\332=\010\324\251?(\300>\307\354\231\263?5\277\033\252\313}\230\277\212q\343\344C\037d?b\231\321\305\242o\224?\247\332\372v\021\312\253\277\277\246qp\337 k?b\322\013\003\223o\246\277\233\302\260\255\0070v?\255r\372{_\256\223\277\3175\341\177i\363\201\277\357U*\263\310\351\256?\302_d\350%|\251?\224*\244+Ae\200?\375\001-\321\346c\224\277\367\nA\312)\314\212\277\217\002\202\004\234@\226\277\271N;~\233\036\264\277&ixW^\252\211?\343\231X,\354\027\222\277\252\245\376eK\207\271\277\317\311ip\227\\\225\277\022\360\003\307Y\336\205?5\235[h\271\260\254?\363\330K\264\263\262\267?\337T|\241\212\303\232?\366\333o\240\277qV\277\024PT)o\323\276?\337\302\275\240\356\246\242\277\350\347\021\333\036(\202\277\344\'[\275\274$\261?o\205\037\275E\230\243\277\370,<\207\220D\266?\227\371b\202\313t\213\277\340\020>\341\006~\246?yZQ\314mV\265\277\353\'\256\213\037\201\210?\341\330S\360v\000\223?i\251\3576P\230\241\277\343+\200\355(\002\243?\003\274\205\222\374Jg?~U5\030\252F\251\277\276 %x#\372\263\277\307\241\355L\336\232\262\277\227\025\277\364@\356\255\277\350\364RB\354Q\313?\254\304T\204\263\312\232?\247;\324w\021\336\204\2772dg &\346\253\277\373H\301P\336\006\211\277;{8]Vs\264\277O\212\250~A\324\231\277\375^\315G\274\276\224\277(\324\223\223QM\221\277\205J\323t\215m\226?mLKj\361\026\213\277\216s\211(\201e\230\277^\020\325\233\3513j?RLY~L\020~?\242\302\360h\203sH\277\225Yt\206~\325d\277\024\3408\324/g\200?\215\222-&s\227\203\277d\003\243\342\204\021\270?\002$s\334{\365\264\277\216\241\010\003\033\243\226?\334\002TO\215\t\272?-y\363c\311\353\254\277jP\2042\303\223\263?\007\360V\227\315\303\202\277\227\274\003!\377\017v?\307z\347\265\235\005\220?\260\'\376\270\007\002\275?\013#\376\001L\365\210?\026\251(Q\306\373\213\277\305\225 \303\360u\247?\023\001\250E\226<\223\277\310\024\235@\217\226\267\277@/P\'\'\317\232\277*\245\016\350\333\365\255\277\325\030\016\226\306\260\220\277\376Ou\326\344\360\300?\301\316\033\243Qa\270\2770\351\316M]\251\241\277L\200m\255?\304\271?Zd\206\033g\006Y\277\321\003\303$\350\313p\277\032:r\213m\251\265?\025UE\300\256R\221\277\201e\\\010q\341\253?:G\'Cd\307\231?\030_~j\025\244\240\277\302y]V\007\346\263\277\264\333\374/\220v\251\277S\316\331\307\323\006\263\277\337\035VK\253\375\264\277\275Z\260{PA\244\277%\273\310\211\327J\210\277\327p\327\201RE\204\277#\202tb\002\270\273?\230p \355\016\001\246\277$\035$\\\014\341\216\277\315SP\035\251\370q?<\332\247CI\343\276?N\300\321\356b\354z\277\205\360)\300\001\306\203?H\316\323\235\003To\277\236\031\324\366f\325\274?6\"u\205\313P\240\277\005\366\205\274KL\212?\245\245E\333\014\233\222?}\335.:\370\246\231\277t\304\217\237\3019\250\277\223M\245\353ID\302\277:0\217\326\372\301\230\277\036\375x\n\315N\300?\212\247=\315\034\373\240\277gA\211%\001\242\236\277\025\346p\037\005q\253?\233j\231\n^\013\202\277\003\231\371YT>d\277\274\364\363\344\212`\255\277\021\260<L\255y\235\277\322\366e\300r\363\267\277 \276^\021+I\263\277\250\211\260\000\010\356\301?\335\250\213:p\353\246\277\265\370\r^\321Y\270?\000\264S\367\213i\306\277\001=\353\213\306\033\220?\270j\255\220\217\024\245\277\341\217\240{\030\302\263\277\000r\266\277\362\201y\277\372\261h\216\270o\254?\317\255\272X\364\361\221\277\020\305c\325W\253\273?\000V9\316\221*\254?\001\326<\367\017\364\240\277\'5RG\375U\244\277\001\354XN\037\373\224\277\307{\271\274[\303\221\277\231n\222\333\226lf\277A\030\221\002M\323\235?\017A\267\006\217l\262?\026\177\277\005h\252w\277UI\301\322\214>x\2772\267\031\213\333A\206?\336\007JZ\001\006\234\277\354\0321\006F\372\255?\331\311e\222\241!\222\277\355\321b\320\313r\231\277/P\337\232H\007\243\277\373\204o9\364Hw\277eB+\r\307W\243\277\221\006\215M>\272\265?sd\337\321\000\255\216\277|ck:\004\272\257?\316\003x\020#\252\265\277<.#\270\210U\204\277\264\205L\211\021\\\303\277\302\001PV\361\347\277?@9`\023\202\276g\277\335d\2378m\245\215?l\230*\213\344\t\257\277V\"\375\275\013\246g\277\030\335\254o\372M\246\2776\327\324\270L\302\222\277D\025\344)j\010D?\343\2119-\2438s\277\240\246\356W\"r\217?pR-4\005\303\262\277T\223Sr\347\336\233?T\243\3603T\343\206?\305n\222\223R\030\220\277\307J\264\005o\213\254\277\316\326\355\221\235/\203\277\307N\336\372\007\204\206\277\024\n\212\267\026\311T\277\320\324\010\376\361\027\256?HZ\312{#\036\240?d\025\255\031B\305\253?]\006_\017E\t\257\277r\330^ \005\351x\277y\304.\'\002?\227\277\006t$$5\006\271?~\201$\0333\204\246?\377}\241\202\337u\262\277ig\244X\276\031e\277\010\227\303\203V\'s?\313Yq\367\3672\251\277\200s:U#\225x\27752\263\014~\373t?;\'\331i\330V\262\277\302\372(\206}E\243?\214\254\010\223\"Ol\277\002\302\342\311\315w\237\277q\366\322H\356\373\264?\203\005\314yC@\244?\337W\"m\330\227\247\277~\272\375[\333P\203?\376\215\257p\362`\257\277\274w\375\3303|\263\277\245\235\271\373xd\226?6\360\001Z\274T\025\277AS\261\372k\236\220?@\211\020\240\257\332\232\277B\013\302\256\264\323m\277)\255\240\364\363\033\221\277\036\356w)\2453\246\277}\021/\307W=\242\277\236\022\251\327\036\031\235?N@QY\264\032\232\277\204\260x\300\205U\267\277\332\023iA\325/\255?\256\036\022\272\364\"\220?Tk(\304(\365\205\277\037:\251\030\003\260Y\277\257\233gmg\223\251?\373\260\215-\013\250\202?\311\273Wm\252\331\216?r8\233c\253\"\231?\221\303\375\234\r\234\305?\272\327\177G\311\267\226\277\024\001\333 \311\010\261?\370\366\265\312\344\344\261\277\347\003\327\236\362\346\226\277\241E\003\311\272\305{?]\002\320\271\306\217\232?\024U}u\206k\255\277\376SR\230\361\364\206\277l\260\363\\\344\247\220\277\302j\347\000/\013u\277\332\363\031\273\220c\220?\305\251\355<\246n\267\277nM\254\326\330\037\222\277\341D\215\355\010\222\262?\2671\204\231\031O\230\277b\365\250\365\352\017\214?\001\351<\302\237\221\237?<\211v\347\010\271\232?\330a\242\t(\022\275?j\223%~6\362\220\277>uj^7rq\277\330aj\233\364\346\262?\222\025\030\353m\350\231\277\243q=\005\017\230\243\277\217\227` O\305\270?=\331\335\ru\021\240\277\240T\246\260\272q\245?:\240\256L\302\335\213\277\227w\220\2054\360\251?\351\203\251I=\237\255?\236\314\214\251\227\201\251?\272\214\306\257\333\372\250\277\332\352\033k\013L\225?\356\032\352\225M\373\236\277\037F5t\270\313}?\333\232\237\006C{\220?U\377\032}o\005\264\277G&\337\344\310`\252?\335:\227fV\327\260?\250\305F\365\006J\245\277\037g\177`\304$\256\277\261 \251\353\010\311\244?\033\224\374\244\246\340\222\277\230\216\314L\3433\260\277\023\252\'\352\240\275k\277\316\256\215\225\377&\247\277/\336K\201\020k\262\277S\210S\266\007>\210\277\265\201\3516n\004\200?\270g\035}\344R\221?9<k\323\312\035\221\277\362\270\303:^\030\263?\327\025C\360\215\211\264?\332^l5R\026\200?\375\267\2056\306\265|\277\n\005\234\352F6\256?\ry\302\201\000\226\233\277W\262\373\345M\270\202\277+\313\000\266s9\232?+Ne+]y\235\277f\210\275f\364\205u?|I/\026\323S\242?Y\206\351\236^\273\254?m\251\032>\r\272\243\277\256\335\236o\300\201\303\277\003\207\357]y\007\215\277:H\273\267\300\002d\277\037\206~;\350e\257\277\036\211V\343\350\366a\277H-\3105/Q\225\277\201\016\335\252^#~\277\266\0341\322v\371\207\277\373.\241\207\020[\226\277x\245\370\000\205 {\277d\211p\027\334\364\223\277\321t\204\365v\275\271?C\004\205\233\250\021\202\277\211\310UV@\257\247\277\3551V\323\215\234\211?\214\037\001\354\305D\235\277\310\274<>C\267z\277{&\035_5\257n\277\223y\354\243\316~\253\277\341\032H\330xF\261\277\306\027\036\375\364}\241?\206\030L\341\257\314\254?\255o\241^a[\232\277\235\027i7\214\201\245?\3178:\203c0\267?Qp\326\200D\247\241\277xF\372\3768\224\242?p\332\240\351\274\'\225\277\216Z\307MB\261z\277\2606\325\"\240\360\261?\252\321\0277\265\004\256\277\007#-b\025v\253?E\255E0\0033}\277\242^\016\034\213\334\225\277MA\342\353\241q\223\277\177\344B\336:\364\217?%\260\341\243 *\243?\352fU\364\375\214\246?\220\006C\320\006\312\225\277\341\367a\275\333x\260?@g;HFV\273?\335\"\322|7M\274?\234P\274?\270\344\255\277\263\3609&d\271\260\277\361\"n\304\010\345\212?\307\347\253\016T\211\253\277\312\005\020\332v\024\250\277\013\"\270\\m\340\235\277AX\332\31122b?X>}\252\326\236\233\277\325[q>\273}\247?\274\265\312;.\206\265\277\255P\351\365\200\\k\277$x\025\233^\036_\277T\324z\n\363\265\245\277\330}c?\373\200\243?\326\005a\"\303a\253?\225O\205\300{\036\274\277c\210\325\336\255J\236\277\370\224\327\241\332\247\221\277\371\245\004\300\304\254\261\277\354@>Gz\210\236\277\335\326<?t-\220\277\225/\371\030\237\211N\277`e\304~\273\021~\277xZ\003\274\2064\267?{0\366;\034d\344>\210\334\264_#\306q\277\'R\000^\223\202\243?\230\226E\206\360@\242\277l\341\317\305\263\362\226\277\232\213O\214\304g\236\277h\031\223\236\303O\235\277\212\022\010\337\013\365\222?\22596\202\031_\227?E\304\0138\275\361\252\277p\307\340=*\255\257\2779\333\200\200\273y\212?\245\023\304$\021\030\200\277\203A#\260\033\236\200?P\377\247{\213\266\244\277\035e\232\001\234\350\242\277\301\007P\242\361\371\243\277V5\255\361\\\220\244\277Hi\010\037=\343\227\277H\261>\260\026\214\227\277 \021\342\377s\272\202\277\266k\304\030\226\315\260\277\302Zr\315\366u\233?\361\0052A*\270\272?\242\264s\036\261\235<\277\254t\3549\221\312\210?\365\353A\243\313\277b\277\342\227\240\232x\216\233\277\"\371+\2343/\243\277\253Ri3$\335\252\277Q:\\.\017\255\246?8\270\230\232\275=\227\277\253\2352\242\177\\\256\277<$\373\327\370\364\265?J\304h\210?\010\234\277nl\255\232\016\253\227\277j\217\373\273p\236\306?\274\271\231@S2\256\277H\026\245+\304t\224?^\215\262!\307\027\204\277\006\t\nD\265o\212\2773\020t> \013a\277\304\363\0321C(\223?\300\3635\304I\026\266?\357\026G\007ya\240\277![\242\325\035\202\205\277\256\326\360;\002V\014?Q\366\206\246)\342\212\277\000\243\322\033K<\245?z\030\366\n\255C\246?-\177u$2\211\232\2779\354.F\0016\256\277 \352\331\277\334dq\277\'\264\372\256=\247v\277D.\206c@\371\254?\361P\035\271hc\261?\036N\023\250\316k\224\277\227\0019\221\347G\224?4\342P\274p\370\236\277\010\3445t\271t\224\277\267\202\270@\371\256\231\277\007\223\235\325[`*\277\305\332\000R\033\265\274?\351\334\364\335]\254\260?\230M\307\341\016\027W\277\302\302\233\264F\253g?G\031\353\022\373<\224?&(\352\355+\212\246\277\300\343:\035\322\004\245?B\354/\224\005\247\237?%j\334\003\002\364q\277D\324\233\260\265\263\261\277\260\304\036l\023\236\222\277\034\021\230*\242\336\241?\'\265/\367s@\231?\317\316\206\377S,\251?\231\273n4vga\277z\263\262\373\301o\263\2778>\223~A\232\247\277\350\002F\272\353E\244\277=\300;\010\033\\\253?\3409\223\nVK\240\277\351X@\343/\327\263\277\361se\246V\205\222?\314SH\023\025\362\216?\"\265)2\337v\223\277\222(\302\255qJ\251\277\275\335=\323(\211\206\277%\336\206\325\343\236\241?\206\241\306\366\226A\246?\2474\315\264\300\345\207\277\325\315\"\010i\332\264?\377ej\001\371R\223\277\275Qf\230\213\034\270?\340\317|\215w*\274\277\014nT\363u\305\361\276\240D>\312\036/\261?\022Q\352\375\326\370\244\277\357a\236Z\246\234\220\277\300\260\365~;\337\225\277\367\240@\256\364\336\214\277\3269K\2655\307\217?g\373\357\254MJ\220\277\364/[\257c\254\203\277&\367\026b\227&\256\277\n^\213\225\212\223\247?\264e\016\261\234\361\253\277\271J\261!4\t\261\277\304\032\220q2S\241?\024W\232\241)%\221\277\344t\354\200\357<q\277\263\033\233ob\335\213\277\261\344I\333\235\373\252?\262\230o\005\027W\254?\303W\205\270Ue\224?\210t\271\335\306\361\222?\362m\007\244\227\237\274?s\306\352n0}c?\021\033\212\334\377b6\277d\374\353\263\256\250\240\277\037_\375\356\263\375\227\277\314\013\340A$\321\241\277\013\370h\377\0226\200\277\222\001uBU4\273?uEQ\362|z\272?\232\036M\344u\312\272?/\005\276uSK\241\277\251\266\316\n<\322\247\277YT\201V,\371\253?\250\203$\375\227\'\236\277\0169\254QQm\235?\203\2261|\312d\250?u\177:\353&6\205\277\374JV\251*\330n?X\245VR\252\233\241\27759~\376\271\\\246\277~\006\375^\307ft?\230\037\330\330D\"\221\277\243\232\214\300K\276\253\277\t\264\374\354\360S\225\277\321\300\347n\342\016q\277\233+\326\376\351\004\274\277|\261\205\017\251\323\272?V\010\202\035\315\366\262?\030A\3640\236\323\240\277_c0B\013\001\261\277l\361\031\242\251\326\271\277\202\032:M\323#\274\277d\013\023\225\352\215\267?\336r\265_\005C\234\277[\024|\307X\315\237?\264\037\303\331Z\276\236\277\033:dB4\207\245\277\002i8n/O\257?\033\335\351\314\206\200\222\277qX\t\342\1779v?\304\227\3604G\341\247?\026BG;\363\325\240\277\302\365`\037I\216\255?J\266\347\374))\260?z\241\003,\033\023\310\277\333\335\372x\016\236\234\2778\311\336\347M\333\277\277\000\321\313\372\304$\244?b\262\265!\342W\240?\244\3411\3413\316\274?\373[\241\373\014\352t\277\375\273\213\262\320\032\263?*P\034\361-\002\256\277\357\256\033DCb\261?wj\272\220\022\364\232?\2559\303F,\236\201\277\373\201\270-\241E\030?y\035\'\374U\005\255\277\252\337\300}\n\326\225\277\002\256p\005\377!\222\277J\240\251\312\037\246\221?u\321\021\373^\256\215\277c\\do<\313\232\277\312w\330q\021\334\240\277f\333\370\241\271\275\244?A\332\220\334\021\010\250\277\001,\266\2677\013\201\277\252\233^\272\361#\272?\271\347\312\274\271\241\250\277\032\023\220\345\330\200\260\277\331xtM\3131\214\277\356\213\003\257;f\230\277{\256g|\302\234\241\277\214\271\234\030\344[\220?\007;O\307]_z\277a\237\'\313f;\225?_\211+\314\214\247\246?\242\243X\363\360uz?Y/\370-\241UK?u\341\371\232\030@\233?TF\267\315\323`\224?<\376\305\204E\310i?\352\232\273E/#\210?TV\242\210/\370\212\277./\267\316W\316\250\277\256B7\242}\312F\277\377\325v\305\327\222\262?\243\365\036\301\274\032\221\277\243\372B\023\243\271\301?~\330\204P\206\007\224\277^\326\344Jp\373\266\277\321\264\211\001\325\023\265\277a\230e\350\373o\200\277\227\006\206\356\241;\241\277\223 \r\220\253\265\260\277\334\261\305\017\337\367\272\277\362\252Mkm\004\202?mK`\014\235\347\205\277\032d\013\233\257\377\275\277\357\014\013i\\\201\225\277\230\211o\223\342\r\233\277\373\321\000l\305\217_\277~+66\236\014s\277\323D\263W0\022\302?\217H\301\375\325\361\252?\333\377%\361\335\372\245\277\352\277Z\320\253C\260\2774\235\216)\025\350\241\277\354\tfE\352\330\222?/_\200\225\243\263\210\277\276A\234-\220\264\204\277Q\376g\275(\261\244\277\302\037\306\311\177\330\230\277%8t\243\375q~\277\243\373\177\\^+\203?UH\356\237D\274}\277w\204\226I\225&\205\277v\341\306\252}#\240\277,\017\334\016v.\250?3F\303\324\031\300\201\277-\235\361\265\"\300\264\277_\014\270\362\242\027\227\277\355\225\223\224J>\206?|P\177\351\264\'\224?\231~\346\026\311\311\260?a\257\240d\233\232\301?\036\204\177\223\2624\230?1\001\224\177\021L\234\277|\271\375\274\323\024\261?\\\307\3250\013\373\241\277cb\267$@\357\252\277^h\002Vq,f?\003\217\247\017Yv\177\277\234\305\346I\312\263\221\277\013\230\250o\263.\234\277\r<5f\340\333\251\277\240\342\r,\275\342\245?\003\255\213\215^G\225\277\035\232\335\203\265%\265\277\037\215C\243\357s\250?U\256I\335\361\031\220\277B\267\203\307%5\217\277\315T\257\030\n\033\231\277\227\'\n\016\375I\234?\340\347\302\210\314\311\221\277\337?\316\260\353X\243\277\200\350\311I\273q\265?D\336({[_~?G\327\355jNi\221\277[\201\313\372%\357\275?\037\242\013;\376S\230\277/\001;\342[\355\257\277\'\235\007\304\357fo?W\312\247Thk\253?\213\223\324\003\257\320m?\024\022\210\3324\351p\277\320\350\024-f\332|?\272~\373O\036\001\235\277\005s/D6\341\240\277\300\1774\356\035\357\243\277\317G\262\243\230}\245\277\276r\025\304p\231\233\277.W\272\t\271u\243?\234\302K\002T\030\251?\312\221S\0233s\226\277I\'x\222p}\223?\271rU\260\203S\302?(\357\305\320\353\230\232\277\327Y\211\247\346\350h?\016p\256\223\244\'\262?\376\"\337\302.\251\262?`nus\013<_?B\032\177\244\016\315\241?\"\003\206(\177L\206\277\207\275\326\275A\214\271\277\273\370\274\206\366\345\240\277w\010Fn5M\217\277Ht\353.\366\336\226\277\3632\3316\313\265\236\277\272O21\267\365\237?gK\273dd\226\267?k\211\327\270\303F\272?\353.\340\025{\034\203\277/jE\201\233\001\212\277\304&\004\255\353\226\242?N\000\277\2065\273\265\277\374\221\224g\025\277\200\277$ol*\325f\234\277\262F\273\372#\260\211?%UQB\003u\212?p,}\230\235\250\207\277,W4\212\022\034\267?\016\341\037IV!\262?\3124\353\374\205\344\301?\353\304\365\266\352\\\205\277\217\005\207?)D\262?\273\3425\367;Lm?v\346=\010g\373\237?n\330\303c\320\200\274?\345z\006\236\260\377\201\277\030\265\222\327s\007e?|\007\337\354\212\326\205\2776egk\223\311\205?\021mn\275\265\354\253?\333/\256\235=5\241?\365& \240~Y\231?>a\016\366!\207\243?\rf\200\300\314\360\202?\332}L\317Y\332\232\277\302\177\351\213P\315\177\277\'\260ms\241A\274?\344|\347\253\r\225\243?i\360^\217a=\247\277\325ot\027\200.\250\277Bctu\334\256\222\277\370\262\257\212\366\366\244?\206\270J\226q;\224\277\334\300\235D|\372\247\277!\240\307\362\265\310a\277\033\'\266\244\344V\222?\260\203\340\n\375\237\224\277\031kN\264{ v\277G\342 \257\026=}\277|\335\314\361\254\320\236?\275\212g\316\223@s\277\231:\201\205m\007\302\277-<\326-!\320\240\277x;\017\272\004?\305?\002\220\321v\205\233\261? \013,B\002;\222\277\307N\243\375\345$\232\277\316y&9\305\341\267\277\r\303F\354?\t\242\277\313\205\022:B\006\242?\376\311T\337yn\237\277H#O^5\320\207\277V\217>}\001\\\266\277\021\243\366\227\242\027\277\277Z?\016\224_\007\250?\266_@\200\376J\227?s\302\321\027\\\006\234?#\232\216/\3022\203\277\211\251kG\2601\211?7MI\305e\223\264\277\356hL\307;\026\267?\027F\245\264\263\270\243?\242\3558\324D\256\266\2777\323\206\255|\342X?\305\372\032Y\006\231\247?\375\332\361x\307;\272\277n\225\327\020\224%\261\277C\016\273\376M\"\273\277\240\023m\344\210\036\220\277l\357\002\244\300S\265?)\n\306\341X\250\227?\247\213\364\364I\257\254\277z\250|g\"}\243\277\261L\370\010\353\253\234\277\205y\265\227\203=\265?\217s\271\037\204w\264\277\t+{.\226*\262?*.vU\364~\252\277\222u\315\310Y\340\267?\326\270\024\307\031O\264\277\277\023\000\265\206R\273?\271,\215\227\203\252\270?X\"\035\310]\321\221\277\334\353\010:6\252\305?\346B\324\273\364{\226\277I6{\303\374\313\272\277\204\004m\000\272\354\305?\027\373\234F\233Y\263\277\311\327\231/\2378\247?\212M\245\251\263m\205?!\024\"\372\013\270\262\277\276\210SJ\207\253\225\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "gH\254AvW\251\277\200oWl\025W\252?w.8\243\272\333\250?9\375\321\004j\246\241?[V\357\307\213?\245?\333M\226\342\337\373\250?N\204\035W\230\257\252?(\352\256`\021js?\203\332\344\351\017\262\242?/\250\363E\273SR?Ln\033\253xG\264\277}\377\332\261:;\240?\376<\267\351RA\223?\201\022\205\007O\366\262\277\315u\373\267u\357}\277\036\346wVR\317\241\277y\226\'x\2453r?\'\020\325\246\222\323\264?\364M\324\236^\025\241\277\327i\214a\230\237\240\277\241\355\275m\321g\230\277R@g\212J\303\252\277\317EHM8_\251?6\026\356\025x\316\216\277R*\237$\331\330\265\277\307xP\275-*\265\277n\231\\\225\207\253\241?CM\320r\244t\262\277\316\025\261f\212G\260? \026\241\013\335\323\263?\233\221\325\361\022\027\204\277w|\317(\251\356\242?\026\235\227\021\211O\260?\300\253\001\232x\322\245\2770eV\020fLv?9\325\302[|m\263\277V;:\317\233\026\215\277^\240\225\332U4\246?\333\230);\026|\234?\001\306&\036\351\225\201?D\027,\\\242\224\226?`\335\304e\310\302q?\342\n\374\244\021\205\232?\267\371Fn\003\255Y?@\250\262h\016\217\263?TZE|\255m\267?\301m\304y\223\302\274\277\033a\010E\330\205\246\277Q\234\331\202\r\351\220?Uw\223i \315\257?\001\023\313\212\315\307\247\277}\'\220\264\267\247q\277vQ9\\\3202s?kL\376\225\275\223\225\277t\332\303\345\002 ~?\276\243z\310\327\006D\277BA\243|\227\257\222\277s\200q\375\213\304\242\277\253#\275\367\275\325\201?:\237\376Ol\212\222\277x\205\t\377W\246\240\277\311\230\024J\325\366\255\277\217\364\023\017\n\'\\?\225\206T\307\003A\227\277@E\'\356.;\204?C\335\242G\315o\242\277,\275C|\220\207\222\277-yn3\241\304\216\277Z\372\273\023u\223\215\277{\222\376\275M`\256?\033\033x|2\265\223?t\t\202\350\343\371\257?)\354\331Y\036\001\227?]\3209\t\317\275\261?\222\213\342\205\262:\226\277\221\271\377v\201\345\266?\304\336L\222z\205\240\277\207\315@\232\334\262\263\277\220\247\304\314W\273\222?\302t\322\016\332{\201?\307\340\2350\240Q\266?\266\273\262\347\302\340\225\277\212[\324\331\2374\264?t\256\276h\361\236\206\277\022\252Vq\036is?:\316qA\006\225\220\277\373tp\331il\250\277cd\355\344\3352\237\277\344YO\017\341\337\252?l\376\202~\034Z\254\277\202\310\347\310\344)\251\277\026\021\232\024N&\233?k\377\224n\274(\244\277\t\373\351nB;{\277\261!\365;v\002\275?^\016B\270!\220\240\277\261l\007eC\345\207?\n+\033\356K\216\263\277*Q\004\333{\261h?\346\364\026\307\224\331\232?v\357\3761\322\371\227?\223\252\010Tl\302\252\277\r\214\006\252WR\231?\234\370\301\025\363\350\213\277\203\362\352\345\340~\260\277k\302e\021\304\364\257\277I\260. \225\341\230?]\264\313\026\212\327\232\277y=\265\377\344\247\246\277#\257Et 3\237\277&\234]|t&\232\277\376\353Ah4\276\224\277\030\235\t$\240\360\262\277\235\024)a\236p\263\277\3666aG;R\242?\027\240\253\361\026\364\240\277*\263\227\313\201\002\223?\364\034\"\316\023\347\274\277\025\331qx\225a\260?W\035\255I\277u\237\277\030%\036\372&(\245?\350\350\330\305\030\001\202?g\021^\306\353I\247?\374\363\336\035H\302\227?\327\362\265\\\206\276\240\277J->\367\244\247\217\277:p\346\315=^\251\277\334\022\021G\303EZ?\001L\341\233\374\334\253?J\244\213\005\374\271\254?e\241\272Q8\214\312\277\2630\271`q\010\221\277f\335d\333_\200\256\277C)\365\337\233\242\265?t\340\262o\036\274\255?\3578\246\253N1\253\277\310\366v\327\033F\215\277\031_S7h\006\223?-\247\020\025J\350\233?\334\023\342\377\305p\201?V\2777k\305\263\244?\244dZ\311\210M\203\277\375R\t\376q\001\244\277\000\257\370\306h\366z?s`\341\360\247\001\243\277`\366\010\277\271\310\243?x\207>}\0213\251\277\326o\277\262\304.\253?\347\n\356\363\3432\262?K\373\367|\004t\226\277\374\266\017\036\356l\201?\237G.K\326=\225\277\177t{,<\324\204?\222\222\341%\346\020\241?_\355\332)\251\200\227\277\025\023\334\032(\361r?t:G\250\177\035q\277X\301\022\253x\221\220\277\306}u\nqRs?\002e\354\363\247\214\224?V\244\310U\251\276`?\250W5\341\367\343\225?\326\261\n\266\203w\235\277\336Z\213\036\346\376\271?0\237\017\237\354a\245\277\374M\001\243\206}t\277o\260\324\"#\017\272?\253\204:\234\303 \222?/\204\200\352\302#\237\277\342xD,\356Vm?\014\313\233\212\004\353\224\277\252\227[,R\217\223\277\350\311\275\223\311\313\227\277\255\212\340\006e\256`?U\214\017\200\007\020y?\334g\357<\3336\231?)\0202\003\272-l?#\311\212Ck\\\262?\2365O\231*n\223?\304\036\303}/H\264?U\332\014\000\260I\216\277\210x\244\016Dv\245?\031\033\215Q%\304\241\277A\004\350\364~t\220?\270\216F;\234\203s?R\350\336\214$\334\244?Gs\344\242:\367\235\277\364}\220\004$\222\252?\256<\252^\026W\243\277\211i\343\314\030\224\212\277\266\r\367O\360\332\263?\263i}\337\257\016\276?\234\303\200\324\344y\212\277\374\276\311\244\315\317u?\233\376\243\270\207\250\255?\236\007g?\343\300\265?\260w\320\274\001\233\212?\211\022\306Px)\253?\266\202\220\237\007\272\205?\010\320\353\332WPt\277{\341\340\233\255\320\233?\232W\350\031\332C|\277\324l0\273\236\224\221\277}\034Q\341\366\305y\277\267IQ:\316\325\204?\325=_g6\356\265\277\223fw\217)\035\251\277\204<\215W\303\367\247\277\214z\361\205\271\005\254\277\032\'\226\367\331v\237\277y\377\0065\303=\224\2774~\312\237\370d\237\277\354\335\013\201&\314\246\277/\356\014\356\177\311x?^k\266\013Q\002\252\277\217My\371\272\025\245?\242\301\267_\013\201\225\277x\232*hg\276\217?\033d\351\354\266\217\266\277\235=\370L[<n?\327O\023]\362#\207\277\247\215\361{0Q\221\277\320H\034ia\310{?\024\253\277\247\314\246d?\375\357o|2\305z?T\202a\345\027\221\242\277\340\343\320r\254\360\267\277\261\201\256\\f\324e\277\'\262\211\272\007\214\232?\337.I[!0\254\277I\204\345\2345\017\231\277\343\262\233\211]R\261\277\247Q\365\212\360\345\250\277^\033\207\255S&\244\277QrQ\357\372R\245?\377\325\242$\346Pr?g\3262\201\232\200\207\277\304\342\366\201j\313\233\277\324\271\217,\n\332\237?\252\336\372G\t\264k\277\376\030\337\240\025\026e\277N\357 \310\274Ap?\320\330M\237\201\360\200?\213\313\n\277KK\234\277@\235U\342P>\255?m\003+5\337f\257?g\324\031\"\251\220\270\277\332T7\2460\273\214\277\230\270\233\024N\\\262?\365\350\023\002N\010[?aWB\315\307\335\231?\354\2367,\370\305t\277\031\303\356\211\320\230\233\277\247\377\233QT\314\207\277\323\341K\337\3604\216?\351\275\364\016/\347\253?\363\367\315\372^\235\230?\366W\273\304\306\216k?\345\230nvH\332\275\277l\363U\334\363\230\207?-\2079)\315\241\211?\020`\276h|x\235\277:\300ZO\345\002\220\277\241\376p\332f\001\222?\336\225\365\303\007\320\240?T\306|\362\002(\262\277\276\220\213\317\372\036\214\277\354E\202u\021\261t?\241\003\247\211\201Kw\277\000\355`\000et\256\277\203\027M1]3\250?\006\240\272\252\244\013\211?\216\243\223\034\242\330\202\277\253O\352\247W\206F\277]\216\220\347\'\\\226\277\032=\260\374\335\312\252?\270\232\272\217*>\241\277\315\221\022\321\253\231\203?\034U\273;\254\027\224?>\022\220\202\020\312\260?\216\243\2445q[\221\277\254\326\310\013Jp\253?\334\347\331d\352+\261?\345\337W\014\344\371[\277\334s\251\301\270\311\204\277\242=\377\207!\260\242?\311\323\205V\220\\\203?\376\346\225U\337\034\204\277\217\321\023\000\243]i?\353\307\010\352\363(\243\277\304\236\302\376\277|\206\277\351\363\267\260\336<\266?\355w\375\031\024\253\232?&\363j\357[=\240?\330\275fG\302G\232?_\253\267\230\034\325\223?uB\363{\334\256\241\277\037W+\032\020 \251\277\362\375\214?\267\220X\277MXm})R;\277\336\335#\221\222g\205\277V\001\252\230\345b\227\277y\227\207$@\312\222?.~1\r\371I\245\277\3728=\224-b\230\277\013\270A\202\204\262O?H\036S\"2I\217\277&zn\212y)t?\271\210\017H\265\'\220?\323c\357\237q[\232?\022\213\0332\177\r\200\277}\036\243\307\375\224\230?\310\335\253\347\307\003\201?3\203\376^\322\361\247?\177\240\240\247\264\235\224\277\261\007\370H\250Y\256?\372R\027z`\360\265\277\377\246{^$c\232\277\027\3107e\227.\236?/\177\002%^.\223?\312XY<V\360\261?\264\257G\002\214\340\246?EF\225\370\3478\231\277<\3438\005\037\005\245?\337\274\311\377.\037\223\277\206]\204\214]B\233\277\223(\247\257\023@\210\277L\276!t\372w\266\277-\237\207\305Z\301\257?\026\005\204\252b]\212\277\014\237Va\320\351\243\277\225\005\247\246\025f\241\277vF`\362y\312\177?\267r\357UT\013\227?\203xC\307\351G1?B\330\215\252\257\274\254\277\305\'\215\032\004\351\240?\036\327\\\023\242\227\256?\313\251\334+\203\004\207?Z\233\2204G\000P?gM{\252\034\351b?\373\253\235\336\240A\205?m\2612\261`X\261?\020\210\367\255\t\326\270?\021\365\035\307\321\321\216?\027\201\210%\3568\214?|\272n*\251\002\212?\274-j\031\310\271\223\277\273D\361\312\247\220\230?aV\204.\322\t\230\277\203H\202\326\345\016p?i l\230\376(\201?\3061\020\357z\234\214\277\025}=\206Z(w?O\334\336{\264\016Y\277\237m\223\312V\301\241?\201\323\"\250+\317\244?\034\235s\372\337q\203?\370\230\266p\013^\237?\207*\221\311#I\206?I\364\225M\303\337\246?r/qay\310`\277\343.\323M\364\036\177\277\303\240 %\201\\\204\277 ?u58C\230?2\366\266L\253\355x\277\255\014A\314l\331\204\277\024\267)|\271\222\265?\364t\302\211L\327|\277+I\346\354\257\224\236\277\274\251\220Tr\212\227\277\372\203;\020\263\222\221\277P\254\033~\217\033\245\277\370\355\326\233\331\360\244?2\336\337]\213\374\204?\272\001P\323M\372\261\277\2506\230\276\326Y\232?U`\363\3616\004\232?\\\375:7)\213\245\277\246TBt 7\253?@*>\236\261\230\231\277]b\224Q\307)\241?\211#\365B\255\007\256?N\364\240\325`\211u\277ylv/\004\246\226?\362\246\243\217\311b\223?\313\371\n\017nC\244\277\314\014\363\016E\023\267?\324\343\325(\226Q\213\277\263Y\221\361fZ\243?dE|\212a\202\231?(\024;>\305\361\202\277\254\205\241M\360\240\207\277\030\000Y\023XG\245\277\251\"\005V\224\206\235?p\360\002q0\352\242?\234\272\232\252E\267\207?K\341)\377\227\231\223?M\255\256\372G\203\243\277\350\353{n\364\243\230?\307\256w\343\313\247\244?IfZ\273!\002<?C#E\021\037\341z\277,oN\007^U\226?\347\302\243\301\346g\261\277j\2739\301R\207\232?\".\030A\252Lq?\215\354\024r8\252\254?*#\366\002\027E\237?&\223 \332[J\212\277\026dN4\366\361\250?\246\t~D-9p\277\376\351A\335\344\272V\277k\263ie\211mw?\370\241\271\367I\321\236?y\330omg0i?f\230\354\224\201\356\231?1.\377\007^W\237\277\332y\311\246<s\\\277\233\321\3436W\340\217?\225\330j\034\334\332\205\277\233y\364h+\341\235\277\270\223\316\t\245\316\216\277\217\245\333\346\2407\177?\250j%Q\213\302\203\277u\203\351\371\377\033\237\277t\032\026i\326\322\244\277~%N\343\312`\211?o\303\200\315\321\020f\277\007A<\003\206\247J\277_U0U\330\0278?\344\364\373\360\305\250\250?`\377\326^\260\004X?\312*\205\345Q\224\245\277N\333\006\240&m\231\277V\323\356\330\206\203\241\277\315\017\007\234L\372\212?\253\024\214\"\241\360\237?\336\'(\"\377M\217\277\260\261\311\224Gi\263?\317\376#\013VP\243\277\030\027\213\250\010\213\242\277\026\225d\251;\"\232\277\340\207\217`\375\376\202?\207z\267\020|O\256?\237\"5\252\274\026\234\277\345\334\007\212\253\025\234?\236\232\201 \265\233\235\277(\367\261\330\326/\233?\313Jo\036\361\312\215?x\202\351u\363\264\222?5j\327O\307l\211?y\351B2t\310W?*5s2~\201\265?\001\024\331Ma\020\235\277Xy\241\277\026\241\227?\315\271rv\213\032\206\2776\000]?\004\\\220?3Ku>\3038\231\277\312\216D\323m\256\204?,b\332\312\364~\221\277\006#\371\365\337\330n?S\277-h\272\037r?\3305`t\327Lx\277\013@\037\3016\250\224?\362\247\276\345\001\240\266?\264oc\263`\357\226?\251\300\354\335\254J\242\277\252\270\307\311\025t\244?:\242g\007HB\233\277\251<\3705Z\013\224\277:\254c\374s\371\241\277t\2448\222#\360\222?\232\231\016\215M1\240\277\362\223\331\251MY\242?S_\020\031\356$\225?,OS\242\367\220\241\277w\232\230\204\366\201K\277\023\337\361\373\013\223\210?\261\351\234\243h\000\251?\214\234\242E\321x\262?\000bV\356\306y\204\277\001\221jr\340\335W\277\307\221\352W46\245\277ST\216x:E\255\277\002\222\336\212h\354\267?Gv\007Q\320\333\243?U\000\026dK\253\214\277\201\025\212\335-\005\262?\003\364\'\205\274\027\242\2778V7\006=\211H?.x\026\217_\340\226?\3738\362V\353\330\307\277Gc\037\0323\316\220\277\333\275p\007\241\362\236?\247\364\265\256\201\207\302\277\037c\242\240s\337\211?\215y\341\206\010\363\250?\257\030if\377=0?\206\"B\351\022,\253\277\364\004,\242\3710\241?\353\354\237\013\375\361\217\277\237\225\t\177\2530\223?\262c\266\016\260h\232?\030\021V_\213Q\265?oe\000\335\342\266\242?\306\365\354xA{\245\277\267\007\311\026V\300\222\277\304)2\373\350\t\243?\336QZ*R\244\222\277\021N\273\006jk\240\277x\235\022\331\262E\224?A8K\243i(\240?\033\206\003\335\202V\237?@\256\025\265\366\305\212\277X/\311\351\006;\260\277B\341\177/\254\361\235?\007\352E\311\001\326\272?\370\014\321 \260\212\212?\030\360`\261\337/\265\277u\234\314\257~z\254?\366\301\235w\245\335\240\277\220\230\257\323\000\361\236?\230XOv\327\342\245?\323\310E\271y\216q\277C]\215G;\220\270\277\360\016\353\223M3\204?\366\326\363\333k\324l\277\246\324%\'h\244\220?\253\205\2024\310_e?\275\350Td\027\235\203\277\222\205,\237\2422\246\277\213 \240\317\232\340\223\277r\336DV\232\360;\277\"SH\345\321\214\217\277\243\302\317G(XR\277\357\265\222\367\215#\217?\0228\231\213\tw]\2777\371?.\030\240\255?rb[\r\262\302\205\277\370\260GA\r<\272\277\007\233t\342\264\263\252?=0\371VGy\242\277?`\254\373\236\255c\277\277\232\305\010N\020\251\277\326|Z\215n\207\251\277\315\375N\003R/\245?\3634\3413\205r\245\277\333r:\376\205\006\212\277\207H0\037\r\310\245\277K\tJ\354\363\324\251\277\274\261LN\\C\244\277D(\326=t\375\211?R{\312\206\313\304\235?<\024\016\276\334p\220?\237H~\251YS\202?\247g\236\274\337,\235?\342?\236VHZ\236\277\200\025=\233\323\256~\277I\361\213\342o\330\267?\004\306E\341\205\252\244\277E\321\247\325\nV\247?\372\226\204\257\035\223\246?E\265\300\024\266\266\263\277\311t\370\262\177\005\246?\323 \212ZRp\264?\377\370S&\307,\223\277E6-B\376\\\250?\317\036y/+\023\250\277\316\013\372\204\374\215\204\277\325\"\261y\357$\220\277q\306l\031\246a\251\277-{\226\324\367\252\254\277pR\374\3676\017\244\277\033X\303\215b\271\226\277L\360q\251\212$\275\277N\014t9\353k\265\277\\\244\027`G\035\246?D\n\214\335\337\013\251?m\002\306b\300c\216\277\376b\037\250d\322\227?\211a\242\325Y\036\220\277\270Y9M2\201\210?\245\236\343\346\360\216\231\277\263+\320wB|\225?\2023\206\255\214\214q?\245O\300[Gn}\277\231\326\264\0301v\240?5\327\337\037?N\215\277g\275+Pw\214\237?\327\211Z \302\006b?\312X\\\010l\276\200?{yp\2475=\251\277\237!\207V\201\303\242\277s\330`\037\353\245\212?#\037\266?-\"\225\277u\364u\365\006\274\206\277m\006\377_Vi\237\277\225_y\366\034\201\254?v%\024N\313/\216?\272\302\004\024\200GT\277\333k\371\252\221\215\256?v%\236|\314l\206\277\022y\353\233\201(\257\277\203\314]\247\252\363\241\277P\371sY+\303\215\277c\265<8\362\356\264?>\023\341m\244i{?KJ\302i\307mP?\240w\360\364\306]\217?\227\\5a\010)\237\277\332;`\370`$\242\277\300\214\375\252X\r\234?u#B(\354Mp\277\317\324\234\001\017\362\244?YkY\263\371\032\245\277J\261PU\232\231\226?\020\322\0029GQ\216\277:\337\267\313]\270\225\277V\234\321\210\227_\242?\353\263\265\372\200T\205\277\330\221@\365\025\377\242?`\314\243\362\255\275\204?\325\351\257\245r\341p\277\334\351\020\355\342\375\252?\343\277\257\373P\212\226?G\371`x\315z\203\277\010\220\033\037\255/z\277\242\033\250\031b%\217?+\216{\275(\243\177\277\252k\000y\230\001\210\277K\342/.9\240z?\243\014\322\365\344\365\244\277\363`\341\234\210\214$?\307\237\351o\017\267\225?rv\307\002a\010\201\277\307\372\224WgZ\255\277\033\251\006\3067\312\231\277\341*\367\036\365\276z?\255\347\010\275\325|\261?\226\207\017\352\211&\232?1\017\371\020\212r\241?\312]>D\234\211\232\2771\320\236zF\224f\277\004\261\205*\007\212\212\277\177\347\017;rc\240?\242o\271\333\252+\226?\347[\023\210\001\031\262\277T\017\360\371i\335\251\277l\323<\210\037-\204?\326\313\344\251\357)\233?\257\221|\210<\010p?L\225\275\325f\313\223\277\244\266>\344\277\351\226\277\271U\037\244\"Z\262?\317\256\001e:\373\260?\371\010\\\216\331\'\213?(aU\367e\002\205\277\221\335\216\337{\272\212\277\t;r\340\247R\254?\370i\324\314\262!\210?\323\276t6\353\232v?\223\275\023\375\t\352\235\277\351\242\235\316\tH\235\277\246\227\030\371\006\030\235\277\027\255\030[\354p\233\2779\366\003\247\227\237\243\277\007\372\233\332\242\034\247?t\376S\'\316\315\236?0\007\267\243[Y}\277\273\355\020\257\016\034\242\277mZ;\334\271#\251\277\017a=A\264\013b\277\221b_ \260\212\271?\3275yo\"|\237\277\361\271\222~\267\201\241\277~~:i+\317\240?{\270\226\267\214\217\250\277}\250\004\305\312\253\205?\020\035\033\240\000\245\201\277\367\t\356\004\026\032\220? #\240\256]\273\204\277\025\035\244\032p\367\223\277\232\025\251}L\321\260\277\232\020)\030\r\027\240?bY\217\343\347\006\255?\242\211\260\277\213u\230\277\231\225Z|\330\302\243?\030\253\"_\277\336\214\277A\376\013\302\275\253\214?\206\273\373\001{\354\267?\3526\304\340\234\"s?\251\020\264\307\230\035L?\222\371\315R\244l\232\2772\362\000\255\312R\233\277\323\214\203\222\367;\244?\270DhlAND\277\317\274U\r\006\331\223\277\244\354F\226\\\3650?\200\225!vk\214\237?\240\002\352\302\363\004\270\277\225(\212\2018\326\242\277Y\256\206\256\304J\203?RR\365U\024\361\210\277,\357\312\301\316n\252?\"\211t\357\222\313\214?\230\325q\002)\036V\277\033\353\030\250x\256\213?\362\027\003\210?\027\237\277\367\344X\254\373\317\232\277\"8\255\260\006#\253?\317(\211n%J\215?@\014v\222\205\226E?\372\344\225\210\375\326\241\277\262\2435\212\226\376\243\277t\026\247\226\320\267\224?\023\345\3169\235o\224\277\367\031\2561\220\275\251\277\351M\207\270\030\234\226\277\221\267\362G~]\207\2778\366<\306\321\200\235\277\026\336\256u\201\214\212?\"\214a\023\236\352\257?\215\035\364\377\350K\231?\317\252\272E\370\027\212\277\334\372\275\357\227\014t?/\\\251wU\356\244\277\311\310C?\202\035\221\2772\033\256\230\304\324\201\277\003]\037\341\315/\246?\366\276\376=\243\252\232\277\322\224\234\211\365}\247?)~\361\254\240]\256?\355\3619F\005#\\?m\335\201\030|M\245\277\237U\204\0328;\241?\031M\363oo\337\272\277X\025\207\333\341?S\277\342M/.\025\017\254\277%\033d\350\n!d?\354\222\\\211\377\013\246\277\014\351\226\354!\035\233?\027\266&\261\207Q\224?\"\200\327\342y\'\240?Se\256\260)\317\275\277\255ty\267\311y\213?`\246\020q\205\031t\277d\327\326\356-\224\234?Z\341\336\'m.\303\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\370Kd{(\276\334\277\201\024\004\216\305\325\327?h\346\3135\005/\330??\333Ul\026\276\327\277\235\225;!\032*\341?\033a\025\265\245\017\270\277\201\035\201.\213`\343?l\037\360\200hm\325?\264\023^:\204\362\330?-v\265)#\215\270\277\247\354o\321^d\232\277)\260\000\274\204\204\305?\375\362\303/\031p\340?\316\360\352\266\246\240\344?\013\260\202\0360i\331?H\354\301Lm\246\342?\220\014\t\252\252W\342\277\305-\232\325\202J\312?\221%WXc4\333\277q\375\001EM\375\316\277Y\246\021x\341\224\303?\373bdw\334\327\240\277\366\355\037\225k\"\321?wk\347\001\2122\330\277 \316\332tIm\327\277\315\004\367\013\316\020\317\277r\375N\337\233\264\325?hP\272\355\310=\337\277\330K\211\247\210\325\330?\247\371$\213\204\342\327\277r\213O\275\365\035\300\277\360\204\203\372\310p\315?\356j\341v\265k\345\277\300o\217*\224B\270?\206!\322\334\\N\314?E\031\232gu*\313\277\340~.\335l\376\327\277\260\354\367\331\360\253\326\277\256;\235\016,\325\331?\016K\342M=\366\303\277\234\367\374\227|\222\341?s\021\352dY$\340?8>\272\010y\240\323\277G\375\252\036\301\222\261\277\343Z,\006\330\361\342?\237$j\275D~\343\277\006\024Fi\205\334\260\277\032\r\013\336\264\023\351?\366\0240])\350\331?\006\257\217\216m\246\325?~\247\026W\221P\317?\234\337L\275o<\305\277\235\377\266\207\006\225\254?\203\255\355\231\237*\312?_-&$\254%\347?\235\024\215%\333x\276?\225\350\340*\303k\311\277\347\331\205\247\220\212\336\277p\213\264\222\247V\343?\341\265{\322\310\260\267\277h6}N\353g\333?K\303\244-\332=}?\305J\245\200\202\200\314?\366\006+\251\277\240\335\277\365\224yuL\317\300\277\266\\\260\355VF\265\277\246\363\235\340\260\027\351\277\341\347y\231\365`\335?I\205|J\274^\340?\235\202\254\351\364Ay?\216\000xc=E\244?\256\212\030:\276\223\341\277;\375\035\373u\336\341?1\016\313\002\360\240\331\277\345\221P\204\324\356\331?\024\202yQ\276^\324\277[\341s\217=\224\312?\350\326c\304\017\215\332?\246s\247\240@}\341\277\220\360+\255E\246\325?j\250\220\3456h\302?\302\302\356\371\026)\351\277\007\024\344\321\213T\323?m\2018j7J\323?\2715\362%z2\342?)\021\372\177w\010\353\277Q\t\260\"[&\321\277[guad&\316?^\322</\005\263\321?D\343t_\325\302\332?4\376\336\351l\225\343?#3\347}\312n\321?\013\254\255\254)\r\246\277O*\2240\005\372\310?*\355G\255!\354\346?\004\252&\206\222\035\270?\227\204\027\211\350\262\277?\354\024c6\244\364\335?\333@\017\365t\234\336\277\223(+z\307\367\352\277\237?\357\022Q\354\306?\231\252\213\310\2026\316?<k\374e\335C\351\277\3123\330\224\302\230\340\277\273\2654{P\021\337?\247\273[\213v\362\326\277\003L\217\337\255\311\321?]\001q,\364G\343?\223\377\262\346\007\351\311?\027;\317\261\321\216\327\2779\277\372c\265W\220?$\321\\\300\225\324\334\277^\304\361+H-\333?\304\023W\275\350y\225?+ \233\274\016\376\311?\362\364Nd\002\355\274\277(\214w\310\243\362\302?\023\235^7\217\337\332\2773\372\350\272\212N\320?/B\364K\370\037\247\277\024#\361\233-\253\341?\"\371Z\365V\336\267\277\025\013^`v\251\353\277\220\316\210\337jJ\307\277\0304\275\252\301\025\334\277\004\312\231N\303\337\326?\r\375\304\207]\200\266?\266\363\t\215 \357\304?\252w\300\001}\321\304?X\026\2119\300e\302\277\237\255X\301T\336\333?\255\377\273\203\261M\353\277n\211\rJ9\000\324\277-\201\333\302f\n\320?8\3759\3276\300\330?U\350.\200\217\343\260?UY\360\323\305y\251?,[\204:\375P\343?uD]\3677\361\263?\031\23112\332\300\250\277\024\177;\002\031;\232\277\302\235\3476X1\336?Y\333\341\245Q\243\345?\036\227O\201\021\233\343?\261\221g\375\260\001\342?\2511\037H\303\304\326?72\013.K\255\331?\342Q+\374\330\222\321?\334\243\320p\035\254\325?x\230W\314\236\033\301?\254\320,R/D\340?\026\346\256j@\363\341?\201\2235T\374E\313\277\017;\247\253.\201\333?\202\006\230\244\036\327\255\277\036\314\035R\177\212\341?\310\255j\272\307$\314?\027R\310\356f\267\350\277J%\315\204\204\376\341?i\n*\245r8\321\277\027~\370\202\357\232\347\277\306(R45\261\321?/\211\271\007X\372\326?\002}zS\340t\315\277\212\266%|\374z\244\277[\224\352\351h\334\315\277\255\003\263\212\345\031\336\277\216$\216\\\260_\342?\302*#\177\325\314\265?\341\'\340\022\341\005\341\277>W&#&\r\341\277u>\207\2031X\314?\305\217\342}\370\341\353?\370\350\224+nZ\316\277\325\223jnsz\306\277L\214D&PM\334?\355\340\237\212U\211\351\277|&$t\366\213\347\2771\351\014\212<;\312?y\210\027\004\217\000\343?i\315)\264\334\226\335?\312\002~\336\222\225\342\277\0024Sj\\T\340\277\251z\316\036\364\276\344?L,\243\370;:\303\277\023\344F \247\213\312?\305\204\227R\217\244\242\277v\273(\333J\213\354?\271\n\321\326\034\"\333\277\0160\361\000\230+\303\277\001\370i\310K=\342?\334\025\364\260E\274\326\277\3752!\331;s\212?\306br\347?*\326\277KX\3575L\307\333?\014Ul:d\272\350\277\266\374\270\342\261s\303\277\327\331\307b\276\351\304\277\305Oy\325t}\304\2775\tg/\270s\301?d7\0278\r\270\353\277\2623\366\031\333y\343\277O\377\200\277\024<\333\277\"\314C\2723\324\323?\037!\2364o\322\342?\3622\211oC\205\330\277:\325\324;\241\312\363?\337\026C\027l\301\346\277QS\010\326^\231\345?\025=\307G\256E\341?\357\261\340\244\271Q\316?\267A\335\036\256H\331\277\312\000`\216\371\251\261?\332@\2105;\273\333?ZU\026sr\246\341\277\246\257\340\344\245\357\344\277r\346\014\357\247\276\330?\230L\'E\256\377\352\277\007R\2248\233\001\325\277\301{\355\004\276\310\330?\366\357\253|]#\311?,\341+\306\354u\343?@\263\004\207\222\313\303\277\333A\037\204\320R\353\277\324\366\016j\317\372\262\277T{\221<\256c\331\277O+\304\352\352`\317?K.\256`\370\324\354\277~\301p\354\377\246\302?!F\302G\031Z\316?\201\321q&zn\340\277\206\004\223\315\340\201\355?1\322\0376VD\333?\335\375\217g\312r\340?U\017i\230\371\232\314?\24552\244\323s\263?\331\342qG-\344\266\277\343R.\303\261\263\273?\372\374\362\266\245\253\306?\307QZ\335\323\351\350?\2179r\370\3202\334?\005z\335%\372t\346?.\017\221\211\250\246\303\277\270\354\240a\236\034\340\277\363L>z\020\242\331\277&\3359\002\310\324\345\2773CS7\0225\327\277\002\324\312\223\274\335\321\277v\021\335\244\253\250\323?\002]\366\232\257\360\340\277G~\306\360\210\013\246\277\222\250v\351\350\360\275\277\347\246\013\027\244\272\353?\234\244\304,h\342\342?[\315\\\026\272\354\315?\330\262\245\355\2429\334\277\177\245W\254\033\342\327\277\335\242\346\017\302G\260?2\243\023\217\375\010\341\277\361\355\336\022\0175\303\277\r\377\220\n\213C\333?\342\217H\273&.\331\277\307+\036z\267\033\334\277\013\331\337\026\3678\354\277j\030\247\247\332\247\275\277/K\031\266U\002\332\277d\246\005\236\3234t?b\200(Z\0108\352\277\033;\213\017\370Q\345?X\365:\314M&\333\277\377\323\001\004M4\346\277\rd\270\323_\336\350\277\210V\240\345\2348\315\277\'F\013\325\313\247\325?k\315F\314\\4\331?\313uN\227&W\333\277\003G\273\266p\243\333\277?\373\247<Q5\315\277\256\214\254a\337\313\323?3\200\236\310\350\t\326\277\017\346\3050n\275\335?f\240\254\230\266\325\260?Y\355\253!\3221\333?\006A\200\347\226\335\307?|U\024\032\323,\340\277\225\270\305$\022\250\324\277\225\304\027\330\3153\346?\223\014*<\370/\341?\\ju\327,X\332\277@\211i\356\247}\311\277]\303\302\331s\211\341\277\256\006\363\035\346\016\322?\316\375 |a\236\351\277\364\365p\017\206F\274\277p\303\236\362\374\242\323?DU\214F\234\"\276?\244@\356\226Py\304?\320\356:Q%\312\330?\3052x\207*2\320?\337~</\'\275\333?\237\360O\010\336-\347?:\307p\303V\323\303?\240]P\313\373\326\327?\261Kh\206\347\322\333\277\272\370r\037OL\321\277#\375\210\275\352k\327\2772j<\031\t\000\344?\301J\013\325\025/\335\277\2507!_\326\031\341?\265C\204\177\211\276\270?\234\264\037\'X\225\316?\237\330N\312\246 \307\277\2011\221\001\272\031\264\277mF\2434!\324\261\277$=\364{\376\324\266\277\3409\"\271\302R\333\2776\363T\035{\352\331\277\313\310\273\277\253\360\270\277U<\255\372\317\367\340?\261,tg\352b\351\277q\010\214\214.4\307\277O\001Nb\017\320\272\277\002v\301\0257\366\305?=\261 !A\367\315?\314\253M\376(,\320?\003\363\257Ma\247\314?\241\253\236=\304\377\334\277m>\r-\017\030\300\277\"<\237\304\223\211\332\277\244j\367U\035\026\327\277\207\031MG\200s\343?\265f\206\177\306\327\316?\207J:@\340\266\320?k\240\233\372Oz\337?\364\355p\341_\257\333?R\t\0063k8\226\277\024\2042\217r\351\347\27750\254\247\200\215\353\277Y\266\240%b|\335\277\336\354\217s\231T\351\277\327\254q\350M\003\341?ldh\315W\030\321?\320\321\274\246)7l\277\304i\250\020\273\311\323??\372/P\256\240\341?N\323\247k\037E\304?\243\267\337\263\216\335\335?\372\2409<\277A\352?.N*Y\223\334\201?f\016r\0101\261\320\277\025\312Fz\237f\342?\276\267\245\367\220\252\330\277\256\307Yf\245)\326?o)D\204-\306\327?=\326wPuQ\312?\n\033\376\000\211n\330?T\027\3207\337e\263\277\246\273U\016\326\312\305?\314\270\204P(3\354\277\277\353(\2246\214\327\277W\302V?\235\365\276?\2473\230k\260y\323?\223-\214\326\262\371\313?:o\3071\313\270\331?\350 V\205t%\330\277a\252\354,\017\301\341?/C\000\030\313\327\331?.X\267\215)K\361\277\320O$#S\010\323\277\266>x\301\225\254\303?L\315\014\033IP\332\277\027\332\345\006~D\317\277A[P&\034=\252?@4\320\245>o\270\277T\263Pl\260\225\346?\330$\372\373\340m\341?\204\266\355pb\020\353\277Y\370\301\265\313C\315?S\327\023\334\237 \322\277\371\002M\3365\323\324\277v\2752\264\031D\307?\355A\306\270\242\177\351\277\377\0047\326l\241\332\277\006\247\021$\317\222\230?0f\246\376\352\347\342?\0053w=\347\352\345\277\374\216\366q\316\033\264\2774\223\033\177V\341\333?\332\232[4R2\316?\035;\272\\\316\312\305\277\333\313\343M\306\213\270\277\377E\013\330D\206\332\277\316dS\302\325\206\341\277\2267\234\013E8\325?\035\245\024\013A\200\343\277`\371k\3676\334\275\277+S\013\031\201,\347\277\2343\222\305\004\330\270\277\317\200\246j\034\216\335\277\177\035%p\264;\342\277\2467FT\277\374\331?\007\332\237\275\304o\316?\210\213\343`\261\204\333\277\037\026\225\312\371D\323?\3656\316\361`\316\313\277S\244A\273\305R\302?\217\264fE}\261\321?\002\276c\317\227\245\304\2775\371n\335\332\255\355\277\310\025\0036y~\335\277\241N\233\250M\"\326?\014:_d\217.\331?\272\316!\303e\341\344\277l\230\253\347\214\203\321\277O\217\356\365\203\023\301\277\303\032\"\201\322L\256\277\315if\207$\237\264\277\025\322?\303\323J\337\277,\302\217\365]\272\350\277\001\273\276\3613 \330\277\321\226\264\215>3\333?\363\017\321\032\333z\336\277\321\035\313QB9\306?C\351[R\254:\344\277\252m(\2524\020\304?\352\320\245\320\276\314\271\2770H \272\220\212\320?\313\207\tM:\017\300\277\036\345\r\370\343m\334\277y\244\324bOw\320?\370$\"S\010l\337\277\376\310\312\342/\331\347\277\202\\\260\241D\027\307\277\025\370\024\364W\336\335\277\365x4\225\013\347\337\277{^\304\333]\252\310?\345\372\317K\310!\333?\231<!\317\261S\350?\rs\245W6\375\346?Hj\352\276\371G\254\277\2324\'\240\335\340\346\277#\030g\321\375\350\305\277\304t\376\242\215\'\326?\256\360{N&\202\254\277\010\034p\215\371O\321?\240#>\344\007\320\327\277\223\232\327\277\327\360\325\277w\317]\227\033b\333\277g\017\353)G\331\323\277\253\036\223g\345\263\334?#g\327\357\241\303\322\277J\222`\025\300]\343?\311\310\340\036u\334\341\277\247g\206<\365\336\324?\205\000\023\221\304x\313?\322\333\240)\323>\327?\013\277\212\332\253\360\314?\003\234W\0243\005\352\277- \300V\211\307\327?\265\205+\204\264\301\313?i\353\232O\334\375\261?\310\'\"\245V%\332?\312\340\2610\256\221\244\277\3304\353\277Ye\301?\013\301x\206Z\347\337\277j\325\351f4<\331?Yn\t\327\375%\330?\351<j\233\251\323\332\277\033oZ\314\265%\325?\335U--\245q\337?C\312\342\331^\242\341\277\207\036\r!\327m\322\277m\017\225\373Kb\332?\257(\277\030O\177\304?\266.\201\233[\233\331?\034\216\212\240\016g\235?\343\200\366\266\226\024\314?\202\305_mJ*\337?\177Q@f6\275\344?\302\237\300S\377\260\321?\211\262l5\005\'\342\277\221sC\265\253\013\302?-&=\344v\242\336?@pRd\254z\335\277\214g-\261\020\266\261\277\371\030\335_\005\371\317?\343\200\204\334\356\006\357\277\223\325m\016\363\353\336?\213\377\352C\362J\323\277Y\023\313\2407q\334\277\352\221\213\263\263\027\324?k\303\244\362\021\222\335?\363:\331P\274\230\315\277\2336>\031\236d\217?Q\240\371\241\377\001\323?^\234\245\312+\325\260\277P\210\025\307\010m\304?\212\301\303oD\305\345\277x\341ngv\342\316?\250\017\360kxP\265?\276\3278F\332\021\320\277\356H\235\"\001?\327?:\357\234\251?<\266\277\355\362EN\255\004\353\277\366\372\026M\034\034\271\277\245C\216K\301\364\335\277\257V\2403s\323\270?\037\225\232~\312\301\326?\216\244\001*\321\'\301\277}\322\035\026Ju\315?H\216\230\257\204\201\267\2773\223\275y|\'\300?\265P\351\333\313\221\315?\256e\007\371\307R\303\277\202\257\3065\341\233\320?U2;)F\202\326\277w\331\234}7J\315?\276#\264\204\264]\340?\365\032\003!\231\027\302?\006\336\233\200\302\246\341\277^\255\256\303nG\330\277{\261\374\376\304\232\332\277\276\347\233q_\220\332?<\223\362\363Cp\316?:\213\033\254\342\271\347?h\t\002\327\2201\337?\026(\016Ly\254\341?\014\324\333.0\010\344?\376\377}\206\213\226\322?\302U\010\364\323\324\340?\221\004\233]\026\242\320\277C\010\241\003\345\365\306?{\324N+qY\345\277\361\tx\\_\271\313\277\017k\203_\336^\342\277#3/\242\376\323\331\277\334\240\013duk\331?$X\2516\306C\331\277\364\302/g\216x\323?:\367\016\330)\243\300?\022\231\243\177^4\330\277.z\212\341\247N\326?\264\237\231\324\361:\263?L\030\210\302\255\354\320?4B\021\356\275\030\340\277\306\271\261\t\352\003\317?\004\030\262up\203\307?PL\242\305\361U\306?\024?\321\004]\327\341?\364|G\351\004?\264\277\260BD\017\330R\304?\014\236o,C\303\333\277\210\030&\244\256\253\351\277\320\242\006c\023F\323\277\231\303\013\330[\334\262\277\023\316zIG\032\351\277Tv\376\t\240\024\342?\214}T\034\255\277\273?\265\262\245\376\316?\337\277,\210\\\010s\004\330\277UYhe\030E\350?\274*\330\311\306e\341?\341\222\357g~\203|?\204c\177\331\3513\277\277\302\322\263I-\232\327?\342\003t\204\356T\355\277pG\232v\311\033\326?i\004l\362=+\302\277\217\373L\231\354U\264?\023\314\260\t{B\337\277\346\002\010\207\236<\325?\210\222eXLQ\241\277\227\n\313q+0\302\277\026.\231\217\013\002\272?\335\003\277\246\316:\344\277\306\374k\023\344\350\300?>3*IX\007\222\277\333N\224\330\255\222\340\2776\016\274v\227\343\267\2774N\340\261%*\327\277Ol4\317j\336\335?\201gr[\231\334\334?3\200g\326r\303\304?\201)\260ms\025\301?o\234\323\366q\330\333?\025\364h\357\026\354\321\277\220\262\336\200\351+\337\277\366\r\231M\2376\322?.\231\010\262J;\340\277$;\362x\357f\323?!^\217\361-\237\346\277#\353\207\377W\253\325?SK\241\351\245\362\331\277y\313\361\364\361\"\322\277f\334\374\007\346\355\341?\317tD\010\320\253\340?\250[\344O`\030\320?\021u\375E \316\222\277 \255\253\005Kj\313\277;\264\270\306\373\375\320?\224N4\374\006\007\322\277G\304D\352j\253\334\277t#\262\305`\206\320\277\306\370\254)\260\362\264\277?\274:j\350\344\223?\331d\316Go\023\350\277\346b\350\214=\315\327\277eY\013IV{\341?\347\016y\231\261\306\314?\311:gy\251j\321?\204\362\300\241\037\254\303\277\216\r+\314\274\000\316\277a`\357\203\246\330\343?\020\336?\343\246\261\324?\"\314\354.\225A\334?q\207Y\220\"L\311?b\010\234\205\373\347\335\277XE`\215\362:\346\277iH\270\235\302\337\257?\271{0\200\010\026\305?\206\344L\315 \363\205?^\327\205\221\310#\260\277\000*\202\\\307)\331\277\321\230u\230(\220\317?\252/v>\341\364\273\277\032\210\307|\014\026\320?^\251\227@u\034\324?\336\222\344\344f\260\301\277o\'\n\264\311T\337\277\331\227\221\243H\021\346\277\332\025\213\377nf\274?\270Jk\"\243w\322?j\243%U\nr\337\277\243\024c\271K\017\342?\350n\263\330\362\263\342?S!\331\271\211S\302\277\034\333l`^\263\342\277H\241\252\360\360r\267?5\205\375d\353\250\261?\234\345\215[\2004\341?\305\332{*1u\321?P\311\001)i\010\343\277\n\245\330\311\007<\316?\354\000\2467\350\326\263\2771\374\300\247CS\335?\322[\272\304\177V\341?L\256\273\371\265\t\341?\335(X\2160\327\273?A\000\337\225\"\030\317?(\374u\027\032\350\337\277\224kn\357\212\277\332?\221G\257\010\322\203\320?=\313\310\307%\'\345\277o\006U\271\202\036\346\277\036\235\r\333\262\216\346?,e\226\361\020\251\321\277\210\266\351-\013\274\351\277\231\217Sc\'\353c\277\340\204\306\371\nj\303\277\364\026\304\254\221\340\302?E\"\245\004\001\202\342\277z\213R\360{\003\332?\177\260\311x\275E\357?\371\n\252\212\341c\313?\021\201\204\006\332n\231?\277\367\005\232\237\312\322?3B\236\333\270\314\327\277!;\217q\330g\307?\356\204\000#\002\377\267?PY\252\310\375\344X\277\225\346m\352\007n\333?d\320k\006m1\322\277\303\2623\030\255\326\333?\215\237\230Y2=\322?\306\223r\250\321#\337\277\373k* A\205\341\277\277\343u^\253\342\317\277\001\351%\371q=\343?\204\364\321\232\330\332\343?>z\336\253\332$\334\277\025x\320le9\342\277\365\370\2257\262\320\306?\325\241R_\342\t\300\277\207\236\230Drj\336?\211\024\032\354\366\000\311?T^y\'c\261\335?o\302\234\003t\'\341\277\303\240\220\360\323\202\342\277x7\367\341$\305\333\2774\221\230\222+W\241\277\270\017\313\376\243\304\311?,*b\233\3455\250\277ef\177\251\372\312\332\277x\224&\222g&\322\277<o\365\377\215\235\341\277\030Jv\000P\304\336\277bp\375\344\235\376\351\277\221\276\344\233Y\242\335?i\316\3070\230\260\242?^\375X\204\001\206\353\277\254jK?\235\331\251?\"F\342F\204\\\337?\003q\265\313(\366\337\277\200sj\376\366\004\250?\255\250k\002\375\232\305\277vM\334\207\343f\343?\262\243+\230 \254\323\277\314\032W\316\221\362\341?\177\243~E\3335\341\277\322\177\306R\202\351\272?\017\220>U\\\337\271?_\037a\005L\331\245?\"\226\327\3701\314\336\2778\261\261\014C\276\345\277\307\"\324;\376>\330\277\322\3709\317\340J\301?_=\226\361\017\332\242?m\275\210\016%\233\325?\003\263]\254\312{\331?\247\020Z\2706F\313\277A\250\331\010\"\n\333\277\337\n\217\005+\030\330\277j\004\326\275\035\243\321?\231 \262\307\"\361\325\277W\356BUS\321\312?N\251\003$b?\301?Q\227gt@\233\304\277\264\225! \235\257\323\277\361\242*\235r\037\322?\252\300=\0307\317\341?\332\324\245DIQ\310\277N\274\223\274\334u\322?\367<\014*\211b\301\277)J\252u\373`\327?\300\365\031\360\256P\362?*\340\313.L\020\332\277\276\343\033\356\254\016\311\277\332\017\206[\010!\352?y\002\262\242e\364\331?\034\3743\"\325\243\314?\024^|\273\204\326\330?\232Z\237\265\207\316\327?y\225\215\202\333#\307\277\301\317\227\372\3537\342?\205PK\255\315\360\300\277Rs\202\2055\355\271\277-4\224|\260\246\340\277\317\362IS\253v\270?\350X\241\313\374\241\257\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "?\375\022~\372\025\311\2770\"\231\233R\260\275\277\22199UY\002\331\277w\275?P\354\245\333?.\232?\334\362X\302\277v\016\265\006\356\004\324\277#^\207\254\r\273\300?W\206\273\343:B\341?\300\207\215\323\021f\333?C\373\237\272\265B\305\277^\304\212\310Y\334\225\277\217 \373lp\027\336\277\345\\\216\264\202\035\323\277ue0\023\313\361w\277\232\336`\273\312C\305?nS{!e\377\300\277~\371\346\260\355=\345\277\201\343\355\262t5\335\277\215o]\3379\000\300\277W\326\272\254 2\350\277\027c\021\007\007\022\325\277SG\276\026\n\311\324\277\233\2652\3623\213\315?PC\310i\177\303\323?+\020Pm\273\321\232?\377\224M\306X7\260?\214\375<\010\013\203\245?|\336\017#\375!\341?YK\277\201\311\354\267\277F\301\350\327\365\014\331?3=\205\247\007\322\341?\257\214_Z\341o\334\277\31424k\' \325?\230\314htU-\324\277\352\023\246\304\250\021\340\277\365\031\301\221\261\005\333?\256\216O\257G\331\303?F\317\224r\360N\333?\250jW\271B\211\323?\324KP\247\374\245\304\277\305\371\265\034j\033\327?\341\377\262i\300\030\314\277\002\266\370v\355\004\333?i\215\2740\021p\347?6\375\344\016t\273\301\277\337\201\r\017{D\252\277\2263\372,\207 \260\277\255\264\335\202\271\200\310?\227\025\005\366_\t\337?\311\037\351\235\003\343\333?\366\004Nh\001\013\311?eHC\3369z\265?l~\364\364\360\266\305\277|\002\316\310\027\226\330\277\203\351\014\004\311\222\261?t\267i\261\n\241\334?\351\262:X\324X\267\277J\231gV\020k\322\277 ym\334;F\314\277t\275\021\276\310\233\325\277gS\225\202\275\345\344?\0252\367\307\227F\323\2776K\'\014\300\026\327?\036\'/8M6\322\277\255\221b\033y\021\304\277\375\324\247\302\013\207\340\277O*\302O$V\255?{#\207\206[\317\313\277\357o\221h\272\247\321?\260z\311Vv\256\302\277\253\035\303y\207\003\330\277\233\371\306\246p\017\322?\243\270\216\305\201\323\326?\375X>\237\365\302\332?WG`HF\027\340?|\366(0\004\324\300?\326\366\264\323f6\323\277\345*\232h&W\331?8\nE\360I1\320?\356\250}\022\005\220\340?.\304\233\3048\275\272\277~\2049\350\033\370\210\277\r[\252\354\227,\333? p8`\024\301\263\277\0358 \311a\320\322?^\352{Z\330\216\302\277\r\261D\300\271\312\310\277niu\202\376d\323?\337\360;\261:\020\336\2773\371\327\235\374\025\312?\321B\302\177}%\261\277]\004\323\345\372.\337\277]x\272&.\004\322\277\366(\216\275+ \340?\327wG\314t\247\265\277\032\n\232]X*\321\277\337Z9!2\236\341?\270\213\240\221$\275\335\277E\032\205\034\241P\343?\245\237\357\352\022\366\264\277\363\030\005\361\343\317\322?\347<?9\243\216\314\277\274xY\3700\'\300?Q\243N\302\321\240\315\277O<\237i\226\314\302?\303S\371\306l\357\333?V\035\351\034l\203\334\277\222;\031\320\245\315\266\277\252\221\020\265S\215\304\277VEe\376\007\266\322\277\374\204oQV\353\326\277{\375t\350\026e\317\277\206\353U\222\363\342\306?T\355j~Ik\316\277\347`JRr\213\336\277\277x\036\267\220\353\310\277dX\331\277\305R\341?\3546L\027\036\337\341?\226\333T\237\314\265\331\2778z\317\357\243\326\340\277N\342J\tv\331\312\277%\334M\035\243\336\332?\020\322\010\206\243R\254\277\330\023\206\334d\264\273\277\\\201\374_\266%\313\277\371u\346\252\365\250\341\277\034\305\320j\316\275\326\277[\352\004g\357d\330\277%=\307\271\344\002\322\277ab^\352\220\002\277?m0%*y\305\325?J\034\371\322\362\225\304\277,)\016q\245i\311\277P\004\276\331\371N\313\277\225-?t\'\206\310?VJ\210\323\221l\320\277\003\017\035\325\331\312\324\277\037\026\3264@\017\311\277\236-\277R\336l\302\277\200\"U\022*&\312\277u[+\025\016g\325\277\371\360a6\032A\316?S\010z\371\322\234\313?\324>\250\035\337\001\326?t\001\227\255\272~\272\277\022\236fB\366{\334\277\273\362>\337A\017\341?I\216\225\325\2628\310\277\'\020\374\215Jb\226?$,\237\001f\204\326\277\261\003\200\363\021g\321\277\214\016\3641\200\333\320?\360\024$,\375\227\327\277\037\2260\220_r\301\277\\\334d\226\031\270\340\277$\246\327\270\234\375\311\277:\207>\267\"=\343?\210\364\235\235\232\024c?4c\235[3 \310\277\373\202^\300^\003\332?S\202\014\220/\307\227\277\007aw\337n\332\275\277r\031\354\023\231\315\266\277\342U\314\"\244\352\331?\033|$\207\020\'\250?\271\307\334\356\234\241\307?>\360\225\002\220\227\312?@PfY\0258\312\277\237\361\337\237p|\325\277 K\030\362U.\323?\201\337x \007\246\325\277rlbVU+\321\277\344\313\275\276i\233\305?d\346-0\356\234\340?G\207q\313\375\000\343?\246\333\207g\322!\300?U_\026\274\037o\273?\221\227d\361\233\003\334?\310\"z\223\3522\264\277\242\026.\021g:\321\277`\037\256zYB\340?\362\016\035\002/\005\320?oH!\274\326\256\310\277\032\311\321uN^\322?\367\001\322a|o\311\277S\236m*\215\233\311\277<\207sI4\330\321\2775\374\'<\300\317\276?\262\314\264)?\\\307\277vb\'\363\333\t\301\277SEf\330\366\236\261\277\276\311\347\332\260\220\246?Kw\024bK \326\277\273\013\014Nj\274\234\277\217\234\003\023o\314\314\277\323\346\036M\336?\300?7\007\230\277\316\233\343?\317&<\220\363\310\311\277\371\211\037\320~\350\231?\300\036u\264\'\271\326?\353\316=\336\310n\255\277}\010\222:\2529\341?\035\007\265\277\237\223\307\277\345\310%t\341\360\275\277P\337\031K\005p\306\277\236V\305\027\005[\247?\334\312\2061?\224\345?!\335\227\364~\204\264?\253R\r\221$H\322?[K\365%S\222\325?L;\223\3233X\320\277Y\335F\365\211@\306\277\371h=)\253>\331\277$\345\320\230\253\222\340?\325\210\316\203\327_\346?o\206\'\265\3668\315?\236Q\356\366\202q\347?W\t\367\366\221,\270\277\330h\231\345\267N\323?\023\213\021;\220j\301?o\363\252=!\367\341?\363\221/\240k\035\315?3\216\303\334H\223\266\277\376V\036\354\017\n\251?\333\034&\003\302\325\306\277\217Dn\237\211\271\302\277\217\366\304p\227z\300\277\370\370\250\005_g\277\277\246\010>\360\036X\234?\214\330\364\032W\322\311?\276\301+s\256\330\333\277\3475\203i\251\315\327?-\020\266\033\016\374\337?b\317_\3367]\300?D\231Z\246E\335\334\277,\305p\232\002}\322?\375\321]T\217^\334\277=\262\344\030\367\026\304\277\005\326&\035\337\314\311\277\202\277\034A\251\201\271?\217g\241 \004\212\240\277\210D\270P\360-\205?[\216\376e\232\262\327?&\206\021\026O1\342?/\251\356=\330\035\332?\223g\325 \n\341\322?\205\030\272p\255\205\266\277\271\246\026\245\004\345\253?\260Z\355\024*\002\311\277\346\343\216\241\343D\322\277TdC\035K\334\304\277\327\202A\025\035\232\304\277\026\315\t\2271\232\311?\212\344v\233\241\356\307\277\213\232\3108\343<\323\277;rY\230\322m\327?AH\030G\267\005\332?\t\014\227a) \274\277\320\031\005\240\335\305\327?s\311\363l\275\206\331?\267\031`\332R@\341?\267\002\205%`8\316\277\213\360 \2679|\320\277{$\207\0047\340\310\277\341\232\rd\260\370\343\277\031\001oh\245!\262\277\220\346n+\277\255\335\277[\375R\035\227\301\262\277xQ\310}\372\325\270\277-HDOM\221\314\277\246e\356\305\005+\204\277\206\265\373\317\034\344\261?\006]\201C\"\276\300?\310\3443\375\231\240\251\277V5\222;U\020\344?\254\222\016l\265\017\304\277\215Rk\275\333\233\340?\262t\315%\377R\327\277\013\2670\215\225~\315?L\177\262\373|l\330?\336\313\033o\324.\321\277\260h\336\301YO\322\277\300Ywo\210\332\311\277\227/\252*\037\035\334\277l\255\303\326[\224\327\277\231\177Z\001-\304\333?\206\021\271\225\353\373\275\277R]+\270\235l\324?\351\330\375)\230/\331?\353\317\267\247\021\373\335?\305\206\017\362\340\340\332\277\230\254@\351\312\335\314\277+Ow[\215\302\275?\\\244*w\320\014\320\277\354\022}RX\300\221?\365\301\032\344\274\361\326\277\020hu\265\3552\324\277\232\344\225\207\210N\341\277\301Y\345\317Y\373\333?yL\247\257\311Z\341?\021\225Uz\327I\277?K\336\321 \331(\326\277\375?\017\320\376t\334\277\025\364x\246S$\304\277U&2\315\032\013\320?G0.\221\032;\331?\\\3456\257{\360\322?G>\206\rMz\326?\237\363\032\223!\232\311?\326\277\014\210\255\025\314\277\203\215\263\206\001\370\323?af\223\0135\256\311\2772@OQo\231\315\277C\251\351\000\223Z\275\277\356\307@e\250\007\252\277\\\272\363\"\230\373\325?\317\330\361\2002\343\337?)x\014\317\265\033\321\277\333\252!\271\335\237\324\277\366\237=\020\371\216\245?\326\261\355\344\316\235\330?\265\302\357\333\210\377\305\277D\211\217\351A\233\300?\034k\270\257\270\357\334\277V\360UH\t\274\333?_\277m\3131\233\321\277\214\340RH\262F\304\277z\2646\007\222\370\346\277\224\017\016\350\240G\321?\214\327\233)\376\343\340?\373X\314\266\332\373\302?g\030\267\024+\245\177\277\267\031\260\026 \251\306?\035\216\326\221\321\225\320\277\300\340\004\270\340R\341?\351\034\016\005\220z\335?j\256\202\222ft\260?\322=p6q\033\335\277\322\004,4\002\325\302\277aM\207\214\266\367\252?\224\"\274\247\237\373\320??\013\334\346\272\006\316?>\230\035z\365\200\321?\375\372T\221\314\017\251?DI\2340\005R\314\277\014A\367\266d\005\316\277\264V$K\321\260\320\277\316\343\234vx$\243?y>\260\311s\305\240\277\347\351\032\017R\371\310?\204) \216\366\373\302\277_O\020\370\322l\332?\263\201oI2\'\346?A\232\277\377\323F\342?#4\236\346\0373\324\277\021\033\332\302\025\255\320?c\037\032tD\365\325\2772\336?\004\006\t\340\277j\246\367\215\336+\240\277\215\250\323(\344\347\314\2779\230\351\347\347\006\304\277i\014\017=s\307\342?\360\202[A^\021\334\277\006R\342\202A%\337?j\036&\255\241\244\340?\023\300\365|\377\244\264\277\213&\270M*\323\300\277D4\201\313\326\367\301\277\250\344\304)\336l\266\277\325f3\300\210^\330\277\332\317\243\032\370\304\307\277\263m-N\300\260\315?Q\277A\363Y8\330\277\376\364\304!;e\314\277\370\203\007\0228\212\262\277\354\362\241j\371\335\223?\346NQ\276\255\265\271?}aJ#\003\354\334\277\002\002\354\372Mw\316?T\264G\'\346\331\334?^\372t4[\007\300\277@\227\265\034p{\301?\351\306J\260n,\262\2776\010\270\256\205\366\327\277O\366=\202r[\317\277<O\3757\256\312\265?\253M%\242\013u\336\277\266\213N\032k\324\317\277\317\220\036=b\333\330\277\354>\205\016q\036\310\277\177\324O\375t\326\263?\247\257\305/\357\217\330?\253@\254\321a\266\344?\251p(\'ou\312?\367\332\342\314/K\321?\027\252>\336/\025\322\277!\321\271\362N\215\241?\206S\337\0058\242\312\277\352\307\367\375\215\001\320\277\356\334o\235x\177\320\277\251\352\331|qn\310\277\244a\307\021l\224\334\277{\342\271\307\277\371\323\277H\020\2365\330T\333?\202\364<\224\034)\342?\314\016\201\255h\307\344\277]\221\t\323\0107\264?\257s\212\223M\335\312\277\316>z\007\224R\270\277\375\210j\222\200\316\320\277f\306X\272\362\352\326\277oBZd\261\346\246?\256|{$\020#\336?H\224\202\n\245\\\323?\261a\240\224\034\377\304\277\213\337\346\002Q%\342?\304\200@ G|\270\277\204\264\014`f<\305\277\263G|\n\237\020\251?\340\"\347\250\212&\332?\304\315i\016\322\322\332?\010\003G\361*\"\326\277\257a\260w\026\323\325?\274\330\240\322>o\271?\326\007L\022O}\344?\311g/\020*!\331\277.\014\024\005\213\366\303\277}\251\233-M\004\300\277\255Gs\320\372\371\327?\360\202\320\215\342\036\344?\203\234S\031\022\215\340?\362K_\2204\026\331?\021t\260\370\352\337\314\277c;\014~+n\330\277\220\331G\256\320\202\334\277\356\217\216\033.\177\331\277\0171Aq\325\374\313?\266\024\211\265q\"w?)h\224Hb\245\267?BW\001\341\320\343\310\277\264\320S\\\236a\323?f?\033\376\317$\310\277\377\322\346\033\247D\344?\336\013r\020mI\246\277=\257\352\036\0356\245?\376}\211\364\2574\340?FY\346\322\026\224\305\277\326sT\331\356\366\322\277I\331\306^\030e\324?f\223|ip\200\320?\240\200\243s\321\024\330?[\375\370~\344_\323?8$\326\320\367R\326\277^g\274`/\307\301\277\243\rP\354u\n\324\277\224N\310\345M\355\341?\216#\211\"Q\362\320\277\373\377\233\310L\272\302?\362\202|#\023\203\245?0\313\352\301\323\232\341?y\246\264v\253=\327\277c\317\030&\007\\\337\277s{\214\270\347\032\344\277\246\"\306V\3701\325?1\003\317e\016\343\320\277\257\204\013\3550u\327\277\347\266\346\2113|\341?G;Z#\264\364\311\277Q\257\373-a\327\303?%\265\315j\241\342\307?\024\253\022\220\013\356\341?\227\315\3538\026\210\330?\313\200Di\312\227\310?\315\007\232\010~j\333\277p\364Ek\270R\311?j\200/\233@U\344?\262G\013\361b\370\321\277\027\306 ,\320\273\303\277L\214U\336\263\025\220?\207\201\337\022\236\356\336\277]\2317|\270\010\333?,#{\272\213\217\335\277CC\227\235H\335\310\277<\244\347\024\232e\324\277\243\263\326~v\307\331\277#4\'\340\0015\316\277F,(:\215Z\262\277t\336\310\030\301p\276\277SS_:*\304\327?\t[\346$\360w\320\277\372\211n\352\304t\277?1\207\346\"\0042\332\277)\225\236\031\232\316\251?\256\331\220P\266\214\332\277\016\035\267\215Q\202\332\277\017\335\"\223F\226\264\277r\244\340r\2139\332\277\252}:r\022\221\311?\337\273z\332V}\331?\347}v\230\221\376\322\277\376\211O\232\311a\333?\006w\235\242_\203\303\277\342$<03;\267\277\017!^\030\246\022\276\277c\377\220?\256B\303\277rb\201\202\3368\330?=\266{\205\273\306\324\277\252\342dI\337\002\276\277\235><[<L\306\277\365tF@\260\331\320\277\214Im\314\016i\300\277S\235\343;x\273\321\277\021?\202Y\232\220\335\277\262\3426kR\217\331?(j)%\311\252\341?\227\372^w\265\337\340?\262#\022\363\331#\335\277\364X\320N9=\205\277\253\0311\026\271\361\340?e?J{L\316\331?\375\363\330Qq\235\332?\222-\036,\340\226\322\277\342\314q\023~N\222\277\260*~\3351a\336\277\351R\022Bn\017\326?\202\234_L\241\210\322?^}\330\354[V\240\277FuO-\311\036\256?v\030\376W*\325\341?|OI7,\251\320?\245\\,(\024\266\326?0\275\254\247\360\\\323\277D\377\325e\0108\301?u\317I\355\200~\340?\311U\377\370\311\026\355\277\031\317\214\346\244\"\260\277\t\\\353\334\345\"\343?\346\302\270\344\3712\274\277\331\317\335?\364\010\336\277\215\272\325Vr\324\323\277V[|\223\327?\324?i(\202\027q\335\333\277\302\362mE\271\240\323\277\356\375\262\277D\020\342?\342\304\273e\211\016\340?\364\332o\235`O\344?\343\322d\313n9\325\277\341L\333I\264\027\324\277Vw\t\325\3364\322?Z\';\352\343\346\263\277\024\022\\\224\220\"\323\277\313\237G\375\362o\313\277\205\206PVZo\255?\341x\255>\314{\331?\0378\355S\235v\312\277\264\363Q\301\036O\270?g\200\247[\2320\310\277A\270\027\tl\323\334\277h\331\335As\026\323\277N33\026\205\205\327?\270\032[S\\\032\320?\322\347>\354I\023\250\277\310]\300\317\353\370\321\277h\0013\372?\302q\277\315\010\207h2\332\334?s9\351\223r\270\244?:\332\226\272\300\234\301\277W\257\324!\177\311\306\277@\242MH\233\\\231\277\256\327\270\255!\377\326\277\305 \032\177\311H\260\277\363\227\021\332\271\333\272\277\305}\'U\201y\320\277L;`wM\374\324\277\325\360\344x\374\232\344?\346\243F\2237\344\346\277\216}[)\267\325\210\277\366#K\346\231*\323?j\242S\335F\021\307\277\017|\373*F\214\203??\307\364\362\024\235\324\277\242-\343\232\243-\321?WS}\r\333\003\333?&\246<\233\346`\326\277\\\245\3558$\352\340?}{\017\337\016\245\311\277J\357\346\215R\225\325\277\025]\013df\340\333\277\345\332\306\006h\250\315\277\307u\337t\316:\334\277\323%\336)`\263\300?fl\001Q\025\217\302\2772\3404\212vK\311\277\234\000B\232_\036\326?|I\203f\323\261\313\277T\313P-p,\322?\206\013\033\261\203\030\342\277\371\3106 \272U\263\277B\354\216\245P\241\332?0h/\350\000\362\275?&\235j$o%\321?\005\301K0\265\021\327?\312+l\202\355b\311?\276o\002h\367\213\256\277\257$]e\t\307\335\277;*b)4u\232?]b\214O/\363\266?\300\002\207/NU\316\277u\271\244\035uK\346?\322@V\336\344\373\274?@j\232\346X\306\343\277\235!#\256\037\216\303?\236y;\217\336\304\260\277\036\332\337\3556\013\335\277\332\237Tuv\300\323\277K\321Rt&\334\340?\321\234\231F\323!\341?\'\301\315wc\323\272?\002\267\037\243\037\025\325\277J\274\264\203r_\315\277h\234\367y\371\357\342?\007C\260\344o\367\313\277\233\203\222$\300W\304\277.S\004\343\216Y\342?\206\232\230/\277\276\305\277\336\324a\316\016I\335\277k\240\365\240\344\311\334?\252\2150n\252\354\333\277\317\242\337X\204\220\321\277\310\231E\3277#\266?L\250;\251\'\212\326\277\036$L\231\355\317\336?\360\204%\235\340^\316\277H\311\273em\274\313\277\335WF\316\256\245\317\277\243\205\200)`\212\300?:\305\242\325\306\223\325?b;\327\313=\232\327\277\251\337\003\331\367\246\274\277\234\374^\335\307\243\264\277T\206\317H\215\324\340\277s\317\013N26\317?N+\271\236-\230\277\277wmWBg6\323\277\257n\212D\267\336\337?\234))7\023}\257\277\033\177D\312\350\370\312\277\316\020\236Z\033\240\270?\356\346\267rb\025\343?:S\331\023X\030\326?@h/\357%=\317?\255YW24\312\336?\321\336\277\235\325R\323?\255^\372k\3465\326?x\346\215\007S]\242?\303\334S\274\216\351\264?\322\377\300\315\271\003\205\277Y\342 i\031\345\316?s\276LY$\263\344\277c\255a\274\010#\337\277\343(,\343\215\341\322\277q\244\257\237,W\333\277)\264\031\367\302\000\320?\256\3668\031\"e\321\277`\310\036\234:\202\264\277\323\'\233\026\253v\241\2772GK\035\207\232\321\277Jx\037\034,\212\323\277&\3231C\200\220\346\277\302\033\312\317\313\234\330\277 ?jX\266\371\305?}63\300\347\273\305\277\224Drik\032\332?\036\006\275S\350j\315\277\334+G\370^\210\322\277\241\031)\021]\337\317?e\254\243\273\301;\330?\354\257\242_\274[\340?$V\312\212\340\272\312?\371\313\242 t\261\310\277\371\254\226\327\331\271\306\277\234Q|\006\311\377\326?\354\313\276\317h\267\340\277\357\255=\377\300\004\304?\016\225\002\352\274K\264?\265\256\300\344\225\201\324\277\320R\003\303J\003\353\277\222\313\277\016\021\306\325?\320\227x\307\315\346\323\277c2\2576\247\202\322\277#J\313UHw\311\277\201\026.\301R\031\260\277\010R\233\002\031\222\317\277\301Cy|\2107\310?#\273\177\323\202\241\354\277E\240>Ua\357\333?*+\226\030\212\347\260?~\365_}\320L\314\277G\343\305O\343J\341?\374\205`p\353\207\260?\315\203\240\344\302\303\300\277\376~\3441\220\217\301?\301\325\031\3711T\221?\254\235\270\0321!\332\277\241\213\357ci\375\313\277~F\014\224\211i\322\277\250\317\262$_\241\333?\220\246\001\007\177[\306\277\261\265\357\205\204\216\355\277fS\246q\360\305\332?\363v\032>\346\310\266\277\326\255\334\",\241\345\277#\231\310\0210\216\343?\247\310sIv_\266?\024\314\355TS\336\310\277\313\025:6\270\004\224?\340\221\242\263\3103\330\277r\252\262c\361\314\333\277\346\323\365\351iXd\277i\211\\m\036\256\345?\273\372\305o\003\235\312\2771WoUCX\330?\032\375\021\334\314\016\356?\356\277\206\007\2128\325?\321\027\273\244~h\331?\275\254\034u\246r\336\277Y\370>\013\033\326\313\277t\257\272\315\017\006\336?\307\253\256\270\017\322\311?\'\313\336#K/\306\277\034\332\275\360\264\032\345\277\005\247\373\353 \233\317\277\rh\371\254NV\313\277$$ bX!\317\277\216\275\306\217\032\240\345?\260\310<M_\242\314\277\024gz\222\225|\177?\377\3175\330r\275\315\277\305\321\022\244\267\321\333?h\301 \320,\357\335?\327\305\221n\026T\300?\321F\360\377\2569\322?ZG\206\301dQ\275\277\301[`\247\221\031\302\277%@\"\023$\243\302\277\"\312\372\237\'C\240?\013\267\361Q\340\010\330\277o\2737\351c\211\342?\031\006U\370\0168\353?"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "R#1u\001\372\332\277H\303*\353\375\347\227\277\024\352\217\345\225k\345\277\"\230\222\276\013\204\300\277\362B\322\205+\352\317?R\310<\rb}v\277s\325\207\027\326-\323\277`\251~\357\313\333\314?\240\301K\031\314\301\320?\252\030\234i\267\030\315?\034\307w\024\2603\306?b\031\376^\312;\255\277n+bLl\021\332?\374\242\355|\216P\324?\324\355\307\024\272+\257?y\300c\233*\"\311\277\2153\017v\270\236\266?\023Az\305\n\264\261?\331\n\020\200\304\230\345\277\264\0238\352\250\316\330?\351\034\235-\324\354\266\277\3759:l\016\303\303?mqE\017\245\001\262\277\274\202e\reU\223\277P\254\272Yd6\266?!\223Zc^\252\313?\344_\220\204\206\003k\277\252\307\001)\275\t\306?G\307\313\356\224D\274\2771\256\207\353\021\356\251\277\353{\253\037ML\305\277l\243\217\250H\334\210?\'\216\1771\364\007\222\277YZOE\317\351\313?\027\177\316\252\235*\233?\226\244D&\177C\232\277\265^\263)\240:\301?Ku*b\273\'\275\277W\356wyn\241\304\277[w{\327\252\353\307?\223TO\336\376j\255\277i\367K@\316\313\306\277\244\234\237Z\212C\303\277\204u\205\302E\373\334?\336R\301\001\355\227\302\277/\246\250\360\024\214\335\277\203\360\\3\377E\263?\220\027\330\251\335\202\345\277.05\001\004W\262\277;_\2215\3427\272\277S\355\321\332AN\340?\347#M@\326\022\321\277<5!\013\370\204\302?\236\272-\255\356u\275\277CS\201z\216\264\327\277R\373\266\256\254\375\315?!\260UP\236\006\301?Y\213-@\233\271\330\277\265\253sVL\355\314\277\205I`\350\224\267\263?\013\222\2467\177%\322?J=\260\346\216f\302?\202t\274\3739\213\313?\353v\014\t\240\036\331\277\214\342\376\230\304\201\206\277f\234\241\331\350w\223?\271l\224\313\033q\306?\017\002\"n,R\313\277\336\307\212\354\370\211\312?\206\311\357\206}\372\242\277\315\223o\3525/\216\277\275\373\262*\312\314\262?\2709\303Ir?a?\221\260\233o\306(\272\277\251\270\rM}K\322?\243\206zC\025\211\324\277\276\213j\365~\240\253?\014\037\225\002\\\331\330?_\nk\023e\230\240\277\'g\263q\222[\316?\214I \257\333\202\300\277\017\364}|\177O\324?T\2711\261l\266\305\277+\";1\242\362\323\277\342\331\2725\000y\234?%\235{\260q?\326?\323\370\006x\366\350\341\277\363\2323\250oE\332?*\325C\363\332\273\226\277}l\233\031\001\223\320?\264\322\244$5/\321\277\002b\376\372{K\262?\031\204\016H6\351\324?\372\n>\027\227B\300?$\273\214\235\031\365\244?\322\251\001\013b\257\312?\"\026T\254\017<\237\277\270X\352\373\261\203\325\277I\217\315\025]5\325\277\206\035`\217\273\343\324?q\305l~i\321\313?\224\345\220\377H\214\324\277zT\227\264\340E\226\277\215Q\021\254\354\236\321\2777\3215\370s\343\326?\\\222J\267\270f\227?n\275\016\024\026p\270?\267x\211\231$\014\307\277/gq\2766d\341?\363)Jk\331J\332\277\356\362\210\272\344\201\245\277\240\211\370:\014\265\340\277\346\361\324\256\021\225\325?\225\314\315\370X\235\313?\204\335\235\026r\340\255\277\016@|\304\270L\324\277\266\213\316\364\035Z\261\277bH@\324[\271\327\277\337\260\364\270\235F\254?\302\227vA&o\276?q\020\373\237U\367\316?\222I3\377\305\226\311\277\r+\000\204\377\301\226?:\033\205\325o\003\231?)o\367\371\243\277\335\277q/\367\360\313l\234?@Q\271\276\347\270\311?\242\237\"k\315\016\247?\257s\311\023\302\247\246?\336\254T.ax\321\277\336u\313\255\207Q\301\277\035~\202\266\023\326\333?@\335?\263\236,\343\277\016Md\010\035!\276\277)x\242\004x&\305?\027\220\232\031H\314\316?\316@\320\017\236O\322?\3739\311\232^N\307\277\246cm[\267\255\254\277Hc\304\226\204\032\330?\324\322\207e\201jl\277\265i,V\031\311\313?m\223\216\276\347\305\343\277\025\355\212\371\246\247\262?\373\344\204\3052\346\324\277\363~\344\350\230u\276?ty\226\027\334\373\312?8\255\320\003D\273\313?!\373\003\307\342\313\224\277\220\014\34045\206\242\277X\233\025\211\027\022\334?\3438\242\213.\373\307?B\004 \016|0\335?\355\337\274hp\007\305\277;?\302\"/5\277?\0339\335\221\200\354\300\277\327\201\177\256\201N\241\277\335I\321z\225\031\316?\256\376\357_\022\212\303\277\255D\025Lc\252\276\277>\313\016\345}\250\312?&f?\234US\271\277n8\363\273 \035\332?\233J\245 I4\301?\335\245\216!y\224\335?#-&8\257d\307\277\307*\374?\354\262\323\277x\026l&\356\204\302\277\311\033V\316=\021\325?B\377\207\025f#\263\277\211\177\217\240*f\330\277\357[\316\240\217\021\301\277\251k%\355\001\266\325\277\363-*\377\000V\304\2777.\217\304\\\027\316\277\257kWj\332\256\220\277,\313\336M\233v\274?\365\235\354_de\261\277\326\222\261\220\241.\313?k]\023\205V/\341?\004\355\270l_%\321?:\001^\227d\227\222?\020rrs\206\'\340\277B\237\376\324E0\317\277\322\007\250\221\356\330\321?\206\377\334\327\243\200\250\277\321q\014\357\335\201\300?\353z\227\035\204\270\315\277\267\224%\250@\322\333\277\006\347?\331\256w\330?\351\265\332\361\364\263\305\277o\245\3453\026e\337\2778\364\211\350\277,\314?\221qEy\267\"\306?\215a\3259\306E\337?&\007\327e\203\330s?\255k@\361/\244\315\277%\327\205\301S\315\255?\243)U\307\310I\311?\334\013\342\007NC\231?>O\210<JH\315?\r\226\276\332n\334\223\277\274I\203h\n\371\334\277\314\366W\242\277\212\331\277>\210\017a\261:\312\277\241cf\360\013\373\325?\241N8\243\'\262\350\277\226\"\227\372Q\202\307?\217\'\363)\242g\333\277\262}#+t\204\306?\377\212\305\212\247\027\307\277f\371p[;}\334\277\353\3636a/\332\301?Q\2541\230\250$\256\277\353b\351\017\244\271\263\277S\037\016\205A\272\266\277L\254\033\322X;\312?3\306l\304\367\215\324?\351\327\361\361\023\212\223?s\373R\213\352\264\302?\235\265\306\013\246L\277?l\336R\275-z\346\277O\264c\230\352\003\315?7\334\216\330N\277\317?K\216\226n\250\264\323?\016\326\353E\360\214\333\277\234DUD\203\010\324\277\370\033?\016l\270\333?\003\220TD)\035\233?\246\346I\231\252\257\316?Iy\032r<&\326\277\315\250\373\005WP\335\277\035\t\375\020\355J\305?\300\312\322\220\0004\322?c`_\253>\332\221\277!\301\201\355!z\323\277\027\231q\364\342\256\241?\032\2630\372\233r\343?\365.fv\247\032\300\277>\274\226_ft\321\277F4\244\333\272K\255\277=\367|\013\253\200\324\277\210d\323\301\227\226\306\277e\204\261\210{F\265?VKE%\240\367\274\277\367\233\201K\362o\241?\363\004\253\007\2779\243\277\206\000\374\355\332\304\300?d/%M`\252\204?\302+XY\371U\325\277m\226\275\326\303\277\306?J\277TXw\266\324?\222\262NV\310\337\327\277\206%\245\375X\301\300\277:*%\276\272\014\272\2778\353\211\331\272\256\311\277\336\371\221j\256\277\270\277r\340Pz\255G\326?I\272P\273\326\002\301\277+\214\330\350=\200\307\277\325\2145I\302T\251\277 \202\033\230s\211\334\277\267\363\004\"1@\331\277\247\243(\267\336\035\336?\033\341h\nk\372\274?DB\254\237(\261\342\277\271\n\243\004\007>\266?\3445\010\2016\352\326?\t_L\002y\206\303\277\034{cNo\n\332\277\246*\'\224+3\310?\213\271\301\2228\244\315?\334\314G\252<\307\313?\201\244\023\327h\346\264?\352~\376b\250\340\321?\301\330\343\333\302\241\332\277\266\323\031-z\314\300?\271\276\230\245\341$\335?\250\314J\325t\223\336?y\333\212I\231M\262\277y\234\370\223\027\242\265\277\255\343\301\365\240\241\323?\340\332\331\334\307B\251?\201w2\227\373>\236\277-|\036Y\3746\324\277u!X\360\000\203\324\277\2422\333rb\212\303\277\363\347\217 v\010\265?q-I\032\"\024\272\277^\014\304\235\023\353\310\277s&\312\365\312\214\323\277\034\314\327\205\205\323\274\277\020\376\252\272\030c\224\277\265\274\204>\252\374\253\277;\242\317\200\3166\322\277\030\212e\363\235\227\254\277G\232eQp\021\277\277)\371O\333>#\320\277\213\307\206\3427D\266?\333\303\351_\224id\277\000b\257\306\321\274\330\277x\364\177{Y\265\301\277\320\020\236e\360\367\306\277\365$]\340\227\320\330\277?a\354{\262\326\303?\032mL\341\005\231\300\277\3540\024\027\337\021\250?\237\370\251\310\320\365\275\277%c\025\313\260\265\302?X8\377\350\232r\300?U\3542\034\307\000\335?\240;K\347\017\304\302?\374~\223\236K\004\313?P\3074\275\220\002\265?\202\027\007X\361>\316?\036\207\271\013:\250\202\277d\210\304\376n\000\322?n\246\000\313#t\263\277V\326\000\271\213\241\330?\310+_\021\374S\320?NP\222\251K\215\264\277\002\035\2577\367\360\300?J\241\263\016\377\017\321\277(7\013\247\226h\224\277\314\213\256\220s\270\300?*\247\206\374\324G\302\277L\342\313\224\220\\\326\277\233m\223@y\255\304?\216\025\377d\320\200\200?I\376\023\"\275\303\317\277&\t\n\356\006\t\346?W\241#\233\2238`\277\314x\000\205Z;\333?\361\256\353\0246c\334?6\326\235\322\006\221\202?\322\373\037\037\036=\336\277I\311kpZx\306?\266\333\334\340+\265\346\277\\\032\307@>C\343\277\006\t\266\323\265s\320?h\"\201\370\217\037\261?D\252\245\327\315\251\320?\200\323E\376{\001\300?\226\237 d\257\257\327?\032\025\316S\210\230\262\2778\313\352\203[\355\315\277\237\247\204\031\313\264\276\277\256\365\023\025\014\354\345\277\032\3425l\210+\304?\262\347\267\022\036\327\313?\206\014\222b\017\336\313\277>l\2779\360\201\314\277\020\255\357\277\210\355\321?\350\316\342\302\216$\322?\235j\242\317\351$\266\277\260\260\256*\272\207\221?KT\363\000@O\273\277AQg\264L\306\247\277|\373\324\001\205\350\320?\242H\301Y\243\326\340\277W\330s\317\027\242\205?\244\033\343M\320\021\307?Aq\206\272\322P\256?S\3011L\201\240\312?\205\211\253\223\204\205\315\277\253\232$\252e\215\306\277\006\352\356\353v=\332\277\257\273\352\360\323\345\243\277\017\326\212\224\267\001\201\277\025g2\013\374Z\271\277v1\350j\201\364\335\277\344\300\233Mi\326\312?Ct\372G\ti\304?\336\273\034\016pB\270?\325}S\022oS\304\277\311\325\017\212\271c\331\277\030\"\233\2344>\275?\247*O\242pz\252\277\340zz\316v,\311?\370zzD\001\233\266\277#\265\214\\\305\345\264?\223!2\261\374\016R\277w\327\370\255\331\005\332\277(\367\031%\257\027\247?\277\274;\374\320\272n\277\017\224v\264@\336Z?b\333\207[\0176\241?n\230G&\324\231\262?\33307\3137\363\267?\356\003\264\337(B\261?h)[\013\350u\316?n\024\313L\305\301\210\277\3707\272\025kE\335\277d2\277\302\242\360\340?\332\317lE\264s\304?i\321?\250\0045\305?\030\341\007\262\004A\276?\023,wN\372\n\323?\252\302\306\323\326\243\326\277)s\035\260gk\325\277\"\321a\203\2756\275\277\317\216\331\031\235\376\223?(\210\372zl\030\337\277_\256 H\325\023\274?\303!gP_\321\320\277df\345\206\227m\324?\036\263\252\251\356\002\322\277E\370\272\313Rw\234?\016\364\312q<\004\330?x\000\235\003\313\340\335\277\261UB\366\362(\256?\022\037\027Q<\203\320\277\361\335\201\250(\233\243?\037k\201\274\237\236\267?\336\325=\002\017*\301?T\027\272H?\210\324\277\2546\331\226\212\277\270?\325\356\357n\023\343\320\277\234\026\312\254\010#\317?\240\266\263\363\341\314\274\277\014\250\034\231\017\273\306\277\317:P2\376*\335\277\315\204\376x\307?\253?\n[\314~\252\254\274?\'\353\006Y=\237\313?\225\333c$\017\355\240\277w\3605\310\335\'\346?GuL\264\301u\304?\032\030\302VK\021\301\277+\312J\205\024\360\303?\300\361-s\225\307\245\277V;\\\023\034\366\272\277\321n\202\343\234L\322?\225\316,h\322*\340\277\253\032\305s0h\313\277\256E\221\356-\217\303\277\223\210\351\226\"\373q\277J\323p\307;\312\304\277\2477i\032+\361\326\277\326\017\037\034}\242\261?\234 25\353\274\306\277\302\377\315\036\370\245\247?\215#)\206\006n\313?\346\027\302\275u\302\262?\302\234k\371&\333\242\277\324\3756;\257~\311\277i\221\325\204Q,\325?\310]\336M>\341\331\277\013O\315\314\234D\261\277\222\300\247E\217\216\256\277\205\225\3208\351\206\267\277\267i\276\234o\304\344\277$\000\3127a\035\321\277\224?\375WP\364\257?W$C\325\243\314\316\277\t\010\n32\376\321?\223\2562\305\362Z\277\277h\262X\350\022\316\270?\313hs\240\362\036\322\277\2369{\352\035\274\260?G\022;\333\253\257\252\277O+\231)\365v\267\277\202\374w\212>k\241?\337\277G\2332p\327?\356\271Oz+\235\327\277\201n\004\266\023\224\272?\276a\233\304>\336\324?\201\252\253BK\270\331\277Q\337Ir\204\262\303?\375\276=\345\026?\320?\345\250\027gG\337\232?\327\365\247K\362\213\307\277\350Q\352\243Z\305\252?\234(\347\001\302\261\300?\014\017\305\212b\354\251?\2708T\306}\215\337?\355\373\324\017\207\217\300\277\311u!\371\345\346\321\277i0\202RX8\303?\311\0033-\316\\\256\277\351\333\273Fom\203\277j\300v\307\026\245\305?H-W\275\014\315\303\277\357\270\201\254\"\334\340\277_n&\204\243\247\227?;P\300\027\367\237\301\277\236\033v\023V\262\322?\232\"c\265\375\256\317\277+\240\371\320*\260\247\277a\272\211\252\020Q\334\277\344\365\356WK\036\337?x\351sA\277\261\324?\372\345\006c\341F\223\277*z-Ay\266\320?\203A\327\356\213\'\261?;\251\366\341\223\'\252\277^\323\325x\220\245\213\277|\030w\037\301\367\267\277U(\020e\232c\324?)\014\207h\223\335\344?X\200c\215hr\276\277I\253Go2\214\330\277v\262D\216\013\027\307?\204\243\270\353r\376\324?u\351\3254u\\\231\277B\331\01389n\252\277^\374\351\344\204*\313?\226C6\255\006T\316\277g{m`\036\014\310?t\271\340\311\262o\314\277\225\3409\243\332\377\327?\373\332\236\321n\024\240?\202\300\2601\316\366\246\277\270\237P!|\020\302\277\205\007\201l\370\253\270?Oul1\354\340\242\277\373\276\235J\335C\336\277\366h\377\361\355\222\331\277*\215QH\327F\275\277\237|e\316\315l\261\277\3357]y]\305\267\277\002\313v\330\315_\332\277\003V\270\215\026\265\310?\362\354\320\373\3523\216\277\217!\217T\3122\322?\2237\353j \305\306?\355\254\223cm\300\315\277\032FX\377\214s\321\2776wi=\276\343\307?bzw\221\354\312\277?\243\013\312\376r\204\252?Up~\204b7\275\277\010L\240U\355}\264?0\256Y\220p\333\305\277n\037%\036L\341\354?\222\236t\013\272Y\324\277\'j\022\013\323J\322? Gu\242aA\335\277\234\242\255\\)\315\221?GK\257!\367r\260\277G\036]v\261\232\242\277\277k4\'\004\253\257?.\230\260\254\222\354\303?\361\211\304\324X\'\311?\373w\034q\325\346\226?W\316\304\\\007g\321?t\031\035^\215\236\261?t\231\342\024\312\206\304\277\365\367\352\032\2752\273?\201#e\300\326;\331?\010G\026\335|\273\275\277\264\355\345\375`\265\332\277\330\234sS(\271\273?\202[\333I\272_\310\277\035\3422\3723T\317?\222\037(\361<\255\272?\366\260\273ED\265\302\277^\020%\334\311W\322?38}3bi\321\277\313\035\322\305\326\273\245\277\2571\365\2575\357\332\277\263\346\231\302\304Y\250?-p1\014\352\220\313?N\014\221\213\021N\270\277\340\263\312\'\025\273\266\277\302W\212\251\253\255\327?\013\030-\364\037\204\323\277/j\374\021\333\251\242?P\023\255\363\304\354\313?\220\353x\272\200\031\331\277>\240x\222\257\017\322\277b~\253\315)\003\332?\205\031\207k\004>\313?>\256\206L\030-\313?\313\272\252B\030\311\270\277\3433\273f\005\261\320\277$c\315\276e+\336\2775\362\215\331\242\253\177\2772\362\365\253MF\271?s\002\025\260n\361\322\277\267U\\\216\307\033\332?\362\335w\227\224L\277?\356\204\351)=\275\243?\320\242\264\302\267=\265\277\231\250\275\235M\022\266\277-\032\320\342\372b\337\277@~\216\r\231l\322\277l\274`F\016\364\265?#7\234uV\315\337\277+\243\002\020\374}\263?\202!\034\r\225\002\255?r\376e\314cS\324\277\342\307\177\206\266X\323\277\231\001\006\3332n\271?\327*n/B\022\272\277\371\233\331\313e\"\304?\310\341\263\210Z\213\311?\021f\242\237\331A\321?\251\204\255\332VW\264\277H.u*\330\326\272?*\324\014\350!1\274?\236\260\023\256V6\201?\362\300A4\004\027\311?vJ\236?5x\301?\030\240 7uu\275?\037\000=\253\365\376\314?=\214\023D\320\t\353?\332\365\327\341\215\347\273\277\255!\2111\217\277\265?\000\372\204-D\245\251\277bW3Yd#\321?\247\374X\201\200\026\322?\016\'/l\300\243\311\277$\210\251\251O\240\277?M\210v\313\222\226\312?RF\022C\357\323\303?\246\374\2560\307\205\226\277\243\300D@]\202\301?\275\014E\330\267\247\304?\303dB\030Pqr\277M@\327t\354\257\312\277\277\313sj\326b\313?#\264\332\003mg\326\277\034]\367\301\317\003\274?\242\313\361\226t\266\300?O\253\310\271\200\000\254?\260\356\236Gl\216\306?K\316\237X<-\332?\026\223\016\247\360^\324\277\036\344\307N\255o\264?\370\343P\n3\243\247\277)\265\226\246\301\307\306?Z\013\335\355\005a\333\277\277\253-\006\347\335\276\277_\356{-\332\036\267\277\361RX%\307J\300\277\316\026>\003~\020\316?\232}6\025\375L\257\277y3T\255\310\246\333?\220\216\264n]\314\251\277\332\371\321\301\314\003\306?6\324g\336\247\256\240\277\332zaPp\004\263?&+Y5k\247\251\277x>`F\230O\235?\373\352\013\374\r\344\302?\325\361S\261\241\211\303\2776\374\315=\220\315\337?\363#(E^\307\271?\376S\355\025\263\321\267\277\234\273j_6\275\214?H5)\224E\002\275?p\347GD\357)\267\277~\216\215e\376\200\321?\276\354\354\257\241v\267?8}\257\347\321m\327\277\214\2214\017x\300\320?a}!aA`\277\277\361\214\304\005*\227\334?\353\251\371\232Q\345\311\277\335\227W\005\266B\325\277\232\254\347\354o\210\275?\212C,\231\263\337\327\277\345Mp\004\024{\300\277d\327C\356q\222\314?\023\020\214HB[\317\277{\377@\375a\024\335\277\342\237/\237\337\220\270?\233\215\032\357\230\260\340\277\324:U\303\312\253\321?\004\250\024\354\343\340\302?\367\014\372\211e\035\343\277\003\355\235\242\256\370\234?\266k\005d\013\312\261\277\032\002\370\273\226#\331\277\035\317\036\332\034\205\260\277\354\334\203wt\222\301\2777$\202L\252f\353?8\272*\245\227\251\334\277\337\217\202\342<\344\335\277\036\310\335K\037\335\334\277\236\252\007\251\026\210\266?\346asx\222>\252?\216\0052\t\357)\326?\034\200\010\010\231\211\257?\327\271Z\255\366{\325?M\021Z\027/\214\361?\t\326\340`/\362\277\277\005\333c\250\007\310\335\277\027W\261\306\237i\264?Q/\314\355Z$\220?\215\213z\r\321\353\311?pvo\'\272\222\333\277\000\326~\300J\375\316?\0062\244.N\212\361?}\026s\264)\325\303\277\3524\003\312\352*\306?\245\242&.\351\341\305\277\t\310\345\303\367O\340?\302uC\366i2\307?\350\247,\315f\255\340?;\256\305^\n\227\322?\267\313\200\025\250]\260?+W\213\"u#\222?v\027{\326\352>\267?\362\354\264Z\367\325\246\277kG\025\234\347\020\316\277P\313\340\020\020t\300\2774\355\216\330\351Q\355?\355_mx\006\332\312? \364J\215Iv\226\277h\200\352\010\357\361\323?\272\206\023!+\315z\277>%\340u-\030\302?\252;\325$\253\263\332\277\260V\207\210\253\217\300\277\306j\036C\340j\204?\325\243X\244=\367\302\277Z\200KQ\272\267\320\277s>U7N\241\324\277M@\316c\243\332\331\277T\307* \222\212\275\277\243\267\226\254\313[\336?:(\316\363\244A\257\277]\334_\220\357\250\326??\204\333\300\204\374\210\277\001P\300\370S\244\336?Y\364\256\376q\272\265\2772\225B+\241\316\307?1\321t\342\177\367\310\277\215\251_\310\300\205\325?\026k}\223\366\301\275\277l\343\034\335\346\320\231?\251\t\211\357mX\336\277\323c\375H\336\237\350\277\356X\377\226)\342\327\277\235M\256\367\031\002\327?\357bqG\372\207\327?\373^\t\340\276\220\322?[E\236\344\236n\301?^\364\366\003\227/\341?\020\244\272\340Y\026\270\277?\357f\027:\237\320?a\303\355]X\347\270\277i\341\026t\364\312\226\277\253\344\355F>\323\275\277\257N\204\240Y\321\324\277m\220\302\340\350\007\301\277Xt-<\263\350x?"
      }
    }
  }
}
node {
  name: "normalize_element/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "e\350=T\236k\307\277\214rr\0258.\274\277\010\033\341\332\034\316p?PW\211\331~!\322\277TA\270\276\350F\255?\270\343\353a\371\006\216?\345\014\255+Am\317?\205\233{:U\321\320\2774\2110\nL\321\325\277\374\236\257I\301\036\324?\006+\333;\313\227q\277\377\274\006\337]\253\305\277b\260\243^\304\030g?p\305J\231A\024\261\277\274\241\036\243\273\277\267?Bh\227\336\325\212\303?\251[\3032\234\025\341\277!\222\266v\361W\261? Z\224B\3606\322?\322\353\242su\333\322\277\221\027\304\310]\337\262\277\366\277\345\224!B\277?b\022\347CN\345\302?hd\332\226\026\342\322\277Z(4\202\024\326\321?o\375\365\204\025\037\272?\236!X7\030H\270?X\003%V\350\314\322\277:\333#o\014d\261\277\201\n=\033\033\002\320\277\300\2052?\310\356\334\277A\367m\315L;\273\277\0024\302\\\362=\271\277\242\337pxj*\306?\"\336\250\0349\330\316\277/P\222\352\326_\223\277\233|\361^\216\034m\277VP\366\211,\260\325\277lYo\260\031g\311?\0146 \263\223E\326?\236$\025\327\361|\274?\233=2\304\311\236\227?T2\374\275\274[\320\277\310F\022u\252=\316?\360\307\017\236\370\235\244?\275\240o\370\344}\305?F\377\220\204Ky\246\277\022\010V7\032x\317?b\n\272\366\251\337\261\277\253\343\225\223\006\003\254?\236\240\220\355)t\302?\274r\321.\"y\257?j\320\374(\212?\261?\306\027\241\032\370\274\234\277f\231\247\375\306\313\250?\331\255Hos\226\271\277K\023\237h\257\204\325?x\031\001\355\240\363\316\277\266\300\340\222\333\231\232?\323\024U\251\346u\314?a\344\336h\355n\302\277\230k\243w\357\254\301?h\365\224\300\002L\303?R\023\316n\2635\321\277<\240:\366*6\310\277V\276\270\250Y=\304?NN\204\273\rA\316?\321\271\351\202\340d\246?<\354\272\201\310\023\241?\'b\032e\351h\272?-^ \254\344;\264\277;\342>b\307\'\325\277\272Y\324\252\033\205\257\277\345Y\357x\327\241\326\277R\244U\305*\366\315\277\334\371\350\307\202\350\321?QZ\231\316\332\365\236\277\271\2471\221\211E\206?\016\235\344\367*4\314?Zq;\277\245;\315\277\300D\255IS\016\267?\'1\3071z\245\310?dI\177\\n\272\213?\005FI\304\333\303\246?G\276\244\217\355\234\212\277\303\364\241`\256M\305?IN\327o\275\232\336?)\214\031\021\243\271\336\277\353,-q%\335\276\277\307W\276\000\240O\271?X1\357g\027.\311?\002\371\300F\204\'\304\277\370:\200\255\2478\245\2771\222=\2550\300\325\277\334\014X\247\327\t\300\277{S\376\033\331\177\322?\242q\342&\372\310\310\277\002\304\273\340\033\252\265?\367\244\\\270\246\216\304\277N\210Y\20691\323?\205=\216\372\361\000\314\277\'\273\225T\275Z\300?r\\\361@w\350\322?\035S~\363)c\320\277\2733p\240\177\005\255?(\021\232\263\211G\271?\201\021\245\256Tf\274\277n\017\245\253H\233\221?\370\340e9\3704\307\277\356\331\251\\hJ\304\277\272 \302oc\014\262\277\276\340\236\3717\251\305\277\206\353J\003,\326\267?\306\364C\202j\240\303?\261\225&L\227\313\276\277$r<\3511/\303?b\214\"M^\305\302\277\025\211S\251\357\225\325\277\376\375!\247\216\006v?\206g}\003I\370\310?\361\351>d\222$\264?9\251\340\356\305\327\302\277\303\324bB\202\377\326?\330\206>2\204\205\260\277\332\314\213Y\374\341\306\277\264\240]z%\271\310\277bQ\246[\364e\305?\0274hf\226\337\245\277\260-(\310\201\217\270\277\361\340H\367\243z\235?=\014\252\nbR\325?;\360\306\334\313\\\316?:\370\2311\303\r\336?\031\257V\313\024N\226\277\353\226\302}^\013\311\277W\024\336\260\233!\267?\304D\216_\2114\302?\223\016T\361m~\227?\365\374\300zv\260\304?\177,U\360\016\264\245\277*U/\374\351\314\243\277\363\000\224\010\240\301\231?\312\031\240\227\002\253\325?==g\030\235\250\266\277Y\222\230M\222\355\302?\345V3_\341)\270\277\241\340j\024\202\332\263\277\315\217X\243\266\251\306\277/a\340\014O\031\277?2m\032\302\235p\271\277N.*\250\260Q\226\277;\322\356\347\244\006\273\277\231\315\024<\314\203\332\277\034xn\3522\205\246\277\213\236c7\177_\310\2778\353\271\267\241\321\267\277\337B\201\336 \215\300\277\234_\372H\242+\312?\303\217j\272\333\355\261\277x\337\260\024?\253\330\277%\314\377\206u\372\311?U\252iU\371 \216\277\325?G\246\354\255\264\277+\200M\021\255\350\313?\244]\241y\256\225g\277\274\325\330J\033\341\341\277\200\332\345+/\227\306?\033+\035%uGV?\032&\020 \353K\272?\203\261J\277d_\312?\235\323\3124\234\355\314\277\'FlH\263\032\206\277\203OiS\316T\304?\014\220\254\350\255R\326\277=k\025\350\335\372\332\277\'f\312I\036f\251?\007\301\261\367,\376\320?\363\317\nyy\035\276?j\235\314\211\260?\274?\231\372S\360\221\t\244?\3240[s\261\225\307\277a\256\225\314\246\361\304?\347{}W\200-\315\277\214\330\225\013a,\260?w\375\tr|\232\321?OA\235\304\033\003\236?u\227\032\326\344\325\267?p\250\201$]r\277?\3742l.\317}\307\2773\333\032\267C\276\305?<\363\231e\t\220\271?\346\272\235I\334\365\335?MLO\354\267\026\324\277\000<\013\322\006]\302?\022\306W\241^\252\244\277\260\346\020r\361\370\320?\2544\217\225y$\326\277\036L%P4\275\315?m\302}\212\'%\325?\2347\343\"\311q\325\277\357\256\213\365\276Q\323?\375\372R\267\0202\232\277w+\030+\351\376\306\277\263d\002\211K\367\253\277#\235\300\004\002\222\243?\331\rv\035\246\'\251?P\365[\277:[\322?\373\316\337U\315U\305?\356g\273\nqM\321?\317\334\307>\344\001\201\277\002\276\004\210M\235e\277W\211\003\010\343:\311\277\010\215\231\313\037\356\276?+,\227\322\343U\251?\245\324)\000\276\023\311\277\302\267\214\263\217\261\314?\257I\313\007=.\264\277y\027\370\263,R\325?\273@\274\014>\371\276?\241b\277\325\323\026\261?\357X\377y\036c\314\277e\324\006\346\251\331\311?\325\201\263`\357;\323?\225\231,\307\3538\321?f|\333u\371\207\306? \n\311\303QC\310\277\016}\324\334\033\252\350?\274W\310\265\202\251\320?\363.qmO\210\313?k{|h\003.\267?\220\325\014\351L\342\320\277\245\346\003\236R1\315?\210m7\243x\376\263?\247\344\231\223\2417\255?\250\322\263\312I\377\265\277\2372b\361\342[\250?\301\335K\nS\217\274?\033\344\311w\264g\303\277e\355\354V\201p\210?\326Uz\302\373\000\261?\321\206O\006\\\251\322?[P^\300\307\202\274?\341]Y\371N\264\313\277\000\334r\364\335s\310\2770<-G\365\007\303\277N\373\347\312\225\343\323\277\243/L;_\024\322?i6?j\n\031\263\277D\360\214\325A\225\237\277:\003\'{\210\206\310\277\3569k\332?+\270?\266\025\022NR\337\306?\021\366\325F\3110\276?\"{L\360\277M\304?:\224\302\021\020\274\246\277$b\367\366\261\340\307?\033\322\330C\244C\325\277\275_`2\263T\305?\234\343d\307\372[\276\277{e\244V\363\231\306\277\003\270\374\024\204J\263?8\330\222\252l\302\310\277\307\225\336\332\024\220\316\277\321\303\345B\245\270\324?`\327\214\3508\210\273?\266\214\334&M\035\320?U\017\230\310\307 \306\277\315\033_\300bb\315?\016a#5\217\177\240?\341\246pq\322\364\305\277\332\3029po\206\274? `MA\362\026\322?K\rZ\324TZ\247\2774\227\331\177\247\237\262?\300\231\n \n\035\310\277\272:I\332p\222\271\277\313\0255b\364\346\300\277\303!\342m\224\254\332\277\254\234W\006\231P\272?\346\003\320\006\310<\317\277\245-\004@>\025\236\277\014\362\341\344T\210\250?Z\350\201\';\307\303\277\200r)#\336\004\300\277\315\353\362n\234\353\324\277\330d\262hh\345\317?\214\300\346\277]p\226\2772\244a\344d\240\234?\033\367\246\372\027`\215\277\242%\036-\337?\337\27799\310\006\362\n\324\277\326\004\265*\221]\301\277F\010\241,\256O\322?l\002\367\034\375\001\253?\274\325>*SB\327?\200bg\322\016\227\233\277\326\341\\\2538\375\245\277\326\252\315o\206\341\247\277\017:\302\nV\303\313\277\317\364\314\322\300\017\254?\241\016\257\224\304\261\320?\200\234>\220\004\323\234\277j,\355u\232\357\317\277\370\230\333\341\200b\313\277\300L\3625\222\\\270\277\002t=vU\017\311?\357x\232\020\232\273\264\277E\311\241Q\034\214\313?\255yg\356~\273\270\277o\036\361(\371;\245?\301\267\335\233k-\313\277\004\213\273\037\000\341\327?x\223_\237\372\035\306?\252\274\352\3232\004\321?\277\321\016\036\340P\322?\241\023\031\222\033\036\325\277\266.\273\330\216p\263\277\325\210\267i\207E\261\277\300\263c\005 \234\254\277\265~\305`\025Z\323?;\303\203?\342r\321\277j\357\312\016\031;\304?[GqB\246E\341?<\313&\201\335\002\273\277\322^-<\321\036\320\277\325z\020[p\332\231\277(\301\3217\311\034\316\277\367\366\322\367)R\306\277$\305z\037\030\250\322\277\031\367\240\324E\247\214?\010\323\026\354\363#\307?\036\026_\200\362w\320?\366\021\207\0248\265\252?\352\030@}2\271\240?\235\265i\362G=\243?{wh\354V\376\330?\222\351\376\351\247\221\322?\035P\340U\212\031\321\277\331\036\244\335\267\276\265\277g{\215ab\206\316?\347\204\312\362\275\215\262\277;\310U\374Ed\247?\001\022\260\022\363n\241?A\335\256\340\315\005\233?\007\354gL\005\320\261\277\tbQ5\3343\256\277\301\354\224\333b\370x\277\0311\177[\222\306\343?\n\322\343\373\025\365\243?\277\024+\221\227\202\242\277^N\212\036\325\313\246\277\027\204\366\022\270\214e\277\236\330\245\333\306B\305\277\300L)W\021\214\314\277E\\J@\017\037\241\277\213\272\373su\006\271?\2675\331\"\201a\301?3l\252ltK\273\277\257[\246\314\\7\306?\036$@[\303E\217\277th\234\007\3547\327?\312:\"\264/\301\304\277wu\347$>M\301\277T\037\331\030\256\340\313\277F\332E\347\024G\316\277(\231\3739\005\234\301?\025\016\021\204PT\272?;\320\227\020k\256\341?}\331\301\360\301i\226?tn\362\247\331U\251\277zi\271\302\3052\313\277\002\3532\312\350\\\254\277\t\355\375\004\316\307\316?>\t \227\\\210\310?O\212\225q\207O\214>\251 \2469\276\304\266?\232\313\334\240\376f\322?\t\254\2222\024\243\260\277\305\203E\264l\322\252\277\321=(_\\\205\304\277\305R\260\020\006\207\305?\332\252\260\033\027J\324?J\353\230\302\301\000\215\277\206\350:\317W>\311\277\376vNjxM\301\277\335=t\007Y\355\324?m\177\263Q\211\211\276?+\225\200\275\001\336\211?\022\245-\356;\177\274\277\027\263Kk\353\321\314?\320\r\334\017i\373\340\2778\363\313q\214\025\266\277\321\205\273\227N\016\234?\335\030F.\227\232\300?\372\014\341\201p\323\301?H\251\240\256iY\312?7\352\236;=\373\312?\330\226\321\234&\036\260?u\372\372\241\013!\320\277q\367\241\306\002\020\306\277\272w\367D\205\373\236\277\376\363\240\3277\306\300\277\352\020t\263\004\275\273\277\366\275\373\357\345\232\306\277\250\325S\031A\372\334\277\222\233D\375\264K\316\277\004\240j\234\264S\342?EO1\346DZ\331?a\260i\337\007\t\325?\202*\363\310\332F\320\277L\272\277\212B\211\274\277>\321*\353|\372\321?9A\264\025\357\321\206?)\\\202\215\031\203\302\277\362\207\025RT\301\327?\347\035\327gS{\302\277\201~tC\247\262\314? \265\215(\275y\324\277\233\357\352\030\312\212\312?@\353\202\266\203x\326\277\215\277[Y\025[\270?\242b\325\261&\321\312\277\260M\n\345$\217\315\277$?2\332b\220\302?:P\263\037Ev\304\277\256%\324m\033\270\303?#\035\034\263\255V\260? p\370\375KI\323? C\376\311P^\277\277\224*o\035\213\313\305\277\3731\220\244\227*\262\277\007\372\340\003b\317\267?\312\326\365=\246+\316?Mn\361Hh\240\305\277\261K\313\020\036\262\323\277K\2454X\301\024`?+\022t$\370}\276?}S9\374<o\310\277\233b\377\036\263I\301?\013$\204X\317\177\275?\246\331\214\241\307V\333?\344X\036r\255$\321?\340\246hB\205C\300\277\203\351\177a\353E\312?6\264\353\014E\034\302?z{B\333J\204\330\277\255\333G\013\007j\324?aS\315Y.\215\320\277F\375\n.:`\315\277a9\0104\036v\250?\3131\317c\'s\332\277\334[\320\020\272T\331?m\230GM\362\372\321\277\206r\222\270\002\365\236\277\036-N\242\300\272\250?\230\240\263\007\270T\321\277=\302\007\203\321\231\200\277\031\r\300\253\222\217\322?\376\350\003X5\017\333?\326\253oP\314\204\304\277\235B3\243R\236\270\277\314\017*/eL\245?5\2674xYb\300?V\226\r\256\346L\303\277\034\006SE\363\361\250\277J\301\210@L\225\300\277V\t|d\237H\324\277\004\335\335sf+\317\277[\311\207\006\262\t\317\277\223\341\361\321\267\202\234?(.\237\017\337\245\273\277i\226ec\237\350\315\277\371\303q\275\327=\240\277wK\325\013  \270\277\317\022\245\306\2172\265?Y\\2\226\023i\241\277\246o\315\233n\217\244\277Cu\372\031jP\277?(\360\326ul\232\302\277\247c]e\354\\\267\277Z\221\030O\315\305\326\277\257/\360w\225\323\302\277\277\277\346\360\311\212\307\277\3341\374\307\202\243\320\277\315\023\327\332\337\t\306?[\261a\227Z\306Q\277\262\004\342\036\220-\327?`\334\355\241\322\302\312?\021\t\365\032M\245\322\277\006nX\246q\230\307\2771\032,D@\315\272\277)A;\346\237\027\271\277\021\206D\303\324c\331\277\213U@\243\"\371\325\277\207\325\331\371=\210\250\277k\315\002\342.\337\300\277\270\230e\037\027\364\221\277:>R\247 \"\317?k\221\267oy\277\200\277$\313\341G\240\362\267?\371\212\024\034j\201\331\277\0052\255\225\254\013\206\277H[\360\006\367\377\244?\227\003\375\024\344\321\324?n\364\"\372\037\262\252?oG\010\026\350\352\327\277\373\301\217\351?\270\306?o\020\"\002u\022\311?\"\024\016\276\321a\320?\304\357G\377\035\242\255?H\356\360\364(\203\322?\311\312:\372\257\370\212?;\364\277\231\362z\271\277\257ZV{\0105\325\277E\3362\353$\363\303\277W)o\022\317\274\314\277{\344\215\356\224D\305\277\3573.\333u\360\306?\0355W{\177\312\300\277\243o&\017\353.\323?4\rQ\343\213\205\304\277F\261<\037\347\033\312\2775\361\200\274i~\245\277\207j\361vsL\275\277!\244\232\340\343\312\241?\266\027M\303\212\337\273?C\211\234:\244\310\301?5\215\204\332\013\245\307?\375\332>\241\033\247\315\277\347\260N\210F\010\267\277V\312\365K{\362\301\277\313\332\221\212n\330\245\277$\241\014\357\177F\311?\2768BX\301\236\332\277Zi\027\315\342&\334\277\",\200u\253M\275\277at\025\363\243\314\315\277@R^.\264\205\307\277\370\257\236\251\344\240\272\277\177\246\22028\030\306\277{2{\226fg\267\277S\265\365m\n\304\262\277\213\204@(%\271\304?\352\324H]g\201\316\277\0018\371g\327#\226\277\225\277}d\243,\303\277\234\223\316k\"|\264\277\032?\000\256)o\247\277(ES]\263I\252\277r\210i\221/\275\310?\202\017\024\205\356\036\270?\317\312\340\034K#\312\277\252[\225\217o]\317?\265\231\273\331\271\303\270?\355l\307\3473\030\277?\"\276\032=\230\000\322?\037IKs;\240\245\277n&\207\2305\251\304\277\247Y\325\323U\027\317\277;\026\030\201\032\327\321\277\000\321\t\352\363<\324?k\001\346\244\351b\202\277\0225\234\335\372\020\315?\362\321\274\303\277\263\260?\317\213\"%j/\257?\024\307\271\335\332-\326?6,\230\030\242)\302?\254\014\r-0-\312?\017\324\350\376>\341\305\277y_x\305f\344\320\277\311\305\360\010\363,\311?\337\223[t\231%\225?\307\303\235)\320\221\312?\312\302=\310\243y\307?t,\230f\035<\265?\372\"/~\277!\231?,\260\027K\226\231\344?\373H\022\rG\031\317\277\025\224g\226\270\214\306?\344Qjg`c\307\277m\001m\014\315\030\220\2776\313\322\322\035\221\275?\362\232\001\007]\014\270\277\225Rk\204\030-\267\277s+g\201\350\361\256?I\033\271O\314V\270\277k\256\243A\205\316\324\277\274\216\307\177\223u\271\2779;\202H \005\321\277\0006\247+\356\277\263\277\210\304\250}\274N\312?\330\250\250t1\020\253\277?\200-\275e\007\321\277q\200\216\214Y\236\266\277\003A8\306\373K\262\277\234\013}\246A\250\216\277\342\017\027\325\212\n\300\277\n\353Z\340\276R\317?\250\260\343\364\222\206\333\277\306\220f\326\327&\274?\306\357jL\347\322`\277\357\272 7|\234\324\277\244c\345\355.\335\222\277\215\006\030o\213E\260?G\200\r\027\342\332\271?\311<j\014\204\351\317?\340\302E@|\203\340\277\264m\220q\210\275\267\277_n)2\370\341\277\277\224:\305B6\346\301?X\251\277\211A]\321\277\017}J\177\311H\236\277w\302\020\217\366\235\252?\333\214\213\213\004\344\310\277\306\213\2678\314_\270\277&\277\260\2715(\263\277\233\301\035\227\247\210\306\277\340Z\351Hx\210\314?\257-bh\327\021\304?\354<\n\363i\265\275?\201\375\026\236\226\306\327\277Y\313\t\241\260_\311?\303\314\t\364\005\341\353?M\037\325\205\335\220\305\277\037\021e\250\246\347\305?5\313f\007\266\022\271\277s\022\307Xiw\245?T\350:\310\222[\331\277\326\326NS+(\272\277-\201\330\214\242\036\307?\273\312\342\355\261\013\270\277D\312\373\300\007<\313\277c\304o\027\312w\313\277\235\206\327\223\215\210\262\277\321\302\000_\014\245\273\277s\023F\320+\263\265\277\367\274Ix\234\t\340\277p\3013s\375n\275\277\177Qr\211\262C\223\277+\032[\273,<\254\277\023\006\313\312\372\217\314\277.\02182S\314\307?\205N\325\005\031\262p\277\256\264\013\021\362\204\307?\324)j\265\333 \254?\010O\265\361\240d\241\277 W\371m\026K\262\277\361\362\347F\002\250\253\277H\025\310\255Sm\277\277\020:\001\220DH\314?\000\345\250@\366\014\262?\204}\264gL(\320\277\357\200\337d\304\017\310?\206\364\340x`\021\275\277\003\031\333vM\325\273\277\330$\266s\031o\275?\220\314\336\262\203z\313?\005\036(\247\202\014\330\277\t\224\016g\rT\324\277J\266)c\016\221\226\277\342<\321\242(\321\321\277\003\"\323D\307\272\300\277\255\214\025\372\360\017\310?\321\371\257S\017\337\226\277\200\226\013a\2053\320?\212^M\245\365\037\326?lOy\"\307\037\332?\203,\2678>\252\240?\364\256\205\352c\"\227\2778k\213Z\301]\326\277\\\350\tDE\234\270?Y\207]\340\374\363\325?\260\325\234l/\346\263?\344\014\021\377^\267\250?\235L,\222\307\214\312\277\260~#\2234~\311?\304\321\211C\235\260\324\277\335\022\2100J\314\352?\202+\366\210\337\002\332?\312\217\334\263\225\227\310\277\033#\225\251\341\"\311\277\237K\337\210\326r\324\277(\345#gZ`\300?.\322B(\314\353\242?\003\337(u~s\312?q\266\304\306\022\350\246\277~O\351c\352\220\340\277%j\022\013\213U\321?\226\262\273\312W\177\256\277\361V\023\364\275\375\321\277-r\234\361\n*\237?y\337\272\360\227\013\307?\305]\rWB\345\304\277\002\342\327rM\354\252\277\301\376^\334\256\033\340\277=\212`\007\026\010\301\277\352^\026\223:J\316?\220+\245ym\022\257?\211L\322/9\347\256\277\354C\301\325\215\022\321?qo\326\247\345\355\300?\301\276\\b\227k\247?\032\251\021?\356{\261?\000\324.\006g\321\276\277CL\3019}~\303?\321\037\211$\217,\276\277d\256$\374\232,\252?\210\004\223\330\260\315\266\277\261\314\347\240Y\242\334\277\365\016J\204]T\302?G<\271\342{S\243\277\237Aqm\324\037\306\277O\372?^\235m\300\277\034\213\r]\301\334\305?\202crm\261\010\313\277\246\243\302+\200\000\320?\334~\344\364L\035\273?/\373m\203_p\344\277\2629\274\265\030X\313?\021\270\3572\t`\321\277\rK\0327\334\353\304\277\350\257\206\017\311\n\325\277\245R\204\310\252R\263?j} .\355\246\304\277\323\265\005\257\256M\231\277\230A\315\017\331i\274\277\334?\034\0261\202\270?\247\313h\320\217l\311\277\345\252\2248\233\260\276\277\017l\267\256J\032\201\277\nVl\003\377\363\322\2771\234\262o\275\252\310\277U\223\214\274o\211\316?\253\362!\220mE\243\277:\362\255tOB\322?\211\243\346d\265\312\352?8?Q\251\036W\277?\374rF\016f\344\261?x)\272<\007\200\270?k\241 29F\316\277\315\241\243Py\223\247?\360\221\243\224\210h\303\277g\364\316\252\242A\222\277\007!\321\335\2129\245?47BL\270_\255?\177\321w\027\257\001\306\277)\276\213\324\035=\323\277\037\317\222\367\213\367\263?\374\376\344!^\033\331?"
      }
    }
  }
}
node {
  name: "normalize_element/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\257\'O\261\021?\241?Rw\346,\201i\314\277\355a\340\370\313r\316\277?\022\007\350\006\215\301?/Ef\260zF\227??\327.-\225\305\325\2773\001\262Cu\234\272?{\316_\324h\302\253\277\010]yL\343[\276\277\212\363Z\375\307\231\252?\"\242\364j\246\020\307?\343\371o|\245\305\260?\322\372V\250E6\302?\003\3764\363\033\324\266?\327=D_\202\357\305?sq\263\360\356m\314?(\035\nF\215\357\307\277\212A\357\024\\\314\276\277\013\334y\022\375\307\327?\326\006\213n\200\025\241\277\254\001\215\016`\301\304\277\203\360\256\200o\223\265\277>\362\302\2302z\243?\277\314\2306I\017\303?xC\372k\002\212\321?\025Y\"v\375\305\310?\313\254\323\276\n*\310\277\275\364G\314?J\241\277\342\350\366w\217E\321\277\363=\205\027/\254\315?z\"I\211\312\321\262\277#H\302^#\033\267?ru`\250\355!\254?\325|x\t\317\203\304\277\312\020\216\263[>\263?\336\314A\215\316D\345\277m\303\313\267>\322\316?n\005\371\017Z\362\311?\377\020\322\227\n^\243\277\247\307\013\217/\221\265?u\334\2712\316\"\230\277A\375\215\230\243\243\304?UEpy\007\256\307?\320\211\361\307o\353\200?\334\347o\364\332\245\266?hm\350\002\2327\264\277\263\227\343S\246%\321?S\005\262\340mw\320?\340l\322+\265\212\326\277\330\324\275\214\251\004\322\277\221\232\005b\221\014\326?\017O\224\2719\214\336\277?\350\004E\212\001\300\277\307\211\243\377\301\337\300\277N0\000]\330\254\257?\372\233t\351\201;\277?\346\256\305\202\261Q\270\277a\266\347\020k\353\213\277,P\206\356\257\177\301?\3339\334\010\241\362\237\277\034\251\304\022\037$\204\277B|\310\2129p\276\277\260\272AZ\350*\301\277GI\317f\005l\235\277\264w\256\260J\337\274?\243\302df\025e\266\277E+\376\340\305\315\260\277\272\252B\271I[\306?\350D :\247\252\201?\023A>j&l\310\277\023\250o\270|\207\260?JhB{\036\216\325?\2732\367\227\320\240\302\277\331#\327e\025\353\311?\"\320n\373W\375\241\277>\nbH\026\305\322\277\007\256\241>>\367\202?\027\242\343\235\274s\273\277\214\034?h\010^\322\277\302\234\215\223#\t\223\277\202\264z\0103\262\304\277V4\343\006f\360\235?-\244\265e/J\321\277hA\210\344{\252\306\277\310W\327\017w\321\270\277\370$`J\202\361\312?\323\026\025 \262\331\335?Z\024\330\365]y\257?\324u%,xl\301?\231yj\271\275\360\316?c\204\005d\347\035\303?\231\251\246\270\373\233\267?[\177\362y\177\231\265\277\271b\371\223\241\226\200\277N4)\0304\020\317\277Vn\213\261n\277\260?%Nw/\325\300\246?\335_\t,\277`\226\277&\257\366\310\341H\260?\264(dr\357\223\317?\237W\334\350t\372\314?7\213,\327\347j\275\277\306M\243\005\231\343\301\277\204n\227HU\"\220\277\257d\007d\202\316\320?\371cE\204N\337\305?-\216Y\023)\261\275?1\241\264\026\277\030\306? O\2715\273\333\250\27701\345k\333\r\263?V:\345;\356$\304\277\352\363\234\337\177O\236?\331\264;\031wE\314??\304n*\316\031\266\277\246\361\2750X\000\265?\3240\2150[\217\326\277\024\034M\326\177\214\300?\327br&\346\222\265\2774\352\363+\211\233\306?\253\007\336\206\275\205\265\277\233\202FE$\034\245?\253\215c\'Gz\200?n\006\226Z\234\356\224\277\232\305\t\350\245\357\315?\306\352\366MN%\254?E3q\327\260\214\302?\221<\t\0002\177\277\277\001\207\254\304\230\371\266?\216+n\370\203H\304\277\260j`\245f\365\343\277\360\036\342b\371\207\325\277\330E\003\013=r\320?Z/\\\343\271\035\336?\340=\345\320\207\232\301?i\263BHC[\200\277&\300MYH9\303\277\334}\227\356e!\201\277q\206\353u\'\031\304?W\035\342\347Rm\323\277\224\330\331]D\r\300\277Q\337\342B\200\010\333\277p\326\305\365Q\032\303?\330}k\203\361\202\310\277m\024MN`\007\230\277\305\203X\304\272\351\313?\324\005\3670\244\017\302?\360r\216\212s\236\322\277{Ud\202\227g\322\277\"\233[\361\360\004\304?\234`\036\2719\021\305\277\232>S9\257\344\260?\320\241/\213?z\274\277\265\031\262\034\022\237\310\277i \264\225\321H\276\277\373\t\325C+M\272\277\216B\226I\263p\274?\021j\242e\353(\256?E\345\037\365\251\306\240?\355~\317U\035\\\275?\314\3765\017mn\272?\230\033re\037*\240?\001]<\013&.\307\277\315\325\006\243\017l\272?\370yO\357\005\307\300\277\'1\373\372\363\205\241?M6\002Ao\220~\277|x\324\n\021~\251\277\334V$$\230\243\301?\331\354\202\215\201\216\264\277Yv\007|\362\210\320\277w\354\313g\236vP\277\263\355\236ND\002\273\277\030b\005Kk\026\303?\253\277\250Q!b\252?\033c\266\272\317\307\255\277j*\314Y\270\230\311?\340\200V\020{\274\272\277\213(*\212\014\300\306?\335\243j\"\004\252\256\277\364\303\014 \310\355\317?\243\207\021\023x\202\202?\270\017\023\tc\205\324\277\273\250V\3321\216\244\277]\231\242\271v\277\300?\211\321\207\364\313l\237?\265q\310\037J\326\276\277p\330\026\230`v\300\277\010Pf\245\005\317\273?S\302M\322\201\364\263?\314\237\236\332\004\'\247\277]K`\2116\225\277?\326\255\001\345x\207\260?\026\316\363Fa\251\316\277S*\243\247I(\303\277/v\206\274=O\273?\010-Z\251\036\340\267\277Q\277}\263y\275\225\277\342\320\336\364\330\367\245\277;Fe\276\304\212\276\277gW:\200&\246\253\277\334`\300\277\033h\303?\327\266\335\254\356v\230\277\"\256\323]~\303\240?|\016\363\230\274c\320\277\316\267\021\345\301W\304?\000Q\344\366\361\017\320?\022t#k\035\025\244?\226\345\362\277m\346\220\277\333\263\3516\205G\315?\207\356\217\267\344\227\304\277\035\220\360\246\263\224\276\277\256\375\001\357\211\034\245?\201<\334\370\203\256\306\277P\373\245\003\336\001\322\277\005d\344\'!\315\266?\263\274\255\260\316\027\321\277\300\303S\254\231\330\202\277\244}\245\307\241\316\325?\272F\230\217\267\223\341\277\312O/)\177P\313?\262\005\311\356\252\341\231\277\207[\324\236\3130\270\277\275_\247=\271\263\201?0AI6_P\204\277\3728\276FQg\262\277\233h\016\337\235\334\246?\223\221R\253\217N\330?sB\204-\311\330\311?\020\211\304\330H\241\225\277\244\371N\017mI\322?\376\361\267mP\224\205\277XC\021\307?\036\301?p\241\201F\262\177\300\277H >\232\355\272\336\277O2\253\370^\301\274?\371.i\272\335\227\276?R\236R\327\323\333\303\277\222#\026\356\021A\311\2775\030b\2413\357\320\277\375\235\233\226\324\242\302??\301\t\355cT\321\277\247\021|\004\311\324\304?\351\330\"\241Ta\254?\231}\306\200)\257\246?\031\215\353\265?(\316?/L9\272}c\331?\320\246^\372\207\360\264?\304\020s\r\205,\303?\204`\024)\362\035\211\277\020\344\017\331u\250\245?\244{\322T\307\205\303\277\215rk\356\354\010\240\277s2\036M\356\007\301?,\232rvd\227\321?\257q}\033\001\242\234?\360a\272\354B\260\332\277j\367\025\256F\020\273?\241\303R\3707P\266\277\036\313!\333\254\221\302\277\032\210\317\266U\236\216\277\263\234\233as\270\320\277Jr\356_\340\315\252?&\33245\177\262\255?M\271`\005\364\032\326?\0337ci=\301\265\277\372\273\311\033b\254\331?K\336\226v.\\\265\277^\357%-\365\364\302?\333\300vXD\003\305?Q\035\354|\221\261\257?\377U\347 2L\304\277\242\254\347\226\265\276\262\277\357\312\0373D\215\314?H\036B\245\350\026\266\277^\035\r\306RG\220\277\334\254\'\222,3\274\277\030\357M\n\021\310\303\277\201\263\232\337\351B\310\277s\255pg5\376\304?Js\304e\017\346\301?\341*#H\327\010\303?\230ZA\212\332\334\245?\016\\\023K@\212\304\277\323\002F\212Nt\300?\213\016\025\323`\334\254\277\206f\307\323(%\331\277i\257f\344\330+\304?J\252\244\233~L\235\277\351\236;\037]\204\257\277\261\311\253\027\031f\266\277\005\364\220\354J\313\232\277,\367\343\2173Y\321\277|\3527gg\253\275\27708R\332\n\035\326\277\266\354D\032\357k\325?\235 \241\2128\254\223?\374 ~\375\003\272\277\277\3666\205\366?D\306?\313\374\002*#\237\261\277\204p\025]\276\360\317\277\271\354\036\351Q\310\316?\2515\276U\220\223\276\277\302QHE\207\304\302\277^\025xGx\273\244?q\'33\255\351\301?\033\341H\007\233\025\330\2778\014\325\217\220\247\266\277\232\306\233\t\270a\324\277^\303\026\207\335\351\240\277\344\320\311\344\275\304\270?4\177\3410\266\277\317?\244\216]G\031\017\270?\004\320\257\370p\037\254\277\037\357\00224\317\303\277r\003\354\365\352\363\252\277\017\202jEW\\\320?w\r\376g\316\030\216\277\007)<:\207_\237?\326\274\206F\003\325\300?T\314D\2078b\246\277>`k\241\200`\271?\3150\256\327~\302\265\277\2342\002\177\002\323\323??!\216%\007B\266?\2327n\210\240@}?\005_~\323\016|\275\277\310\325\305\242\2634\217?\213p\315n\332L\257\277r\330\0227\243\366\320?\006Nn\263B\026\306?B\261+\330\306Y\323\277\363\356x\036\316\004\265\277\214\026\222\311\007 \321?\365J\362\337e;\304?\356\251\315\274\306?\315\277\244G2\331><\272\277\341\004\334J\254\261\267?\302\256<\315\313\237\314\277x:\314i/Z\242\277\372\322\265\353\330\220J?\320\302En\364\022\301\277\311:\177\361[\266\325\277\0229b\317\035\236\246\277\265\212\177q\225\221\212\277\345_\341VU2\273?k9\270\301[Y\334\277\2010\367\265%\377\302?\254g@\363\327\027\313?`\"\036\365\014e\324\277\2235rB7I\306?\207\252\316\200\276\312\270?\266*k\'\013q\323?\256RL\002\362k\264\27702\3644\023\227\262\277H\005|:KJ\271\277\326\247\233\226\362B\242\277\316<\"\207\027\204\303\277]\371\277}\025\212\223?\306\023hZ\377{\243\277\216\220\207\202\005\305\276?P\311\331-T\233\335\277\024\265\017,\013\306\211?C\025\023[\225w\301?=\0029G\345s\217?\300B\344U\313\003\302?\333Z\320\312zc\312?N\270\306\236\344\223\305\2773\t\212E/\237\304?\267\277\227\240Y.\201\277rq\363\312\342\315\275\277u\037n`C\255\241?Y\354/4\212\363\314?\014\301\334\230\177\331\222?`i \221\202\375\267\277\223\213\333[\261\275\305?\250\204\324\r\205u\302?\320G\010\205\354\351\242\277\031\376A\233\233D\305?\366\246,\273\223r\274?g\262\373i\303y\315?\320\034O[Z\013\344\277\335\032\327>\251z\275\277\312\346\001u\351\211\274\277\313M3\374\300A\311\277\007P\252\267\362\306\300?\376N\355\325$F\265?\311\241V\200#B\267\277\025\203\262\320\273\007\301?\211w\256S\332\030\270?\010\233\r\034\300\223\257\277\352\354\242\324$Y\306\277\035_\322\004\303?\301?\027<\326\237zY\262\277<\312o\013d\262\326?\207\253\212\374\353v\341\277g00K]l\253\277Z\225@<=\233\240?\246\352\003\257Z\326\267\277\240FP\376\206H\206\277\314?\344`\233\244\265?\341\203\314\361,\302\245?D)\2709\332\373\301?cW\320\252E\314\264?\347\254\342*\\{\250\277\226\222\376g\3563\211?H<\267q\324U\277?\020-`\3255w\330?\t\315{\331\3169\273?((\032\030\264\263\322?T\303\320w\206z\244\277\245iY\273\005\373\275?\313\217\212A\035\021\200?\346b\235F\r\212\304?\234\332\274\214\326e\305?\231\312a\331\327\373\274?\007\224+\036X\211\312\277\376\006\255\'\272\024\261\277\300\306Y\234\231r\273\277\010\336z\371\247-\211?\212T|}Oz\305?M\335\022\227\322\210\260\277\377\225R\023\0002\237?\223\244@\010\342\034\246\277\336@\340\262\264\334\317\277>\314\227*\225\353~\277M)@\300\030J\307\277\234^\346\356!\356\306?\n\376\000\375\027\214\210\277\315\360F\377\217\367\323?q\214(\267\r\357\221?&\236\223\371\006\000\225\277\302{6\204\025\334\307?\021@r\301\013F\227?=\001\307\372\"\241\230?\302\2157\361\263R\262\277\300\360\356Z\262\233\301\277\307oPo\206{\257?\2150w\005\235\311\324\277\361\246\254d\261V\305?1\342\323\342\256`\303\277\250\204\270\372cb\223?|\252\032\321\232C\261?w\352\235Gm\231\261\277\342\343\316A\304\360\302\277\236\033\345\004\333\367\256?\262U\305qf&\271?\335\207\032\037\225\270\234\277\346G\034\026\177 B\2770m\356\377\321\222\323?\360\004s\313d\253\260?\354\375\215\374i\367\272?0F9\375\242\031\305\277\2366Q\233\233\222\215\277\007\233\213\221@\004\261\277\001\277os\034w\276\277 \334\200^a\277\245\277C{\263\377\314\253\274\277PxW\273*2\303\277#\351\232t\001b\330?\340M\371\005\276\303\230\2772\024\227t\005\037\300\277\006A~I\234\226\303\277g \266G\215^\263\277N\351\317\341\235\206\311?\276\347\t\365\030\205\267?1\036\273\241\215\354\266?R>o\375\020M\246\277\207\177\303\206\375\032\225?\037\255\'\262(_\267?\303\270\377W\177 \304?\322\266\271\246\n\212\244?\241\036\226k\354;\266?5\352\332\342O\340\255\277\251m\264(6l\302\277\360\022!<\217_z\277\244\332\226U\021y\274\277\346\036\252\000U2\276\277\027\230\221k\023\217\315?\222\325\375\206\021\261\222\277q\334\210)e\216\304?@H\0014*o\310?\237\331U\010}Z\302\2778fZ\331\t\210\314\277m\217\016\377T\005\252\277\356\312\001\233 \330\244\277V:\340\255\213\350\221?Ll\275v-.\300?[\233\"M\017w\321?\253\264\033F\325G\274?\367z\215\022\311\373\244?P\022\221\231h]\312\277\333\000h\234i\327\302?\026a \227\303\362\320\277\345\2303t\t\322\315\277\267\203G\002\006\026\302?\322\206\257\252\336\177\270\277H\305G\003KQ\242\277\247\213-\262\264\014\317\277\277),M\263L\323?\257\271=\020\n\251\263?\350m\307u\337M\270?]\320Q8\005\022\312\277l\257Y\377\342\366\307\277P\027\223\005y\323\325?\254N\377\317\265\007\320\2770\351\264\206\005q\320?\355\210\037$\343C\302\277\006\307\010S\260\214q?U7&\302\355\t\224\2774_\207\256*|\262\277\021\230\371\201\354\223U?n\235w\345\2613\204\277P-,c\000\367\270?\353\363\031\270\205\004\263?V\324\247<T\360\260?\020\320K[\355\031\252\277}^\363P\326\r\307\277\001{\342\202\315\201\307?\372\321\177~\333^\301?[\271\334mL\213\326?\321m_]\226\350\305?\240h\272\352$\260\213?p?\325\204\260\010\316\277l%\311\273\233p\266?\304\005C!]\325\274\277\311\002[\266\234\244\245?\324\013\001\252\362\206\244?\316\237\231\t\213\036\321?\r}\3153h\002\210\277\231\307\264\361\317\354i\277\tr\003.\374(\266?\377\313K\241$\030\276\277\243\256b\3173\250\265\277\376P\037G\231\220\260?\260K\246\323.\261\264?>\024\246\247\367\233\271?h\\\342\253\260\351\225\277)\021\265\371\002\021\244?\033\343[\313\001<\303?\265)\320\274&\223\306\277T\021\026c\001\322\341\277\320}\235\324I\036\315?\1773qPa\324\303\277\017\320\330\303\030\317\274\277\202\232C%\227\331\237?\3335\240\251\315\252\270\277C5Qe\335N\233\277M\216\210\303\037\020\304\277\036%i\316\277\261\200\277n!\256\212\213Q\271\277\304W\246\252\363\005r\277Eo\000\355\323\222\227?\351\214d\031\\\022\300\277\237Q\027\031\020\246\340\2775\350\342\307r\365\267\277\327r\346\014\023\243\274\277\214\362\014\237}\301\276?\201wvf^\273\263\277\302615\030\177\251?\264,{\3775\252\315?r\362\223\321\221\340\321?\227\347@\215;\324\273\277\271~^9$\037\270?!\000n\354$\266\266\277<\237\232/\233\203\317\277\\\037\220\002\t\335\251\277-\340\230\343\306_\246\277N`\271\275A\232\267\277\004\007\r\216V}\315?\236\022\023\252\2311R\277\351\222/_\213\337~\277\032=\006~\374\241{?\366\001\374\363u{\242\277n\203G\245\231\233\302\277\337:\001\340\2048\273?\202\346\242>W_\316?6>\021\373\177\301\315?\331\352\013\247\000Z\321?\177\322Q-\300\001\301\277\226\342\307\354\365\360\254?\215\221\231\027\263\203\300?U\3350[\237\005\276?\375k\214\3371=\302?\235\270\356\371\020\245\302\277\336\240\033\212\005(\322\277\236\265mO*h\260?Ek\250\212\230\022\242\277\267u\207\322\214\275\271?\256\377\344\004\234\216\234\277\3521\266\214FC\300?N\302\354R\013\376\312\277\347|\371v\204\013\223\277Rq\262v\206\312\204\277<l\205jz,\302?-Z\014\222\361\211\276?\004}\227`\355x\235\277\354c\2718\024L\306?\367\375\205 ~\271s?\033]\362\375/F\243?\362\332\337\310X\017\267?\205\202\250\336\022\206\307?L\317\306L\021k\321?~\370\273\221\300\205\310?~\230;\004?\030\300?\251\243\024\325\347\233\305\277\250\340\216\033z\035\241\277\201\255\276N+\204\315\277\243\037\226{\313\312\301?\215_\000\240(\305\230?\\R>\264\274\321\271\277S\\\376<\360\275\265\277\217F\226\362\366\205\300?;\336\232z\367\263\270?\030y\367EG\227\271?\320\233\031\240\364\223\240?\341J\217\232\375,\266\277P\356\320_\320\364\263?;\224T:f7\261\277\004\377p\342\340\374\271\277\300gU\355\240b\305\277^m1\252H\031\273\277\364\311\r+\347a\245\277\212\370<C\225\343\321?\323_m\254\223\031n?\234pH\257\365\362\271\277\253\360\206]\367\r\300?\334\370\336\334\022H\307\277\2110\313Y<r\314\277\306\241\304\204\302P\273?\213\242\255\306\364\215\204\277\272\242\315\022U\374\273\277\372\243uh\300\t\246?O\237\006\324\354\\\230?\270\220<\306b\235\300?\264\271(X*\366\274?\252\006\222\276E\257\264?\010\222qx\303^\254\277g\365\304\346\347d\304\277\266\331\241\316\360\363\300\277\244V\243z\274V\226\277\373\323\265\271\"Y\272?\302\342\032\334JF\320\277RXB\377\310\247\351\277\n\303\252G\211I\246\277\034\344E\213\343/\311\277r\032\031\037\312\261\240\277\230\254[$\325\036\274?\266\\\221\031V\001\305?9T\273\336\316\355\311?\tZ\021Q\320b\321\277\026\273\333\236I\311\244?oi\277\323\2131\207\277\003\033\367\260\343\247\316\277&\266M\230\320\323\266?\372\346\322\321+9\323\277\032?[\350\240C\266\277\333BG\332f#p\277S\314l\343\247\324d?X\333\334\244C\332\250\277\025U(\223Q{\311?\005/\307\322\225\371\233\277F\305\000\017\3764\304?|\030f\312\227\367\303?\356\202\233f7[\275\277\017\365\020\\\272\035\322?<q.k\245{\264?\310\263\244\360\372h\336?L\207\272,\326Q\260?\311\364#\340\312\217\320\277+d\266\0055\034\317\277\025\372\314z\2205\311?\237\374\177\267M\257\327?[\370\372U\217O\300\277\237\264\313\245\362b\271?\217\300\"\352\277`\247?\3477\234U\366\203\305\277\357t\317A\013\305\276?\243-P\035\347K\304\277\215\201\0359\242X\264?\251\2073\220\220]\233?\021U\357u\364L\217?\207\262\022/\272\004\257\277Ox\340\204\273\356\267\277\022\360\215\224\374\264\320?\006{\213\330\315V\276?\336=\227X\313\263\265?i\331\227\023\326\303\263?\341\313v\"\324\321\315\277\323\374z\251\n\030\275?\003\346FP\217\346\306\277\017\033\005\272\276\233\303\277\363Q\264\206^3\273\277*\235\33637\204\264?\217\206\203\000\213\216\306?dn\216\217\301\240\275?\177\tpm\020\337\321?$\031\276\277\n\262\265\277d>c\237\210a\313?\331\265[M\227h\323?\344OCVlWt?\326\236\235t\2605\301\277\017\350y\241oX\316?\347=\240#l\235\252?\342\033\300\355g\334\271\277vA9GHj\301\277B/\231u3\026\304?F\t\315W\323G\334\277`\361\345\234\342o\273?\266\000/\223\224:\265?G\276\374\363\025\340\323?\262\245_/#\006\324\277w\032\004\202A\334\277?;oe@\367y\256?%\343MGe\343\251\277\350\003\255\003*\213\246?\313z\006\363\210w\331\277\323\006\320\346\250\333\311\2778\352k\314\364Y\303\277\\o1\177\261K|?\335\212\225\225\357$\253?r\3519\3534K\264?\025\211e9u\323\310?\354\357C$\213t\322\277mh)H\037\242\320?\336\254\nAb9\325?\252\363~k\362\035\202?o\241\332T\367\306\264\277/\341\347\214n\337\312\277\354K\262\034\366,\305?\360\202\312\274r\206\274?u\022<\217_\351\253\2775r\210\206@\037\316\2778OeR\263\022\267\277\304S1\2560\322\306\277\\\030\037\027\017$\272?-\276O\363T\221\322?\223;\342jm^\314?\031s\332T8\021\301?\036\252C\263 \357\267\277Q\376e}\254\007\225\277\274]\242\230\014\215\323?%E\372\200\200f\303\277K\006\316\030 \272\352?3\033\270,\006\223t\2773\274\314@>\341\272\277\317\260,5\313\025\310?d{\373 \026,\244\277\252j\177\224\301\350\305\277\353\342:b\314A\274\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "s\212\222z\027\305\260?C\304:\367-C\305\277\370=\021s\2166\210?\nk\035\241~]\266\277/\320 +\220k\254?\177\371{G\264g\216\277X\324\222\326\322\010\265\277P\207\375\202\241\241\267?\t\250\363X\320\337\301?\341\357\225+\353\223\320\277=\002\354+\211;\317\277Q:\243%\334\273\304\277\246_e8\227~\315\277\313pfF\211\223\265?,*n\205\352t\317?\315<\203\345\307c\241?\261\334#\377\366\024\234?\246\264l\360\036u}?\0216\006F\341=\274?\350\317c\216ff\321?\246\\\371Sp\226\265?\372T\000\034eQ\304\277\3105_\360\020\202\313?2\216?\267\300\327\252?O\2743\310<\364\277\277F\2364;\020D\300\2776\342~\234\347\026\271\277\253@\217)1\377\311\277\005\371\301\327\203|\274\277\331\032\266x\017\216\235?\256c\306@Nv\320\277\354\216\356sx\202\312\277Lc\225*\002\032\272\277\356\320\303*a\331\301\277\375^\333\255\332\232\304\277\257\027\n\306\3411\251\277\030\364\351\345\232\231\305\277|@V\363\321\271\240\277? \317\277\246^\303?\233\007\037N\307\363\314\277\032&W\364\327\371\321?\240<Z4\245\302\241?\246\3404\2012y\302\277\010\3316m\326[\234\277\237l\006\327\237\340v\277T]\300O\200\315\254\277T(\321\377A\343\310\277\3044O\203M\253\222\277RN\226&\245\253\303?\265O\276\n\233n\304?z\251\234\216j^\304?\362z)\306@\320\316\277N\260u~\"\\\310\277B\237B\327\013\017\305?P4\203\210\221\350\242\277\247\325\371\343\347\204\277\277>\310\210\350\014n\312\277\344b<\205\321\257\266?e\337\241f\325\245\225?O\256Gu\325\017\301\277\367\253\205z{o\260?\030\321\305\373u\252\305\277\366\n`8G\254\233?\303s\377Q\316<\262?\300\245\0263\221#\263\277)\327\214;}\231\260\277[\'\214\216\010\360\303?\223\274\2118{D\246?\231\010\253\203\342\241\321?\210g\251_%Q\305\277P\037\324\007\020\224\304\277\030\371\224\306\005\374\277?\227\337\025\341!\037\323?\317=\367\237\333\322\250\277\036R\266\025\"\262\300?7>\\{\277a\307\277\371>\020\341\003\200\240\277\037\215\234\016\331\336\314?\024\224.\375\006c\264?0\364\324L\267\322\300?[\204N\026p\027\307\277\345ZM\323\344\264\313?\022l&\236\276@\300?\266\220\177\2412z\205?\362\005\376l\374d\322?\035\036j2\034\003\320?\231\232\214\252L\t\311?,c\245\025\250>\240\2773\312K\305C\304\312\277\200\220\300\332\303u\317?\370i\373Q\376\215\251?\327P\225\351@$\312\277\214\374|q\303V\320\277;\304*\236\364\343\235?\tz\235\021\366M\301?#\200\205\237Y\326\215\277\213\244k\202\207\357\260?\312\332T\336NE\027\277\361\307\017^B\223\313\277\240\010\036g\000\330\324?\017\235\347p/$\261\277kD9 \375\325\267?_\360\025r\374\'\303?*\347\236/v\031\202?\360\376S\207\322w\316?\220\2533\003\372T\311\277}$O\212}\351\313\277vT\020\325\030\332\211\277-\243\321\014\266{\322\277\245<\023\255Z\314\267?\3742\023\273+*\303?\'y\010c\331\205\260?\200\000\305\310\245\205\314?\213\030\236\327\370+\304\277\353\264\357\021{O\314\277?\275\343L\202\000\321\277\023\360*jz\025\267?\264d\355`\363\022\312\277}\\\303\360/\251\314?\341Q~:7M\231\277\314cZ\233\257u\274?@@\272\246/$\303\277\306\326\371\235-\212\303?\334\224\324\237_\200\260\277y\332\n\013\331\335\257?\241\334\372X\025h\307\277\231(\t\317\365\231\264\277=\223\330\203c\022\302\277\316\255\010Z\256D\312\277\336@\021\302\302\355\317\277\321\270\357j5uc?g0\326S\362\213\325?O\301~e\r@\304?\301\251\217\277\232\036\306?_\317\363B\273\370\322?P\356\305\212->\311\277@b\262\020\377Q\251\277@\243\352\203\241\363s?\034\036\251\305\345\263\260?\275ky\273\"\262\315\277Al\237\264W\357\261?\013\340T$?\232\321?\005\250o\375\346G\266\277\340g\353t\231t\327?b\244\000\374L\007y\277$\227\274h\212H\315\277\t-\014\350\023\276\307?\t*\026\340\340\254\235\277+)\226Qb\351\303\277\325\000TdL\361\271?\221\354Hqs\303\317\277O\233\364\364N\313\320?\207P:\353jf\314?\230\345-\337(k\300\277\361\321]M\005\253\310?1\370\325\215\013\004\225?\001wZ\330J\273\261?~\276;z\2276\315?4\024\205F\312:\243?\272(Hn\270\305\300\277]\371\273[\235\341\310?S\003~\023\215\230\254\277\312\202e\250\241]\323\277\323\036GN[\225\303?\003\235\217\rGP\301\277w~(\007\240%\266\277\177X\237\244|\027\274\277I\204\314\366\241\035\220?P=^\255<p\275\277\231\324\360\351f<\237?\347&\340\302C[\241? l{k\032\341\266?\234\272\366\300\226V\273\277X\005u\322cj\305\277\024|R\220\255n\321\277%}\000%k\005\322?\243\214\026_f\374\305?T\311\324\262\202e\272\277\321\\A3\330\210\300\277\2340J\372\323\237\312\277\326\356\242\225\315\365\303?`\232\203\364\314F\300?\262p\233\320T\006\262?t\243\002\315\220\263\220?N\233\023\337\317\020\321\277\305\362\236\275\355\"\317\277\303K\342\001c\t\305\277e\207\252\327\235\377n\277\350\033\327\330\364X\261?)\332T\216\240W\315\277%8\3122$\024p\277w\227\355\261\337h\200?\353\345\200\355\235c\306?&W\332\221\355K\307?~\235\177\212\273@\312\277\242(\230\030\035\324\304?\362(\273\255\3241\320\2771\340\014\013\037_\315\277=%\347_\202\030\317\277\t\271P(\306*\267?\363\332\227\2524\337\317?\365\220Vc\357S\322\277\226\220X\250\277\272\247?\360\202\227\353\034\312\307?P\006\250G\312]\217\277On\322 9b\276\277\255-S\016\342\373\323\277\312s\327\210\237]\270?~\177\315C\325\254\302\277\320\000\356\022\020L\305?1\201mxs&\267?\246\311@\235\256t\265?\300\005\221D\r\201\302\2774I!\320\017\237\321?\254\206T\355Z\223\324\277\251\256\243\270\246\332\252?@\254mT8T\252?\325\204\004\t\3250\330?\353\032r\305\234\274\262\277\217c3\361\036+\320?\203\360%\337\225\t\245?Tl\324k\200T\254?\246\025\263\240\3545\317\277\274\020\331\034&n\314?a\361\301;\357\321\321\277to\363\n\344f\260?l&\rs\276\036\267?[,\322\233o\316\323?\217$\\\377\331\314\253?\313pX\277\206\267\233\277\275N\303\226\2119\253?\366\334i\317^\363\313\277\013\270L\341\336\303\323?W\327_=\222\210\254?\255\207\014\212f^\313\277\364\321\301\341\362\035\265\277\"\336\207\376q\020\302\277E&,}g\275\315\277tS\271eeL\266\277k\306\275\201\214\364\261\2771p\364LP\t\245?\215TH4\035H\256\277\230\350\261\233\372\235\272\277f\256\354\207\234<\322\277\260g\232\333\004\377\236?\254\331\220\356\2230\261? \374\032\240\244\316\265\277\235\020\301\034\326\275\271\277>%fI\220!\305\277\"\305)\032\324\241\230?\207\310\373\274}\371\316\277\213\253N\327\256\276\314\277\2650K\226m\001\277\277\206\000\355\301\324\027\246?p\"\322(Q\320\321\277\330?\013\211\206\016\204\277\031\300k\325\260\240\270\277\347R\010}\005y\312\277\367\007}\241\272\037\300\277\224\310\365\300,\233\276\277\325\353Mt\236\322\321?#W1\3730@\266?U\203\000\021[\323\253?\256{\224\224\207\276\332?c8\233dF$\234?\2304\206\300\245[\300?\023w\212rW\310\304?\021\360\375v\364\331\323?@&e\375\353m\245\277h\303.sn\n\262?\332\325\347\307\330\367\306?\252T\274\274<\254\301?\277!\274\025Af\313\277\366\355\254\202T(\264\277\006R\270k\007\224\264?\017\316\335\234\254\225\257\27774\340\025\252\274\330\277;\024\006\223\223U\314?\3244U\256\253\362\310\277\\\263\243\315V\'\241\277u\242\306=z`\243?\371=\302\227I\002\312\277\006}\346\001:$\300\277x\263\251\356\233\230\304\277\010\265X\351\367\301\255?Q\032\345\276\371\202\252\277)\252\357{\247\357\210?DH\'\361\273\261\322?w\235\220\326/\003\322\277?\232\004\343\215\320\311\277i\235\261\321Y=\250?\230\364\306D\234\252\266\277\264\032\003\2108h\306?\000\356\332\353\323@\320\277\252*\332#\024\215\300?C\201P\300U\377\307\277vT\363\241!\260\270?\263{\302%\r\000\245?\305\377%\201El\262?\204\035\013$\345Y\323?\314O\305p\014\330\264\277lR\025\264N\304\274?fis\353d=\315?6\335\370\335\274>\260?}Q\212\007\220\031\323\277]1\271\313\310\274\210?\227\306\235~\242\232\323?\277eK>\344O\232?\256\327\203\251.%\321?\353\221\376\004\377i\310\277\033=|\031oh\253\277\224i\372\245\312\253\316\277\357\300=\331\344\224\316\2771\346\334\3552@\302\277@\373*\261\255\341\317\277/k\340?-\236\210?\023\347\037=\215H\322\277\372\245\346\314%\367\223\277\276\027\261%\020\240\317\277qI\037\357\366`\305?o\310\273\317\030\207\245\277\037\264\021y\346r\314\277\221R\200\251\355\235\266?\035Nx8\034\314\313\277J\345\001\030B\243\302?\221\236n\r?\223\270?\363\371\202\363\201\331\213\2778>\227 \351\035\314?(\245\237^\234\302\275?\021\245\273\350\304\271\310\277,g\277\362%g\256?\342B\016R\331,\257?\300L\276\314\"\352\274?l~\362]?I\315\277\325\200\206=+\315\321?\257M?Z\350\355\310\277\313\344b2\370x\320?1\257\0136\232\014\300?\346\205\025\345\226B\261?\207\241\370J\305\330\315?\276\021t\347L\223\320?1+x%\267\004\303\277\002FM\323i\026\255?7\354\204\305&\207\302\277WpU\351\177\210\210?\215T\371\022EZ\305?\277c\331\276\251\362\221?}u\263\024\034\016\270?\272\312\270Q\244\315\311\277vc\327*\023e\317\277\346[S2y\303\241\277\315Om\202J\232\225\277a\317}-,\036\213?\240&\241zO\245\271?\321\324\221\224\272\224\265?)\206\271K\237\244\320?\375\222\344\013\260K\244?uq\337\251\316\350\301?\204\221\251m\010\225\313?\306\204\324\206\374e\265?\376\307\017\370\007\360\312\277\267\320\350&\372P\271?\340\275\343\270\256\207\303\277\022\332\260\342\026\201\273?\n\324L\346K\005\301\277q\357Z\001\266\223\221\277\245\037\243\0057\350\265?\342C9)\326h\322?\222\343\205\247z\231\201?\334\330\326M0\303\300?\374\274\255G\343\031\264?I\326k\326\031\177\317\277d\333|*\035\361\263\277\200\037W\354~\333\313\277\363\270\216\260\266\320\222\277\321\0007\216\022\247\255\277\272C\256z\326\304\306?\253\366\265\341o\331\312\277\035VQv\215\351\320\277\030;& k\363\210\277\376|\251t\227s\303\277\'8E\023\270u\305?\033\r\376\271\225\345\263\277\363\323\335b\203z\276?\024\322\320\3179\262\247?\241\253X#24\304?\334\033\304\227\000\326\255\277^\3617\010\004\323\302\277~\310\232\030\272Y\307\277\003\367.2\277\377\313\277Fr\273<\306\351\305\277\376\315\202\277\237\370\324\277\342\325\272\007&\001\307\277~K\314M3\255\302?\353\266\250|\036\320\271?\034\276S\0214\360\316\277\370:\003\352<M\306?[[\376b\316\r\320\277)}WY\'9\251?\251\034>:\372\273\243\277\276\314=\02229\223\277-\001\250\002\353\031\304\277\375\225\016Znh\263?\271\377\037\203`p\266?\264\357\332\013\315\217\311\277#\202\261!\242F\316?\0351\252/\370\263\300?\030\365O\344\361\356\311\277\037\370\360)\221\362\326?\264\377\371];\006\260?_\275\004\304:\223\272?\374w\314\327\004k\233?\331\277\326J}\253\305\277-[.\320h\004\321\2773\275\022\'\303L\314\277O\257l\321\207e\330\277\261*\014\237\250\037\311\277\242\317\242\372\230\303\210?\322\207\2143\375\352\312?\3540\020\350I=\270\277\374\320\356\205\305\233\300?\244\233\r\003p\022\263?\'\317\213!wJ\275?:\374z4\345\345\274?Qc\006\354B+\257\277A#\005\225\204\270\303\277e\303:\254\021T\206?\310\032\322RaL\316\277\261y\220\264\377\233\241\277\360 \307o+\303\230?\315@nN;\004\325\277\222\323\343\261\2511\301\277r\034\307\270\242\307\314\277\240\203#?.\002\300?\306\366b\006\337\177\312?M\311\017e\231\273\303?i\014<\277\303h\316?!A\177\333sP\271\277\030\377\270\357kI\267\277\277\325\376\nq%\314\277gk\255=\221\205\266?\003I\262\000\216\351\302\277\2409\240\335\362\323\261?v\246!n\250_\305\277e\317u\252O\206\305?__09\210\330\306\277\220\205\364\257T\240\317\277b\3061\370&7\267?UA\342yh\341\245?\273\3458\3534\325\323?\023\344\275\017P\232\257\277\332\274\224\276\204(\224?\324\031\334\210_\272\233\277\013a\351\230\331*\304\277\305\343\300\213\320\034\271?/m\244\264\247\344\263?\236x_(ju\270?\251\r \247\032p\306?\005\300\257V&k\263?\264\233Mt\263\226\261?\31740\371\267u\276?\033\215\342H<\301P?\2566\313,\211\032\245?\334\351\363\025>\017\275\277\374SX\327\344w\273?\207\'\2422Z\332\270?\003\241\304\217jm\274?.\320\375v\"\316\260?*\217\250/x\374\322?O\245}\212A\336\320?\016\367\202\2223\031\323\277\2704#\263\'\272\312\277\342\014\204\231\r&\320?U\247\2430\265\364\273?\034q4\325jW\316?\217`\260.Ow\226?\302\230\256\375\344\311\271?\316\2459N\223\345~\277\336!B\307\201\276\262?<;u\270\247\026\313\277\334v\322\023\250K\261\277\341\272\230\225\333\330\301?\234\366\316K\373]\275\277\030\367\003\025R\036\260?\'\030\302\002\025\345\267\277\217\371))\010L\276\277\352\360[\001\231\364\317?\025G\006M\360*\226?\2441\242\345G\240\256\2772b\372\372\304\017\263?$\037S\231\n\351\272?\261\211t\357\334C\316\277c~\010\262Pw\303\277\330dN\014?\255\310?t\344`D:\036\313\277Qa/\335U\324\305?\211\363\331\243\330\344\265?\360L|\005\322w\301?\"S\313\335.\336\266\277\2409O\265#L\312\277\223\304\330\254\"\177\277\277\032\366\266\237C\\\304?\326r8\24075\312\277\223\330\177)\316\330\326?b\355\023\240\261\224\305\277\370\366\331\"\024I\223?\226\036tRFq\301\2772\265\003V\323\313\274?\373\304\315E<\354\315\277\022\3019\024\017\340\264?\263eU\223g\341\320\277\032\220\210oS\200\315\277\006\2646T?\210\311\277*\\\276n\201l\302\277&\017\324\364p\351\272?Z\256c~\261\312\311\277\206\026\205\231\207}\264?\274\361\227\261\257\216\310?\275(\251\213\326\235\271?\324\226[\333\202L\263\277\306jzKx\023\261\277\'\375YV\374\001\262?\343P\002D\200\200\313\277L\r3\251\244\213\313\277\304\3270P `\303?\222\353R\2763I\320?\'\321MP\313\276\202?\313\302b\360\243\214\232\277\0031==F<\261?\326\376u\360\254Q\324?Y\271\017bs\035\324\277\322\034%(\330Y\270?\342\312\236\305#\322\301?\032\246\215\234PF\302\277\200\300\311\332\273\227\326?\271J]G\337\311\260?\260\206OD\017P\253?%2\001\311\204\377\243?\236\016}\230\263\304\311\277\023\226\231l8e\275?\022\340u\205/A\276?\357.\266\\\034\251\312\277\226%\261K\301\r\303\277\264\366<p\250\311\227?\365X\0362\007\353\306\277\211\257\214\363y]\237\277\\jnq>J\277?\022.\261\211\314\256\267?0X%\265$\"\323?\033\303x\024\344#\322\277\357o\177\371\203?\302?\273\330o\257\325Q\265?H\374\255\274\366\334\305?\264\275\334f\323Q\254\277\0045G\345\363H\316\277\221W\277\277\026\215\306?}\322\270{6bx\277\247((\335\226e\325?\377\211\213\326\326\037\210?\027|\255\2537@\253?\251N\005\251l\235\271\277\362(\2044\0374\317?:~\231\2700-\320\277\210\003\033\200\024:\242\277\260\246\333\200\260\265\315?{\347\216[,P\312?\301v\025\240\213\255\256?\261z5\302\317&\312\277\326\341\322\267\005\221\311\277\034\370\014\330\016\314\260?\3257\2515{&\261?P\331\356\370\351\253\302\277\262\006\033\277\272\235\271\277\016g{\307\232A\300\277\035s\205\353\205D\310\277\350\210\240$F\250\273?\006\nI\316n\224\266?;\217\253M\nX\247?\273\335\205\267\275u\314\277\337\034\177\317\001\357\257? \004Ma;\232\315\277p@\325\342\274\236\320?Q\260\334\311R\362\232?\365\311\243\252\010H\273?%!HU\302\274\321?4wS\241\272\"\267?\030\003p\302\335w\246?~\375\314\313\3221\313\277-7+1x\207\241?\301\333\002\263\260\365\314\277\033\265\314\244\0233\305?(\370\262x\262\301\264?jB\301\035\030\204\266?\246k\340z3\345\321\277\'\217I\033B\201\211?\337\"\226LE\322\322?\320\277\200\036\266\210\306?(\211y\232\213\226\320\277\340\202h&mx\264\277\374\206^\377\302\335\313?\342N\266Pc+\320\277\3725\3301\305\335\242?\027t^\r\343:\315\277\2509\246,\007\270\312\277\233\222\016\233\330\221\276\277\305A\303i\300\311\312?c\005\322\326\262\262\266\277i@\317\316\226\250\243?\254\376\255\231\331P\233?\366\266\034`|N\304?)\322b\363\257\331\312?\361=\010\257<|\310\277xv\367\244\373\256\257\277\214a\205p\316\304\307?\\R\0333el\306\277\\H\031\276\337\201\261?<\231\350\177j\225\314\277}\265\316\251\361\007\310?`\237iW\243R\300\277-\026\317\255\245\177\235\277 \336%F`O\322\277\3618}\006X\307\317\277\370\201\345\003O\376\314?rV6\227\340\221\270?\177\372\253o8\337\316\277\342\331\324\363tO\313\277\215M\250W\334\326\305?\3065\311,\345,\312?\260\324\344\307\016\252\256?\034\347\207\n\200E\303?\207\302\3152\036y\274?\222\350\016\365#\347\300?\207\355\241,\332\365\261?\362\276\214\347\031\347\244?\245\211R\222\032\374\260?\340\224\275\374\236b\252?\030\310\203\027\035\016\220\277)B:\206\305+\271?\303O\371\001\363\'\312\2777\264\227B\271\253\321?\273\244\312\022\271T\312?\006\017\336L\366*\263?\367i\244\\I\325\312\277\334\324R\031^[\246?\236N\266.}\200\325?\'\351\310\235\355\247\323?\235w\226\000\233Fb\277\252\027k\344\277\242\323\277\017\342\256\372\357\023\265?}~\210\355\r\000\241?\235\217\214l\247\220\322?\253\353\375\030\254\334\275?\240\"{\344Dy\320?\355C|\222\316\252\253?yUe(o\361\303?]z]\335\024W\304\277\327e\264\343h^\312?\212]4z]\253\217?Tn\353\007(\277\320?i=\005\20233\307\277x\254\356\326O\"\226\277\231\007_u\251q\277?\224\336\376p\244\272\300\277\373\325\214\001\351P\266?\274\233\212$E,\327\277\352\336\r\032\346u\255?\311#\306Q##\306?+\250.\027Z7\314\2773\247\233ig\375\230?o\301<H\250\330\305?\020F-\r\357\272\317?v\010Y?]\305\275?\376X\242\364|K\314?6\003`\210\200\017\304\277\325I\314kt!\226?J\ru!\2266\302?\363\"\222k\350\355\274\277\216}Z\274\3173\276?7\022E\370qr\277?l>\3505\315\t\247?\304}\260b`\226\250\277H\344SD.\377\273?0\010\246\221\225\352\263\277/#\371ax\243\317?\201\335\234\027\016T\306?\305\304\372F\317/\320\277\325u\322KP\357\325?\000\025\0145\237l\265?X\3735m\273\335\263?pD B\317\031\303?\3405:\010\246a\256\277\210\342\273\264\330\316\313\277\003\265\203\026\237\233\256?\361{4\372\026\030\316\277\030e\307\341ID\326?\345|\252>1\236\245\277\\\307 j\226\367\307?n\271\215\027\0237\224?\013\235\256\\\215f\263\277\303D??\311\365\310?s\255\017\216\201\367\305\277j\336\026i\262k\316?\232\260\315\333m\016\275?E\334#w\"9\303?U\001\362k\0035\320\277\001\037\235\2729+\251?\004\206b\006\203\205\272?\202\016mk\352I\232?.\262\276\211\372>\327?\343k\337z\320A\273\277\343\212\212G\316G\305\277c\234\014\351\265\341\314?\177;2\351\326\345\320\277F\353\017yf\313\274?\342\250\204+6\321\264?\313\323e\221\030C\315\277\354\t\272c\0254\263\277S0\031\034\026\204\277\277\014g\346k\2416\251?\\B\213i\212\365\321\277\274\016\214\221\027\023\254?\355K\230\312\332;\270\277\0302^\003\355b\260?\013\317[\361\005\201\244?\322J\256>\025r\267\277/\361>\305\205\354\303?B\2447\276\305?\320\277\306eG\311\255J\323\277\244\r\346\333\277\303\240?6cN~[h\221?\316r\242\027\345\317\314?\361=t\204H\322\276\277\320\221\370|\\{\314\277\322\353\344\020\007!\261?Y\320\305-\327\231\321\277\345\342\217\212\026F\314?K\332\362\272\005S\275\277\277&N\224\271T\304?\322\375K\305S\032\317?\351\255\204\365\214\013\274?\366\003\351Mm\367\304?t+|w\371\033\312?\210\352C\337!\330\237\277)+\320\0142s\321?O+xk\010\223\222?\001\201\355\306\266\234\273\277N\254\320\336{\036\225?\307\266\034\243IJ\262\277j\214S\376T\312\323\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "d\300\221%j\017\261?\245\326w\317\ta\311?\r\336\236\377\233=\330\277\013\230~&\330\017\223\277X \034\003\337h\305\277\\!6\232\352S\233\277\324E\344\354#\273\276\277\367\222:\345/\277\241?\337-&\222\202\343\274\277[\307o\305\3015\255\277h9\315\240\226;\301\277\272\362\272\033+\017\246\277\320\211\306xQ\242\271\277\250\034\202\357\303g\313\277%\024\321\242\200D\304\277,z=\022\017P\303?\237\262\206\237\2001\274\277\356\366\202\261\263\202\261\277\1776Ar\023\001\266?7\22498}\\\313?&ll\277W`\262?sV\270\271}-\233\277jN\203\347W\314\230?F\235\0343q\336\240\277\227HY`Z\022\250\277\340\235>\330?\251\301\277RR\327\013EU\325?\020\022\2313*+\300?\310\001\025\031zS\306?IP\275\200\226\226\301?\360`\256\375&~\322\277HI>\000\354\305\264\277-\302\214\361\232C\300?2x\370\340h3\265\277\006\275TPX\222\260\277e\375o\206\343\217\324\277\203\270E\227jY\301?\272\274`\321\356S\226\277y\377\232a\377\222\203?\030\003\370\332\326\276\241?a\346\257\247\217\227\246\277\211\313\027\233\275J\300?\200r\342{\347i\260\277\230m\205\351\264_\300?\257\340<\272\217\374\240\277\204\266\215D@\270\302?\346:\237S\360\226\300\277E\340|w\335\343\270?\336\256\267\316\0033\261?1\364\356]\004\'\221?\340\023\376\027\254\017\304\277J\274\211\177]\364\326?\000x\310}\000\345\275\277a\022Kc\333\035\264?\276\210\256e\226\350\260\277\231\306\305\345\224<\247\2773 \367l\221\331\306?\333\323\257s\260\244\246?u\021G\326\251\036\274?\006\361t\027\215(\255\277\355\212\244\r6\367\232?\253\254\346Z\177P\240\277\034\031\312O\216\007\306?\304\223m\206\267+N?*@o\277\233x\325\277\334\t\002\203\301V\277\277\022\362%\303\251P\316\277\3554\236\322\"\235\307?O\265h\031`\\\272\277\312\002\341\347\t\206\227\277\253\317^\3270\"\250\277\006\215P\204uK\262?\023\222\316@\213\221\271\277\211\371\234\326\367z\245\277\314}\325\365_\014\222\277\214\023v[\355\207\337?P+\305U\307v\326\277\335J\242 La\224?\310\306\3403C\364\316\277\026c\341t7\004>\277\270\321\340n7\344\320?\342\366\320\260\246_\304\277\206\337O\016zf\240?no\340s\314\335\216\277\204\324\252xCp\301\277\304\007\031*e\376\271\277\355\006P\274\313\234\274?\253\277G\241\020$\321\277\372\342\361\315z\226\222\277\027\276\300\256\344a\274\277&!\332\340e\372\267?\323d\240\356ZT\261\277\346]\344vMa\266\277\343\020\202\202\025\307\222\277S\340)j\260\r\303\277s\346I\220\222\373\264\277A\021\342\251\252\001\273?y\004[\r\0108\301\277\200p|M\277\220\272\277Z\333-\205\272\ts\277\321l\301\256B\254\323\277\210\341p\240\004O\300?\341\201\370j]\304\201\277\255\365\364\230\251[\265?\316tsJe\363\314\277\306\354\000\2003\251\267?\326 \343C\200\241\254\277M\377w\020\263F\271?\227\336\272Xx\311\306\277\236\"\006\246+\302r?H\376\020Z\224\255\272?\327 \267\350N\016\224\277sA[\232\3633\302\277\324\276g\342 \322\275\277e\023\317J\253~\232\277\3552\221K\255\233\247?\261\307:9\240T\261?\330\257\020\003X\360\322\277.D\224\203\205\331\233?\323\013\010FmP\270\277y\014\374\352 P\302\277\006\376P\365x\004\321\277|m\260\334\002s\234?\305\254\201\304c\240\322\277\354V\023\253\244\251\206?\364\206=\376\336\325\302\277\023Y\344\t0\007\245?A#\334\363\2603\247\277}:KK\341%\317\277e\232\373\232[\270\320?\237\321\247\007\324_\323?\250M=+\274\032\260\277\267\364u\333\353R\262?\253\341\303\003\200\253\264?\224\350J\251\234\375\204\277:\027[\324\317\350\240\277\327\021\204\361\034Gt?\243\203\211\206\272\026\273?\323\315\273\026\005\327\250?\212\227\270\276\265\016\243\277R\022\215\317,\005\243\277\267\337\362\216\250Z\273\277\277a?\271\003\260\266\277\313\262h\031\303,\303\277\363\027V\213\031p\303?\273\212\276=j\025\263\277\330\377\006g\250)\271?\316(Us\277\030\274\277W4\246}\220m\243?lLy\004*\233\262?\342nm\320<\300\270\277\016+Y\322\260.\307\277\332\2645\375\321\301\304?\345\002[Q\216P\271?}\026\200\270\221S\302?\262\240dxN\332\261?\304~f.}\337\304?!\266\301a\324\024\307\277k\024\200\001P\024\263?\224\231\366\345=\355\311\277|\022\304\270xJ\310\277\025i\257{\377\222\253?\260\217\205_F\322\274\277>dUb\006\321\314\277\265n\226\r\332\243\322\277\252`;^\235\327\324\277(\245\307v>J\343?\301\206$\265|\365\272?\024\276\341\207\262\251\237\277\220\'\310\300\317j\324\277\352\300`\304Je\257?\001\300R%\210\214\255?V8R\323\350\320\245\277\360\343{\035\367\264\307\277AQ\230\305\341I\321\277\266\364\007\366\234\230\306\2772\036\316\351<\270\266\277\363s\264\0204\221\340?&\214h\256\030(\271\277\302\353\233g\270\010\302\277k\3231\331\240\372\243\277\373\265\001\375\375|\314\277\314\376\t\374\353&\256?7\371\010\230\217\341\303\277\236\033\026\000\222%\232?\244\270\031E\276\357\255?\260@)\265\3301\252?\036Ai\251\'\205\302\277\322\305\025Dw\007\236?F\342\331\340x\224\271?\350-g)/W\243\277.s\260\231\326\346\274?D\347\220\200\th\305?\230Fe7\251K\322\277\361\355r\026/\326\262\277x\337\215^\276\310\267\277#\237R\230;5\317\277\3455\320\300\354P\200\277\027;\347\357)\035\310?ZL K\255\266\214\277\234 b\245\240\302\262\277\377\235\244\242X\334\331?\232\010\252&\231p\243?0\177\330(z\272\277?(\037\006\331\360\022\273?\323\250z\177\242\232\264\2778\003A\367C\t\265\277d\224\260\210\260l\315\277\373\240\206.]d\257?7\"\037O;\222\270?e\003\270\277\271\301\256?#)\035A\350e\226?K\276\265\341\270\353\274\277F\213\305\253\010\235\303?b\227f\352TT\301?(\001\321\3617}\303\277O\234\255\006|\375\271?\324\237\260\322\263\232\242?7nV\032\262A\323\277\021>b\312\202\206\300\277\254\374h\260\310o\261?\322\376\177\004\3679\250\277p\365\313R#\201\301?@\233\267bq{\263\277\343sFi\340:\250\277\316e\273\362\354\247\255?\2272\245N8\336\253?\221\223_\255\372\320~\277p\271\332\362`\314\256?\332S\274C\214\347\313\277\312\232\220\333B\325\252\277\206\037\222gg@\204\277Rn\354\341\'S\307?\264\370c\345\355\307\247?\275=\016\311Y\021\230\277\374\336,K\217\177\262\277\262k\375I\377\357\272\277\213\376)\353\225\305\301\277\'\006\245\252G \246\277G[\371\200T\225\254\277\017\335N#,\332\254?H\"\243\202\363$\253?\271\226\345\373\031\036\306\277f\303\342\255q\340\313?0(\266\312z\177\307?\352\257\026\311$r\303?\371G#\351\234Z\300?\010\1771\002\037\345\315\277\370\366E\320\014\021\307?pw\337\301\250\177\235?\244\236\202\353\342\371\230\277\345\240\027\201\341\000\233?\273\306\230[ \364\242\277\266OKA\006\347\276?\300\221\331S)\276\300?\263\320\013~w\327\316\277\355\205\235\377#S\271\277D\314\321\243\027\252\261\277[\3471A\377\013r\277\220\257\356&1M\305\277\002Z\223\273+\006\305?5\266u\326JY\217?\236i\222\301Km\253\277\013FK\250\025\317\272?\021Qt\272\270\013\321\277\262\345\013h}S\301?\370\014$x\304o\275?\203\364\276FYw\264\277\320a?\024\014\220\261?\246b\242\235)\276\245?7\321Q\204#\227\310\277\'F\361\316E\347\277\277\377\327\206^\276\372\202?\315\3731\265\2342\271\277\t\354{T\212\367\246?\250\320\344\254D\314\265\277\300vUP\354\\\322?\224\272s\'\303\222\304?{\305\202e\017-\224?\032-%/I4\257?ei\326<\346\261\301?g\236^m\032\\\316\277X*\332ic\332\272?\275\214\346\221\356\342\263\277\343S\232\331\001%\260\277\002\026\027J\177\314\301\277\037[\005\001)NZ\277\237\200`G\265\255\276\277\202\321Y7\244R\315?\000E\207\267|\345\314\277\310\037\266\207\033\'\241\277a\002\321\324v \312\277\'V\351\356\315\312\240\277\266\351b\365\221M\214\277\253f\304\257#r\254\277z\214\230%\343\021p\277/L\253\202\336\266\265?#b^Z6\'\317?\350D\300\272\n\201\264?GG\032\273\340\r\306?\367\361\n!\237b\256?\2556\215>\016\223\266?$\"H\242\323B\276\277\325\327*~\007\236\262?\220\316\316G\376q\243\277\236w\377\360\006\234\323\277\276\264\347\273nv\313\277\330\'\200\334\002\226\322\277\357\235q\200%\354\313\277\031\000wA\377\375\232\277\341\344\354oz\000\316\277(p\344Go\000\241?N\271\320e\034\354\244\277Ld ~\317>\250?\366Ub\224\020\"\300?\201}\273\236\312\255\222?\333\351\345\'\324\237\307?\332\271\376P\003\310\326\277\371\272\357\r\021\326\277\2772vP\320]~\267\2775\226\311c\037a\246\277z?\221\215\374\320\202?\324\313@,}\344\264?\324\242\222\031\216y\241\277)\332F\211\203\361\220\277\322l\325t\022Q\256?|\313\203\244\205R\244?\341\326\244f?B\311?\036\2455\221\3645:?\241\007\237\313?\344\307?\355\316/&\217\241\304?\310f#(H\261\302?\320\372\203\221\250\327\306\277\337w\3344 5\263\277\346\314\271\013o=\305?\371\217\2315#\210\226\277\2572^\237G3\276\277\262\036\346\367\3024\277?zGyA\177\265\273?_-\314\0334\315\305\277\023\335\227\024\360\261\306\277\307\027\002\'\362\205\313?/Rz\242j\366\242\277\352\304\0171\035\027\313?\207&\364\274\376T\263?\243U\021\276\215|\300?\372B$F\356t\276?#\302z\253\343\227\310\2776Cj\36632\243?>\234\334\020G&\244?i\352\0237N\342\272?\340\226\214J\221\341\304?\243\232\222\375\232\\\304?\363pQ+\\_\222?\026\242bz\374V\235?\237!\322E\305\241\217?\211\267}\372Sg\234\277(\374\213\262u\325\205\277kP\026\377\306{\300\277**\262L\034\356\243\277\375\233\372\271\r\266\342??/\257Y\254\253\265?\202VZ&\035\332\254\277\2626e\3520=\207\277L\312\315\313\331y\250\277\220\263L\030\360\306\263?f/\356\243J(\247?\235+\026\023\277.\315?\3567\2746\361?\320\277\226\321\t\313\315\243\265?*\245\313\322\302\017\204\277G5Y\356\016\327\206?\217\302\026\253\300\351\256?\311\242\375\2333\200\252\277\303\347\332\243\264\315v?\350\370;Z\201\354\275?{\345\351\272Z0\253\277_\226dL\260<\253\277\333\246\354\036\363\271\255?\005\212u\332\023{\301?\352\013\230>vn\263?\250[a\0247\376{\277Y\373\262%\204\212\201\277\022~D-\255\370\270?xV\177P\362\377\243?\244\021i\372\342\343\272\277Y\232\222\177\0249\251\277\372\000\243\350\177\372\243?O\377\271\213iW\267\277\324\341m5\346\336\225? \360\356G\242%\333\277k\331\3131`&\272?C\2713;\004(\321?\006Fn\000\2054\302\277\234\314-\013P\272\276\277;\207\236\252kP\271\277\344\201\342\004\356\366\313\277hd{2\266\210\246\277\354\035\351\355\307\001\233?\223\234\265\2021\000\220?\336\024H\\\362\240\235?\253\276\317\377\372\213\266\277\367\215CVnL\257\277\177du\322\345\243\300?\245\024M\3561\224\323\277\356W\030\227\337\213\312?\236\032\356O\277\242\255?\234=\211\270\372\'\213?\322\020f\276\230G\265?{\016\335\007\226\272\212\277S)\022f\2119\300?\342xA\035\024o\246\277O(:\212\001]\340?R\324\214\022\036r\270\277I\031i\270\234_\204?\002\313H=|A\305\277\224\336\021\024\237\324\254?\276\034v`\361O\301?\t+\374\335\350E\311\277\027{\247\334\376W\244\277C\333\030\306\353=\265?\200\211a\255\373\254\263\277$\373\031\215\"A\253?\216\003\004g\225\332\314\277\300\245\215\025\221\244\313?\204\237*\3426\315\273\277\234\307,\375\201\233\307\277i\335\020\256Q\214\265?\246\017C\313G\355\207\277\342\2624\224\247G\303?H:\210\213_\205\320?\333@p\332\210l\341?9\243\346\201\240+\253?\373M=\304\332\272\242\277\357\315o\2330\037\300?\351\001\203\344Px\275?m`N\334\250\361\270\277tH/\374\017\014\311\2775\\\204\264\021\236\250?}gA\020.\310\257\277\223\263\223\036\273\355\271?\001\242\370\3713\204\251\277I4\004*\245r\267?\320\250\215\r\254\341\277?\335\357\3077\343\034\260\277r\222\3031\375\300\303\277i\201v\276\377^\307?\322\346\304I\247\311\236\277\362\226W\027N\307\216?\266L\227\237<\225\276\277\004\254\244\356\036\347\272\277\236;\340\351\256\177\245\277\250)\300\320f\261c?\360x\334Y\022H\307?\377\262U\036\0260\267?\271M\255i\235\033\223?+Z@\324>\033\256?T\037\225\344\324}\261\277\277\375\355&\311\275\253?\356B\235\202\352\267\307?\305\234<IFd\264?\021-\023\013\206\377\310\277x]\227<H\266\324\277\321\025\025\244\033\250\304\277q\020\275\257MG\203\277H\001\320u\260\245\260?\207\022$\267A2\223\277r\264\007\245\035\246\220\277\252~D\232\310\027\325\277$\356R\304e.\307\277\223\332(\214aS\323?\217r\301$m\236\314\277\265b_\223\370\t\255\277YS\301\353\2712\223?\372\245\227\215f\013\177\277)\227s\353\022\374\271??Zo\320\273\007\261?\032\321\352k\232e\304?\034\252sk\000\333\316\277a|RK\tv\247\277\314\354EA\037\375\221?d4\030\313\255\"\227?\316\004]\246\253)\265?eI u\017\177\217\277r\246?\\\206g\240\277J\247\376\023\303\367\304?\270\302c\333\371\273\232?\\\332\340\274r\225\271?\227w\256\233&\245\241\277\243\177\\\031.T\201?K<\310\222\267@\322?\373K\244\316\025\305\264\277u/\370:\374\211\264?\247\330\317\327%\300\307?T\214\221]\224\200\263\277\365O\303\004=\236\307\277\201\267??qB\324\277\254\331_F\272A\257\277bL\250Y\013\261\301\277J\341\024\005\274c\275\277H\332\321\361\375\240\310\277\244\320\241\220\2738\264?g\177\25373\376\246?\363#\005\314\302\315\260?IB\346\013\035\277\224?\227\203Hw\234\004T\277\275\250Y\230\002\201\267\277,\022\217x\347\030\242?\256\300\245\277ki\224?\t\t6:kE\254?\350\003\036\366\2075\251?-\343\204\201\036\237\260?\333\\\026\374\377\034\262\277l\251\014\270j\373\312\277\001\244\366\030\272\357\257?$\366\232\373]U~\277\364&\021dB.\305\277L\375\000$w)\\\277\2315\271E<\350\271?3\262\372\334\375S\305?sa\353\315ZP\272?\220\277\275\277\026\033i\277r\2659\346^\023\310?\320\364\265\374\274K\244\277t-\257\027\0016\215\277\3052\234f+\237\277\277\226&\240\2401\261\244\277\227o\336g\037b\243?\345\2768g\345b\251?5\331\373\3143\332\310\277G\010\027O\374\024\266\277\2605\245\376\247l\265?\001\213\227_\267M\320\277{\324\317rzb\316\277(>\216\371\363\014\322?t\235*}\372x\300?\304\324\025\225\317\306\264?v\026S4\036e\243?\275a\365\004\251\360\221\277\300\337\331sv\303\262?\260\375<\002\0045\316\277%\243\215\"\022S\243\277\254)P\010\350\002|?\336*\235\017\342/\267?\207o%\020\211.\302?\374\303\033\262!\326\313?>\024ua\341\206n?\302\366\343\346s)\267?\265(\210L#\354\303\277\236 1\201r3\266?\377\217N\317\217H\301?I\223\344%z\273\240?@\276\242\017\016[\266\277\301A\014\376\362S\312\277\203\372\224\263z\325\265\277^K\245`:\261\260\277\204\234W\022J\315\273?\332\201KW\344\332\322?;\350\274\212N\016\214\277\001{\257\037\251O\266?/\222\216\360\341\317\261?*\006\315Y)\231\246?\203\315^\220\264\003\302\277\007K\247\312\000\226\234\277-C\276\034%\201\272?\240\215\375\222\275\326\222\277,\004h\017w\370\204?\254\266\266!+\004\246?\361\221\300$j\355\322\277I)\314\311c\245\267\277t\017\316\356l\340\227?\236\230m\233\036\237\265\277\232\256OH+\257`\277h\334\301\252L\324\271\277\"c3\221\312\276\331?ky*\0301\214\322?\035\325\252\370\346\311\262?\007\202\210\325&N\274?\005\267\330*vf\232\277\212\334\027\312>.\303?0lw\252C\312\254\277\217\272\207:iU\255\277Z\\\355,\243F\241?\323\005s\010\251\255\260?\351\342\267\206\316g\304?K\342\363\377yA\272\277(\320\242\2739\255\245\277_\217\361$\240S\266\277\217s\200U\262\204j?#t\n\210c\317\261\277\212-\272\355\373\257\302\277\r[K$\325_\306\277\320N\275!\360\210\256?\221\343\216\322(V\215\277\236\314\255\211\210Y\272?\233\346x\353Re\300\277\301\264\202\310\342\347\314?L\223\325#\346\265\202\277\'d\224\000\016\305\277\277\020\362\355\302\327\013\270\277\016\352\201\236\205\227\250?\240\276\031\350l\353j\277\005\213}\337\373\370\240?rx\217 \215\341\253\277\235r\243`\340+\301\277j\031\007\274\367\013\306\277\\o/\352\322\331\323?]\275*[\354\262\253?\304\271i\246[\241\310?\200f?Vcm\265\277\247\243\313\337\200\257\304?\302\320X\016\323\324\240?\247\020\332\326\247\014\257?dRv\033g\354\276?B\254b\032D\335\277\277nu\362bA\346\276?\217\036\234\361\027\013\306?\351wy\306c\177\313\277\332\331A\314S\305\245\277+!\200\221\373\357~\277?\2703\016\327-\325\277e\303\221\315b\237\267\277\330\225J\004\016\034\265?\3740OO\356\301\272?\000Z\004|?u\212\277[C\200\014\'\351\246\277V\354\241\364(\330\262?i\224\377\357!0\307?fI\266\361\270\300\225?S\033\237)\254\350\314\277X\022\305\263Xz\260?\262M\335\237C\247\237\277\025\314I2\177\373\234?\210m\263\020\311a\262?\000\343\225$&G\246?\324\361v\300\2064\277\277\346=1%\346\202\267?^l\210%\366q\270?\250\234^\361\300<\274\277\r\361:C2s\203?3\305T\365\352G\300?\2343;\027}t\320\277\2036\233\323p\267\303?^\305q\032\361q\276\277\2410\370\307\025\341\304?pIQ%\"\341\270?\230_e\304\365}\300?\362uAy\035u\271\2772\360\311T\2562\226?\314\177\275\220\245\365\323\277m\300\023\032\205\016\246\277\332)kQ\353\270\237?\243+\023}#\302\234\277i\033\017\272l\226\322?\261\203\365\226\032\225\241\2774\246\246\347\277\324x?\003\310\337\216!\263\304\277\227\021\364\000\252\007\303\277\260\270^\265\363\247\306?>\241\347N#\263\201\277*(\355\024\254?\243?\336\340(<\320\002\303?\177D-\205x\366\260\277I\270u\330\235#\260?b\024y\002k\241v\277\347\367\206\001v`\240?D=\365:\376\336\266?[w\332\304\344<\224?*:\351\247I|\326\277\001X\221\023\036\303\305?\275\341\0343\276\325\303\277\326VS-\336\332\251?\231\356M\004\220l\275?\263v2\3172\r\303?5\354ra\270\177\205?..k\031\200\232\313\2774H\035\004x\256\300\277\356\325S\034\n\177\347?\036\025\303\242\031\001\260\277\261\243\257\355\302r\230?\360z\377\304\350]\256?\227\364.\332\353}\252\277\362\237W\300\305\346\301\277\363\225\353\203\357T\312\277\327\256\304\213,P\270\277h\r\217y\255z\245\277,\364~0\n\334\317?z\272\003V\334=\313\277\362\341\016@P_\232\277\246\002A\272\247\214\275?c{\330\3227\327\306\277\300\352\\,^q\262?\307A\203\276\233\205\242\277\350G\362\3116%\233?\341\312\000v\212\345\317?\000\331\r(\t\221\272?@\330\214\225\221\026\300\277\235Q\355\024T5\310?\022\301\362\313\377\207\221\277\241X\004\330\005\302\303\277\242CD$\034e\234\277\341\213fFY`\317\277\034\307\013}\334%\307\277\272\037\377\302\234\"\270?R\226\245\270\275\372l\277\n}7ug\233\261?\374(\030 \363o\320\277o\372\021\241g\272\263?\367\001-)4\334\320?\212xe\362W\323\264\277&e,+\240\374\237\277\037\372G\313\241\235\322?\022\346c\271\303P\317?\344\372\227\207o\257\320\277\312\236\022\355B\251P?)\244=\354F:\302?>\371b+f\345\246?\240\000y\315\351R\273\277\027\342Z\316-\303\210\277&Br\366\240\270\320\277)\217\376[\265\201\246?N\212\3035f\320\254\277\273\344\035\255kh\331?$\2416\213\0273\221\277Ir\307\347\247\"\300\277\255\n(`F\355\214?\335 \322>g\274\235?u\'\212\215\254\311\252?\205\203\323\3228A\307\277`|\231@\217\342\260?cb\256\325\314(\310?\371\274\274W\236\023\253?\035v\204^\215\312e?(R\007\356\010\223\314\277!r\267\237T7\266\277\331p\000\211\356\300\256?\2454\232\033\2117\274\277\361\\\223hu\251\273\277\205Eg\r\016\036\266?\234\253\251\306\201\007\246?X\251VIw\353\320\277\364\237\336O\234`\274?\224\020`\225\222\235\326\277\220Q\233J\206\320f\277\345\016\263\372\002\257\247?\370\222\200\317\266?\332\277\223\030:\014\333T\265\277\271\016\257\230\327j\235?\307U\021$S\340\307?"
      }
    }
  }
}
node {
  name: "normalize_element/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\263\"P6^\017\245\277\026\t\007AY6\307?\357\315>`[\366\303\277{,\303\025\302R\226?E-\220\3474~\331\277\001\262\307\205\276\023\264?0>\342\275\320\320\262\277\265,FR\3177\253?\351\253\3113;U\303?E@\216\030^\246\253?\331\272\322X\231\000\277?l\235D\313\324\026\231?/E\204\024@O\262\277\233?\341\325\276\025\310\277\330\362Z\375\212<\227\277\340\372H\223\200\223\256?\2208DT\304#\253\277\316:AKrG\303?g\362a\310y\027\255?;A}_t\265\247?\2503\333S\355\277\243\2771goG\307\225\320\277\366\331g\265\341\031\243\277c\'\274VW\244\262?\315\243A_\300\236\312?\023\304+\320\0036\311?:\256\033\256< \261?\326BM\374D\327\261?m\207\2234+a\314?\347K<\317\225V\220?\241\372\000Y\262\300\255\27745\245T\027\376\265?\276\221A~\243O\257?z\325y\033\026\214\312\277\210\320&\356\013\002\206?\007\244>\212D\316\300?\374P\326\350*\n\310\277\000|\344N \254\246?\263\376KyV\001\305?8\316\256\237\332\001\301?\2703\002\200j\255\252?\322\254\020\360\365k\241?+\345R7\370U\227\277meeE\343\232\322?\325@J\177\274\361\256\277.\317\337\326\033g\300?\256\002\033Cw\003\303?\220\253\342\237J\320\221\277\357R\340\370\016\376\266?\332\017Y\226kA\265?ZZ\264\031\256\303\257\277\004\260\333\367\366\377\322\277]\231\026\361\357\362\246?pR1\177\263\025\263\277\304\255\347/\037~\267\277\336\347\325!j\254\275\277\356U\356\304\206]\312?Y\301\265\277\2427\207\277\030\027\217\030\261\355\240?\316Mp\033\261C\301\277\356\265\335\213\346g\262?\367HHN\366Z\323\277\007\365G\304q\210\301?;\016vdC\007\230\277\336S\236\216\022\216\275?\355@\343^\340\031\266\277`\004\374 \273%\254\277\320\312\343U\262N\262?iIRF\210\225\242\277\345\312\315,\230<\303?\325\237\016h\202\216\235?\222q\300\177\356O\306?\333\0302\300\013\377\264?\255\020\352e\036-\260?\301\302\235u\034 \300?2@/\341\203V\264\277\370\001\035\034\035S\200\277}\006\355B\007B|?\231\020v\002$\207\254?\024\221\375T\277\321\266?d\313\220u\255\216\257?\274\2279\324\220\211\217\277[\277\345\177X]\276?\257\005\246\007\330\307\232\277\344\253\035\311\364\017\262?/*\370\340I\345\265\277&\373\310\250\225\302\220?\006R\264\"\336\325\236\2775\030pf\202j\242?\334\017\3133~o\272\277\257\013=,\027\013\241?\034d(\033\2450\252?\267\\_\024E!\263?\003\215\325l\027K\201?fp\227\260\243I\327\277\361B\032\355\312=\272\277\370\303B#b\310\250\277\207\271% <o\304?\202\345\371\202\3142\271?v\026j\244\227\337\273\277\361\024?\363\242\n\261?\325\221\230\323|\326\257?\344\240\303\000\013\317\252\277k?\255f$\251\267\277w\032rkP\342\271\277\352\350\224D\332\024\301?\3662\213\3133!\244?\371Q\177\246Pj\226?\206\243j\376*\327\224?I\327n\215\350\336\264\277\207m<\201\024\272u?\242b\315\236\211\263\230\277\305\320\342\341\261N\270\277\0368\307J\375?\273\277\325\026>~\306\307\263?&p\2038\204\207\331\277\t{\003\343G\333\226\277Sl\321\'\202\366\323?$\273c*2c\232\277\272\356\024\250\332\237\264\277\t\334\304\341*\365\331\277\021\234UE\232m\266\277\334\032\324\250\223\275\307\277SDR\250R^\272?4\2607\226<\000\245\277\217\026\274\306~\303\271?i\300I\344T\323\310\2774y~\303\243\376\241\277\033_\303\200r\030\310?\255h\264~\023\323\201\277z \376PS%R?.VV\007\242E\261\2775J\257\024\207\253\232?\263X3\332\307\034\205?\216\212\376a\320\355\274?P.OD\373\241\322\277*\345V\n\010\224\314\277\001\"u\343N\330\206?\r\357.|7\316\313?\370\\\300\022\223\251\231?\326\355\367B\361\224\304?\257Mh\252y\340\245\277i\201\261\356\014;\217\277N\213\235\2634\260\225?fJ\272w\300\232\255?\355l9\3626\216\220?\317Mk\223\245\372\270?/z}Y\003M\303\277wH\031\343\352\211\275?J\234\323\010Ky\247\277\033s\346a?\231\263\277\310D\357\375\222T\202\2775\303\267\224\365\362\247?\271\360\332|e\300\317?\232~\037\253\371\326z?\365^u\036K\210\225?>\2642\022\326[\262\277\"JHO)]\231?\234\261^\343s\347\234?f\336Xm\361G\220?\027\305\265\240\215\311\257\277\221kD\215\303\244\316?9\3744\211\227j{?\244\245\215\013\003\373\264?\304%wkP\003\320?\033[\003\231\242\200\272?#\267}\306\240s\302\277-\236\314\320\307\304\221?\367\367zt\262\367\321\277\220\262Q\026E\204\232?\330\224Eb\027\202\253\277\250S\030\357\306\244\243\2773\230a\377\331&\263\277\212\002\030\037\000:g?\307\325\353c\334\254\260\277\232r\213%l\336\242\277\304\245\003\211\341\340\255\277\177I\037\010\247i\271\277\337(\252R\2246\244\277\177vKz\346\250\273\277L\317\037\206O\362\275?u\237/3\030y\242?\237\226\323\323\315\333\220?\344\001(\234\222\r\310\277\337\354\225\010\232\340\301?\225\307L\025\322\014\262?\332\246Ot\224\201\327\277\030\277I\227V\004\302\277\202eI\236^\374\241\277\302\177\212\357\340\026\262?\326K\035\272E\244\264\277 \341\215\022\245I\306? \320\366\035>\n\205?6#\371>\316P\264\277P\024\331Z\230\220\260\277\201\344\366x\242\215\273\277Ev\030\003v\\\250\277\005\224+\365k@\306?\310.9e\354\233\304?\264y\323\334\303\003\222?6\035\272\026\324\346\274\277\013z\340\317?\245\314\2773\013\253TP\342\264\277\355Y\r\2756\374\231?S\271\336\r\320{\242?\321\254\027\242B\356\314?d\340\340mED\262\277\341G~<\365\347\253?\253\313\363\313,\205V\277XF\342\311\370\257\255\277\020V\001\033\246\246\225\277I\255G\'\246y\230\277\010!>=\014\020\314\277o\225\275\317L\n\272?\325Ol\017&\240\274\277AKO\227\305\335\251\277]*\275\035\302\021\200?\242$\251\265\364\304\273\277\232\356\263\2275x\302?\245\005\347\177\210$\215\277\r5[Ia\211\232\277\256rv\242\201\004\257\277\234\37375\311\007\276?\206Q\006\263C\347\265\277\326\313\253{V9\263?l3\227)\333\244\250\277\204\366\264h\272\377\264\277\226\036C[6\270\275\277\264_\227\261\016\250\302?\355{I\371\330\274\266\277\356\275\302v\204$\230\277\300\003\236\217s\360\241\277\331\327\264\361\323\000\246?|\326\302\016#\364\212?k,@\'\031\300\246?\216 ?\302&\325\247\277\006\333`P\230\314\311\277\343\2450;\246\353\241\277\252k\032\340\265\204\267?\021E\375\333\207\314\265\277E\223\237G\226M\304?\027\035\303P\325\237\222\277]\310\273\240>\205\255\277u\265\255\375\376\313\305\277\237]\213mx\343\230?^\377\241\020\002\204\306?\215\306\2237\033\272l\277n\021\3070\014}\264\277\215h\333\234\366r\262?\201\276\t\310Xn\243\277\343\267\323\216Zs\276?m[\321\027\004\205\263?\321\n\t\232\242\375\260\277\321}\010\316\221\367\261?\014J\242\301\375\240\263\277\3007.\263!}\207?\263\002W\2372&\223?z\337\347O`\335\207?#\377+\035\005\303\316?\276HS\357DQ\266\277\345\220!`\251\024\267?\3174\276\335\030;\235\277C4\276\232\373M\245\277s\032\367\371\244\374\277\277\353/LK>:\263?\257\206\346\305\367\237\274?\"\335\030,\323\327\240\277\316\252\032r\205\334\256\277\205(\222\331.\307\204?$\266\305\212?\205\244\277>\220}\215Xw\246\277v\270\304\363\031\275\276\277\224h\347\317E\265\312\277\371\262\362\363X\201\252\277\352a\014\335\232t\242?\364\366\273\201\256\373\247?\n\223\025Fu\224\322\2771\335\262^E\005\260?J\321\204\376\264S\273?5\261S\352\362\334\220?B<L,?\333\263?7/\r7\364\340\204?S\276a]3\226\312?0\320\320Z\177,S?]\036e\221\270~\252\277N\005\374f\334F\227?9C\212[!\314\224\277{\303\r\031\032\r\243? 7VK\242\253\322\277\357\374\347\330\306\334s\277B0\027\326\351\\\223\277\032m\376\355\273y\254?\374\276\327c\035\375\265\277^x\242\364X\026\315\277\275\307\236\305\211\212\220\277mr\311{\222.q?\005\271.\003\224l\211\277=\202\352\004X\274\320?\355\t\215\253\343\205\270\277\361Q\326\300\022\202\271?\374\201?M\216\200\237\277\267\323\213H\340\030\224\277\'\330\002\370^\337\303\277\037Ee\320\357\301\243\277\255~\003\353\217\025\315\277\265\335\352\017tj\264?j\333\222)\202q\230?\206\275\276\245|a\255?\002\270\007\363G\316{?\247C\n-\021:\250?\226/*\236\245\232\264\277U\3324\367\300&\305?V\214r.\213K\300?\2431\274.\303/\312?E/\324\332\261\314\274?6\276\251\222\367\216\257?f\310h\326\320\030\264\277Rt\214r\246\233\251\277\317\034\373K\361\267\227?\245/\276\271Dq\274\277!Q\244s\347g\235\277\033\267q\261\"\327\301?\017\303\2660m\266\260?@\301S\301\263\024\240?\\\261\362\301\215\370\275?\0049\004\036\267n\241\277\250\005V\263\367\356\300\277\027\315\375\232\2052\256?\0201i\tA\211\300?\274\250\004\375\357m\301\277\223J\nM\307\027\324\277d\200\023\302\204\361\265\277^\335\267\340\371\341\250\277\317\317o`\240!\267\277\364\323v\357\332\232\267?#\345R\343\001=\305?\306\r\177Z\253\237\234\277WV\275U\303{\304?\262\2212\260\3555\250?\210b\207\002<\243\233?\004\217\365j\203y\252?\000\313\370\017\220\244\266?c\363\254\006\250\313\320?\004\0207\271\317\202\240?\240\026l\340>\345\225\277\302<\274\363}=\257?\362\274\262\217\347\273\246?\213\352\354\344[\016\275\277\256\225x\025\255f\265?\331\267\253\305O\000\314\277\362\030\360u\363\027\244?\217\314\270_\206S\007?\001<R\260\034s\255\277\304\007\247\250\311\344\253?\177\323\314d\376\001\266\277\224\240\246\3227\235\265?A\307X\327\252\275\307?\320\357\323\236C-\261\277:\234\361<A\371p?\327;\026\227\346\260\253\277\003A\234\335i\273\327\277\240\353\277/\033>\245?\221\352\256\260\320\353\240\277\022y\312\352\245a\242?\366\336\177\351\341\022\231?w\253\316\3448\270\242?\005\225\316\220\205l\215\277X\232\230!8\"\220\277\031\017\326/9\376\260\277ql\316\233\340\261\237\277\344\352\333\3170F\233\277\210\312@|\212\021\316\277\304\357\205\03490\322\277\230\013M\317:\275\302?\220\204\035;\022\203\243\277y\257\222t\344\213\262?Vd$\r\230\r\271\277\227Y\360i<*\262?\341L\347\010|\r\311\277\3431;l!G\221\277E\025\331S\270D\313\277\303\246>&\345\016\262\277#W!\333\033\221\261?\235)\316\347\322\341\217\277\240\307~C\300*\223\277\025]\001\357<\346\274\277F\274{\315\231\313\305\277\004`\206\204~\307\274?\037G\334$\240\271\242\277Vy\253h\356j\306?\2633\356\331\263\345\266\277\236SV5vN\320\277r.\204\342C\237\262?\032\374\031,\310E\254\277&&\260\266\225\265\305?\333\326{Ah\004\300?f\024\304\034\300U\264\277\353G\374\307\037V\261?\204\226\306S\'\315\252\277\377g\304\020!\243\270\27738\371\365}|\226\277\010\"\243\364,\233\212\277\306\265\221W\304\331\262\277\007\207z4^\204\301\277O\333:U\203O|\277\257_\211h, \305?O\230$\235\'\205\217?8\316%\304\334\363\310?\334\240G\207UH\313\2773X\037\314Jn\212\277\305\212\036\3273\274\233?\0143\253e\344)\275\277\364\355I\\\024\306\242\277J\266\260?\225\034\301\277ew\217\314\311\352\274?P\353VR\330\224\314\277\2004\237o]\336\300?\374C\035i9R\272\277\270\033\016V\020GP?el\233 \n\'\231?\363\271?\276\037t\244\277=\256\336\345U\030c\277\034d\273~\364\266\211\277\240\003~\270>_\206?La;\234\320\231\303\277\237\223\374)\200D\300\277?\n\304i\331\344\253?\360\357\016Y\313o\303?\236\276\371\203\267\301\254?3lq>\013\327\262\2774q\327\203\310\236\316\277\307E*\275\372\024\315\277\227\274\003\021\0001\302?\265~\000\305\374A\232?\250\034\226\020\231\376\255?\243W\250\250\234\002s\277\003\355<\032h\361\243?\241\207\226\221\005\234\303\277)6\177\032\\\r\214\277y\343\266\027\366\204\300?/\032\260\205v\311\335?\366\3042\001\t\316\230\277\225\t~\224_\r\224?!\330pt\305\334\304?\201`\202z\373\316\302?\002xQd\3635\222?\023\221\341+\341\035\320?\213\311\215\320\213\340\227\277\355\020\217p\345 \261?igO(\376\335\257?K\254\277\302\014 \233?\247\265\nv\345\325\230\277u|\007\243\330\233\275\277\231\372\315\354\351d\265?z{\331\024]\233\200?$i\2528\025\253\206?i<\313\320\3155\243\277\217\007\226\254\345\300\255\2777\315\206=\304\355\255?b7\315\327\360w\263\277r\331O<\207\277\232\2774\312\273\236\226~\304?#\370wG\230\034\275?\255&\355\033;9\266\277\230\302\\a\374[\272\277J\342\236\340\025-Z\277CB\245z\301\271\256?\324\031\006\261\241\013\223\277\330\310{\212\203\023\330?\307\230|R\352\301\267\277\245SH\355<h\316\277A\265\345\243\272\225\310?\345\002\242K\n\260\300?Wn^n\026\246\265\277\035\256\212\246\356\342\271?\337[[G\302\263\313?_n.N\376.\240\277\337\225\371G\036S\261?\273\216\270\243\341<\316\2770\344\274=\221G\253?\036R\226\352\321-\264?\273\352[\014\305\321\270\277\241\344\310\323?\272\323?\357%uVZ\213\215?F>\372\351\206\242\307\277\350\200l;\347\303\303?\372\264\342\230\024\261\306\277\307\304\031`\213\331\226?\3148\314\260B\307w\277\275WP\034\271\026\226\277\316\235\023\307Z\242\321\277;\217p\236\271\021\255\277\013\034`c\277\003\314?\222h\257\007[\334\234?\221\272\332?\2741\246?\252\206\217^\037#\336?\224\020<Z\361\202\277?\345\031\036X\314]\253?/\262\006c:)\266\277\302p\036#\327\324\263?0BEi\257\342\224?_w\303Oe\377t\277$\244\225\374\177\237\276?\026wF\356\272\222\300\277\353\0161T\204f\306?f\220\nL\223w\276?\005\366\374\033\t\030\310\277bz4\022\353\033\245\277\372\223\233)\t$\305?/\222*K\342\305\204\277\003\256,\307\207\027\262?n\376\030.\376\t\302\277\327\307\307\225\370i\272?\0056&\311\001s\232\277\023\365Y\331kk\252?$\230t\2057\213\276?\300\337\324\207+\343\222\277\024\355\232[\246\234\221?\023\261O\236\315c]?\355\327\263\360u\027\331?9\357\330\356A\367u\277\206\256_\344\261z\243\277\340\260\0075\345\376\225?f\004i\371\242\031\247?\377\213\3450\221b\275\277\032z\234%3\361\264? cpaO\311\264\277v\351+\203-\222b?\177\026\016C\201\267\210\277\250\340/\216}\206*?\266\257U\344\361\032\310\277\352\212\247\312\234g\220\277\200\233\323\262\207\027\227?\200|N\263\351\212\236?T\177U\341%\201\301?$\016\221z\250W\213\277\241\352\020\303q\006\267\277\223\300\r\226>y\267\277\227:|\337G\020\252?\235\324\374\363\277\201\255\277\375\372\356\234\345L\277?\016\375\207\r\177\325~?\001\006l\240\t\230\323\277V\313\222\016\357\276\251\277S\234z$JK\264?\024\275~g\376\342\301\277\200\022j\277\254\\\302\277\313\311y\022\031\223X?\335x{\000gE\204?O\035\231\021i\302\260?\245\332sG\"[\216?\346\315\243`\344\236\222\277p\354\3248\237=\267\277_\366\247w\330\030\264?\027\027O\201\004\306\267?\261\n\r\330\270\255\256\277\255\031\300\210\005\337\245?\246\250\220\362\220B\304?[c\312\272TO\267\277\343,5\335\344\322\252?\353g\r\322\261\277\241\277\032mv7R\323\321\277\257*\0008\031\271\266?\241u\t\371\364U\330?\332\261\300\265\365\226\264?\251\241\364\364\241N\302\277P\3737r\013\312\241\277\220\235\273\255)\240\306?\333@\343}\314\270\253?8!\0078\365\210\224\277\215W\231\203\255\245\244\277\274q\326\276\212\246\262\277\250\322\266f\341L\253\277OKmh\'\022\307\277\025\240PWx\232\241?;xM\321Zx\323?\256g<\355\366gi\277\366\001!\303q[\274?\305\351\257\300\025\340\301?H\257\223\345\215\220\243\277\267=\321\257\357\255\263\2771\260\302\203\353\303\217?,\215k\371b\205\276\277s~R\226)\351\250\277\227\331%u\300\275\273?]q\275o\236-\271\277\014\"1:dH\256\277E\334Mv\371\035\260?t\310\236\246S\213\250\277\235hH\222\266\201\241?\033oV\271\234\362\246?\207\246\232\332\356\242\306\277Z\332\'\016W:\204\277YD\306>\222\243\300\277\302\364\265`A\333\246?a\026{S\337\224\213?\350$)\314\3336\305?\306\207\r\221!L\265?\033M:\344\320*\242\277+\273\317\204|r\245?\344\255\273\2425\217\312\277C\200\025\366N\232\275?$/\326\371\035\035\312\277\034\270L\344A\362X?z\2720\315o\316\306\277\025V\304\2645\002\227\277\315\357\312\343\354\252\307\277O\240U\323\001\271\220?K\303\004$0\354\270\277\316\214\376\030\225`\316?\254\t7\211\026\023\231?\327*\272\334\204\027\276\277\210\377Z\377$\251q\277$8w\320\273\250\270?K7\267\230\321M\272?+v@\266pn\255?s\351\346oHr\304\277&{\'\001\\\007\177?\203\343l\327\367\177\323\277\017\272\263\313Z\002\300?\331\243\251\361\232 \276\2773\235\251\221\334\223\271?\365=\2746\016,\254?*\374\324q\234\271\227?$\3360;9V\303?+\036\241\244\005\220\250?]K\272<+\364\272?\213\343\023\367@w\254?\033Z\261gm\206\254\277\177\277\006\223\002^\274\277=xc=\305u\260\277\270\321a\312\004\006\276?\374\330\254\371z\314\207?\200\350\314\373u%\230?\325:\377s\013\032\230?~\206!\321\272+\241\277E_\331U\377a\312?_ V\320 Zs?P\270\232\226vD\242\277\336r\364\252Nk\321\277\332{\230\370\356\303\264?\274bn\003\004\206\223?u\374E*\030\004\316\277\365\027\372S\335\373\313?\204\277\366\'F=\264?^i-\325\276s\264\277s\357\034\367\006\022\261?\275\312I<S\t\262?>?\223<s^\256?\335tm\342I\034\211?(Dl%\217M\244?ob\221\262\221\366\260?\3506i\315\212\224\213?>5`\253\232\027\323?\014\n\222P\010J\323\277\010W\244b\236Fj\277\233$\221\006\205P\244\277\366\037\343\037\271o\273?\364\256\353\240v\306\240?\r\243\032\333\211\264\275?\031?\321\017\225|\275\277\216_\333\253k9\263?$\340o\327\261\032\263\277\000\302\260\023\036[\235\277o\254\357\236C\027\260?\266%7\347\207\031\256\277j\361\004\272\005*\225?\026\377\307\035o\274\204\277B\'s\344\260\222\256\277q\211\334\361\262\000\214?\330\305\005\253\002\352\246\277R#y\301y\007\217\277\377N\026c\362(\266?\377\200\024\366\347\273\277?\315j\231b)e\260\277J\311\225\001#\243\252?\242\177i\312\302\262\257\277\3076R\302\312R\325\277\260\3500\277x\266\275\277D!T\347i\353\262\277\314\346]w\\}\301\277#j3\251\207j\273?/\0224\2359s\261\277K\030 x#&\300\2772M\305jm\263\264?\317\217\3648F\'\270\277\222m]?\222\032\301?\025\343\034\254XT\205?*\264.\234\306_\246\277\201\201\303\246/\006\213\277oV\020\353\226\312\271\277h3\325\034\326\206\276?H\350\021OF\275\251\277o\352z\354\260k\313\277f\204\3122\303\"\300?\334\'3v\024\224\245?}\332\323\217\243P\251\277\230\343\037B\214\322\267?6\341\341\3757W|?\036\216\357\303]T\235\277\343\023\243b\222\t\300?\252\265\"\031\377\253\266\277C\t\013I\256\332\272\277\360\n8\004\2318\243\2770\n\231\353\n\214\302?]F\357\200\303\"\254?U\205\344\357W\025\263?K\373k\001\000\036\223?\355\205\273\300\231&\276?\331\023KR\251\252\261\277(\030\336c3\217\265?\362\244w\322\266N\316?r\335\342\273\033\334\307\277S\340\217\334\312\372`\277\375\267\251\034\030\240\234\277\037\377\357\264\237\037\304\277G2\244\215\217r\322\277\322\253x\353@\375\253?\371\233\251\3069\310\270\277\005\177\021\200\375\035Z?o\327\274\223\3554\261\277-\222\177\361\004\261\232?\273\225\330\024\201c\260\277\313\222\316\301\271\240\272?\366H\273\312\005\204\266\277\to\235\t\247\342\253\277\211\271{tF\212\263?NF\300v~\361\255\277\rm;\035\006\016\262\277\272V\252\277\275!n\277\242Fc\006\0163\234?\232\374\037\303\025\222\311?|&\371\317\257\024\310? \337\3412\357\305\301\277\353\244z\300\232\022\266\277(\365`H\376X\242?`N\027V\027\261\315?\302\334\314?\217\'\327\277:N\n\331\013@\261?[\376\246_E\257\251?\342\204,\376\t\252\266\277?\305\231\221\201\020\260\2772\270\025]\377\265\244?I\375\2775\357T\324\277\'\253\325\262\206\037\330?\326\320F\207\344L\300?\202]\273&\344_\262\2777\031\244^\215Q\313?I\305\220b\234d\321?"
      }
    }
  }
}
node {
  name: "normalize_element/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_contentt\000\000\000\007\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\006\000\000\000\002\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\006\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\005\000\000\000\002\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\005\000\000\000\005\000\000\000\007\000\000\000\005\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\004\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\007\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\003\000\000\000\004\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\003\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\007\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\t\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\004\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\007\000\000\000\003\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\003\000\000\000\t\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\005\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\001\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\004\000\000\000\010\000\000\000\005\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\007\000\000\000\005\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\001\000\000\000\t\000\000\000\t\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\002\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\006\000\000\000\004\000\000\000\002\000\000\000\006\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\004\000\000\000\003\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\tt\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\007\000\000\000\002\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\002\000\000\000\002\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\010\000\000\000\001\000\000\000\006\000\000\000\005\000\000\000\006\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\005\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\004\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\006\000\000\000\001\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\002\000\000\000\006\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\007\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\003\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\007\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\005\000\000\000\003\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\005\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\006\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\003\000\000\000\003\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000\t
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  input: "normalize_element/component_10"
  input: "normalize_element/component_11"
  input: "normalize_element/component_12"
  input: "normalize_element/component_13"
  input: "normalize_element/component_14"
  input: "normalize_element/component_15"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_6"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_11"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_12"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_13"
  op: "Cast"
  input: "IteratorGetNext:13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_14"
  op: "Cast"
  input: "IteratorGetNext:14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_2"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_3"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_4"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_5"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_6"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_7"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_8"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_9"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_10"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_11"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_12"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_13"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_14"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 15
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\017\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3651483654975891
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3651483654975891
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 15
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_25315"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_25314"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_25385"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_25384"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_25454"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_25453"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_15"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_16"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_17"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_18"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_19"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_20"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_21"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_22"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_23"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_24"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_25"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_26"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_27"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_28"
  op: "Cast"
  input: "IteratorGetNext:13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_29"
  op: "Cast"
  input: "IteratorGetNext:14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "ExponentialDecay/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/initial_learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/logits/BiasAdd"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/labels"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/Assert"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims"
  op: "ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/losses/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 15
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 15
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp\\part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_25453"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_25067"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_25315"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_25385"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_25454"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_25384"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_25068"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_25314"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}
