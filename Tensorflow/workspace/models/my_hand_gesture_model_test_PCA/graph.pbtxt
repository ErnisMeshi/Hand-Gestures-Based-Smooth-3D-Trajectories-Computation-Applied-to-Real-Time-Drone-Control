node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_25080"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_25079"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\204Z\244\253O\222\326?*\361\003Or\353\361\277&\352\352\264\0239\301\277\203\006\257]\334\254\323\277W\273\006\030\005\244\365?\321L7\023\021_\356\277\312\367n9\362?\323?\345\025\314EU\316\363?\026\206r<j\361\363?\307i\nu\3135\372?\263\"\022\237\005 \363\277\200\272\343\366\020\177\361\277r\233>i%\263\363\277\220o\342\232\262\306\373?\203\222\232:I\273\362\277\302>\327\313\3150\326?+\017\230\030\351\201\313\277sa\202/\305\264\364\277\245y\037\322K\224\302?\001|\031\t\223\370\300?\342Y\3255\364\214\321?\272\371)\026\303\001\355\277\340\234\023\215HQ\365\277\002\3119*\313\237\320\277\321\320\304\240\323^\355\277\242\333\216+\256X\360\277\227!F\256\217\t\366\277\343\214\310\305\320[\350\277\215r\205\224&\027\362\277\222w\350\334[\034\322\277\373>B\376`o\301\277\320\225\372\263\001z\363\277\t\213\243\260\2552\342\277\311m\235T\034\"\356\277\340bqH\231;\361\277\027\330\002qU#\311\277\211\323\'\354\344+\343\277\313}\001\017\036\000\323\277\205\355\023<a\261\352\277\347\357\027\214\375\245\365?\002\317 \017\352\226\361\2776\202\334\325\371j\314?\270\236[\251\327\375\321\277\257\t\303\003[\'\367\277\022VB\003\221\307\314?~\210l\251\223\216\332?\337\0362\243\255l\361\277\372\203S\321v\347\340?\212\333 \362$6\363\2774x\227\212\200P\357\277=T\312Iz\311\362\277\236^\377KE \366\277\203k\351D\347\003\373?.u\210T\367\324\313?n\00786\252\037\306?]\027\202\377\255\353\365?:\301u\257Z\260\371?\367\333o\325\024.\324?y\003\032t\206\217\311?%S&\244\n\t\354\277\272%\177\267\276\311\364?\313C\316y\273>\355\277~\345\220\003\031\331\363\277(<\322\366D\211\332?.\216&\000\340\246\320\277\272\303\302\004g\350\355\277>\354]5\000\335\267\277\317R\234y?\377\311?\224Y1>B\274\360\277\026\355\354\033\021\257\366?\245\004\021\221/\375\361\277\223!\216\031j\026\327\277\260\3460\323\006\345\360\277\304\372\036\200g\303\325\277\277\243~F,\237\363?Vt\204\351\261\252\371\277\241`\266G\347\037\320\277p\020\313q!s\362\277\013G\302\350\344Y\260\277\004\211\264\203f\004\364?\361\277\315c\366\207\366\277y\002\326\261-\220\205?]\237\204\247\263\362\360\277\242\232!&\352\346\317?o\342\\\234\304k\357\277\357\264\343\221\370\367f\2779w\267B\023\327\336?\017\241\365\330U\354\364?\315\263\200\004\006/\363\277\031b\034\250\364\004\364\277\310er\341[?\332?\265X\325Q\357\270\363\277\345\340c\332\272?\366?\t\022C\031\345X\370?\250z\321D\210\373\370?\212\3707^55\356\277\334\\!\212\305F\364?i\207\247\245\001\234\337\277\356\214\266Dr\300\335\277\n,m\007\\\250\277?\266\036\036\255{\005\370?fp\351P1m\322?\220^\237NE\220\307\277\370ry.U\017\331?\3610\313g\227\310\362\277I\tPKUt\345\277p\010X0\223\220\363\277\365\223t4,\347\317?\206\022w\306\026\210\367?-\025}\231\252\347\326?=)bi\203M\316?\360\317\013\216\346\255\335?U\352\034\327^\341\363\277f\321\005SR\353\355\277\032\370.\240\226\005\363\277\020\253\t\326.\215\355\277\376\341j\225\\q\364?\021\010\300\203\360\264\341\277h\245\343\364\251\213\305?\206+4~SN\357\277H\300DL{S\366?\362V\343\213\036w\265\277\251v&\313\305\376\323\277\222}\007\253\006\241\311\277\326\216fi\301Z\335?\301qm\025(\360\361\277t\321\221\260\345\311\356\277\256\tC\324_Z\362\277Zo\356:Vm\370?\210\341\371\001\302\264\370\277L\037\021\263\205\327\371?\226>\004\004\362\206\237?$+\271\262C\277\321?W\260\212\2546\352\303?5d\037Pm\252\364?\360\304\344[\254l\356\277\306i\352\260\364\372\352\277\262IN6\364\252\320?\274\203\025\265\236\242\352\277\316\271\253\003!\013\364?kT\356J\351\311\351\277\r\230\377\267{\311\364\277\202r\367\370\321\234\316?\323\303_D\372,\362\277}\010!\356\355\177\317?i\020\333\260\243\230\363\277\2365\342\334\266R\364\277\350]\306\201\364\366\360?\031)\246\234\230\340\360\277s\207\336R\304\345\322?\222o\340\256\035\256\363\277\177\313h\231\260\261\360\277\004\023\370\332:\351\275?\260v\245\026\005>\360\277\211u\357\244Pd\312?\031\030\346u\355G\265?\227\327\246$\030\361\362?\270\275\037\325\317\325\236\277\'\357J\306R\247\264?}\231>?J2\316\277Kv\360\004\251T0?\254\364f\232\205(\353\277\2418,~\203E\365\277\001\200\343u\322\372\361\277)H\\\251\2157\364\277\365\271\261hM\000\304\277\002\357\224B:R\364\277\002\365s\021\177\263\317?\254HM\244\323}\352\277\017Q\346\325\266\001\264\277\263\324\3311^3\326?z@`\262\332o\321?\207\311\352\306^$\321?8\250\\\271e\350\306\277\376\2279\313\2166\314\277v\006\372\202\336\376\363\277z)\352\335\r\207\304\277\267x\260`\304(\355\277e\034\265\026]\261\366?_\317\353\326\001V\363\2777\300\004o\333\257\367?\244,\247\376\344\237\241?\251\321\307\233\005\371\340?\226\025)\317\376\311\315?\3546>at\307\367?jN\026\230\351e\363\277\"\r\016\t\340v\357\277\317?\320\003\331Y\304?\240`\3525\200\276\334?\"\274X4\006\245\364?0\203\317U\210\303\311?\253\252\'\207\235\356\344?\376!\215c\321\210\321?\266\333\221.-t\331?\256\300T\273Bc\365\277\243\320nQ\235\314\257?\215\2031\340\234\020\315\277V\305\2762M\311\365?\200\304\002P\021\035\370?\027?\225\177\034\353\363?jM\2541\203\356\245\277\371\333\322{\037\364\350\277K\343T\347~\205\325? \202HC\365\277\332?\231r\022#p^\316?\005\350\244^ue\360\277 \214=q\000\224\317?\317\345\345\221\000\301\242\277!\355\316\263\2627\332?\200Y\247O\321\025\361?\365\261\347e\361\347\320?\335t\231\030\013k\341?\343\330\303n\361_\355\277\032\331sv\321\353\362\277\177uMQI\240\347\277n\210\005\237D\317\305\277\244\233\333\212e\255\363?\315\342Fo\327!\315?{6\241\310\006\267\306\277)\033?\222]X\365\277h\021\207,\306\245\364?\002\362o\217`\334\331?\242\341<\037\372\034\366?\345:\252\002H\274\276\277\241\320\352\252-\035\370?pg\010\014\373\266\333?\265\347\244\315\365\353\364?\305\305L\355\211gz?*\020#\356\363\354\360\277>\202\267\274\277\t\371?\230m\300\243K\264\305?\232\260\311\364\355y\327?\320\303\366\212s\010\363\277\347=c\t\224\350\265?\034\377m\007\367\213\363\277\230\266\3374U#\320?\270J\207\"L\337\357\277=\\\210T/\223\366?\263\36181\025|\372?\361\351\324\020\251\"\316?\337c\230\177\255\267\351\277y\352\314\304P*\323?\213{,\370\244\231\310\277\021\221\265\236Yk\350\277\241X\272Q\254\363\314\277A\342K.\362\304\332\277c\251\376\301\376\267\362\277rLJa\221\303\304\277\351s\213\2505T\364\277f\004\343Tc\330\313?\361J\245X\227\337\366?w\267\320&E\265\364?\036\212\\\367\264C\321?\240\023\237\313\333\252\331?I;\t\241\\\231\364\277\212M\205\276\342\016\305\277)P\222\n\350X\321\2772e\267\346#\n\372?\311\010\214\253\2033\353\277\316Z\005y\215F\305\277\201\250\322\372|R\363\277\2161\375\014\t\247\331?\377;\350\362\345\220\335?\277\241?g\037\033\266?\201\360_\303\3138\345\277\242\236\371\300\032\330\266?\037\353\3409\240p\306?@\371^>\256\233\271?\004O\256\224\372-\326?\007\260\212\234\250K\324?\235\363?\010 9\262?jRCc\027\246\301\277(\010\230\376\217\350\340\277>b\325\264\353D\364?\324\275w\3333\226\365?\364&\313\017\340\346\344?\254\247\262\020\027\322\357\277tW?|/\242\273?;a\303\277\020\354\362\277\030$\300JO\247\307\277\235H%\024\300\014\307?Q\320\321<e\371\364?\264\023z\273:\350\362\277V\013\365 \002\267\360\277\nR\010TR\035\330?.Xs\027\021\302\306\277\204U~^\313\013\303?\002\305\326\206F\035\360\277\331q \221\004c\341\277\001\353\273w\274_\304\2777\371\362\035\233\377\307?\000\230o\335GW\365?\267\211\022\246R|\303\277\013\357\035\n\271\265\360\277\016\365\343\373aH\323?5\227B\244\277\014\364\277\322\313\356T\007?\320?S\033\371\260X\t\271\277jX\241\337\243T\364?>\216,&b{\362\277\001\260\023Ffj\327?=\313\220\320\211\357\315?^\264/\374*\242\320?8\022b\325E\336\332?\212*\000c\255\310\337\277\2247\0262\362\327\263\277r:u\256\205\374\357\27705\215\003\370\211\261\277\211\333\240<\200\317\360\277\341`\230\005\263R\366\277I+\277X\270\033\364?\251\362\000\300N\276\365?\374\232\362U\203T\370?\207\333\272B\347\352\372?R\341\321\006\004]\366?\354\255\3245\334\273\323\277:\340\303xv\351\357\277\005Jo*RG\212?\224\370\363\373h\252\363\277\300\247\321}\'l\315\277\006\377\316)\371c\270\277\020\267\306\316\255\354\365?\007\306\245\364PG\340?l\000\025f\033\243\363\277mliq\2605\364?\"\227}\014<S\320?\020\310\n\367E\030\331?/\252\241\353\343&\310?,vr\252\252\315\324\277%\302\254[\036\005\320\277\375h\256\255\340\311\342?/[\356\310\360\256\364?B\240+\267n\277\363\277\210\031\204SX\306\363\277\372\366\375\207!\262\362\277\351\323\324\271Q\264\314\277\016\344\225\304\347J\270?\3557G\367\220\226\336?\367P\216\014\303\232\330?R\340A)Q\225\252\277\231\377\'\301yS\357\277\267u;\305\016\035\363\277\230\243\375\267Vn\362\277C;7\317[j\367\277-\3522\356\342\352\313?\310\230\254k\327\275\304?\354n\372\027l*\314?\'M-ih\260\344?\245Hs?Y\326\367?D(C6\361W\341\277s\3158\032\333H\302?e!\205C\2567\302\277\351\271,\374\263\026\362?qIfU8\364\363?\2064\274[C\276\312?\031\305\212\207\006\323\361\277\212\327\014\325\227\366\353\277\261\355B\275\372\271\240\277\371\207\317\367\261\215\235\277/\2744\230\300\300\331?\364\230&!\276\231\374\277=\220\205\226=\245\363?I\367\303\031\277\345\360\277\2577\237/\001\222\366?.Jy\317\252r\322\277x\236NW\262\\\321?\255$\226\374E6\327?\204$\3254Y\025\326\277\0170\323\246S\200\305\277\031\200*\302\343\360\315?\376\014\205R\310*\342?\204\314\242\221\362\276\340\277\315\024\027m\200\000\355\277\027\366\036D\251=\370?F\331\221\t\023\020\310?\363^\310hB\260\311?A\272\262\354P}\275\277NX\367\307:\350\362\277\341\2245\237\257\253\345\277tu\302\227\r=\312\277\324\257pH\266_\365\277\331p\0223\273\217\306\277\016\3265\213\275\370\343??\000\037q\017f\314?\231\250=\372J6\276?\224S\205R\260\275\260?\2251;$\3375\355\277\t0\364l4n\362\277\350o\323\024ru\361\277\004\'\322\202Q\375\365?\331s\242\\\253\004\353?\022$\217\227\221?\344\277\343\326\023\336U\"\327\277\343T\271\254\024\267\364\277[{\022O\204\361\302\277\2007\000\274\275\304\370?\006\365\271VW\203\244\277\033\331\021\217u6\365?\321\002\231\305\3671\325?\252\3106B\034/\340?\232\273\212\360\232\206\311?\255\033\355^\2556\361\277\260Vr\355\223\241\305?\351u\"\303\265=\363?\353\3157ugI\324\2778\237\235v\023Z\260?i\243\332B3\026\343?{\243+62d\365?&\365\230\257\3553\257?\311\221\244\231\304\227\336?i\240t\213\270U\314?\350Gw\277\356\210\341?\341\\\261\346H&\361\277\327G\264\231\001^\336\277\332\244\017\023:\255\364?\001y\327\377=j\305\277b\033\234\000\014\317\365?C\031&\205\213n\316?+.i\336[\221\257\277yy\220\037\016\252\321\277\337\022\254\233B_\362?\'\210v\2024-\332?\336\220\242\337\221\376\362?\343\336\270t!\377\223\277\006\nU%5\205\362?\246P\033\312\224\342\356\277\306\235\260\372\021k\373?\330\230P\306\264\\\367?&\033G=\242\216\260\277\262L\344d.\224\363?\370\"%\020\317D\346\277/\034\255\340\325l\353\277V\267\257l\024\023\367?\326<\000\242\224\231\323?\321\235T\261\031\355\307?7\244Z\251\362\222\316?\315e\236\254<\365\360\277\0142\251\245e*\315?O\037\240\207\302)\324?\016t\344O&\274\366?\001=)M\"W\363\277\270\013\220\232\0147\355\277m\315\313\017\301\341\362?\300LMQV\355\367?\212Ro\3138\316\361\277\025\210\375\365\024d\324\277FM\252\347\204\351\367?\373|\\\311\206\356\335?\357\010\006\310\360\303\315\277\033\346\345a\333\005\362\277C\264\274\273\250\361\303\277\202y\252\240\016\257\325?{;\010\007\215\244\320?\r\313z\223)\350\364\277\262}\276GF9\320?\237i:\362\261\360\363?!\217\300-\000_\321?\326\037\202M!\025\312\277Sg\330v\022\200\336?\213FF\265\003\312\362?U f\362\354X\314?&\342I\234\317\232\374?A\003\n:\230\037\352\277ke\253\365\320\276\363?\030\331(\336t\225\335?\216\222\266\242\000\227\315?\322w\333\267\335\210\365?\t4\242O/\034\342?X\004~\353\372j\366?C\346\343\206\360\217\364\277\227\311Z\214\363;\347\277\242T\377\210\311x\321\277]J\267u\240\377\361\277|\327\211\264\322\336\331?7 \367F-\364\361\277\276\326\367\311\341\370\366\277\277.F\252\021v\320?[\2239u\206*\317?q\006\277}\362\022\374?\244\226,\245\242\337\362\277=\213`!n.\327\277\203(k\322\221N\327?\"\025\274\031WU\360\277\275W\002\031\250@\321?\3265p\032zP\355\277\200w3\346i\357\362\277\"\030\030\217\346\222\302\277~i\274F\330\275\325?\232\342\257Ta/\304\277\372\200\232\305\332;\330?\336\201A\206\226o\335?\\\257\255\022\3033\364\277+&3\245QA\354\277R\246\177V\204~\321?k\327\3640&k\363\277\3147o\276\211M\347\277\271LIiT\311\316\277f\002g\354nW\314\277\311\004\222\371#O\362?\\\341\013U\200\303\371?\272\327\243~2\r\316\277\027N-\373\n\200\334?\267\241M\332\021k\365?=\342~\373\342}\314?\234\302\206\230}j\366?B\236M\375\324H\322\277s-L\024\245\274\355\277T\320o\247R\001\340?(\324\307\002l\324\367?\211\251\024\207x,\307?6\332\200\020\003\221\370?7\'\330\205\024K\362\277P\241R\334A\241\363\277y*\031\030Ad\301\277\n\342\264\210\361\341\363?\225)\365!\222\307\347\277\246\335#\014c\217\255\277\234\362a\2722\262\225?j\025Dg@\016\364?*\372\202\005p\276\364\277Gl\267\013s\256\314\277/\366\267*\005\n\321?\336\376\243D^\021\364\277\344\204u+\005\245\363\277K\261wm\303\246\374?\302\266\263\314\037^\354\277`-q\235N\177\333?\016\324l[,y\327?\345\237\023I\225R\365?\304}L\221\271\'\362\277\357]9\371\316C\337\277\310N\200\366\325\207\320?\360\201\360\211\021\324\267\277/b\324\350\024\370\320\277\234\275 \366\354}\227?\360\247\237#\371(\343?sd\\\333\r\216\364?\223\252\021\306\000?\337?\001U\276g\227\240\363\277\230318\342t\320?*\302\341\364E-\311\277[a\204\017\221N\363\277\"^\021\200\212\031\356\277R\313\205\375a\274\362?\004\010c\241-\212\353\277my|\032\336\037\362?\013\203\310\254\266b\323?\031\017\301E\007A\320?6{\200\237ep\361\277l\'t\002\355E\370?\254\202\340\036\311\024\330?cD3\003\320!\331?\006\315\253\202e\277\301\277@\353\027\371c\302\314\277\31724\367\372M\367?\3312\217\367a\t\304\277\355u\200\020\330Y\303?A\006oSb8\330?\227\3029K\327\253\322?\315\364\210nS@\322\277\323\370\256\005\r\314\333?\275\t{\002\027\237\371?\ne\254y\312e\367?\274\304\365bcA\330\277\345\244\352{\250\374\361\277\247\035\314\342;\033\327\277\255\344\244\265i{\317?\261\272 *n>\366?\2448\275Xq:\361\277\315\3537\266\326\325\330?\310Y\227\004Y\300\323?\314\006\3757\000*\357\277\\O6\317XO\356\277J\362\236\374\267\017\356\277\352\037H\211\203\265\354\277\340\017M\235n\214\251\277\214\372\321g\240S\346?m\2178\353?\245\321\277\270\000W\363\322\317\367?(\363\200 \220\250\343?\265\354\017PR\335\363\277`\213B\034\226\203\363\277+\002\332y%\301\361?\340f\260\205\006\030\320?\0103\305\364\324\202\362\277\233\033\2018[\322\330?\300\016\201eu=\326?\252\230:\233\024\204\363\277\222$^*\241c\342?\274\215\311\245n\237\363\277!k\273T\335\377\217\277\035\231s\320\350\031\322?\"6\335\304}\347\333?\0206x\315=I\341\277\373-\304<g,\277?O\021\325hw\027\361\277S\362\341\307\255,\302?\341z\346\240\364\304\367?\316\354\243\276\025\346\305\277\215\255)S\377e\363\277\305+7w{k\341\277\353u\242\025- \312\277\210\003\215\226\203\202\340\277\313\257\231\001\034\316\360\277\220L\016}\177~\356\277\025\363\317\351\257\366\261\277=\246B\244\232a\361?ag\027\240\365\351\261?\236\232\016\342T.\362?\306\033\252\363\321(\350\277\017Ph\001\265\207\306?Z\215\025\336:\256\346\277\257O\366\307\233\037\324?\211B\323\206]E\220\277\330nt7\n\251\362\277S S\276\303y\361?\027\234\007\353\230\243\341\277\333\0373\241/N\253\2775\216U\311{\225\351\277\036\216\201HhS\360\277ipK\336.g\266\277\271\272\'\2208\334\366?i1\177\217\236\331\355?;\003i\032\003\021\363?\200\333\244p2\300\366?8A\245\2443\021\363\277&\001\203>2\022\363\277]Dc\377 \013\302?\206\307_*\354\252\327?\257t\2227\001N\226\277\371\034R\201\355\305\314?\211`k\371\375\317\365?m\224et\335e\334?\005ka\244\2137\266?\335\007E\340\315I\260?\317\331\212\305\210=\225?y\220[-\246\372\343\277\353\233z\217#6\305?;\353H\277\233\352\363?\303\235\361\353S\362\365?8\370m3\303,\246\277U2+\376C\222\206\277\036\364IUX%\367\277\242 gZ\313\037\352\277U\214\305Eb\272\362\277\375\356\023\363%G\363?Z_\033\235gq\277?\177\036\273\363w\271\362\277\273a\374;QP\373?\302\326_\206\007{\261\277\307\343\243Y\225\337\363\277\320TqJs\350\363?\013\244L\337\270\365\205?\372\323:z\235\327\355\2776\233\370Oy\000\372?\202\357\344l\304h\331?\223\320\210\240\241\302\206\277\324hNU0\361\277? U\277 \221c\302?\"\373P\347\254\036\363\277T\237\017Ja$\331?F\014\377vBv\306?42R(\021\373\322?\244\033\377\036>\277\320?\341s \346\376P\367?\232\313\361K9.\343?\344H\372\243\027\346\335?Odf$\276\226\365\2772\000bt\t\215\311\277%a\230\025\366\334\320?`\202\001\235\031n\363\277\302\"?P\356G\327?\2023y\277\027\232\365\277w\005\304\274\256\261\363\277\002\020\022\241\3433\312?\3003&f\004\201\243?r[X\005T!\302\277\021w\351\363b\330\333\2772\365#\303Gj\352?\233\222\227(m&\331?\253\036\332\366\340\031\322?\342\217\255\177\325\263\363?\360uvH\362\201\355\277\2536\361\236\244\260\363\277\235\"m\213\352\325\361\277\206\204)J\360\373\363\277\356\276~\304\324\224\204?\205\370\332\374\321!u\277@\371\276\201\300\243\326?\310\003\r\372\313\315\307?M\307\3213\203\275\366?\224\245\341D\202\271\366?q\006\345h\334\237\333?\213\343\223\\\031>\340\277F\376\220\353\251\226\241?\224\026s\237b\311\323\277\030\000\350\330\301\330\301\277\252)\007\312\235\270\316?\342\304\324\313BT\364?\360\271\243\217\270\221\250\277:\310LIS\373\374?\210EA\rhu\363\277h\312\204\375%\321\201?\207S\321\276\277\313\313?\3273\256tz\236\365?\010\021k\206@\237\231?\262{de\242\r\205\277\236\327k\246\355\357\273?\305\r\203G\372\320\237?\311#\240\352\330\236\366?z\312\347(\326\372\365?0x\235\217V\374\266?(\274\313\323\256\226\343\277k\227\001\000CL\206\277\177\250\273<0\315\337?z\343\256y!\213\364\277\343h\373\023\221\333\357\277\267\2214\236\272\347\340?\251\2509\003jz\337?\027\377\025(\301r\323\277\215\254\n\272\276\215\324?3H\376\361p\303\323\277\"\0312\'\210\316\362\277j\202\335(\335G\303\277J\334j\276\325\310\362?H\231\264\037\364\214\246?j\306\264f\233\253\365?d\207\242\210<\t\330\277=\240.s\343\305\364?\002y\203%j\016\305?b\332\021\036\352Z\304?\2214\027\233\004y\361\277\240?\r\201X\007\367?`\223\213\030\217O\303?\335\344\202\350\341R\320?|O\203\331\321G\357?l\363T(;>\356\277y|g\350\373\342\371?\021\027_\"\253D\362\277zO\332\257n\273\363?\223\2078jEE\362\277r\033j8Q\225\362?\243d\243\207:\343\363?\204q\252\302\227\341\366?\316\277\362\274O\003\322\277\0318\010\307\320\250\312\277\253\264\214p\037\034\320?g\262\031\362%\322\362\277\327\247B\007\325\371\335\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "?\370j\334\005\236\362?$6}\026\362=\340?\265 \021}\203t\341\277{\352\363 \000\373\350\277/\302\\T\357\225\312?\371\\\033x\246k\343?\344HSA)\276\342\277BA\273!;u\341?(W\216d-\234\340?15\220\030\017\277\330?_\326\331\244\2143\332?\344/\335\356\311\025\341?\244\017\\\327\310\006\321?3\376\312\370g\212\323?\347\316*:\007W\345?\004\271:K\265\245\354\277\205\224\010\234#B\347?\3004\000#\266\020\337?Z\213\262\370jx\357?\330\240U\002<\306\353\277\306\021K\357\252\355\357\277\272\333\201B\\&\322?\023\035\346j\364\341\343?\253\303Zr=\200\353\277Qv=,\373Q\325?\354\3411\204\0375\304?\216\201\021\372*\322\342?R\343\\\327\"\316\352\277c\346s\374U\250\341?J\330\027\211\321\331\344\277\227\321b\332\177\004\347\277\302\377\276\261\340\202\337?T\321=\001\371\204\350\277\327e\341\357\027S\304?\227U\033\345\314\305\337?\264\273\221\3751\265\343\277\373k\213\363\231\277\323\277\326\301\301\261\252\343\350\277\314\365Bq\340*\350?\316\362\222\027j\213\307?x>\331-\305\020\344?\300\336B\000\037\257\356\277\360\356r\246\373?\346\277\034\263\242\217\n\272\333?\310\355i\306\232?\353\277\3465\010\303i\242\360?\036$\353\0212\372\334?\001<\010\3556u\304\277\355\020\3148\355+\342?C\267\005\027\250\035\345?\327\265\347Jbk\352?|C\347V\310\'\271\277\256\357\241\013\353\256\327?\212K?\221\006\202\361\277\216\020\352\010\257\251\357\277\254\274\235\302\021\345\340?\026MHO\303\223\320?\360\250\372\213\226\236\362?\240\003\243\001\342\245\361\277\306bQ\016\362\263\327?e\214\\\016 \336\336?\316\304\322\231\237\334\313?\304\376\255\265\312u\343?\236QgLs\212\362?v\013U\327\006\264\337\2778\021\334ys\271\336?\211\n\"\352\t\270\340\277\224\001\306Z!\213\356\277\016+\0370\275\301\345?V\030\r\341\264\r\310?\350\t\272=\n\320\342?\251\320\316\372\035N\354\277\370\261\3071\216!\343?\023\223\250\374Dq\353\277\330\201u\323Xj\340?\350\265\315\225\247\306\323?\212\230B\377\200|\343\277\313h\237Z\3208\341?\321\352-\355\324\213\342\277\036\317\365E\354\356\340?ti\204\022;3\340?C\351\037\340\211\313\343\277\032\033\374\026*\352\346?>\3674q%\022\356\27765 \272\257H\343?\317\322\367\312\006\375\341\277\211j\024\226+\336\360?Yh\342\214ey\300?>\"\355]x\"\340?\212_\314\225@P\343?w{\220.9\'\353\277Z\031{\345\240\312\335?k\336\242p\034F\242?m\243H\316eE\343?G\255\207\2259\272\330?\273\253\030\254\247\000\274?4\345]\003\315]\346?>\000\020.\316\343\346\277|\232NHP\376\346\277\273O-\005\365\026\323\277\351\007\317\315\324\356\331?\343\000\365\243ix\360\2774Y\333f\\\363\324\277k%\202\020\254\273\362?M\314p\3403\315\343?\321\210\221\231\'\346\334\277\311K>\024\341\275\335?kY\321m\316Q\355\277\027\371W\234\270i\226?,\003\217?\257U\361?g?\0304\3059\360\277\224\206i\322n\345\362?\302\r\0277\305\267\343?\246\330\010\306>\307\302?\212\364\032\242B\307\340?|;i\375C\304\330?\272JZ?\332\306\343?\254\251\246\254<\357\357\277\254\035\037\352r6\355\277\235\017\314\301\"\013\334?\374\206\274M\017I\312?K\230yF\316\006\345\277@z4w&%\321\277\335\304\027s\240n\340\277u;\353\177\324\003\363?\206\346\337zIr\331?J\371\004\264\245\311\244\277K\232\203\245Y\230\340?\252\373\210d\363:\317?\020m\016\351\312\354\306?\026\255\200\030\301=\331?\341\022)\252\200\222\335\277~i\372\340\201\331\360?K\326\3067~i\350\277K+\323y\331\337\343?}\245%F>i\301?\266i\3274\024\325\247\277\346C\371\363\027%\357\277\362<\265\370\364\242\344?n-A;l-\231?\330{.\350\036\337\343?\242\261yokN\343?\370Pp\2027\221\360\277\t\212\001\316\3572\342?&\267\377\263\323\354\353\277\270\272<\260\367t\335?\255\256\'I\374\256\340?\213\026\\X\260g\320\277\260T)(\265U\352?5\370\344(\361\r\357\277\207@\005\323\017J\310?\265\010=V7?\343?4\316\222\226\025\351\354\277\302\356\264\305V\204\342?\371\211\004\025\000]\355\277\003\342Z\352\026[\361\277\222\270\322\251f\312\344?\340\253w\377\334w\345\277;$\363\'=\324\361\277n\253N\324I\211\347\277\004\330\032BO\356\344\277\2539Pr7\010\346?\235\355Q\223v\020\310?\300\337\241*\371E\345?C\324\316\251\345\001\313?\335\354\350wB\315\344\277b\351E\031)X\304\277T\215\266[\331\211\357\277\016\231\003q3V\214?\211\252\311#\010\237\347\277\243\325\341\317\034r\361?\335\336QWK\321\355\277\014\026\230(\305\234\354\277*CK\216\233\256\346\277\375%\030\317x\223\350\277\3049a\231\276y\345?t\310\231\256\034\371\337\277\356\305\331\316\337\203\337\277b;q\233s\222\311?,&\312\243\357$\325?\337R\036\002\267\301\335?L\2145n@^\343\277&?G\361r\033\364?H\230\261&\331\017\345\277-\261\005\000\217\361\305? \260E\023\002\220\336?\304\213*\215P\322\301?X\362a^]i\361\277\013\244\351[\020<\362?\336\025a\246t\366\275?9.\350A?\021\352\277\262pB4\024\211\346?$?\370\017\247=\355\277\274\217\014T\276\220\345\277\314>\351\334\222\321\315?7\210\000\277[A\337\277\336bM\340\327E\351\277\n\034nXb@\311?j\317\230\355\365]\314?\226\212\037{\323\010\350?\223\031Q\374))\340\277\210c\032\304\340\030\350\277\327U\315\311 W\362?\227\260\031*\301\r\345\277\215\335\3036\315i\360\277\332`!\3557\377\307?\013\246\252 \r!\327\277]\351\271\221\224\243\351\277\325\200\347c\330\361\337\277\241(u\367]\232\344?x.H\322\247M\356\277b\013\213\366\225\216\362?,\036\213\300\374\t\320?U\336A\315\355\224\342?\020\354\272\033\361^\350\277j\366 \312\001\210\337\277\022\006\214\007`?\340?$E\247k8(\271\277\014\3525{\305\251\350\277\254;\256\221kE\343?9\037/x\225\243\345?\216\371\007\'\355\r\324\277p\245\260\205!\026\315?\300\307\024\000\356j\341\277\206X\250\224\3549\304?\246\334\261\350\265N\362?\221\371\324\346\271\355\343?\325\010A\360m\250\331\277\005\000zU\2163\343?\351\344\367\354\334\270\332?\340\\q\270Y\006\361?\014[^\257\363t\346\277Z+\037}v\232\343?\2179\230!\030\251\370?\311*\341x\242!\341?N\366\004\267L\017\312\277\273,\275H\'A\337?\177\005\321\371DE\240?\325\'.}z\352\326?\"C\225+[p\356\277\325#\374#\345s\342?\t[\356\372\004\233\353\277\024\334\3541\371\212\350\277\023\251\327\023$\316\350\277z\030)r\245\'\342\277!0c\334\215\313\352\277\021\371\003\001\320\177\326?,\303S8\223\331\344\277\203\023\0307D\264\341?\224\202\n\306\227u\361?\n>\344*DL\302?\362\366=B+j\273?\203/\251q\200\227\355\277\241\027W\240\3662\352\277|\364\323\252\270\306\332?\025\361\260^\206\035\337\277)\362\203\340\226\306\351\277(\204\353\333\000\021\303?K\016o56\331\351\277@Y4kY\306\345\277\017\327\024:u\212\342?\362\236\010<\034M\362?\177]\317+\357\214\362?-\3305\223h\375\301\277\214\353d/\024\177\320?\362v\307\212\031N\360?;Bxk\022\212\353\277\247\254\375\220\004\225\330\277\324\001\\\321)\'\352\277w\206N&\235\221\362?\305\235\347\330\215q\345\277\004\032\215\006\346\301\344\277\261~.\037\354\241\324\277\242:\213\303y\201\254?x\'v\031qy\336?\215\262]\251\217R\357?\344\035\025\314\020\000\345\277\365Ql\334E7\355\277\014J\300\371S\022\344?\230$\004{\263y\343\277\224\003\311C%\235\360\277\273\022\200s\210\350\274?:\'\226\324\344\203\337?\026\204\204\250\334\366\341?v1\215\271\226\263\361?\312KV:\227\241\306\277\\,m\034\370B\361\277\255\306\001\340\016H\345?\367608k]\340\277D]\036\342w\\\350\277jY\20142\\\361?\022w>|*\304\301?\227\317\026\3475\017\326\277w\315S!\2468\325?\002\335\223\254\324\323\347\277\223;\262\035\265\364\342?/\235\223z\350\'\357\277\t\247$\037D\214\366\277\324!-k\034\354\344?\214\333G\233\216\211\342??\366d\036\235\"\346\277\"X\352\033p\025\360\277\r\003\272\327 \022\353\277\021C\300\231\266\272\362?F\230\253.\374\030\323\277e\305\256.E\327\343\277\300\356\337\3407\311\342?!`0\215\304C\345\277\244\360\222?&\231\345?\016\236z\004\262g\340?4\252\020\032\023\033\305?v?\241\255\354>\305?\347R\276S\351\325\307?\373H%\230\331z\325?+\356~`s\345\310?\251>=\030\234j\352\277\327?BX#\n\343\277\000\231\237|W\037\354\277\206\326\272\217L\020\322?L\230m\3521\'\341\277\300\370\377\224\001\317\341\277B\306K\021x\030\306?\220}\207A\302\265\327\277{:2\231\r\371\340?\272\323\212\'\301\264\344?\263\366 R\332\257\356\277\373|\321\326={\363?\025\225\026v\230U\361\277;\261C\315\n\223\353\277\001\302fw\243\255\313\2774\037\365,]\306\367?\001\316\201\220\276\343\313?\215\276\366\276\031\371\350?\224\025\256\r\3216\322?\237pX,\323\204\341?X\201h\335\221\313\337?\275\256\001\275J\004\341\277`\235\372\335\341\265\362?\347(\305\020\034\277\362?4\260\276.a\264\344\277\370D\\Y`\333\343?\364\002\334Ldd\334?\032\313\300pA\330\347?\010\356yo\353O\327?\\<\353\330\230<\357\277>\363\266\265-?\365\277\274A\302\030,\275\356\277\223x\346\324gd\320\277\002o\311\326L\272\304?\210\217qok\305\326\277c\316.\014\346)\360\277\230\177\036\236C\\\331\277(\315\343\306\336Z\341?3&{#e\216\336?\t\t\0138n~\355\277\3201\000?\005\026\345?\272,\232L\323\216\345?\242\360A\352~2\362\277\353\336\233\0008\320\341\277\303OK\0067\037\363?\223\316z\221\300\t\321?@9\177\224/\003\342?\215~\010\002lB\337?$\025Ls\026\302\337?C\315 \353\255*\351\277N\373b\"x\321\352\277\314Kj\223\330\315\351\277\231\221\016\320N\245\262?\315\261\260iC#\347\277\032@\230uS\036\361\277\261\312\260R\342M\362?iR7t .\327\277\327\364!\373\227\205\314?\263\265\375\367\343\215\315?\ru&3\rT\360\277[\031\n\037\2525\354\277\316\326Ze\327\315\333\277\240\260\305j\017\"\342?\204:\265E\001\350\321\277\313s\310\204\220}\342\277\260\203\203G\254\363\302?\2274s\362\260\177\324\277\243K.&b`\355?\017+o\233\314\256\357\277\024)\363\215\265k\361\277p&\205#\257\264\340\277\250\240\236|\353*\327?\235\026\2140\322\242\343?\237\377\335)1~\333?V\321X?O\000\311?K\241Ef\337\363\260?\227\3270\353\n|\332\277\273\023\372>\213@\320\277y\214\001\334\0162\345?\201\360\261R\335(\346\277\243?$AJ\200\314?\'\237`{l\016\346\277W\'\375^\210\210\271?\245\244[\244\242\235\362?\355HC\334 \037\361?\314\314\002\005\r\373\351\277\266OY\204c\317\340?\010\346\3318\304\007\354?+~:\300\355\227\344?~\320\347\361\256\303\355\277)\266\000\276$J\357\277\232\032\324^?\226\315\277s\t\n~\244\315\306?\236\305>\005a\362\305\277\253\204\211_]\312\362?\240\300N\000_\206\351\277{Y\001En\006\337\277\232e\340k\203R\343\277\2230\340\204\275D\337\277\336\235\026\005\034:\310?{f\366z\305\206\263?\303-\267\314Y\222\307?HyYd\006\232\362?ov\005\376\272 \347\277\305e\264\033\355m\345\277\256\251\336\275\374\332\347?#\237\230;\023m\362?[\356\271\001\204R\350?\200\260\037<\007\013\344\277\213\335\210-\251\213\352?e\307\325\254\177\207\341?\254Jz1\250\243\321?n\342\220\346\177\274\316?G\344\204\002[\360\332\277fG\322\336\231*\344?\320~\263(t\010\346\277`1\342\202\343\002\342\277}\255;mR\035\305?O\255\022\331\r\271\362?#K\211\314\022\366\356?\371\002\231\202\306\343\361\277\332&\261\r\005\323\344?\235\025\276\277S\037\364\277\200\345(\023\243\234\353\277\223\2604\016)1\314?Iu?\270\0221\330?\220U\352\273J*\332?\207\003\253A6\021\342?\240E~m\311_\320?\216*S\326\316\365\342?\210\261\236o3S\355\277;\216N\371\321\000\313?\316\326V\376\371C\362?\212(\271\352\324=\350\277\300l\344+I\"\347?\340\307\031\0208\302\346\277o)5\316\010\024\350\277\031\361\2225[0\361?\'\362\311ZU\217\340?<\351\370\030\242d\360\277\374\333y\216=l\340?\306\263\354#.*\356\277\330\002\334\002vx\336\277\030\021;\332\231}\332\277Tfe\304\210&\343?4|Q\250\265W\357\2777\210}\336\037\334\353?_;T\013s\200\326?2k\333\344\264\302\321?\027\'\207\214\322a\364?\r\201\t\207Y\363\351\277\342(\324Vk\372\330?[\263\224\007\360\205\362?*F\375h\225\304\351?\350\377\301G\001\222\342?\361\370\277\032\316B\350\277\204\275\030N\333\355\361\277\331\333[8{+\343?\027\306\n\265\215\032\357\277\355\221\240!\254\306\342?of\361\023\257\360\331?\376N\242K\315\333\356\277\213q \313\354\340\351\277|\346[\367\333\310\333?F>\311\301F\267\341?\031\224`\313\247\020\355\277\253\311\'\365\355\271\357\277\003\2177C\265\317\336?\375%\306\331{\203\361?\377\331O\362\267P\330?\265F3\330\236\304\344?\006(\345\334\n0\325\277\214oaI\274\177\342\277_\355\355`\013*\343\277\266\221\344\236\310r\362?\005\236Jeo\216\363?bO\223  =\324?\361\372p\001\2104\355\277M\005\"\231\231\035\355\277\360\355|\242\311\243\337?\'\310\030D4\013\360\277\244N\254\2151\r\347\277\252\346:\243\334\022\331\277\314\273_2HS\320?\325\274\253\365\231\345\323?\037o\362\222\344Y\347\277\030\260\2066\236\341\345\277\177\345+\231@\350\305?\3506\341\320\300\325\273\277\315w\212\314\243\340\322?\221\277\332+\366a\351\277h=\356\302\227\272\303?\202x\363\030l_\345\277\203\372\342\376\007\311\306?\253\r\250\214\222{\360\277\246/\216\004\"\255\310?F\236\344\026R\001\323?\363\323~\352\205>\340?\037\320R\023\236o\345\277\304\206D\351\345\266\343?\336\340\033$u\354\351\2779ny\205\266\034\352\277Z\302\343\304m\006\363\277I}\034\2672c\343?\244\375\326\340\237\314\254?\251\370g^\247i\341\277\030\262\373\220\336\205\362?\377y\304j\260\034\333?\034\017~\347\3716\341?\014\237\367\002\'\267\321?\375 \254z\350f\347?\360\355\243\023\204\337\342\277pJ\205\035~X\342\277\366\003\333\010\013\251\342?k\314\201\307\035\306\345?A\263e\3572n\336\277\276\260(\311\257\360\356\277\223\205\321fja\347\277\355\314\214\346\3460\355\277 V\307\352\270.\333\277\016\\:\200\026\246\362?^n8\021 \321\336?\316\323D\370\271_\362?.\240\016\317\022p\337?\206\031 \'L\234\354\277\231u\351\320;,\333\277\203\245\217\034JI\337?7O\356F\335\352\271?\242\010\374!\331\325\344?5x\262\032\332z\344\277v\013\272\020>\254\347?\322E\006\300\000\"\347\277\327\313Y}\211l\357\277\371\326\302\"u\244\344?\265\\)\317D\337\305?\235*\344\2071\344\350\277\211\250S@yZ\362?\243#1\270\216\337\334\277\203\272\256\034~\341\327\277\021\334\345\346\207\223\303? QdH\270\322\335\277\\{\237e8A\360\277\20543\026U\306\344\277?\265\034\3467\241\361?\241[c\237\305w\346\277\244#\313^\0060\341\277r\023\017 \023E\344?W\360:\303\313\004\311?Y\031\231<\336\252\350\277A\224;\256\027\214\344?Z\253j$\004S\332\277]\203\324\340D1\356\277q\301\\N*x\313?Es\305\212\236\220\325?\000\252<\235\014\212\361?\234|A\363/k\352\277a\337,\354\244\223\233?\303\244\342t\n\316\312?{\226\030\016}\323\303?\320\035\022I\202S\341\277H)\222\343\321`\357\277\210&\373\335\226\244\334?T\250\301\010\364\023\350\277\217\036\211vo\005\317?\r\250\027\031\377\221\362?\237\3235@\006\\\321?*A\273x\343s\343?\231e\337\255\373\212\335?\374\034\202?\320\206\357\277H\342\001\200\307h\343?N\017\223}`e\362?(;\320\352\203\217\361?\036\377$\2715\215\334?\235\026\363\300yq\363?J\022\361~\3744\337?\356#e:\375\305\340\277v\317c\251\032/\341\277\261\324<;Y\262\362?\372up\351e\327\331\277\301E\242\001 \342\360\277\365o.\341\366\030\345?\021ZJI<l\357\277\353\330\037\235k\027\314?L\306\302\177\204a\343\277m\037\215\354\220)\343?x\237\365\317\307\216\326\277\262\004\r*\255\276\346\277\273\204\374\376!\021\327\277\215\217\317{yj\324?\006\321M\312y\320\324?\024\221\t\006\251\345\342\277\321\347a2\316\233\364?t7\377X\006\201\361\277\303\255\352\302\262y\345?\254\234,O0L\346?\317\366\276hKO\354\277Q\234<\200,\246\321\277Q\264\207\"O\344\350\277k\226\265N\205\031\361\277\007\327\252/\250U\333?\014G((\305\213\352?\244\247\267=f-\347\2779(\246\321\310\372\344\277\020\002\303\353\331\314\267?gg\326\226\235:\341?\0200sN_(\343\277\302\373\361\352aa\302?\222\257\t\304\357\345\346?\026\355\346\r+v\343?@{\206\357\320\223\310?cY\267\355\311\211\337?\274\245\267\303+\237\343?\377O\257\024\034\033\356\277\004\027\243\251\213N\362?Z9:)\344\267\351\277\0311c\244]:\355\277-\324?\200\257\344\343?i\323\342\3749n\363?\031\370\000\334\315\304\361\277\331\370\305\303\354i\362\277A\010\025\226\361K\344\277n \342\236\210Y\352\277\204L\320\370\256\366\360\277\314\346_\357\2266\253?\261K\317\254\317X\334?`\t\232\247\270\330\360\277m\225\377\026\367R\345\277\226\001\346\2605L\252?Gzs\377\221|\345?\354+\224\271\227\316\341?\263\342\010\247\n\313\346?\300\'1\376\367|\360\2772\313\351\225\310\255\304?xn\223r.\322\344?{v\313(s\364\346\277\353,pC\251\266\342?\027\342\354\311$\252\344?@;\247\"&U\313\277[8\354S[\331\347\277s\243\277\326&\245\340?03\\A-U\352?\267h\226\252B\200\341\277W\370\312\3637%\354\277\000\242\322:Cm\350\277\304Cv\316f`\346?_\206)\270\365\313\362?I2&Q$\370\356\277\261$\002\260\017B\360\277 zD\256\262c\356\277\306\024\"\032\025\312\327?\027\267B\306Y\251\327\277\236/D0\244\312\355?\240\364\377\035\177\265\336?\024}\333\373T\375\331\277c?\367\224\375M\355\277\276\227\016\271\250\205\344?kl\016\2444V\361?\242\002\n})\214\332?V6\214\322\303\014\344?\0171B\001\033\334\361?%@\033\305\3222\345\277\216VkA\254\271\342\277\242g\020Z\214\365\343?%t\324N\367Q\305\277\350\0050W\241x\362?D\264\323PK\372\362? \230\342[\205\037\350?\270\206\257\332/\230\337?H\302\023n\214x\344?\317\2635\226\326\325\343?Z0\243F\212-\322?\266G\301\371\\\240\232?\332D\"#\345`\336\277m\301\332R\220\260\362?\263\337\\}\177j\356\277\264^.h\363\223\324?\307\240s\"\342\322\303?I\256\250&\004\215\362?<\325\014\246\302\244\331\277\365\373o\314GH\266\277c\342;<r\265\343\277\231K\260\017\235\265\342\277\270r\216\017hV\353\277\223\002.\321\301\250\326?OV[\221(\265\341\277\025[\317Vlu\330?\364\227\344\366\314B\343?,\334\'\245da\345\277\334M\243\323\264%\356\277\214\353\t\232p\377\307?\3522\004\'~\255\363\277\276\013\235$*;\325\277\232a\322Z\346\340\360\277<\231\231\0149W\327\277y\242M\347\352\210\340?\013^\262\375\3276\302?\221\315\242\032fQ\356\277\360\303\253\3056t\350\277\177\311P\325\007\224\352\277\210\236\336\375\3435\362?\000B\220h\313=\324?6\345\035\312b\217\245?6\211\335\344Z\377\346\277\254D\330\327\303V\341\277bNj\221#\202\350\277\203\312d\222\234p\362?\005$T\217F\314\351\277\324\342\362\225\336l\324\277\210\036\036\300\357\305\346\277\025\232\361L\232x\322?\273\240s3\311\366\360\277\343t\363NV?\242?\360\324)<*\275\353\277Dy+\214\267\362\322?\251>\370\307\2447\360\277\255\027D:`\244\352\277\005]\264uh\342\341?\304\311\355\0344w\313?\327\246\214\177\204@\352\277\035D\010\377-3\322\277v\217\341\253M\277\350?\016\212.AD\017\266?a\371\t\005\316\022\312?\222\355\252\004\240\265\342?\364P\273\351\303\324\345?\366\237\327\322`G\346?kt\304\305\207v\330?\031\202\273\310S\352\354?\021\243\336\376\261o\334?\2234%v\326\304\353\277Z\024IB+\246\352\277^\223\006\260>8\361?\007\271\202\321JF\346?_R\301Fl\353\361?"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "9,N\244*\007\226?\220\007h\035\021\333\227\277>\354\266\'\203\330\265\277\022\373)%\235H\265\277\263\371ec\352\'\217\277\264L$=k\251\277\277\021\2550\215lf\262?\366\327\336\017\244\235z?\222\340\r)s\007\243\277\343z\2309\177\"\225\277S@\266\305\004\316\254?\300\264\037\300\025@\310?qf/Ai1\314\277x!\301r\220\327\247?\036\324\226\233\035+\247?3P\344nq\211\262?a\026XU\334\233\311?nZ)\3247+\270\277\'\377\001\374\262\346\225?\253t#\211\202\'\224\277j\016\tWK\214\261\277\351\330\005\202o8\202?\010\001v\357\026\211\205?R\226\353r\027\026\272\277\205-\240\353\352%\227?\025\021\\\214\036\244\240?#xF\340\234l\212?\315\260s\0204\374\257\277R\307\316\303 \204\235\277\036g\026?Q\316\267\277iBX\362`\265\260\277\335:\301\200m\245\263?\200.\326\020\005\247\256\277\270p\306l\251\001\200\277\233\256l\2747l\307?\253\r\217\225\227s\331?\353[w\300S~\256?*M\302hG\005\274\277r6S\t_\014\216\277\374\372~\334\007\305\204?m5d\202\353\0161\277\306\030,U.6\267?\036\245;d\014Z\266\277UZ\256\260\2360\201?\020\305G\311\233\267\303?\206\\Q5\376\235\246?\0261\273\311\314\227\276?a\210!b{I\231?\301r\031\344\236|\254\277\230[\340\030=O\250\277\3312P\362z\214\301?F]\270\027\350K\247?\327\352\327\266\252\243\241\277f\200\317\310=\260\275\277O\204\"\213ZB\266\277/\324\377\221\034\211\301?\342fc\340\275\205\203?\200\024\257\036jE\221\277t\300\0231\372\365\260?\230|\001\275\357O\222\277\320\202>_q+\220?\247\362\005#\321S\234\277r\211\235\366\261\255\261\277\235p\353\213\271\301i\277L\325\223\037\245\357\255\277*n\335\336r\337\226\277j\365\346\254\373\343\265\277p\246\252\n&&\260?>\243w+\253\343\244\277*\322\305{\363\251\257\277\'\n\343\323\240\350\306?\333\000\032\264\356\026\270\277\033k\201\351_X\244\277`\317\277m\366{\272\277\345\270\241]FB\242\27702\232\\\277\177\275?N6\275Y\265N\233\277\017\241bg\365<\216\277F\323\016\324\313\013\307?0{\221\016\005w5\277\230\211AW\260+\251?\300\020.7\217\220\245\277\314\260\357\274Co\264\277\001\254\365\365]\320\262\277\321\232b\301G/\240\277\231q\204s\3306\301\277{\315\005\335\335\033\206?\336\007\331_\223\"\224?iJpo\n\213\253?\203\377\320\250\232\275\253?e\320\214\270%\n\244?4\264H\335\316\037\270?\007Y\256\261B\371\260\277\360\341D~n\302\223?\213\216.\026~\236c?\000@j\312\016\034\221\277#\325\372\235+\253\256?\010;\031\305[\262\256?:\377\251e\237\244y\277}a+\215\271\240\313\277\225\264\213\200F\002\255?\346\3717\"\265\345\262\2776\374b\314hj\310?\007\355\345%0\324\210\277\215U\204\013\327v\253?x\323\212\370{\200I\277I\014l\362\236\351\226?&*]\020\2225\263?U\372>p\351\240O?\224\375\334e\312\t\231?\324?^]/\200\255\277\344\247\350Q\177I\203\277\255\235\020m\344\026\251?t~\357\214\210b\240\277\266\237O\321aL\300?R\345\210f#r\220\277\360\020zxy\316\256?\314\354\005\006T\205\300\277\223\257\004_\371\213\246?\3458b\256\'4\210\277\267\324\373\351s\312\216\277]l\343b\343l\240\277\344\231\r\222G\314\236?\310\216YY\242j\260\277&\362\366^\236\314v\277=\374d\367s\373x?\346\312l#b\330\221\277pEV\276\373A\265?&u\243\357{\210\243?8\034q\317A\272\256\277\203w\362]\002\354\320\277\307(Jm*\214\306\277#ey\352\314F\206\277\005Rg\322,\223\251?\221\255^s\263\030\204\277\230$\034H\004r\221?>\272\250e\307w\226?\263\027\300\202;\321\262?C\266\261\241\324\'\263\277-Q\361\253\352\026\263\277\273\003\230\333\247\027\306\277\014&\2759\241\020\227?\243x\354\203,\267\271\277}\376\236f\370\021o?\342mE\032\006\303\223?\320\002\334\236\007n\254\277\2544\205\010\r\361\264\277\350\377\315u\236\331\252\277\273\206\324H\312\343t\277\307OP\355\370s\263\277\344pE\330H\026\306\277\261gBj\355*\222\277\306\333X\201\306u\206\277\013R\216N\021\300\242\277\337\234=4\014g\243\277\301a1\366\312N\262?\014\320I\202p\014\262?*b\373w\375\227\223\277\036\rMq\256\371\261?\236#H\005r\364\240\277\014\217\322\216\263M\254\277\263G^\362h\326\243\277\214\022UU\207\324\304\277=AV\221F@\302\277\323\266\310\ry\264\236?\213\353,8\301\227\300\277\352~\231\177\241\334\273?\2449$\006.R\272?\257\205[\224\335_\217?\031_\345\275\023\377\301?u\376cx\033\225\231?\003\273\236\234\013\317\260\277\214\274\240j\251\223\203\277\330Q\035\226j,\254\277bo\275^K\266\255\277:\347L\367o1\241?\232=\327\376!\371\272?hU\362t\014y\212?\323\335+\227]\304\215\277&\210\352\377\305\323\314\277\2763\250\275\304\251\214\277\302\214\272\315\327&\277?\315=\200\317\216&k\277\314\"Y\226\353\024\214?~\327\305+\343#\221\277B\016|M\016\266\272?\207\302\003j\022s\232\277\355~%\204\266|\277?\314\320\235\305\300\235{?X\257\033\357\003\"\255\277\020\2368\326mC\304?\314Z\271\024(\234\252?\247\260k\333\210\002\260\277\207\177Y\"\213\326\255\277\031Y\275\177*\022\310\277L\226P\n1\342\233?t\251\301\"\332(\260\277\336  \241\034\340\223\277L\026\244\341\256@\245\277\214\227\224\022\210\375z?iKL8).\270\277%\2119\237\315\014\252?\244\231\214\377\232\237\241?\367\023U\233\224f\273\277\273\006\332\350\300\313\265?\322\3724b\335\262\207?4\351S\356\350\215\312\277\035\226&\351?\267v?C#n\264J\202\267\277\346I\220 ,s\260\277:h\'\343\000!\253\277tR\n\013\206\254p?\374T\332\306\242}g\277\314L\201k\034\245\253\277B\312\277\240\035z\205\277\237\025\037\367O\345\315?\226\367\037\300)\031\256?\225\021\320\311\026\207\320\277;\272\372Y\036\353\324?A\201\332\231\274|\240?\016\r\355Q7\215\246?\373\337\204\032\311\277\273\277\245\315h\003B\251z\277\336-\313S\216\261\222?H\307\201\231\2141\230\277\021J\241\365\252\353\222?\213\365\177\007D\326\306\277\330\331\354\346W\343\302\277t\267\350\311\3773\252\277\322\240\341\303\331\215\275?\025\317\nL\261\264\210\277\204\212\254iEu\264\277Y\374\206[\236\370\252\277\364\202\350\326\342\374\253\277\313\277\331V\371\005\256?\217\245b\221s\"\205?\304ys\364\255\373\242\277w\340sI\300\370\237\277\361\213\271\032\254\302\260\277\233\3018\342\272\364\220\277\353\341\277\222\367\202\236\277>\203\252\331\343\201b\277\334PK\343\003b\267\277\212 \345]d\264\214\277\315\236O\352q\204\261\277\335\032\365a?\301\275\277\273\310[P\325.s?\204\007\231\222$t\242\277\275\262^\355\0024\261\277\343\352\252\025\256\271\275?\376 \022Hg\346\244\277\315j\270\242\020v\244\277b{\014\0339Y\240\277\323\353\251\374s\253\302?`\256m\345\202\037\255?:wY\021\300~\324?\243\351wYN\224\266\277 \2667\255\341Q\247\277p\002\346\212\\n\257\277\t)\200M\350\033\223\277\376\337\032\\F\367\243\277n@\255\005\321\364N\277$r\320\236#&\232\277\240z\377\263\tO\324\277N4\212\216\321\336\273\277\313\324D\325\314\334\253?\013\344\343\216s\364\241\277\004\005\265\335\332\321\302\277F\373\256\265\'/\257?U\344\225\214\026\242\222?\303.\244T1\360\264\277\217\306_\327\027\'u\277tN\233\200\363 \253?\275@\267F\263\250\237\2770\322\373\217W\336s?\257\026[\362\237\214\254\277S\\tH\017q\262?\337u\334\374N\002i?\263\033\252\036\2753\313\277\320,\315\353\220\360\264\277\271\034~A\355\334\303?U\004\326\317u\270\235?\236\205\356 \360\360\264\277S\n%\003\250i\251?\265&N\230\256\312\250\277\\Cd\370\026\354\327?1\375\365o?\305\261?d\024M\352\025\274\217?\375\014\270[\361\360\223\277S\320jf\257\364\262\277\216\312\327\235vd\216\277\317lV\020a*\232\277\345 \263\223\322\251\303?\373\203\321YD0\262?B`\334\360T\204\265\277%x\224\200\000\337\304?\3717\246T_\246\265\277lAE1\367\213\322?GK\226Rw\315\242?r7nu\321S\250\277\n\244\237[\272\332\260\277\024\231\020N\265\360\263\277\"Xg\303r\360\271\277]\350:n!\027y?\265od\034)\306\251?B\373\253\363\314\204\320?=\026\253\212\335\010p?\342x\324\304\216U\306?][\010\204w\004\223?+\245\274\006\2037t\277\273\303F(\207\034\260?4\"\034\353~\323r?\016\304%\247Zs\220\277+\023W\2348\n\261\277\261\\L\357*\374\207\277@\266I\321\322\215\265\277$\206\317\256F\337\243\277\207\32665H\221\267\277\227\t\246\321\337\200\302\277\360\274\207\245-\027\242?\221W\277J\210\300\265\277\240ox|\354(\214\277\323?\037\246\202R\264\277\315[\344\202pw\261?~\344\235\252\241\202e\277\270\256t)\2050\260\277F!\254 \023Y\241?\034[\350\311NN\\\277xwf\023\300H\271\277\257\276A\004>\352+\277\327\205\210\304\205\325\261?\373\000\000N\356\177\265\277W\305O\353\324\251\276?c\007%\325T\326\317\277\220B*\377\234\203\246\277\032\037\005\256\236\376f\277\353\'\372\337\237\331\274\277=\376G\343(\365\270\277t\013\264\004\265$\261?\371\003|\t\357\362\216\277\253\222\251\001v9\240\277\351\nMy\230\236\266\277\377\035\354|\213\346\223\277\216H\214\014\031\247\316\277\0142\031\200\263\311\271?sB\035\364K\225\302\277&\036N{VD\304?\274\232o\252yK\271\277\262\032\3419h\220\267\277\025\301\234~y\235\246?\374I\303m\316k\273?VgH\315\313\371\244?\241\262\254\342d\245\246?l\324\032\276t\372y?fy\305K:\335\245\277\230\326\235K\247\025\212\277)&MdX\213\263\277\243\310\333\305q\tW?\016U\271GM\355\243\277\250NS\020\274@u\277F\3623HQ\351\247?\221\\Q\372\253\337\240?%\303\000\3439<\251?t@\263\223\273\221\205?\275\014r\036\276H\256\277\325\271g\213\362q\272?\033-\224@P\014\270\277\210\262Jt\004d\301?\375r-\305r\334\210?\016v\275\272\354\251\266\277\264\347\274\3640F|?P\023\364\376\000\232\257?\325\005\370=\351\357\244?\371a\001\245~q\233\277\263\021T\214\305\214\261?8+$\220\321%\242\277\342\330\275\346\nZ\254?\370\025#\'\230\225\240?w\347}\252\255\210\251?\355Y\220\356\305\334\255\277%\244\222B\273\324\267\277\247<\210\244\353(\307?3\315\313&^\000\247\277;\257\335\254\326_\241\277\263\352\314\240JK\270?\277^DzY+\263\277\216\'\332\235\351nY?Ou\223\341\023\301\275\2772\017\272\332\020=\253?\000\211\026\225m\315\224\277Zd\t\351\201\370\255?\010\016\212`\271H\263?\r`\204\354\000a\302?h\2101\371\302\016\262?\337vD\217\037g\300?Q\215\257\032\262!\224\277@\256\364\343-Zi\277\334\255Rk\003\271\245\277Eu\177\002xG\213\277\213\223\212H\032\203\250?\221\322\227\343\010g\312?\023S<\272-\230\235?D\005\352\263\340N\230\277\202Y\341\202c8\247?\332\353L\203\232\r\253\2777\225L\301PL\324?a2\276\255\302\251\230\277\341\376\205-\r\236\211\277\000^>\370+\225\320\277G\347OA\013.\246\277\030\307\243\234\301\260\306?\316\340\313\213\026\262\267\277\304\373\227R\026S\267?\211\354\271\301_\324\234?OT\rI_|\223?\277\373\r{\003\353\307?\327\236X{\217C\245\277\362\325\3414S\375\261?\252\225\374\"\205\363i?\030\237g8qm\267\277\243\214\033\201~f\264\277\330\320\356\255\254\017\245\277\330u\314e\301\320\204?\002\311\256A_P\300?\005\035\310.\205\030\255?\336\261\245mi?\231\277\014\303\212q\004\271\264\277` \026&\235/u?\244\243t\222,I\223\277\200\225\241\213\017\272\263?\200!\230\333\000S\221\277ZtE\254\215\303\212?\347\320\215\324F\023\241\277\372\027\212/\226P\240\277\373\320|\314\n\035\242\277\272\300\r!3\331\264\277\014O\245u\030o\223?\\\250\210\t\366\253\302\277C2\316\350;\224\226\277\356\323\306\031\305\201\243\277>\253\013\310H\353\313?}+\233\rl\214x\277\'~\317\001\033\210\233?\224@\257$\245\330\261\277\326O\337Q\277\217\244\277w\177l\217_\340\262\277\006\253\216C\3035\215?E\341\331\225_\315\220\277\301\014:=\322\365\271\277\333g0e\350)\241?\023\201\261\326\343\022\275\277\207\023\016 ]\331\276\277\251e(\030\2431\245?\177\310*\227Q\317\271\277Y\3364\005~\237\260\277q?n.7#\220?\201\026\206y\350P\251\277\277F\344\374\313\260\272?JS&\304\211\364\233?\243\211\347v\335?\252?\241ow\2016\246\263\277\341j@<\341\352G?\214\357\361\347y\017\271\277C\313x5\337$\262?7vy\"J!\301\277hD+\376\302\017\321?\345\264\263\243\221\370\243\277+n\200\026\237\003\201\277\334ZJz\263\260\262\277\353\366\361\342\325\257\245?>\306\237d\252\234p\277\373\265\026\253W\376\274\277E\221]Sy\251\236\277\351\216\273\311u\n\236?s\252\345K$[\256\277@L\031\270R_a\2775\364Z\340\033\334\261\277\317I\261\005\275G\246?\360\211\271\"Mp\262?\036^\202Nu\031\233?\256\031\271\225\375t\262\277\214\216K\343x$\221?\336xN\334t\366\250\277\302\205\320G\353\275~?sR\214\322\2142s?\001\327,\267Y8\236\277\221\346m\346\326\221\263\277\340q\256\361\305C\264?\356\031\320\325\345\370\264\277/.\361\177\005\033N\277u\365\374z\266\340\266?\036\275+c-<\307\277\345\021\007TeB\244\277v \341\303\224\227\260\277\306)H\273\030\363\224\277A\260\257\206\375f\307\277\267l\210\022\302\355\264\277\025-\206\272I\005\322?\277\357\313\352\343\223\302?\203\266\345\026\373X\262\277\027\225\021\347P \260\277Y\372\374\032E\352\270\277\203\270\343\256\306)\244\277\306\022\014\371\206\306\321\277N\013k\013\032\216\261\277\205wI \016\033\272\277\210\207\203\273\2172\202\277B?yv.\335\255\277\262\275W\362\217w\224\277\241\274\232\307\336V\256\277T\320?\023p\260\231\277[\252d\316\307&\241?$2\255\220cE\272?\364\206\302o\177r\254\277\266\214c\341\277\206\231?\031G\227\361h\'\272\277\312u\271\304u\300\311?z\335\300\001\246\340\245?!?\264\360\340C\252?w\273T\313h\342\236?\035\243\327\365\3614\252\277\312\246n\215\266\345\211?\260\217@\300q(\310\277\271x\027\314?\034\262?\224\320\024R8\364\233\277\327\351\317\227\360\312\231?\n\252\030\251\307\240\265?\032y\211\ry\222\244?\023\250+\'E\311\233?\266NZ\230\244\"\241?\261\277\324C\373\257\235?;\341\327\275\215\027\262\277\202\273\307(\2510\260?\036hw\313\323\336\265\277}\227\230\247y\"\252?\377AP\2052\006\264?\177\276\367#\013\237\246?\320\002\026\351.\220\212?\317\217\032\274!A\257?~\227s\035\030\371\262\277v\205\355}\244\363\324?\002Q\t\212v>y?\365PV\016\007\021\244\277\251\032\234G5\334\244?Mr\263>\204\334\240\277\350_\210p)H\260?\260\323v\242cFw\277\345\006$i\3125\261\277\271\360b\216f\350\237?LZ\346\364\030\330\255\277\263%\007\237\307\227\246\277\253\362}\2755\217J?\322i\314\317\212\306\272?\214\022z\236!\314\334?\367\3241[\030W\207\277\345\374%\237\225\036\273?\312H^\326\335\240\303?\215\3322\250\265g\246?\032\tUC\234L\225?\270c\n\226\222(\275\277\350\230\203\332\030+\264\277\323\274+i\263\276\206\277)s\002\n)O\221?\301\307D\256/\217\241\277\251\275\000\237\333\234\243\277\375\271r\234\276\036\262?\006\376d\354\3029\262\277\276\223\225`l\177\250\277\016\275\244s\253\315\252?F\247\020\203\037\"\233\277\354\357\274\375r\036\261\277\356\r\013\3138h\263?\277\256/\037\336e\216\277,\3215\325F\030i\277H\242\256Fn`\253?S\003\270n\010F\322?\364\204\353\314\335>\264\277\n\350H\331\326u\267\277\276\033\263h\'\031\240\277W{\rt\322Sx\277\205\255\2004\0044\311\277\035\350\376\341Y\307\223?E\320n\246M\270\255?\225S7\231\tU\267\277\2572\272\273\n\322\244\277:\3314,\037\220n?/\016\326\272\264\031\226\277\326\234\203\032\331~\261?n\262\342=\214\317\246\277\321i\301\312Y\246\220\277Y\027\024+/\343\257?\36538\034\323c\247\277_3%i$,h?I\002\017\340\214A\250?\320;C\355\t\000\303?\034w&\372\006\240\220?\266\300<\203s\236\321?\036u\236\247&l\224\277\303DcR\361\\\300\277[l\211\216\240\361|\277\"HA\234\235\210\244?B\221\030\325\r\330\264\277\260\023\007\252\262\301\247?7\333\0261@\310\232\277\326>(S\332\210\230\277\007\026m\362\234\024\201\277u\351\215\322)\037\256?\274\253?\263\313R\271?NA6\177\241T\262?\354!\363\253I\021\224\277$\023=\332\271\316\240\277\227\207\016\333r<\247?\214\255\013\340\253\231\302?\026\024@\244Gg\304?\216\225S,\314\274\272\277\207\275\271Q3\300\177?\232J7\2232j[\277\031\177f\354\212\233\200?cw\030N\004\037i\277\365\\`zmX\247\277\027\034\350X!\266\261\277\013\221\325\230q\024\222\277\016\275\252\213\017\016\260\277\321\223\017h)\235\245?\305\263w\366\031\226\240\277q\234<\017C\336\253?\256\355{\307\354\201\241\277FI\003\030\321\375\213?A\354-\252@S\264?\207\377?\356\244\275\245\277\177\272\321\225\274V\267\277\364b\205\312\036\365l?\023o\240\224\\\247m\277n\302\366K\361p\266?\352\215\215\244\036a\301?\361\375\364\206SJ\262\277\210K\311\351\370\300\274\277\246\270\310-v\224\230\277\371\327\277W\352Tq\277D\247\030\315\331\373\244\277\362\010\350h\330m\306?\005\022y\032\306B\273?\200\302\273^_-\267\277\344G\005\264\365\331\260\277DI\327\332\240\304\221\277\354h1\3622\201\261\277\376|\303E\340\330\305?\337\035\326\3552z\265\277u\252\366nSl\256?\303\237\252\234\031\007\303?Dk%\257\022\330m?\267\342\37184}\213?\207\270\210L\207s\250?\257\261m\331\250\313\270\277\272V\244\rFS\232\277RM\273D\333\017n?\255\013\363\335\357\351\236\277Y$\330\224\220p\300\277\345\360\034\331\376\032t\277\256\200\352\235\323V\254?\240\226\010\0315\r\207?\343d\'O\373\346\313?#x &\201\351\237?\311G\316\200\227\223\255\277?65\376\226D\224\277\217\2148Y\326\365\274\277D\340\370\306]\214\261?c\247\010\372\221\223k\277\007\221\333\237,W\301\277\353\\G\271S\316\263\277%\252w\300\302\327\245?P\265C\020\253W\204?JyVPyV\222\277\r\243\346\342\243\246\270\277\t\330\031\274Te\215?\"\247F2o\360\251?\372\364~\233\352\"\267\277\t\r\307\004S\343\306?\240\316\224\356\344\371\267\277$\214\252\350\006;\241?\2057\245\023U\210\257?\332\262\013\343\263\212L?\326\241\312\247QZ\232\277]\004n\001\366l\264?\002\220\322\262\377>\203\277\031Kv\255iw\303\277\323\223\330\307u\315\255?\230\335\377\242\223\264\301?\367\362\r\357@\t\232\277\205\230\214`\"\363\261\277\366\357\177\213\355\377t?\315\035\217mhP\245\277R\004\026\342H\304w\277\023\333\024\205\035\312\251?R\0279[\037\370\266?\231\320@\243\027\206\260\277Q4,I\245\312\263?\363\036)f\253$\267?\276\300w\243\001\257\300?\037\371\340>x\331\202\277m\317\357\017\036\265\262\277\014\305\272)\232\311\221?\273\271Z\374H\200\244\277vK\327\336\020\366\262\277\312\360\254\252<\037\251\277\304\277\037\244}\030\307?}=\277\227\263\235\321?V\177?\327\026~\267?\321i\364am\302\255?\226\200\362-y\336\301?\347Kca}\035\272\277\224t\257\205\006\263\326?#\0055\345\'\335b\277\327\351:\014\211\r\215\277\365&\257\362!GZ?\303\351\351\316Zb\275\277v\257\204\016\256\225\251?#\311j\023\027\354\313\277\245\244<\346^\242\260\2777\t#\357o\302\245\277y\367\254\265\330\262\226?\201\345I\222\373x\266\277\320\255m4w\365\300\277\210\245\202Q_\263\243\277F\254\261\375\025\246\303?<\n\203/\351\255\223\277\244\341\026\027\n\003\254\277\n\0063\263!\244\265\277t\371)\335\024d\260?fF\353\301\037\204\240?\301\213\233\004\351+\226\277~\274,_\371\235\302?\"N\024\257\323\326\250\277\356\221\022\202\025\307\266\277\305\276\204\201^F\305\277\306_\034\376\364\375\234\277\365\001\003\004)\347\216?\322B\\\nL\030\247\277&:\000|\306L\214\277\344u\316=\"\326p?\030\255\023q\037\030\255?\227\201\\\322~\316\260\277\220{\023y\007>\306?\\P6\010\243\001\263\277L\362y\323s\303\237\2773\373\373#\274\242\272\277KD\223\356\310g\257\277\313\034Tl\024D\266\277\017V\343\351\204\001s\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\215\246\3762\364|\247?(\332\0012\2514\237?\213\310\031\330\216q\306\277\263\177\312M\216/\204\277A\025\350\036r\251\271?P\261o\210\220_\253?TE\363\007\247\203\247?2\251\214\345\352\256\251\277\330\030\020\032\t\366\250\277\000\330\340\242\315y\237?\030\243|\201\305*\264\277\020:\321\232\270\307\261\277\212<\007\2773\336n\277w\372M\323\034,\217\277^\005\006?\231\277\275?z\342\266\206]\267\223?\260e\377ay\320\246\277\227\252PZB\314\221\277\\\217\345\006\024\347\301\277\267\275\027\303\320\247\261?+*9W\032\236\256?\332\324U\365fC\201\277G)\025\213\252o\270?\267\342\216\313\361\210\266\277\030\302\366\242\321\261\203\277d\304a\261\221\364\263\277|\022\227\255D\377\304\277\361\036\221\303\235\365\244?f\242^\252\210\352x?\324\203z?)\334\265\277e\207\327\227\020\363\260?\307\033\300\237S\231\223\277?\345\255\234\377\032\277?\213e,\002\215\276\241\277\261\262\327\352\356\341\274\277$\326\001\375\261\312\305\277\250#\307\034/\330B\277svJ\270L\302\274\277\246\244\013\241#\003\266?1\026O-T\307\240?\340V\372;p\214\261?\032ni\252\332\200n?]*%~\256\312\207?\210\250\375E\024\016\261\277\277N\013\307\333\230v?o<\265\\T\332\337?\262E\256\"\275\t\303\277\023-i/\204[\303\277\t\350\035mz\315\243\2775Y\016\355\367\375\245?0T\"s\203\235\230?4q\312\212\3772\233?vnkx:\216\241\277\370\004\225\360\322\220\222?)!o\030\302\241\254\277\234\354\254\253\226q\305?3\303\2214\002h\260\277\2245:U\"\211\235?s\036\276\332\0163\225?-\333\\N\n=\266?a\306\034\324\3553\244\277\246\020q\273U\271\241\277\224\030f/\264\247\223?\007\311\227F\371\335\247?\252\240\356\013\'i\221?K\"\262\004Z\177\240?\3429\204\250\322\032\220\277\363\353z\316\236\007\231?\034rB\255M\024\261?Dpp\276O\226\300\277\344\222 \335\326\336\252\277<?\224\377\246\216\306\277\360\250\311IC\320\221?\306\332/n<5\256\277\317]#6A\301\253\277G\253\223$\2702\276?n\357yI(\264\260?\371d\352\311\224\306\263?\033\250\237\027\r\301\251?\377\327\256\345\326\260\260\277\025\233v\n^)\256?\014\344<0\233\276~\277\305\r>\222\217>T\277\025\376\313\357\240o\224?\005\303\013v2\361i\277]!I\005\263\343\262\2776\335\243\322\266\233\320\277\020\001\334{\035g\245?\223\276\033\034\246\317z\277e\001\315F\205 \303?\312\216\310p\r\315\237\277\314z\t\254\020\263\246\277f\357\263A7\260\225\277$6\275k?v\244?\004\217\363\351\\3\215\277\241\224\350Of\260\252\277Y9\006L\213C\233\277\027\366\256P\021\313\274\277\006\\\265LL;\260?,b\212/\224\312\235\277\304\374,\035Ww\314?\004\206\320\241:\304\250?\261\207\317\311\021\243\242\2773\345\224\250\247;\203\277!\374\226\276\371w\273?\351\367\'\326\340\233\256?\276\377\332\235\232\371p\277\326\037\352$\254A\217?\270\3726\276\010c\240\277\233\245\304\333\253q\225\277\315C\326\2627\267\254?`J>[\225:\263?\313\036&\251\254\230\274?\022\307Rt\350\301\262\277\'\212\331\333o\267\226\277\257O[T\277A\250?s\370\337f\344o\211\277\267\'\t\301\312\t\300?\022U%>i\272\244\277\247S\023\345\316\341\225\277\007Z\211\3247#\270?A\247\177\337\3408q?\245\3276M\363c\242\277\020L\013\037\340\345s?\310$}O\275\312\266?\036]\201\"s\016\231\277(\3730\350\254\223\264\277\246\037!>\224\032\267\277\037\2616_\2724\306\277@\021\341\025\272D\260?\232\272\275*\240\330\314?\347\234\035zk\"\263\277\216MTnAJ\317\277\341[Q\233\304\343\263\277\306\303^\211V\306\231?\221\347b\334\307u\241\277\035\203\025P\031=\251\277\353|!G\215\310\240?g\204\342I\304(\217\277\330\231L\377\217\014\240\2770+j\337\254\262v?\005\305\005\214\256S\276?\301\023o3R|\222\277\331\027`\232M<\212?\261nq\211\260\022\246?[\267\356\307i\246\021?\257\314Tn\327\200\214?\301\272H\247\225\\\303?\r\347\'\230\372T\276?8\232\323F\320\201\255?y_\277\362\255\367\223\277P\007Q\321\313\311\221?\231\366.+$&\277?\331d\2150\n\211\205?}\321\327\331\021\232\250?\307G\001\310\024\247\250\2778\024\220y\303\330\250\277m\247\324;\316\222\227\277\036-g\232\324\007\252\277(\253\001\326\333\340\224\277P4\035\325\300=\224\277\345\316v+f\274\243\277{\263\224c]\332\260\2779\313\035\031\314\307\304\277nC6h\210\365\251\277:\t\354nT\347\304\277\332l\017\037l\223\267?\354\374sr3\266\223?\242\027j\022\360\n\244\277\304\227g\334\036\232\243?MV\t\036&d\244\277i\361\377\361\264X\211?\332\272\016\257V\324\232\277\260%=%w\220U\277\234\244\023\376\221\013\265?z\341\340\222\201\275\257?:\371\023\000\252}\270\277 3$Q\315\273\267?\272\022\315\334\275\202\256\277\264\337V\210\257\303\225?\n\341\203r\211B\263?`\017\252I\0315\260?\001^\322\252\255\354\264?\016n\3311D\356\261?\326b\215z\212\306\205\277%\237\017\242?\313\252?\236\364\221\037\250\031\251\277EV/rg\004\271\277_kj\314v\327\260?\177\341x9f\233\207?\316\323r\263\223\376\206\277T\367\010C\313z\313?:\004\374\026\277C\271?|G\025\234\277\253\261?\364\354\222w0\001\232\277R\243\236U_\n\266?\201\335\261i\353\265\260?\321G\201v\244W\222\277\312\33543\334\233\206\277\233:$\037 \214\207\277\362\317\233J\032\262\205\277\013T$\346\253\227\271?\215\365,&!\323\221?\356E-\323HM\301\277\021\265/\263\237_\244?\247R\262\257\253$\270\277\276sOFG\017\224?\224\342\275\006\201\317\241?\206.\257\"\370h\271?\265\250\266\265\243L\306\277\266J\274Q\326\271}?\251\263\242^\352V\251?\360#\312mk\265\230\277\226BaTp\"\256?\037\206\242\031l\331\263?F\"A2\020\036{?\003\255\341\\\005\035\236\277\035\322\010vE\363\225\277\356[_\0058\253\230?\342\310\021)\347z\272?\256n\366F\310\331\234\277\341u\217h\376\274\315\277\242\307\304\377\311U\207\277a\rqZ\216\314\267\277\020\300R\375^\240\205\277\356\273<\302\014\334\223?\247\215\257f\033\361\264?\310P\277Me>\267\277Y%M\224?\262\241?\270\332\207\321t\222\274?\331\231%0\006\000\212?Sk\255c\310o\251?*\264/S\272\004\264?\342,z\t}\271\312\277\337\207\357\177\334\'}\277\207\244/w\222\254\300\277\010#\020c\345$t?h\365\340\345 &\275\2776\026\244bsn\226\277eFp\332$\371\222\277\206c\327\250+\246s?h\365\357\372\032 \245?\207\240{\263\033 \261\277\263{\307B\032\355\260?\021~#\345\312\220\247\277\020c-#\025:\266\2774p\3763(\226\252\2777\007\306\007\327Y\203\277g\314/L`\013\177\277\0319UQ\032(\242\277\r\345\005\014\222\204\241\277\241\311=\030\304\345g??Vp\340\270\231\220?\222\025g\343c\016\254?\217<\032\002\024\341\226? -i\312\2074\230?\343\r#&\334\270\242\277\270\360\0317g\002B\277P\272 \272?\\\273?E\302\374 \237\303\225\277@\251\343\230+\341\260?\347z\001T\300>\242?\243\270\346\01366\233?\227\336KlJ\362\272\277\217c\340\352\362\024\276?J\363O\352E\367\306\277\366\001c\177\000\242\222?\022\352\2760v\362\224\277\224/\373\330\n\274\252?\t\004HG\342\030\252?v5E\306i\321\262?\320+HI\376r\235\277\266hv\266\201/q?\364]\374s\367\221\237\277\313\017\343\333\264\247\213\277\236\2411X\0063\324?1\r\001\275\342\331\203\277\232\017\221W\r\300\276?\240q\013\257\233\321\217\277Sd\346\362cq\244\277\342\247\345\377\023\320\206\277\n\251\031\037[\340\\\277\035\352\276\376\031\023\242\277N\341\224\rx\350\264\277\'Q\206K-\022\205\277(\200\026\253Ek\177\277\34309\246.\350\253\277\033NS6\007\310\264?\363\264(QZ)\256?\344\304\346\001\333\321\250\277\336\313\341\265G\244}?3\351\231\034\340\016\276\277\372\264\246\347\010,\234\277\305hM\271\277P\256?\363\333=\206W\322\261\277\366\246\025\375\025\222\261\277;\025\033\201m\003\232?\330\'\261\240k|\210?\237f\242l\3430\264\277\016\313\210\014\264\203\261?\374\367\007^\306*\262?\027\1779\3047}\232?\034Y\230\320)\004\303\277\217z\207=\374}\254?\251\3250\300\335<\264?\000.\353\263\347>\241?\235kj\336\177z\212\277\r[\0062\322\003\231?\001\3649\211\002q\201?\000N\343\345\261#y\277\021\230x\002\303^\276?\213\334f\344\010\237\240?:\313\027\364\222\250\240?Do\370\030\216\023x\277\257mD\214\376\316u?\034Nm3\362:\267\277x\377/\323\360\274\205\277\310.\312\222\345l\256\277\261?\307\272Kc\251?\022Y\032\315<]\177\277\214\366\251\036\367y\250\277\006VTx\305]\260\277\366\364\327\213B\340\300?E-R\240v\260\204\277\3223\352\360\"\333\227\277\357\226\016\224_0g?\275i\177\226\312\353b?\240jK\207\224o\270?\257\311:\360\204\317\303\277D\314\202\304\232\030\263?\036\202\351\303\306\325\314\2773\3419\375\355>\216?e\017\n{b\275w\277\333\016\220\305\321A\231?\211\220\001\033\352/\243?\341\276\032{\240\n\241?h\325d#\023\321s?k3~0\365L\332?\352X\236\374@H\276\277\335\375\377\337\"\\\225\277\230\210\232\221\305=\240?Htxd`R\242\277\310\224\211:\352\322\304\277\327\246\025G\304\220\244\277q~\241\277.\205\220?\213\263\241\376\3651\262?z)\376\356\330I\225?\304\200$\237o6\304\277\304p\020\005\020\213\257\277)G4\313)v\221?T\214UK}*\207?\306J\307\333\014\316\241\277\027\242\260\363\237)\266\277\340\247`@\301\202\257\277\374\006\360\014\006s\204?\032i\026&1\262\273?IT.d\313\303\220?\030\274\2770\223y\260\277\222j\343nL\312\240?\251o\365}\300\322\264\277j\031y\200\255;\314\277\002fk\024$x\246\277\3400\201\352\253B\263\277$\177)>[\217\231\277\324\032(\273P\025\256?\220\r\351\346 `\'?a*%\255\203N\240\277\206_\241]\360\256\227?\356;\236E[I\240\277\365x\216\213\370_\236?X\301f\370}\273\254?$\n\301T\265\254\211?z\264\232w\207\020\270\277\341\303t\213\242\027}\277g\200\303c\325g\235\277\036\342\210\354\223\273\270?\253\207\372\202\340\305\256\277}e\032f\003\250j?\250\273\204\3155\215^?\245?\227\256\246l\255\277\323\275\225M\365\035\251\277\303Z\031\275e\316\244\277f\202\351\322\335\211\331?^o\232|\370\370\266?\233wt\307?\306\251\277\246\337M\270\027\232\240?$d\313\205FL\202?\212Y\302\275\241m\244?\346\272\247\020M\340\265\277\217\217g\010\352\343\216\277\352\231\336\240[{\321?\246wu\027\364M\230?\302D\245\343\355\306\267\277\250\326\311\346\2543\300?\001\207\215\265\002Q\240?\265\020\243\'wa\245?1p\267\034\205\334\256\277\3155\305G\204\300\221\277\007\312\035\210\345,\221?\006FT~{d\252?\365\363\025,i(\246?s\250\313\272\210\344\263\277\325\266\370\337\022\027\302\2773A\214\266\245\334\276\277\322\'cm\235\227\233\277\221\372\251e\026\240\243\277l\375\035\330\tn\262?]\331`\204\305\'\243?\351\301@\353!\342\270\277)\373\361\001Ax\233?\335*j\\\223\375\240\277\206\304/\037\334T\177?\352\365\331\207;\246\222?\024E\034\325R{\265?%\300ZK\372N\253?\321\2526|\335\365\242?\371#\207\225\314\023\222\2773\337\261\000t~\245\277\332\207\013\242\376\212\246\277\232\370\360\'uC\270\277\375\024B\314\241R\307\277\327\344\206h\216-\255?$H\2073\215\327\260\2771\363IU\312\"\233?f\321\200\333G\336\224?+\335\231\336\267y\206?\375J<T>\025\237?\365\300\024\211l\026\223\277zwi\205)x\270\277#\215\217\273\241\037\256\277UT\r\307\340\300\260?\004\334\245\006\376i\265?$!\364\037\357Y\222\277\030\231\017\026\216\021\265?\016H\275\370\216,\303\277\327a\320FhK\222?\362\363<\277\266\242\270?\232f\242\262r:\314?G\031K\371@\327\251?~\001\301rnR\254\277\247\n(\254\255~\311\277%\305\211\021\313c\262?\347(B\372\366\177\256\277\313\034\236\324\251H\251\277N\"eA\272\354\244?+\236r5\323\351\230\277\375\374|\377\376B\242?<\202\021K\226&\244?W\034D\366MX\272\277\007u\205\225>\335\247?d\226~\025\224,\266\277\222\025ZpE\203\233\277FO\007\t\016~\225?\216\214\214\267QT\247\277\017\036\261\377\221\204\250?\324\305\305j\3559\264\277\320\241\360\264\350\340\216?{^xz\330g\261\2778dck8\301\271?Z?\n\2711\323\263\277\360\361,|\315W\235?\341\374\357+=I\266\277\322\033#\327\360\370\247?\347\357W\206z\327\303?S\223r\266\316!\\\277^\257X\322Yy\217\277\236F\2701\203?\245\277\177\271&\305\361\355\242?\204l20\333.\267?2\217\264\343+\227\270?\220\270?\323\312\177\234?\211\352\022\213\362z\275?\337<\267\\\246\357\235?\302\270\026\346C\230\266?G\275D\377R\353\264?\305r\371r)\373\215\277O\202\211jct\220?\026\314\254\2555 \260?\247\343c7~+\260?\207Q\343\223\220\266^\277 `\307D\017cl\277,~\251\336\352\275\265?*$p\213\225C}\277\t\312x\275\305\324\234\277\227\227e\337E\275s\27796\256\262n\034s\277\333\330\003^\241\247\213?\001\311i\'\014\026\250?\375; \360\231\372\243\277\274z\313k\003z\243?`AMm\326\351\322\277}\204\353u\361\315x\277q\0070\210\3025\222?tY!\013\317&\266?#I77\tM\206?\023\020\220\324\014\335\226\277\005\233\024\317\245\376\245?\317x8\032\316\272w\277u\003\3770\006\217\271?\021R\013SsB\246\277\224\232\207\303.M\243\277\211s\303:\207\037\275\277!-\246C\354)\266\277\202;\364\312 ay\277\376\251\027\325\340\313\246\277\222\251rF\002{\274\277?\237\354\315\260\336\224\277\333\302\303\357\366z_\277\364)\014W\311\033\257\277^\375\031\235\257\366\214?\270\007\253\226\253\2469\277\231\374Ju\020\315b?\223\230\204\332w\030\233\277yH\253\326Zi\263\277\341\211~O\343[\251\277\341S\260\006\212\260\275?;\317\311\010\017\010\302\2772L\344X\303$\236\277\267d\253\220\337?\231\277\230/\301\265\035\356\277\277\026[\200y\244\333\225?y\205\201|9v\220?\277[\034\211\212z\241?}\323S.\312\026\205\277\273\237\215\234\321a\260?e\t\"\013\217\301\255\277M\276\247\342\201\007\237\277\330n9A}\\\263?\206\273\361\257\305(\231\277p\264\270\025\023\231\227?O\333\211m\276-\254?4\035u\314g^\227?Z\235\005\r!\242\230\277\365\325\315\305;MC\277Z\223\n%\377\310\265?\270a@U\312\332\207?\025\"\300\363\240 \270\277\026.C\032\332Wv?\256\216\352\320>S\231\277\326\352\231\305\334\307u?\377\313;\036\004=\321\2771\021\265b\n\240\222\277d\223\3706\016\264\236\277\367\001x\024\370\373\265\277|\317\232\204\330l\260?\023Bjf\262\362\265\277oE(\027\325\243u?K\221\260\037\212\241\201\277\354}\005\245\367\224\264?}3\376!GV\201\277\315\342\202\247\222:\177\277\323P\032\334\342\266\230?1*\004\240d\025\256\277\251\262\244\244\350h\204\277\200\270\024\213\257Q\210?S\001Rh2J\267\277\374\031D{^\321j?N\270\3604\203\336\260\277\033\323\032\211\230Ri\277\021\'\357J\356L\304\277\263\266\250EE\322\266?\036\2720U\344O\262\277\267\353\334\277\227\004\213?\342\313\257\0006\220\254?\262\247N\300\265\226\246?\n\2775(l\303\202?7\254\253|\373\263\206\277\036\217W\223M\226\240\277yU\264\025\250\231\301\277O\031\036\252\016\200\232?o\373l&\275\331|\277\017V#\227\223\212\267\277\0307\035Xz\304\230?\310\266\\Z\\U\241\277\236\331\004]\202\364h\277\352P!5\206\215\254?j\362\247I\345\346\212?\334{\224,\224Z\264\277\225\007\261\346A\247\206?\342\275\253m\313#\203\277\005\027\345Z\340@F?D\222=\313\305R\301?\364\255\303N\271r\211?\026u\3169F\275\252?xq(3\347\t\262?*\003\222\214\334O\266\277\345r\020\020\217\232\234\277\2211;(\350a\217\277\366\274\260\204\262\013\266?|\277\030\203$\021y?BQT{4Z\250?l\266\264\006\250\037\300\277\227\022r\335d\244\203?\233\210(sn\254\270?\3740\013\023y\365\214\277\007\332\271\320\016f\264?\360\237\327\037h\342\250\277\"\352\t\315\210f\200?\010n6\220\027,\307\277\223\n\034\356\r\372\263?^\377}\340$\237\257?|\334\327\352a\351\274\277\237\325\247l\244\033\240?}\200\336\273\302\222=\277\205\231XU\005\337\240\277m\0330\206\362\363\255\277\315\234\331gTX\275?\252\341\274b\264T\257\277\025\002\211\262\020a\250\2778\213\312\364\216\022\205\277\032\343N\374|\232\260?5\003.`4\305\241\277\223\n\332\334\277\345\246?\361s+\005kf\270\277\310\357\271\232\355#\201\2772EQZ\2411\237\277\247K-\240W;\254?\331\343\021m\004\364\244\277\244l\005\274wz\200\277\240*k\244\377\251\214\277\306\335\321\352\032\301\255?\334\354\304\251\037\245\206?\267\303j%\226\327\274?\252K\273\274eR\251\277o>8\312 >\213\277\374\304p\207\375\344\200?\247\tg\0231\311\232?\226+\304P\034\264\276?\253\373D_\013\302\231?c\3524\244\3076\262\277\202\304?\324\337\233\211?\216\376\330\300E\013\215\277Ww=\275R\203\263?,n\rL\357T\247\2770N?6\363\210\264\277\235A\017\305>u\303\277P@(RY\216\274\277\207\311\314\340b\003\260?u\233\352o\372\036\244\277\364\220a^\205\226\276\277y7\305\203\007>\273\277\031\265!\357\370\323\242?\363Y\251\t\262\034v\277\331\305\301\374\270\345|\277\\\240b\027S\326\264?\343Bw\313\360\331\303\2779\263\226\363\307;v\277S\306J\277b[\200?Q\365V/\326\231\303?\026;\367\334\235\023\252?\266\336mCN\370\272?E\312p7}-\236\277`1\206\325A\233\314\277\340l\333V\005\375w\277%\'c\0300Q\220\277o\300\366 \334\200\323?p3\002\007n\376y?\024\214\301\252\234\370\254?t\014W\235\035\247\232?;\002\025\316\261zn\277p\323\t:\302N\216?.g\237\267\200\314\237\277\005\325WB\376\354\223?\311y.\202\234\303r?\234\351y8X\034\313?\220x\270]\241i\243?\353\3230\312\246\313\305\277a\201e\003.\231x?*q\222\014\227\215\262?\364w%R\325\207\270?\364<\305Qo\267\275?6?m\314\230\213\315\2776~\224D\024\270\253?\3637a_\027<\253?\323\365\2349\035\305\241?>\023\336;\357\021\246\277\3530\026E\262\216\263\277\"\257YR\310\374\302\277\n\320\351\303\371\023\302\277\017a\347\301 \216\231?\230\3756z\000E\260?az\271\3715\210\222\277\177J\031\037N`\226?\313\024\277\023\025\245\272?\300\301\032\357$\377\261?\260~\352\031p7\230?&\210\212\rwt\247?\326\201\005\240\352\202\201?\232\207c\370\371\307\223\277\312\370O\200-\002\262?\273\302\024\312#~F?v\314nH\206{\226\277\353\336\350\302\331)\203?r\335%\307\n\322\213?\031^3\355\rK\255?\351\304\226J\320\0237?\377V\370\372\346\005\264\277\323\276#\rHj\260?y~/\004\275T\305?7\366h)\034mx?\273\026A\205,\003\223\277K\327[\200j\016\254?0\023\377\307\3164\271\277\271\253\222\376\233\362\241?\242\035\261\262O2\242\277\023vk\037\266}\262\277\274\251c\t\3540\303\277\351\303\010\250*\005\241\277C8\314\007\241G\260?\370\220\024\031T\207\310?;\236\203\377\250\371\270\277\032\274\266\300H\337\216\277\r\235\021\\4P\275?w\230\316h\252\222\221?\254l\227\351\032\240\240?E\020\036\215\346\014\250\277I\004\302\000\035\037\276\277\316b\233\360\255\243\242\277\017m\261\365\345\220\222\277\002\263\030d\022\314\264?\037\311\356\233L\303\034?PD\351Jm\321\247\277\361\303\342\227\216\271\303?\031\026\331;\203A\273\277L\224\230\220g?\300?\222\215\3228>\t\240\277Q\3410\204\025\346i\277|-eWP\304\221?(-I\341\246\252\250?\323\341bIC\263h\277\342\312q\006N\342\261?\2578cd&\344\264\277W\265J\354I\302\233\277\371\240\315$j\363\300\277s\335\010\377\002\211\232\277\2129\230\367\214V\302?=\337\365\234\254\023\246\277z\371\375\320\266V\235\277\362%\204\211\336\317\266?\372B\363\373\001N\247\277N3\264>\273f\242?\336>YS\331g\322\277\233O,\326\225/\322?!\251\026\337\014\361\271\277\002\314\203\214Cb\271?\260\303\360\305$\006\233?\331\034\300l\265L\217\277\326X\350\361\353\000\267\277+\362\'bVM\242\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\205#\273X\246\177\275\277\232\313\010\377|kz\277\201\244\276\232\354\300\262\277GQD\320*\230\256\277)\371\320\252\310\232\250?\032\333\"\334PR\252?p\t\314\276\036\220\263?\274\330^\004\242\005^?\234\232\013\336\305\267\250?\311\205Y\307Q6\245\277\204\306\237\036D\353\220?\214\203\231Y5\321\251?>\372oR\247#\230?\234\330P5\r\211\247\277+\215\205\322i\244x?\007\271\240rn\213\243?`\025\031\340A\267\324?\275\037\373\305D\375\271\277\006\362\277\241PN]?C4-\325O\360\251\2778\256\320\302\213\254R\277p\211\016yCF\260\277\004\031z2\262\334\253?\027\002\017}U\266\263?A\252\213\240\226\263\270?+SaAyv\204\277\351{6\321\022\251\303\2776\217\343\004\324\303\230?i\220t\027aF\230\277@\206\273\347\356y\263\277!\237b\350\346\334\272\277\2662\336\267\222\255\241?*{\210\023\035\341\262?7\224\355\302[\235\220\277\253\235\356\350\"\263\250?iB\321b\301\245\262?\255\017f\t\000\363\202?u\323\363\3631X\261\277u%\356\326}\217\221\2779\204\244k\355\344\272\277\211)\265&\027?\255\277@\330 \277\026\026\242?\367l\030\236R{\274\277\rj\212\341\\\244\262\277\003\022\016\224\201;\260?\341\254\377\026=\231W\277\2066\216\024\262\357\237?\027,\241\301!\371\242\277Z\007\234\r\201\223\262?$\243\237\252\030L\301?L\207\206\321\376D\236\277\2577\352(\224\243\300\277m\272\3120\372[u?o\205\310\231+\214\243\277{H8\251X!\231\277\300\274ki!\355\301?\373\250\3773Q\222\250\277\356/\234H\316\330\251\277\234\270\333\3773\332\201?\033\300\340sg\013\233\277\323hl\304\211\336\224\277~@\326\332@G\256\277\232^-\206\370\267\240\2771\361\306v\331m\227\2775\264\014o\310\033\315?\262\260\251\334!A\270\277\027\005k\227i-\261?\252l\243\\e\370\261?\330\223q\271\232S\253\277\345c\005M\036`\227\277\374\371\364\267\265q\265?J\217a9%R\264?\375X\216G\337\330Z\277\005\003\364\260O7\253\2772\350\331|\361\021\200\277\010\311\340k\352^\216?C.8\367\367\\\251\277\246*\366c \010\223?zj\250\313\356\315\255\277\324\316\375\336\267\376\231\277y\356\023\257m\375\252\277\202\207\332\252p\230\270?\271\207\r\236r\022\277?\357\275U~\365LY\277\024\332\'n\204\362\231\277\332n\265\360\005\035\301?\364\n7\022,V\270?1\013>\0071\333\302?\017\366\035\356\371\004\233\277\3344^\236\344\306d?\352\225\230\233q\213\241?0\221z2F\210\250?\250\212W^w\007s?\\P\256\254\n\346\270?\036\227\222\272\035\267\220\277\272\365\351\273\331%\276\277T-\342\202^\235\262\277\346\211\245\240\245\207\241\277t\363:R\207>Q\277\031p\006E\211\340\200?\236\371g\261\220]\300?*\034\261\3205\334\244?\221\300v{/@\265\2770g\021\342Nk\302?\342\257\331D\355\240\240\277?\313\033\357,e\265?\006\207\"\210P\357\234?\303\303H\242Zh\247?fN\231\364\312L\231?\325\243\367qt\342\261\277\340\"K.\227\237\230\277v\211)\334\033\251\262\277\333\312\244\362\260?\242\277N\277\265\030\360\013\231?\335`\3246\253\375\241?\031\021:\r\241\364\255\277\375\022\224]\226.\305\277U\020\215\237\264\013\307\277l\362\214\034\234\322\232?#\332\251\020\277=\274\277\247\355\307\025W\313\244?e?\001w\266@\255\277\353R!\350\344\356\256\277\340Z#~\243\007\305?\236\017\343\3170\265\275\277\357\277\226\333[d\232\277\201\004\002\304\247\205\272\277\201\341\257\313#wZ?\3450\021\345B\335\246?\337#\264\226uP\240?\353U\244\246&\310\307?\277-\345!i\035\277?X\277\2734\212b\260?p\370\317#o\375\177\277A\233\313\353\362/\276\277\014MO\274\322\372\231\277|LqV\0200\300\277 z\320\267\215\007\236?\275\010\353\207\254\"\215?\254^6,gN\224?\274\016mu\340p\250?!\373\366\343`\241\242\277\217=Cp\274!\237?3\nQ{\210\366\250\277\210L\017\341\374\326\260?\240\331\273\343\014\013\235?\177\273zFo\026\260?4\304H\300\223?\304?hR\n\375\374X\263\277&D[,Q\022s\277\332Z>A\2251\267?\010B\236(\330\336E\277\235\373\267 M}\246\277\016\201\3726\'\340\261\277\240ne[\003\245\245\277%\003\211O\txu\277\223H\335\004\216^\302\277[\347\2536O\331\264?\302\265L\224\340\246\223\277\026h\017{\211\\\234\277\253\310\335\017W\000\271?,$G\016\211[\227\277\036&eq7\235\241?\261@\232\210\2364~?\\\216\203_\000\370\226\277\027/%J\261C\265?\254\023\267\346\307\276\245\277*\014WX\016\r\243?!\262\253\326\363\234\263\277\020\314\036\031\324\242\260\277\267\341\255C\023\036\277?\025\362\241k\215\034\221\277t\032\367\030F;\237?\315\277\346?\017\177\251\2776z\313\243\033\016\300\277\361\210)\375\371\371\240\277\223\226\234f\211%\245?q\317\321\354\362|\267\277\030n,\375\357\240\233\277\311\313\347M\245\'y?\243@\254\332y*\252\277\367<\024\026\323\341\220\277\217\233\327U;\345c\277Z\004\345\216\242\036\264?\300\223\340\351\005\252\263\277=v\0142\027\360\221?7\343#\001\345=\257\277\215\332\024N\363Z\231\277\034\363\202\312\272\266\302\277\211\256\267\361\\\005\257\277\301K\251\266@Y\242?\217\362oR\374\251\272?d\370\t\306/\236\254\277@0:s\201\353\264?\271\327e\347\002\243\260?\330tmV\034u\251\277\244\366:\226\326#\302\277\3107FU\330\304\217\277\364)\231\371\216|\252\277\315\177[\306\2521\216?X8\3702\261\324C?&\345B\270)A\202\277\320/\'\255\205\270\242\277\010\247\246N\257\243\254\277\232\240\t\207\235L\222?\212ne\021\024l\274?\n\230M\301\330\323\252?q\326W\0173r\262?\373\354\036\233\254\035\260?\250\327\007\344O1{\277S\306|\273\251\"u\277\2321.8=\227\266\277\007f\016i 0^\277\341\266\316\034dU\260?\275>DT\301S\240\277\325T\014\266\306\367\247\277Y>\243\233$\207\272\277\006\320-\366\344\320\272\277\261\310\224\234KB\250?)\346Xc\242?\231\277\020l\217!\372)\235?\001\2456m\364\342\207\277\340\306\352\247\032\206\257\277\223N\310,V[\276?\342\370\244}\036\205x\277\335\020\212\331\311n\263\277hJ\002\236&\254\301?\037w\243\241`r\277?U\244Ar\266\262\223?f\344k\263N\235\225\277\315\261\036\332\336\237\263?\263\265\321\300L5\263?\213\262n\260$\316\213?\350\225\204\024\016\375\245\277\341J@\251\316-p?T\267\303B\007\206\250\277\222\351#[\203\363\226\277\326t\274\n\237\256\250?\367i\327\235\362\314\263?\376\250a\345\301\363\177\277z\361\341Qp\336\316\277\001\226}i2,\246?\036bWF\341\005\264\277\001\007\266fz\234p\277\037yW\257\332\345\302\277\232u;\372\006\304o?\241\016\335\024\002\377\260\277\\\232*\261V\331\275?\203T\332\0027\244\240\2777\030\212\377\224\262\265?\242\030\001\010\014\005\231?\312\014\242\200\361n\260\277l\342\277c\260\t\225?\365^\262F\037\330\231?\n\271\365a\022O\242\277\013\315\024\322\200\363\252\277\321?o\265;4h?BC\254\221r\237\267\277\266=n\234 7\271\277\030\2547c\342\265\266\277s\244\031T\242\366\247?\023@}\362\rE\273\277}\362\030,\340tk?\342\253zz\257[\270?\363\232$\204\374-\254?\202WZD\213\016\230?\270\030I7\005/\252\277\320\247=M\336\223\240?\031\177}\031\203\333\275?\034\273\323\265\263\263\302\277a$\014\323\301\275\241?\330\247\212\300\212\246\274?\255\224\201\201\\F\217?\300R@\220`\003\250\277_\360\303\316\343c\234?\344-\315\004\320S\301?\205\037\243\343(\034\300?\326\001n\rwQ\243\277\312\356\301\203<\013f?\3621\364U\014\207\206\277\013\260\356{\271\360\250?2\320\346\005\354\325s\277\251\236x\2157Mx\277\372_y\364\344\373\205\277\253\251\267\273\310U\306?P&\332t\260\216\303\277\355\324\3042\361\330\231\277\256\301\242\230qj\213?\350\232\366\377\221[\241\277\325\362<\013\016&\243\277\034U{\226\267\263\300?Q\0143\317?\374\267?s\021\356pl\237\265\277b_1\222\331\223\300?\377\027~\270\007\357\254?\334\320\312\331\376\364\204?L\313\237\324b\026\237\277tm\021\000\250\366\252?v\"$\303\220\323\247?q\325\222\023\235\000\251?c\023F\021/\006\252?i\372?\035\025D\223\277\032|\"\355\334\314\260\277\226\351\244\205\023\007\272\277w63\213\342X\223?\336\214G\325\026\351\264\277\202\272\316\202\251\017\240\277\261\371#\035\304\244\266\277dY\366\331+x\235\277\0259\374\324\355cf\277\360\317rk\226\244\271?^1\313\276\0346\274\277\033Q\003iA&\244\277+\276^\224z\370\247\277\257\265:\256&x\250\277_l\222\212\356\336}\277\247\273\026\266\032\003\275?n\\\331?\333U\236\277\373&\215\257\013\232\234?\360l]`\204\021\243?\2715\0034\026\376\223\277\230\242\007\005P\247\211\277\255 \345\264\235\363\250?R\365m\304\244!\226?\'\323P\3179\333\254\277I\356\356&H\345\220\277>\346\213\332\271{\255?\316\375\265\336\357:\226\277^& \373\316\301\244?\320\022\220K\354\276\316\277\210\260\177d2(\251\277{9V\331\264G\251?gx\273:rW\223\277\271K\320+\315Q\224?\306\351\312t\207\355\252?e\335\222\010\373\255\261?\032bx-1!\210?_trj&\372\241\277\177\030g\207\223\233\272?s\265\247\322r4\273?\213\027\355\210K\225\222?&\322\213O\344\375\274?\005\247\253\360H\006\242?Q\262\264\220\275\343\235?\177,\006&\177\256\263?\262\334E\202\312r\244\277\355 \210\307\332\257\247?\334\230\213\325\355\350\212\277\356\026\201\330Q\305\260?\023#\255\340\211\333\242?_$\253\262\206C\226?Z\226\317\303\277i\313\277\000\330\032-\234Y\216\277\217\003\004\260\311\\\221?b\233!\326kB\217\277)\310\325\303\306l\241?F\010\326\232\341\212H?\310\325*\021\257\312\265\277\210S*\262\325!\270?\030\214`V\010e\233?O\341\303^\021\206\226?\n\343m\325hx\265\277q\034\333 \353\357\216\277\277\346\277U\270A\263\277\234NY\265{\305\307\277CB&O\302o\267?\331\253\376m\260\\v?\263\367\301\317\276\031\304\277ae>\213R_j?!\234b\325\325/\241\277c\236\335\013\327Q\263\277\021\246\372\242\r@\204?\372D\205\370[\371\272\277!\2067[\257\260\202\277\037Ad\016\361P\224\277\276\314\"8\tq\275?O;\373H4?\201\277b\016\213\031\233\226\241\277\325\347V\357U\025m?\344\260\322\277\260\347\273\277\207\322\3741T^\204\2776N\224A\340!\265\277\007\236\223\232\030F\265?R7\372\262\3533\235\277o\234\206\236n\345u\277ottMx\307\266\277a\272\2249\330~\300\277w\230Am\323B\265\277\222\275\201\222\257\261\223?\335\n\217\tCT\205\277\001\301+>\025\302\272?;\251\236\331\204L\214\277}\006e\350\304j\252\277\357\204\356s\337_\252\277\001ai\310\020-\263?\216\256Nem)\230\277\343\014g\371i\337\265?\210@G\014\265>\240?\021\257\017#\222;v?>\316v\302\342\235\310?n5\n\335\2524\262?ug\003\371\202I\224\277\236aj\213M\225\272?\'\300\021z-\365\240?\340\366\006\016L\033\262\277\276N/*6\237\222\277+\374n\031\026\030\201\277\332\211\342\255\240\330\273\277\022\353\264\373\367\024\230?\255>\202\343<a\254?\037\316aw\215B\210\277\313\341+\335q\375\257?\226\374\307Om\350\251?\313\241\213\332c7\227?\304\035em\341\210\272\277\271\223h\215P\325\301\277\002\334\255\0306\274\250\277\226\035\326\334[\242\262?\002\302\344\245T\020\273?\330\301\017\222\212\026\225?+\266\031\266r\377\266?\361\250\234\203\317\375\220\277\177\251xi\243\\\223?\001Q\364q\350h\240?\342\344p0\364\370\245\277`Q(CT\333\265?3`\201\000\214!\250\277^\254\257\367\017r\237\277\020\035\t/\0207\241\277\027\336\020i\262\020\232\277R\326\304\022[)\251?\334\364U\202\204\335\266\277\375\367U\023\300\305\262\277v\252<TG\305\301\277\20626N\373=\262?^\201\372\242\210i\211\277\216\032B:[\323\213?\000\313K\002\206\275\254?\234-\267w\033@\253?7\262\030`\376\342\241?uT\334\313\320\377\302?\032\345\023\035\351\340\224\277o\3339\203\024\322\260\277\034ET\311\362\r\221\277|\002\336k\231Zo?\311\r\234\366\350l\261\277J\325\325\2470\220\220\277\354\'\334\301u\261\241\277J)\333Y\366\217\244\277\007|]\320\303\016\210\277\376\261\317|\001\205\247?\246\230\261\0346\241\253?p\302BG\357\346\307?;\350o~\010\t\225\277=\217H\003\260\265\226?\353\335e5\255\216\241?\221\262\374\010y\305\220\277s\315%\340\037\177\241?x@*\032a\216\244?\314\365\324\212l>\247\277\200.v\035\037_\241\277\265\346\227$\303\'\241\277{\273\231h\377\241\250\277%\225\006\024nT\302?\310\027\'_%p\243?m!\210?\034\306\201?ux\352\006\237x\256?S\234\253\003\242\260r?uB\037\177\031\253\307\277[9\264Y\360\365\241\277\227\224\205>\222/\263?\247\261\027\036\023\374\244?\257Q\332\247n[\225\277w\224\325V\024Nu\277\n.\023\204y_r?\366\364\247[\354/\255?L+\257\003\216p\203\277\324\177\021@q\372\266?\261\020\035\211\344M\253?\370xW\355\177\350\232\277\217E;\3241\224\216?\001o\257\311zk\217\277;Iq0mQ\253\277Gx\366C\035\237\230?\204\235pP.\251\305\277\245\226VXC\365\260\277BN\024\355A\017o?\214n\334Lu>\272?\334)\253s\347I\211?4\251\326\352\315\265\261\277e\374\214,\361\032\304?\344\264\'_\227I\225?4\305k\325V\243\255\277oTL&\202w\254\277\202\267\370Ud\030F\277\'#m\260lz\306\277\364\227\270\003\350n\224\277+\031\361\333{\350\265\277\224j\245\247\232.\200?\032\213l`\367\205\274\277x\311\313\271c\314\255\277\0147\267D\271\002\220\277\241\037g\326\030\207\246?h\230\007\020\343\215\271\277gg\027fvA\265?\331OX@\247\026\227\277\254\364e\034\007\371\223\277G\262\255&\305+\250?8\225\313\242\314F\257\277\325\350t9\020f`\277\313\245\352\335uZ\265\277\332Q~\241yW\207?9\271\367\031\246\235\204?\255/\200G\277\246Y?\274.\005G\363(\277\277\213\214\032\234\272>\262\277\311-l\205\026\222\227\277\224H}\215\321\306\253?\002\034\323\347\317A\304\277\027.\t~R\024\262?\005\004?\220\021\215\263\277\301E\302W\257\234\246\2770\363Q\222\225\375\237?>\037\361h\275\267\216?qn\032LK\337\234?\207\375N\340\262\257\272\277\354\t\242\024\332\375\244?\262tk\321]\213\277?r\351l\315-\337\224?/$\350\355\241\212`?\350\224\334@\rt\252?\264o\345\301\374\224\221\277\366\030\234# \256t?\200\222JR\325\212\261\277\263\373\364\222\231V\237\277ySY\200>f\251\277\205\021\300Z\371\t\202?\013\202R\215\346\003`\277)\3247\020\221Z\240\277\367\371\307\n\022\246\254\277\307E\307r!\352\233\277\204\206^\343M\246\245\277\240\217\345\375N\355\261\277\357\205u\334#H\262?\366\235\367\177\360E\265?k\303^\254\213\251\262?g.\377G\005(\232\277l@i\226;\316\245\277L\256\326\001z\355y?\025AQ\270\010b\236\277z\360\350\314\031\235\245?\217\2462 \271\321\263\277\365\305b\016/\250\234?\336\233\t\005\304\357\275\277[>\306\271\031\032a\277Q\205`\"\022#\243?\335lgc8\264\247?\034b\370uq\375\335\276*\243y\327\302\321\270?^K\223$UX\222\277N\330\372\255\227^\237?\262g\t\033y\247\244?=W}\325x]\270\277\270\341\317\201^\'\271?\315\361\374 C\215\271?\n\264\370\224\\q\243?h\2459\352\022w\236?\027\225\177\256\215$\207\277\207\321&\203\001H\220\277\201*9\346\"\226\264?\234\335\353\024\257r\261?:\340\2658`\363\241\277kY\230\230b]\242\277{\027)/r\024\222\277\023\213\303XW\217\272?\245\335b\037p\037\307?\"\270\032\2453\373\263?\324\241\272\241\3221\234?8\341u#2\205~?fI\320/\221\274\270\277\377\002-\277\210\320\243?J\t\367\215\tU\241\277.\023p\311|\277\277\277*\246\340L\227\351\177\277tR`\320\360\003\253?\320\025\345\314\005\352\225\277\373RJ\333\022:\305?\233\223\232\227\021\027\244?\325\303&\363y\274\263?\027:o\203\206\376{?\264\234Y\331\305\322\231\277_n;\205W\266\251\277X\377 \003\005j\241\277\0262\305\004c\214\253\277\224\307C\007\206\210\221?oY\355R\3168|\277\347\255D7\345\354\233?=\010\024#\264\241\265\277\372\305\223\210\226\215\242?\236x\233\365k\243\230?\221\317\320g>\312\212\277T\033\0260#\212\237?\313\323\304\270\2330\231?\216\030\327\362\252\257\226?\262\024\010\362\216\325\252?\2742\376|w4\270?\037\355\253iu\272\340?\001\203F\215zS\230\277\273\222q\305\216\241\273\277c\205\321\276\'\377\245\277\322\221\211\037\271\263\241\277\255z\373\312\035\027\261?\303\204U\304\211\200\247?\014\315\240\204\027\254\250\277\023j\346\220\023\016\226?\336\236FP?F\250\277\021\321\214s\300\r\224\277N\244\273\252\370`\243?\rU\030\336\035\242\266\277.\251@+9K\226\277&UK\t\017\325\301\277#i\206\014\266\245V\277\330s\333S,\321\301?\230&\'\315\360\267\270\277\340!~\247\202\351v?rR\354\263:\302\224?Z\241)\023\366S\252?\202\3754\022\200\333\244\277T\231\227\236\265\213\245?\326\273+\302d1\256?\353K\21459\242\251\277\271\313w%\345\247\241\277e&1\023\2652\251\277K\363+T\2612o\277\241\306\036|(\270\222\277\027\241\230\010\315\233\247\277\327z\211\023\211\030\243\277B\r\303\241\276\013\214\277~\232\224\314aA\240?\371\343\344\331\204zr?R\231\246A\010\224\247\277h\271\025rn\376\220\277BY\260\322\016\373\232\277m\301\247S?\033\230?v&!\242=\'\251?\005q\346\207d\217\255\277\006\321(\362\330m\242?\2611\247\374\260_\262?R\006\213J\333\377\275\277Ba\360\313\234\302\272\277\366\270\251\030\212\330\254?\201\223z\317\002\276\242\277\'\342\246\r\366g\261\2774\023 6U\211\251?2\365\201O\214:\203?\274|B\363\213\222\266?\376\351>Z\035 \253?\332\376\332\344\331@\255\277\334.\344\271\035\364\265\277\323CA\274[\237\251\277\302\205\006y\274\301\307?\236\201L\203\347.N?\340\231\365\245\024zv\277\364\337\211\351\341@\213\277\241\257\002?\255\301\266\277\237\221s\007\340;\260?I\337\3173/\313\267?\373\210\r/\365\356\227?\256\215\332\252\023\010\250\277\246n\004\302\215\261\254\277\r\000\035n\001_\242\277\233\312\367\250\311\003\300?\232\220=4\231,\206\277?z\311/\302\272\266\277\355J\235)\036\323\202\277\327\250&\315\220\313X\277\245\325<|\022d\234\277\313\333\341\277\303|\300\277\315\037\301g\266\236|\277\006\016\375\232\235v\235\277\263\334\205\204\210\327\265?\\M \001r&\240\277.\315\327\311J\353\247\277\213\237\245\365\313\336\242\277r\033h\231\n\307\244?\376\200~\037h\226\243?+\347\035g\367S\267\277\342i\365bi\350\266\277\367P\347>W\256\234?f\222\376\231\033\\\243\277\243\324\215a\271\211\255?\347\303\016J\267&\207\277\035\316\263\027E\022s?\3264=C\366\214\254?\024\323\204b\267\310\256\277\250cz\027\342Z\275\2775cp\r\200\302\277?H\201a\355\3717\303?O4\272V\035\232\237?^%\005\2103!\223?\200\\h\277$\016\266\277\002-k\307q\300\256\277\t\007e\361\311\243\256?f\016\343\226\"\245\233\277b#6\276)\217\241?\021\273\262Nru\241\277\244\023\021\340\215^\304\277\231\002\213\250\020Ac\277\020\227Q\301=\331\255\277/\326\016\"\253>\244?^v\234V\013\200\253?!\370\201\234_X\237?o\034*\n\007\326\226\277\362\"\217\026\243\313\261?\326\036\\\311Y\337\261\277\224u\013\317oa\231?\306\001\242}g\227\301\277\352\232\211\364\304\321\302?\216\265\320,\034\013\235?\347#\326\253]\023\301\277\241j\254E\264\335\267\277~\374\n-f\357a?\2615)\225~\222\220?C\014\307\261\262\227}?a\020\232\036\310\212\207?\243\225\305\333\245;\257\277\264KxS\377\365\223\277S\0256\006G%\311?\2162\n\316\020\202\226\277W\260\223\2159I\236?J\225\371b3}\245\277_F2\367h`\261?,\023\375_\022}\201\277\305\240:\024S\265\266\277\306:I\225-B\243?\302rv\022d\322\301?v\336\005_\254e\211?\003\3368\007N%\242?\316\333\367A\335\030\220\277\350(\271D\301\252\177\277\355\352M\272\213\256\257\277\003-\261\323\202P\251?\253\327\364j>\203\273\277r\230dA\"\261\221\277\031\177\253\363\247\237\302?P\341\322\270\323y\260?\232%\260\023\257g\307?\372fC\024\332\306\270?f\232Go\017y\270?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\\\342\332\213\323e\213\277\023\364@Lr]\260?18\203\357\204\034\241?\3522\366\231\340\326\260?G\377\365o\374m\300?\321\363\002\3054\324\251?D\360Z\020\362\231\263?w8\314\336\256}\230\277\346\263g\227\363 d?\301\353\020\366\262o\224?\257.\252o\370\311\253\277\313K\361#\303!k?\313G\336A\233o\246\277S\307\004\240=/v?\343\365\223\315\263\256\223\277J]\230\020\377\362\201\277\275t-S\232\351\256?\364\353\351\312&|\251?\t\321@\t\006e\200?\232\005=\300\270c\224\277\350l\321\325\320\313\212\277\t\222\262c\236@\226\277Z\320\264\206\311\036\264\277Bs\357\277\350\251\211?\255\215]\270\342\027\222\277\245\356\260@T\207\271\277B\315\n\002\250\\\225\277\350\207\371D%\336\205?\275N7\230\360\260\254?\220xN\266\237\262\267?\241v\3764\336\303\232?f\331\210\266\220oV\277\237qmLc\323\276?\233-\200\007\000\247\242\277\025\372\034\3148(\202\277\371\034\212\304\257$\261?F\022\355\304+\230\243\277\342\031\334\254\201D\266?\364&\204\330\344t\213\277\274\337\224\263\025~\246?\314]|<kV\265\277(\324\031\030/\201\210?\265\332&\230|\000\223?\027\253\243(\001\230\241\277\370\262W\006>\002\243?\326U\346\364\217Jg?\025?\3714\245F\251\277&=Ru&\372\263\277\024\220v\003\353\232\262\277\010,C\0077\356\255\277<\304z\206\345Q\313?\014<3w\212\312\232?\264(Tp\313\335\204\277YY\266\246\r\346\253\277\367\371\224(\023\007\211\277\223\263\316\\fs\264\277CE\000\244|\324\231\277\034\275\205\301\317\276\224\277N\3608\353\215M\221\277\360\307\260-\271m\226?\372\'\257\006\277\026\213\277\265\305\006-\272e\230\277q\035\274\212N3j?vL\031\303\'\020~?\204\035\270\\RnH\277o-\334\302\"\326d\277\003\036\341\301\216g\200?\035\325\\\372X\227\203\277\331\037>\301\245\021\270?p\370\255\311\177\365\264\277d\030\271\341\036\243\226?\253\227\206~z\t\272?\231\345\201(\204\353\254\277e\251\313\334\270\223\263?[\301\025\224\034\304\202\2774\341sF\313\017v?\214w\272\272\326\005\220?\273\332\265\313\t\002\275?^m*\270\000\365\210?\263\022Q$\215\373\213\277\307_\016\022\003v\247?Y\252\364]\224<\223\277-\311\013\t\212\226\267\2775\321kIU\317\232\277-)\367\217\252\365\255\277\333\235n7\271\260\220\277\215\001Xa\345\360\300?\243\035 =Da\270\277\366-3\310c\251\241\2773L\334\376\037\304\271?u\254\370\350X\002Y\277f\324.M\235\313p\277\275q\373vo\251\265?\366}d\375\260R\221\277\035P\347(C\341\253?\367\275\2451\323\306\231?\204y\3163\362\243\240\277a\347\307s\033\346\263\277\037zP{bv\251\277V\257\313\250\330\006\263\277\377\376F\200\264\375\264\277\257 \033\313ZA\244\277\333\013}1\306J\210\277lj\306\346\232E\204\277Y\222\357c\355\267\273?8\340x\302\'\001\246\277c\000WF\362\340\216\2771+\275\241{\370q?\025\257\233\tW\343\276?\310y\300FR\354z\277\177F\227\346H\306\203?5\265\312\r\\So\277r\035M\241T\325\274?\334\225\003\024\303P\240\277\230\351\262\3205L\212?Y\216\340\237?\233\222?\346\366k3\266\246\231\277\363-\267\275\030:\250\277!\360|\221KD\302\277\245\003-`\030\302\230\277\033\350\2669\302N\300?\005\374\371\301\021\373\240\277\321\3202\331\307\241\236\277=@\177\025-q\253?\333\370\247Y&\013\202\277\024\221\221\330`>d\277\267\033\277\237\262`\255\277\020\326\205b\266y\235\277\313\177\317\240f\363\267\277E\374,\032?I\263\277*\263>\000\002\356\301?\033rf-j\353\246\277\220\227\260\221\333Y\270?\332U\334a\223i\306\277r\275\276\227\207\033\220?=\206\360\006\227\024\245\277$]?\347\031\302\263\277\314;\030\244<\202y\277\216k\336\342\322o\254?\002\355\264\001\373\361\221\277\374\322\3179w\253\273?\374\243A\335u*\254?Z\222-\325\025\364\240\277\352\237\233\323\301U\244\277\022q\034\017\373\372\224\277\261`\364O]\303\221\277Dj/~\206lf\277\244\021\320[\355\322\235?\314\320\003\014\203l\262?D\353\265\257\253\251w\277S\301\005\355\326>x\277\253\355b*[B\206?\0078\206\375@\006\234\2771\334V\366`\372\255?\354!O\306\223!\222\277\007\037\224&\334r\231\277\216\th\250:\007\243\277\307Oa\277wHw\277d\2738*\315W\243\277#I\347\350=\272\265?\345K/J\324\254\216\277\303\014u\250!\272\257?|\250yp\t\252\265\277N\nA\350NU\204\277g}\207\265\r\\\303\277\254h: \377\347\277?\004J\264\025O\276g\277\016\225/\350(\245\215?\210\243\311\200\337\t\257\277\034\243\251\371\344\250g\277K\002\225D\371M\246\277\235s[\2028\302\222\277\005\235+y\237\013D?\317\315\321\226(7s\277\213\341\310\020\007r\217?\251[\374o\032\303\262\277z\342y\202\002\337\233?in=\256\254\342\206?x\374\265\3520\030\220\277\031\352\247\022\\\213\254\277YV\254\233\253/\203\277\234\337\327\225\214\203\206\277\031IIT\244\311T\277/\"\312\255\013\030\256?\265\274\347\254 \036\240?0\224\214\215G\305\253?\177|\367\323W\t\257\277\220\320\201\341\303\350x\277\302\323\232h\331>\227\277\273\371\016\035>\006\271?\252\335f\265H\204\246?PA9\306\346u\262\277\267mY\340\036\033e\277 \330uI\274&s?T\300\233H\3502\251\277\'\033\304\275U\223x\277*K\223f\374\373t?\022\327\227P\335V\262\277\325^\023\366eE\243?U\034\tQ\036Ml\2774\234\026\t\373w\237\277\232\343\2221\373\373\264?\034\343\024\327Y@\244?4?\255\332\310\227\247\277}\0105\222\261P\203?\002\205p\345\342`\257\277o\0272W3|\263\277P\2730\032Qd\226?q\373\371n\361\032\025\277\357=\025\327M\236\220?\315u\317^\272\332\232\277\010f\024q\036\322m\277\201\335Q\270/\034\221\277/c\366\340\2343\246\277\266;F;H=\242\277\373\356\3074.\031\235?= \244\304\307\032\232\277\020y[:\224U\267\2770\235\2572\232/\255?\t\014\304|\205\"\220?lS\246G\352\364\205\277\'\023\\\020\237\252Y\2772AwDV\223\251?\203\277\032T\265\250\202?\364-I?n\331\216?\014(\327#\336\"\231?\277\220\r\200\n\234\305?\310J\317\260\216\267\226\277l\206\302\245\305\010\261?\033\036I.\363\344\261\277\241b\"8\352\346\226\277sG\350\215\335\305{?\002sa`\321\217\232?\244Lx\205\204k\255\277\253\021=R\032\365\206\2771XH!p\247\220\277E\013\277\\\225\013u\277\262R\361\235\201c\220?O\320u0\276n\267\277\374\242\373\376\275\037\222\277\216\364\177\034\t\222\262?\313\304\275\331\017O\230\277\3545O\206\"\020\214?;\273\306\245m\221\237?\361pH\213\247\270\232?\014\274\026\346\025\022\275?\\\374\342\336\032\362\220\277\271\032I\265\304pq\277\030\002\267\377\350\346\262?nSe\364v\350\231\277\335\242H\347,\230\243\277\305\333x\320X\305\270?\270\001T\356v\021\240\277TO\342\322\367q\245?\274\316d\376\334\335\213\277\337\310R\005G\360\251?\373p\252\202/\237\255?\357\353*?\207\201\251?o\006\2603N\373\250\277\016\261\265~\013L\225?H#l\3576\373\236\277\361w$\242\014\314}?\225-\022\314j{\220?\334\351\3241h\005\264\277\303\006\311\224\335`\252?t\363k\2037\327\260?$\373\354\217\000J\245\277\034\301\350\215\303$\256\277M/W\241\034\311\244?}\r+G\230\340\222\277\231\221B\232\3403\260\277\203\342\223\005C\274k\2771\236PV\320&\247\277\314\212dL\026k\262\277\006q\273\327\005>\210\277\261\264\244\203P\004\200?t\267\017\300>S\221?i\345\234S\022\036\221\277\031\375\223\344\\\030\263?u\007f\036\201\211\264?\367/d\223\006\026\200?\370\257\221(\306\264|\277\243\347=\235}6\256?\247G\3551\010\226\233\277B\314\200\353X\270\202\277F\306\241i\2739\232?\312 \204l7y\235\277\355\316A\330r\207u?\023\313\231\303\372S\242?l\255\216T*\273\254?5\210+/\020\272\243\277\242\250\357\303\300\201\303\2776\257\375\367`\007\215\277\235xv\313\235\000d\277\223\022\275\315\022f\257\277\005\036\3033J\366a\277\214\025\360\333!Q\225\277iw\324\376\302#~\277\214\020\t\234\355\371\207\277\016\035c\003\350Z\226\277PW\360X\000 {\277Y\344\323\010\303\364\223\277\342m\350Ms\275\271?\215\315]\177\201\021\202\277\022\260\336-\023\257\247\277H^\033\037E\234\211?\213\223\010\306VD\235\277AO5y\037\270z\277}5`\223,\256n\277\342[\230\226\243~\253\277\245\332\204I}F\261\277\251R\230\206\000~\241?}\203\325\347\255\314\254?\333\2301\345*[\232\277\256\376\340h{\201\245?(\242\321\246N0\267?\340\233\367eO\247\241\277c\256\345\252=\224\242?\204\032M~\215\'\225\277Z0+$\r\261z\277\362\343\324\274\234\360\261?\347U\365\343\304\004\256\277\272\246Y\320)v\253?\317+\275<.3}\277\310\320\207\223W\334\225\277A\323\255:\224q\223\277\276\273k\032\216\364\217?`\244E\356\024*\243?\266\236\004W\304\214\246?\023iv#x\311\225\277\301\351.5\361x\260?1\215&\243KV\273?\242\331\217p\037M\274?j\032Gd\264\344\255\277\000;F\343]\271\260\277E\324[\341\201\344\212?5\2179\036;\211\253\277\260\371\315dY\024\250\277\252\302\377\267\350\340\235\277\023\"\021\332\2603b? \375\211\256|\236\233\277\304\3714\226\333}\247?\211\325\357W(\206\265\277/\341\210J\205]k\277\242\023\201\017\276\035_\2770x\026\315\377\265\245\277\301|\352Y\364\200\243?\003\252\004\"\300a\253?\240\346k\206\202\036\274\277d\321?;]J\236\277W\324{1\344\247\221\277\356\t\021\314\300\254\261\2771AF\211a\210\236\277\302\002\000\261_-\220\277\266\333\260\305b\204N\277\201\266r\365\330\021~\277\267\315\234\214\1774\267?\376,Z\n+\341\344> r\016\217\315\305q\277\004\242Y\331r\202\243?\3164o\360#A\242\2774\250&\037\213\362\226\277\2065\004\336\267g\236\277d\017\270F\323O\235\277\010heL\035\365\222?\340\247\256VL_\227?\206\233\234+\262\361\252\277IF\362\250\026\255\257\277\337\260r\336Dy\212?Uzy\336\264\027\200\277\032$\320\353}\236\200?:S4\261q\266\244\277\332\022\252\021\245\350\242\277?\370\263\346\373\371\243\277>X\260\312R\220\244\277\205\347\276\203h\343\227\277\207\333\232\370\363\213\227\277\274\007\010\306{\272\202\277\200\372\362\201\225\315\260\277\3008\010\007\320u\233?\1778l&\031\270\272?F\005\003}!\230<\277d\272h\372\221\312\210?\360\025X\361\224\300b\277\"\370wZE\216\233\277\\\306\312\224A/\243\277\037\215\036\3508\335\252\277D\240\320\003\007\255\246?\353\325\031\303\302=\227\277\177\307i\033\222\\\256\277r\341nb\375\364\265?\272\235E\033\372\007\234\277\273\337\366\207U\253\227\277\002V\253\027h\236\306?9\361H\337R2\256\277\327\"\264\255\262t\224?#\220X\203f\027\204\277\373\250oz\321o\212\277h+\337\005z\014a\277\030\"\014\274V(\223?*\360\344`O\026\266?\211\352\016\t}a\240\277\362\220Q\3058\202\205\277\236\333*\270\363\347\013?\023q2\006\257\342\212\277\220K\263CE<\245?\3033\016\342\354C\246?\261i\210S\371\210\232\277\005\207\037Y\3305\256\277\243N\310bNdq\277\214\356]|\010\247v\277\036{\2268_\371\254?\226\367i\\Uc\261?\013\201I\214\304k\224\277@\257\2742\021H\224?\201\233\235\345\372\367\236\277y\335\350\000\254t\224\277\335\355\207\262\372\256\231\277\216\324q\326+=*\277\242\216\217!\027\265\274?\220\257\203-C\254\260?\200\3027-\361\026W\277V\371\344.u\252g?\334\265\2510+=\224?Jz\376\3161\212\246\277\264\205\025\035\330\004\245?-P\375\355\201\247\237?\220&\242Nu\364q\277|#a\244\242\263\261\277\254\311\356\"\010\236\222\277x\265.L\274\336\241?\361\276]\177U@\231?.<X$\\,\251?\232\215E\203\270fa\277\013\312\361\376\332o\263\277r\201\330\2077\232\247\277}a\253\206\360E\244\277\002\252\312U\371[\253?\'\314&\336cK\240\277\347\224\244h4\327\263\277\214\360\361\367\203\205\222?N_\002o}\362\216?\244\265\207d\376v\223\277\0320\\wxJ\251\277\367\217+\030\252\211\206\277\3669\336;\246\236\241?tJ\231|\207A\246?\256\346A\347\207\345\207\277#\246\232\233]\332\264?\177E\340\260\302R\223\277o\233\323X\226\034\270?Ri\035\272\212*\274\277\000\367\356\350\3722\362\276%\261\267\221\035/\261?\001\267\306\342\326\370\244\277?\262p\315h\234\220\277\r\371\013X0\337\225\277\324\017\265\341\337\336\214\277r%\031\340\321\307\217?K{~\013IJ\220\277\366$q\226C\254\203\277,h\177\"\256&\256\277{\357.p\214\223\247?\303,\035\367\226\361\253\277$\300\224\371E\t\261\277\363\247\022@=S\241?\252\263f\227\005%\221\277\017\331\240\026\346<q\277a;\001\237\275\334\213\277/\2260\243c\373\252?\303ml\252\013W\254?\217\332\022\344#e\224?\376\205\226q\362\361\222?\342\337\335q\233\237\274?\331\207\202c\r}c?\277|\232\266=[6\277{-:\266\246\250\240\277\'\027\027\365u\375\227\277B\220\235L2\321\241\277\001\027\035X\n6\200\277a\357H\270M4\273?\347\250\027\310\202z\272?\265\206\001_\207\312\272?\346\255A\337KK\241\277\220\263\251\211U\322\247\277;&l\317!\371\253?\371pR\310\177\'\236\277\221\373\000m\321m\235?r\203\r\360\345d\250?\352\206\025\313\0066\205\277\357S|d\371\325n?I\361+\262\261\233\241\277Y\r\357L7\\\246\277>$\361y@ft?\300\324\014SC\"\221\277>\017\273\006\312\276\253\277\275\311iGNT\225\277\n\246k\3026\017q\277\351h4\225\364\004\274\277\245\360\222\365\270\323\272?_\2115\303\315\366\262?\261^\033\374\210\323\240\277\000!\223\013\036\001\261\277\353\214\276\322\263\326\271\277jh\374Q\336#\274\277\025u\255\232\326\215\267?\010\341\347\025:C\234\277\022\332~rg\315\237?\260w\257\350z\276\236\277\355y\271r(\207\245\277KgN\247\032O\257?N\245\331\307\206\200\222\277\265\363\202\267\2759v?\365F\274\001~\341\247?\025D\3765\350\325\240\277>C\335sS\216\255?\264s\257\344\")\260?\024\376\262b0\023\310\277\230?\331S\323\235\234\277\344\225\342\261N\333\277\277\372\335\3358\301$\244?\224\270\224s\333W\240?No>\3277\316\274?\n\037\307\3206\352t\277sU=\321\276\032\263?\'\250\264\206\037\002\256\277\364\3375eZb\261?\'.\330xt\364\232?\212@\321\302\330\235\201\277\213N\327\322\264|\030?\346\2165\203U\005\255\277V\013\031p\345\325\225\277\344\\\322\204\033\"\222\277\276\344V\037\022\246\221?\2702^7/\256\215\277\345\265`?`\313\232\277\226\032q\263\375\333\240\277o.\231&\336\275\244?%\177~\243\031\010\250\277x\256{\240\207\013\201\277*\276\317\215\351#\272?%{\255\240\274\241\250\277H\032\\1\335\200\260\277\246\322\306\027\2251\214\277Q ]\232qf\230\277\362`\206\213\337\234\241\277pf\002{\367[\220?\025c\204\225\374^z\277\325\225\331\256\236;\225?\272\001\3606|\247\246?\233\341h\345Uvz?\002\363\237L$WK?\216\000\010b5@\233?\270\027\303F\265`\224?\201\241\327u4\310i?g\321\006\356V#\210?\210cy\331?\370\212\277d\2101\251N\316\250\277h8\025E@\310F\277d\355-\351\321\222\262?\360\273\214\360b\032\221\277\205\r\373u\240\271\301?u\322\235\rE\007\224\277\322|2\334\227\373\266\277e\t\007\216\333\023\265\277\200\335\":\336o\200\277\307\221!8\242;\241\277\351\217\337p\263\265\260\277\326\331\231l\335\367\272\277\"\325&\017o\004\202?\304\243\231\334\202\347\205\277\242\262\262\037\240\377\275\2778fY\rY\201\225\277\2211\3203\026\016\233\277>\351X\364\227\217_\277\345\340c\016R\016s\277\324\201&\3310\022\302?C7\335\324\264\361\252?\225L\030\031\340\372\245\277\353\236\220\206\255C\260\277a9X\036\020\350\241\277\225)\2501\001\331\222?Q0_\002I\263\210\277\234]aC\210\264\204\277\316\240\364\034\026\261\244\277F\235e\264\336\330\230\277\035\033\376Y\376q~\277\356>}\201}+\203?\000\341t+\334\274}\277\202\253\210@\220&\205\277\241[\246\215\203#\240\277\216\037\272cg.\250?e\263\020\'+\300\201\277\253\211\026{0\300\264\277\033\023x\360\253\027\227\277\343\242\327\310\333>\206?\276\327\347\332\243\'\224?A\033\033\353\315\311\260?:1\177\305\235\232\301?\202\307\200a`4\230?\375\207\315\023\342K\234\277\332\244\371\031\317\024\261?w\016\\\033\351\372\241\277\254u\220\325D\357\252\277\343F\276g\241+f?\205\t1c\343u\177\277Ix\242\260S\263\221\277\313\220\244y\245.\234\277\006;9\014\323\333\251\277H\347\273F\002\343\245?\032\322\206\304hG\225\277?0\277\211\277%\265\277\020\tS\"\nt\250?\261\202\216;\331\031\220\277z\271]\336\2074\217\277\nz\023\357:\033\231\277\267o.O\350I\234?%\227)N\314\311\221\277\355\2667E\367X\243\277\344\221\274\271\306q\265?_\204\363%\203a~?E\276\024\376Zi\221\277wgG\2734\357\275?_\031\207x\314S\230\277\256\242\256f\200\355\257\277GV\335\333>go?\270?\216.rk\253?X\336r\377\000\317m?\016\361\275F?\351p\277\213G#\\\244\332|?\265\305\304\247\013\001\235\277\010\231v\347*\341\240\277\356\220\226\323.\357\243\277\361\241uc\222}\245\2772Bn\274g\231\233\277\032(\0307\231u\243?\025Zy\260\013\030\251?.2\207ALs\226\277\216Q\344\300\201}\223?-\007m\367{S\302?\303\223.\350\326\230\232\277\200\377n \234\351h?6\201\014\006\213\'\262?\r2\306\0332\251\262?v\177\024\365\244<_??\373\334\314\000\315\241?r\"\320_\245L\206\277\265\246\375\273L\214\271\277Q\365\316\365\373\345\240\277\302\342\232t\205M\217\277e\235\204z@\337\226\277\2144\026K\264\265\236\277@\262U\322\301\365\237?\032{f\306D\226\267?\3703\023\245\263F\272?/\307)\220\211\034\203\277\236\306\0052\204\001\212\277^\361\346r\013\227\242?3]\270?7\273\265\277*F\353\305\'\277\200\277}\027\000\220\274f\234\277\367\212:\370\022\260\211?\003!\257[\270t\212?b\370X\241w\250\207\277\231\256\264\020\005\034\267?R`~}x!\262?\223\020d\363\207\344\301?+A\016 \253\\\205\277\033\010\317b\rD\262?\025\340\376\201\361Jm?\331\234\006\370\017\373\237?\036m\304\245\325\200\274?(\212\027\0303\000\202\277\230\217d\2658\006e?\0321\032\261%\326\205\2774\n\323]\311\311\205?W\262\t\245\307\354\253?\270.\0017\2565\241?\360\003\246>\277Y\231?\001\317\216n1\207\243?jr\255$$\361\202?\2666\257\375\n\332\232\277#\272^\351y\315\177\277?\023\214\266\216A\274?y\275,\367\342\224\243?\314\265S\234l=\247\277d\230n\366{.\250\277t\024\204-\307\256\222\277\262R\341\010\332\366\244?\256Z\210\314\310;\224\277\337\203\362\366|\372\247\277L[\323+\203\310a\277D\262\032\335\352V\222?\033\356\350\340\267\237\224\277x\263\365)\221 v\277\257\243R\027\275=}\277\242\340\372\277\377\320\236?\245\n%3\260?s\277\275\315Suh\007\302\277\244\331\300\363)\320\240\277+{\301\234\006?\305?a\327\331\334y\233\261?\205[\306\350\235:\222\277\332d\365\307\321$\232\277\370\033l\314\322\341\267\277\257\0066\226@\t\242\277)Zn\2011\006\242?q\367\347\321~n\237\277\377\365o\230\005\320\207\277$\006\247\216\031\\\266\277v\366\272x\246\027\277\277\211fan[\007\250?\353|\360\311*K\227?\311\310\204ZX\006\234?$G\030s\2662\203\277\337\275\205\n\326/\211?\347\037\370\335e\223\264\277\036\361sxJ\026\267?\330\2507\r\324\270\243?\303\331M\013N\256\266\277-\375\204\272\r\344X?m\"\322\316\357\230\247?\257\177Z\313\275;\272\277\000\025\315\245\205%\261\277\262\326I9[\"\273\277R0\364\037t\036\220\277+\316\035\312\274S\265?\366\345\3169\275\250\227?h\254]\351f\257\254\277\026\301\314\266)}\243\277\205\027\217\270\246\253\234\2772\241\213\273\215=\265?]\263<0\212w\264\277K\3749\201\215*\262?\226\322\010\235\361~\252\277\246\325\264wV\340\267?\345tA\326\032O\264\277\013\321w\233zR\273?\242\016Ga\216\252\270?\t\200\203\356L\321\221\277\327\231\"\2502\252\305?\243~\031\013\025|\226\277\326\216>=\002\314\272\277X\336\354k\257\354\305?\227=\221\223\263Y\263\277\254\347+y\2618\247?\272C;\013\301m\205?\213\371,\222\r\270\262\277>\335h\262\267\253\225\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\022\341\316\324yW\251\277U\362$\352\257W\252?\356)Y\324\334\333\250?\263g\212&\014\246\241?\345\\\001\337\177>\245?_4:\331\276\374\250?\231u\364\311\216\257\252?\'\354cA\264ks?\370\257\303\177\211\262\242?\362AQ\266\211_R?\345\220\301lHG\264\277K\211\303\225I;\240?\303\304\307\377<A\223?\177\250\347W\037\366\262\277\237\312\021\002\226\365}\277\246\307\r\313\235\316\241\277e\365\373q\013-r?\375\241\021LP\323\264?$\261\2235}\025\241\277\277\316\235R\362\236\240\2774\352\377\334}f\230\277\020\022\003\310I\303\252\277\022\363\'\357\202]\251?C\r\256\277f\324\216\277\220\321Y\345\312\330\265\277\214\0030\364d*\265\277\"y\r~3\253\241?\261\266O\303Qu\262\277\373H\251\363\371G\260?\220\3554\304\217\323\263?I\027Yg\272\023\204\277Sc\026\002\001\357\242?\0160.\267=O\260?\346\037\205\225\017\323\245\277\3263\230\177\371Hv?+q\375Z\245m\263\277\277\261r\322\235\023\215\277\230\235\024EZ4\246?\314\207H\303r{\234?\024\355\026Px\225\201?\263>\016\003]\225\226?\356\001\320\014Y\304q?\024D\022>-\204\232?a\374%\237\326\002Z?\236\353\332v.\217\263?\270\316=:\250m\267?\257l\240;\236\302\274\277\27030\260\036\206\246\277Vf)\034\334\347\220?a#\0061\'\315\257?\335)\225\351S\310\247\277\'\3331O\210\241q\277A:\306;G=s?B\275\241M:\222\225\277\222Y(\364\340\033~?\351\273\304\315\177\'D\277\232;Z\311s\260\222\277\024\035+D\277\304\242\277\336\250\347t\326\323\201?\3577\030\333\307\211\222\277\377\360\006\026\347\245\240\277\333f\t=[\367\255\277\305k3k\364\025\\?\300\251Q.0A\227\277\232\022\244\356\032=\204?\\m\245j\305o\242\277S\201xx\327\206\222\277]\364`\"\313\303\216\277\036F\220\017^\216\215\277\211\324\232\312\373_\256?\317\266\374\334\360\264\223?\r\006\003\207\312\371\257?T\200\367\010\346\003\227?.\"A&\311\275\261?Y\002p\007\026;\226\277\037\337\206\032\333\345\266?h\217\277%t\204\240\277\215\023\030\316\276\262\263\277\022\262\025\231\333\272\222?\231\246\014J\202}\201?\3355/\346\204Q\266?7>\332\271\270\340\225\277\237o*v\2134\264?\332\237x\261G\241\206\277\354\250\361s\361rs?M\323\375\255h\225\220\277\004I\303Ull\250\277v9\2045_2\237\277\222\331\241N\322\337\252?\240\024\306bn[\254\277^\343\300Q\005)\251\277\376\235\\\204\210\'\233?\322\r(\345\201(\244\277\005[\0146\275;{\277T\232\301g\372\001\275?>\201l\354\225\221\240\277\251tF\261\022\347\207?\322\371*\261\354\216\263\277~\276L\353m\275h?\037d%V\212\330\232?\206\340\313\r\025\370\227?\227\363\361\335g\302\252\277\347@\323\254\003S\231?\355\321\005\375\344\352\213\277\210\232\234\017.\177\260\277\031\006\007\033\331\364\257\277\003\312\240|f\342\230?\274y\224g\335\327\232\277\315BI\026\372\246\246\277\250\212A\311\2162\237\277\304\003\256\202r%\232\277e>\240\376\365\275\224\277\255U\336\037\021\361\262\277\2767i\267\273p\263\277N\224\013\221XR\242?\325\305 \217\203\363\240\277A\366\300\217\232\003\223?i\334\351\250g\350\274\277\354\265geRa\260?s\203\272\010\004v\237\277\'\214\330\225\010\'\245?\354\370<\026d\002\202?\373\271<\007\307J\247?\306\360\006\033\r\304\227?\324i\317\270;\276\240\277\231\272k\003\247\247\217\277\220\267\256\305\261^\251\277\201\350\017\334$>Z?\206\337t\313\247\335\253?:\351\343\340u\271\254?\253fe>h\214\312\277\233KP\335r\010\221\277\210a\010\215\336\177\256\277\362r-\204\000\242\265?n\013^\177\356\273\255?Y9;\302f1\253\277\222\310Fl)E\215\277\312.@\r\353\005\223?K\273\270lC\351\233?\377\223\325\250\200o\201?\206lJ\211\361\264\244?\263\370\3569\021Q\203\277\232Q\210\267F\001\244\277c\265\236\214\261\000{?\233\250E\203N\001\243\277\005^\2570\017\311\243?{!\r\004(3\251\277\255\240\377\374\351-\253?\335\326\3332d2\262?$\323\321)\257r\226\277(\023\276p\221m\201?\304Z\244\241F<\225\2774\317~tp\322\204?\246\024Y\241~\021\241?\247y\221\r\223\200\227\277\002\303f\274\323\354r?\305\332J?*\033q\277\264\242\000\344\306\220\220\277Ly\227b\300Ns?\361\026G\322\256\214\224?\357\204\276\364[\272`?\254O\364\365\266\345\225?q\277\330T\353u\235\277<\204$\344\016\377\271?\310C[\360\204a\245\277{\002\'T\315wt\277@6\0314g\017\272?\3305\020\262\376\037\222?\370\314>\016C#\237\277\234\261\0169\'Lm?^\036}\256\370\352\224\277#\373\344\376\306\216\223\277\"\375~\002\273\313\227\277i\346\337\3318\272`?\270\277\023\352\212\014y?i\330`Fn5\231?\003AP\365\3615l?\022\354u>\370[\262?W:\3219(o\223?\250\241\226\212\201H\264?\250\027{\004\225G\216\2778D\031\367\254v\245?\327&\366\2656\304\241\277-\362\241-\311u\220?\032\240R\334\000\204s?M5L\261\262\334\244?\365\2638K\202\367\235\277\3225~\322V\222\252?\037\370\263S\216V\243\277/s\010X\356\224\212\277\3773\245\326\003\333\263?\333\220\363\363c\016\276?M0\331\315|{\212\277\375\376\246\020 \314u?\305\340\246J\245\250\255?[z\177\227s\301\265?\202YUm\311\231\212?\330\330\330\0160)\253?&X\002\240@\266\205?Pd\\\267\341Kt\277Y\017\211L\353\317\233?\235\270\0222\027G|\277\357\'\\\215q\223\221\277\226\260Z\331\345\306y\277\035F\032\237\001\325\204?\25141n\036\356\265\2778\261b\363\033\035\251\277\226\023\221\013?\370\247\277gl\301/\266\004\254\277\275\221\201\240\271w\237\277\221V\223!\360=\224\277\273x\357\334\352c\237\277\216\203\247g\303\314\246\277\231\256Y\2303\311x?\355x\375\345\202\001\252\277\026O\374\223\310\025\245?jf\272\303\216\200\225\277\005\022\377\217\212\273\217?cu\231\027\014\220\266\277VT\375\303i%n?\014\351\256\264\322\"\207\277\363\342\366\302<O\221\277\336\263*\351:\302{?\0037\300\2145\261d?\246\341%]]\304z?\347,\263\215\177\220\242\277Mv\350\231\330\360\267\277\227\205\307\260k\317e\277\355\321a\\\324\213\232?CNY\377\326/\254\277\221\0023j-\017\231\277l4\276m<R\261\277\244N\022\014\324\345\250\277z\251\310\261I&\244\277\377\254\240$\022S\245?\223\370\243\342@Xr?\r\010\271w\370\200\207\277\302U\250\023\035\313\233\277I\226E\330\201\327\237?\360AQ\314\211\261k\277?I\270\307\306\re\277\272\r\325\025\014Bp?.\310K}J\361\200?\230\335\372\242\001M\234\277\376ImR\240=\255?\270\310`xXg\257?\033\342wB\217\220\270\277p\333\03750\270\214\277\3716F/\000\\\262?\352\211\001e4\010[?46c.1\335\231?\267\002\024^\233\306t\277\336\266\261`\265\230\233\277.\025n\237X\306\207\277h\204\027i\3733\216?\024\335\234\241\242\347\253?\3439qb\354\234\230?h\212\235\224\321\213k?S\274es\260\333\275\277\341\'\217m\255\226\207?\272\325\027&\323\241\211?\366\330\273\r\334w\235\277\366\254\353\260\325\001\220\277X\033;b\362\001\222?\323_\3755\342\317\240?[\226\242\355\203(\262\277\325,2\356\246\037\214\277\235\345\024\325\354\257t?\305\006\315\246.Kw\277\342j-\215 t\256\277EA\372\033w3\250?\241j\317u\223\r\211?,\303\222G\261\323\202\277\3479,A\224\214F\277\324\320\262\355\236[\226\277\261\220\212fq\312\252?\010\007)\3443=\241\277\024\325\212\331\326\227\203?M4d\366{\027\224?\007A%\262\314\311\260?|\217N\265\005\\\221\277\3055\231T\266p\253?\026\322\210\023f,\261?\337\203\336|M\377[\277\323\240\2557p\312\204\277s\214\310|\356\260\242?\224 \034\344\260\\\203?\232\\\241\347K\030\204\277\375#\267\275\250_i?\303\244`\022|)\243\277.1\215t1}\206\277 z\265v\236<\266?t\234VBO\253\232?\227\341\207\005\201=\240?{\2505\244KF\232?\230%h\266\023\325\223?N\254?\275\225\256\241\2779\242\2476\021 \251\277\340\361\3228g\243X\277\234\377\331\244\032J;\277\030\313\'\304pe\205\277q\223R\222\000b\227\277\005L[\210\377\311\222?=`t\374\271I\245\277\013I\022\223\022_\230\277\267\342\020R\250\250O?\250\227\262\030\237C\217\277\232\373\226\321e%t?\232zj\234\367(\220?\323\177x\022\004]\232?\013\374\206\\G\016\200\277\224\000P\227\356\224\230?\013\274(\200\230\004\201?\330\362\017\265d\363\247?c.\230\350=\237\224\277\n\234>q/Y\256?\252\'JGw\360\265\277\0377\344\232\311b\232\2772z\356\242,0\236?\315\247\t\200v/\223?+\340\336\361:\360\261?\226D\345D\001\340\246?\240\313\345\254\3217\231\277\330\341t$W\005\245?,\0102[\335\035\223\277\264\242\272\253\370A\233\277\003>n\013\326>\210\277\270\367$\341\301w\266\277JqR\253g\300\257?\010\364:\2036W\212\277\363\231\21699\351\243\277\3759\323\202kf\241\277\240\250q\313S\304\177?~\316\000\371P\014\227?\253Aw\336\305M1?\n\240lD\022\275\254\277\227\344\346\272\240\351\240?\344\312\030\030\221\230\256?\215\316\264\032\031\377\206?T\213\371xf\022P?\035\212\306\007E\373b?1\234\313.\037E\205?\022\017\316K\202X\261?J\243\272\251\225\325\270?a\223|\223\240\320\216?\235K\006\225s8\214?X\0363\"[\002\212?O\232\025\371+\272\223\277^\261 4\317\220\230?\333\233\371\331\332\007\230\277\245\032;\320\371\014p?\275CY\304\353\'\201?\376\305\356>\373\233\214\277\367\337Z9\274*w?[\225\312\010N\rY\277\260\013\325B\001\301\241?z8\"\324\005\317\244?\025O\203\330Tr\203?\376\334r\231\225]\237?&\215\221e\326F\206?\017<\327}\214\336\246?\325\344\025\035\'\302`\277}\213$\257F \177\277\330\017r\344T\\\204\277\302\367\250\252\370C\230?\330\265\211\\\354\347x\277\352\206_\310>\330\204\277`\222!%D\223\265?\210\262\213\234\032\332|\277H|\206\334\332\222\236\2772\367w!J\211\227\277\006\"\027G\267\220\221\277\363h\022pf\033\245\277Ib#\324\344\360\244?\303B\367\030\206\374\204?y\206p\251\204\372\261\277%%\247\tDZ\232?\266\310\004\361\326\004\232?\214 \300\006F\212\245\277!\350\306\372n6\253?\260:\365o\233\232\231\277\352^a\3261*\241?\247\232\305\252\214\007\256?\343*\034\226\025\213u\277\\\244\2653\256\246\226?[\353\025pNa\223?\024\312A\314\347C\244\277\254\271\014\354\030\023\267?\006\024\357\253\230R\213\277\357\251\316\300\365Y\243?mJ\236\246\355\202\231?\' \362\"\371\356\202\277g\310\265\271\312\243\207\277\014\354t\215\tH\245\277\261\331\317u1\207\235?I\006\263f\024\352\242?)vx\204\266\266\207?\3023F[\363\230\223?\271\226Ei\351\203\243\277\222f\356ae\244\230?\203_\035k\327\247\244?u\336\312\030\230\340;?\362\026\026Y\326\344z\277\375\210\227I/T\226?|\333cl\232h\261\277\330\177\203\242\361\206\232?\316\226u\223\203Xq?\344\031\357ck\252\254?\325\340J\036\264F\237?J#\027\240\351I\212\277y\375GW\250\361\250?\267\217`9t2p\277\35236\221r\322V\277b|\225a\235nw?\032\355\271\240B\321\236?\311\334O\343pIi?\263\235\315!%\356\231?f\177\230\304_W\237\277\271}4\361\346_\\\277\303\003\330{\022\341\217?\263;\255{\345\336\205\277T\237\305M\366\340\235\277\303\237\233\240H\317\216\277>\213\206\201\253:\177?\021.\200\220\371\303\203\277\240m\265Z\365\033\237\277\002d\331\371%\321\244\277N{\3171_`\211?\212u\211a+\014f\277\355B\305\221\240\251J\277\235\301T\365\215\0028?\006\312$J>\250\250?\331 \032\220\254\000X?#|\n\272\365\223\245\277\354#\243\301\277o\231\277R\036\255\033\371\202\241\277\362\230\204\377\234\372\212?B\304\267\n\273\357\237?\322\316ps\'N\217\277\203\272\320\003Ji\263?j\242\0000\350O\243\277\003|(\037\353\212\242\277\212\243&\356q\"\232\277\331\256%\n\r\377\202?B,z\033\276N\256?s\233\177\341\206\030\234\277~\024W\354\r\024\234?m:\020P\362\232\235\277\374\301\030\30440\233?-J\343ZN\314\215?a+\320\376\027\267\222?m\325\234\264Ij\211?\016R\365\220W\276W?aL<\277C\201\265?1z\026\206\352\017\235\277:\314\306\206@\242\227?\000\352\303\225\362\031\206\277U{t1K]\220?\344\323\375L\3406\231\277?\355\332?\334\255\204?\312@\317+\213~\221\277G\3257\240\361\323n?^\363\242\0358\037r?\031\377\356^\032Mx\277\0252V \266\246\224?\361\261\263\225\324\237\266?\276\026\302\343/\360\226?\200\260\336\034\315J\242\277\211[\243\314\330s\244?/\3320H\327D\233\277\355;\t\242\377\014\224\277\0166\375A\t\372\241\277!|\265\352r\360\222?\022}\373\307\3730\240\277Q&n\005\371X\242?\347\377`\235\254%\225?\217\323q\356\256\220\241\277\253\326K\254\372`K\277+\251o\036\264\225\210?\371\245.\226\300\000\251?\265\310N\301\350x\262?o\"s\242\350w\204\277\307B|q\257\306W\277\351\237\234\006\3555\245\277\2273\253W\254E\255\2774b\017\251I\354\267?SFT\277\331\333\243?c\332\260lI\245\214\277B\273A\304>\005\262?\253\030\3538\206\027\242\277\255\257vbReH?\367\357\245^\303\340\226?H\257-\247\331\330\307\277,\370\207%\232\316\220\277,N1\3556\363\236?N\271\205\273(\210\302\277m\332/\200G\334\211?}\231,\375\006\363\250?\033\235\016e\216\316/?\241\377 x?+\253\2778.DE)1\241?]/\004Y\303\360\217\277\004{\324\254#/\223?\231}\300\004^g\232?\322\2123\214\203Q\265?j+m\001\035\267\242?\007_\177e\345{\245\277\352\"\335r\363\277\222\277\177\241\261\266\230\t\243??\245\321G\004\244\222\277l\246\007\234\rl\240\277\213g\323\373\215E\224?\000(\0368\300(\240?\306\376\256\300\013X\237?\300\272hP\353\304\212\2776\r\360\276\236;\260\277}S\207i\224\360\235?\276\n\346\310C\325\272?\226\333$\372D\214\212?\t+\251g\222/\265\277\371\',\356\350y\254?\234\361\252\200\275\335\240\277-/\307\3304\361\236?\247t\376n\024\343\245?\236\271\034\222~\217q\277H\263\025\242\024\220\270\277\003b]\315\2616\204?leL\017c\274l\277\237~/\020\017\245\220?\305\000\017\316\033ge?\347\256-6\253\234\203\277\346aI\250$2\246\277\357\007\311NT\341\223\277\021?k\004\2372<\277\275\035N\0019\213\217\277b\317\013\010\241hR\277\304f\262\244\353$\217?\n\014\253,\241\\]\277\035,m\266\321\237\255?\n\313j\t\016\305\205\277\365\306\342\361\201<\272\277\244\235U\032\320\263\252?\230U!\3058y\242\277\216\255B8u\254c\277\025\377U\3007\021\251\277\032s\204#\244\207\251\277\021\214LT5/\245?\224u\004f?r\245\277A\004\262\234\010\004\212\277\035\2025\212;\310\245\277\263\252\024l\312\324\251\277\204\360q\004/C\244\277\353N\347\271>\377\211?\271\217\340<\342\303\235?\327\014%\r\302p\220?L\335\325\353^T\202?\240\321\014\317\177,\235?:\365\225\341\204Z\236\277X8F\221$\256~\277\246\225RHp\330\267?\315\033\210\227)\251\244\277\205\205\352\235\246U\247?C\354\013\303\343\223\246?\243\316\2002\351\266\263\277`\237\210\226\353\004\246?\026{*\326vp\264?\374%W1\341,\223\277\226\324\237\231\254\\\250?A\342\023\356N\023\250\277\223\272\206i9\216\204\277\250\235\035\372\310$\220\277\273\267]\0070a\251\277\n\242\331`\320\252\254\277C\272k\277\362\017\244\277x&\357\343\355\270\226\277\3752\177vE%\275\277!%\313\357\014l\265\277S\206\234\234\370\034\246?%\243\243\313\014\014\251?<]<\324zc\216\277G\347\225\354H\323\227?\245\316\370\026P\036\220\277\201\224\215p\233\202\210?\261#\304\206\263\216\231\277\363\001\340_\231|\225?\256\305\315\250\263\203q?Us\344\315\357n}\277,f\304\331\220v\240?\344\200\334\373\245P\215\277\337\367U+H\215\237?\260\216b\324:\004b?\004/\002\240\304\274\200?\374\n\030\034B=\251\277^=\236\247<\303\242\277\346c\325\247\322\244\212?#vD\255\255 \225\277.fH\266#\274\206\277$Y\333\001\323h\237\277x\330\207BM\202\254?7Ydw\276*\216?)\361\242\350<0T\277JMWy\262\215\256?2\222\002\373\"i\206\277\311.\306\376\227(\257\277\2225\211\372\313\363\241\277L\304\241\001G\301\215\277\352`\000\257q\357\264?~\211\216\203\260h{?\006\270\252\240\202zP?\205\362=\337\030d\217?\335M\266\255g)\237\277\336\236\025\235&$\242\277\000\255\000\3732\016\234?\233[\212<\223Op\277)\217!\312+\363\244?\004\346\265\217\024\033\245\277>\264x\357\371\227\226?5\030\242B\035Q\216\277\336-\205TF\270\225\277\263\245\222=0`\242?{L\031\361\333P\205\277j,\321\006$\377\242?5\017\253\352t\277\204?\tZ\272\251e\335p\277?\276I\3211\375\252?\311B\203\217,\213\226?\216\230*t~{\203\277\372\270\313k\2372z\277\342\303\316\225\022$\217?\311\037j\0245\244\177\277\242\016\361\"\213\001\210\277_\220\341^\372\240z?\310M\372(C\366\244\277W\'\217\213\323Y$?\377\267m\223\327\266\225?\207x}\275\007\013\201\277\033\362qm\236Z\255\277o\342(u\227\312\231\277\360\272\034\303\252\276z?\227\334\022\'t|\261?\355\210\303\311]&\232?C\367\237\257\302r\241?\312\233\220x\347\213\232\2774\027\"\014\244\217f\277bpY\276C\212\212\277\001-\275F\333b\240?\254\253\'\233\366*\226?\r\207\374\0147\031\262\277\272\374d\250\242\334\251\277\256Jm*\245+\204?\240+}2!(\233?/Q\034\026\341\tp?\\\010h\337\013\313\223\277\336\305\203\276\267\353\226\277v\331\233\325\306Y\262?\032Wf\234/\373\260?\357Sg\260_\'\213?\007\035\262m3\376\204\277\016\275\261G\364\273\212\277\037as\243\260R\254?\360\330G\271\203\"\210?,m\225\016\034\231v?{\236c\335F\352\235\277\310\316?\216\235G\235\277\237=\032#P\031\235\277\333z\341\322\362m\233\277J\'\314\316u\237\243\277\240\3136{\031\035\247?\227d\231\n\372\312\236?\210e}R{[}\2779R\300\004\003\035\242\277\223%\306\202\215#\251\277\346\314d\317.\026b\277\206W\024\227S\212\271?f\223$,\330z\237\277\203\200\032\204{\201\241\277\224\341o\033\277\317\240?L\261\312c\223\215\250\277{\301>\337\210\256\205?@\336\315\372\376\242\201\277\364\302%\026\270\032\220?\217\t\2513\214\270\204\277}}u\215A\367\223\277D\366\024a\243\321\260\277\207\033dA\352\025\240?\306N4\367\362\006\255?\256\3530\023\310u\230\277\314\303k\330N\303\243?\244]\217\265X\341\214\277\300\370\020\316\367\250\214? \246a\r|\354\267?}\253\3458\265#s?Q\375\205\2141\'L?q6I\234\301j\232\277\350\007\t\373\205R\233\277\233\250\"Ox;\244?p\375\031\007\337\031D\277Q\314\361m\252\330\223\277\353\307j\261(\0331?\262|\310e\316\213\237?\234\374\227\265\250\004\270\277\036N\354c\010\327\242\277\341\223\265?\207L\203?Y\205\2351\272\360\210\277\276\251\233\000\027n\252?Pr\325\035\013\313\214?\353\024\\\200\233(V\277p\3446\241W\255\213?\024\236\223\355o\026\237\277\007\035\314\010\014\321\232\2778T\213\r-#\253?Y\030\013\270aI\215?u\"\324\026\311\202E?\';M\254\\\327\241\277s\351N\257\207\376\243\277\013\341\2216r\263\224?\202\'Q7ao\224\277}\t1\211\303\274\251\277\200\362ee\207\232\226\277\351\254n\025\223_\207\277CTS\247\254\177\235\277&\t1\203I\212\212?\252\364\006\210\246\353\257?\202e\271)\030L\231?$9\3025\261\032\212\277u!\266\023\354\014t?\007^\306\207\322\356\244\277\035J\233IF\035\221\277\207\322\257_\207\327\201\277\275\220\210 R/\246?\027\302\363%7\251\232\277\014\242G\376\252~\247?7r\232\235l]\256?\322\0335\231\302\024\\?\250\211\227\324GM\245\277g\241\0326\364:\241?\000\314\365\340\227\337\272\277.\"D\260\030MS\277 \347\377\020\226\016\254\277\021\273\016<7\"d?\235\256~\366M\014\246\277\'\305\324z\241\033\233?\023t\2303\340O\224?\354\325Y\350Q&\240?T\203\205\263\036\317\275\277\260\270\"\001\376y\213?\320\334\231\277\314\031t\277\303\021\225\2653\223\234?\372\377O\264\177.\303\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\250Ld{(\276\334\277$\022\004\216\305\325\327?\242\344\3135\005/\330?i\333Ul\026\276\327\277i\225;!\032*\341?\316i\025\265\245\017\270\277\370\034\201.\213`\343?\027\036\360\200hm\325?\341\021^:\204\362\330?\rt\265)#\215\270\277\302\010p\321^d\232\277\252\254\000\274\204\204\305?\371\362\303/\031p\340?\346\362\352\266\246\240\344?n\261\202\0360i\331?\204\354\301Lm\246\342?\317\013\t\252\252W\342\2778(\232\325\202J\312?\274$WXc4\333\277\314\373\001EM\375\316\2770\251\021x\341\224\303?A_dw\334\327\240\277+\361\037\225k\"\321?\210n\347\001\2122\330\277\222\316\332tIm\327\277A\004\367\013\316\020\317\277<\375N\337\233\264\325?\024T\272\355\310=\337\277BH\211\247\210\325\330?Y\366$\213\204\342\327\277\342\216O\275\365\035\300\277\252\202\203\372\310p\315?Fj\341v\265k\345\277\304m\217*\224B\270?l\036\322\334\\N\314?z\024\232gu*\313\277\"~.\335l\376\327\277+\350\367\331\360\253\326\277\r;\235\016,\325\331?\264O\342M=\366\303\277\327\367\374\227|\222\341?\332\021\352dY$\340?9@\272\010y\240\323\277\252\367\252\036\301\222\261\277\240Z,\006\330\361\342?\352$j\275D~\343\277p\030Fi\205\334\260\277\341\014\013\336\264\023\351?\276\0240])\350\331?q\255\217\216m\246\325?\320\250\026W\221P\317?\227\324L\275o<\305\277\237\027\267\207\006\225\254?\214\260\355\231\237*\312?;-&$\254%\347?M\030\215%\333x\276?\255\345\340*\303k\311\277k\332\205\247\220\212\336\277\236\214\264\222\247V\343?\335\274{\322\310\260\267\277E6}N\353g\333?M\025\245-\332=}?\376F\245\200\202\200\314?\232\007+\251\277\240\335\277`\224yuL\317\300\277\252X\260\355VF\265\277\010\364\235\340\260\027\351\277q\350y\231\365`\335?\245\203|J\274^\340?\246Q\254\351\364Ay?x\365wc=E\244?\310\207\030:\276\223\341\277\352\373\035\373u\336\341?U\n\313\002\360\240\331\277x\222P\204\324\356\331?\002~yQ\276^\324\277\201\345s\217=\224\312?\200\327c\304\017\215\332?\312r\247\240@}\341\277,\360+\255E\246\325?\343\240\220\3456h\302?\222\302\356\371\026)\351\277 \021\344\321\213T\323?n\2028j7J\323?%5\362%z2\342?\355\021\372\177w\010\353\277{\n\260\"[&\321\277\224buad&\316?\272\322</\005\263\321?\001\345t_\325\302\332?\204\376\336\351l\225\343?.4\347}\312n\321?\n\254\255\254)\r\246\277\272(\2240\005\372\310?~\355G\255!\354\346?\021\262&\206\222\035\270?\353z\027\211\350\262\277?\246\025c6\244\364\335?\305B\017\365t\234\336\277.)+z\307\367\352\277\204:\357\022Q\354\306?`\257\213\310\2026\316?\316j\374e\335C\351\277/4\330\224\302\230\340\277\304\2674{P\021\337?o\270[\213v\362\326\277yL\217\337\255\311\321?\226\001q,\364G\343?\237\001\263\346\007\351\311?\332:\317\261\321\216\327\277j\322\372c\265W\220?\346\322\\\300\225\324\334\277$\304\361+H-\333?\n\371V\275\350y\225?\212!\233\274\016\376\311?\332\370Nd\002\355\274\277d\210w\310\243\362\302?\206\236^7\217\337\332\277\363\371\350\272\212N\320?\2068\364K\370\037\247\277A#\361\233-\253\341?\342\370Z\365V\336\267\277\010\013^`v\251\353\277\276\316\210\337jJ\307\27745\275\252\301\025\334\277\237\311\231N\303\337\326?\331\n\305\207]\200\266?\216\361\t\215 \357\304?\247y\300\001}\321\304?$\022\2119\300e\302\2774\254X\301T\336\333?\377\377\273\203\261M\353\277L\212\rJ9\000\324\277\270\177\333\302f\n\320?E\3779\3276\300\330?\305\353.\200\217\343\260?\332i\360\323\305y\251?\207[\204:\375P\343?\305>]\3677\361\263?\275\24312\332\300\250\277H\260;\002\031;\232\277\007\235\3476X1\336?\314\334\341\245Q\243\345?,\226O\201\021\233\343?\242\221g\375\260\001\342?\3002\037H\303\304\326?\0351\013.K\255\331?MT+\374\330\222\321?\223\242\320p\035\254\325?\262\232W\314\236\033\301?-\321,R/D\340?\217\345\256j@\363\341?\334\2165T\374E\313\277\3379\247\253.\201\333?\315\005\230\244\036\327\255\277\270\313\035R\177\212\341?\t\254j\272\307$\314?\002R\310\356f\267\350\277\363$\315\204\204\376\341?\223\t*\245r8\321\277K\177\370\202\357\232\347\277N(R45\261\321?\322\206\271\007X\372\326?\325~zS\340t\315\277|\265%|\374z\244\277n\223\352\351h\334\315\277\024\002\263\212\345\031\336\277\377$\216\\\260_\342?\320.#\177\325\314\265?@&\340\022\341\005\341\277\302W&#&\r\341\277\n@\207\2031X\314?d\217\342}\370\341\353?\250\355\224+nZ\316\277\006\225jnsz\306\277,\215D&PM\334?g\340\237\212U\211\351\277\255%$t\366\213\347\277p\350\014\212<;\312?\237\210\027\004\217\000\343?\000\317)\264\334\226\335?\223\003~\336\222\225\342\277r4Sj\\T\340\277\251z\316\036\364\276\344?1+\243\370;:\303\277X\346F \247\213\312?\322u\227R\217\244\242\277\373\273(\333J\213\354?~\013\321\326\034\"\333\27766\361\000\230+\303\277I\367i\310K=\342?\264\027\364\260E\274\326\277a`!\331;s\212?\275ar\347?*\326\277\246V\3575L\307\333?\037Vl:d\272\350\277\226\002\271\342\261s\303\277\254\332\307b\276\351\304\277\322Qy\325t}\304\277!\005g/\270s\301?\2466\0278\r\270\353\277\3345\366\031\333y\343\277X\000\201\277\024<\333\277S\312C\2723\324\323?\256!\2364o\322\342?\0244\211oC\205\330\277:\325\324;\241\312\363?x\026C\027l\301\346\277\255S\010\326^\231\345?\312<\307G\256E\341?\002\264\340\244\271Q\316?_C\335\036\256H\331\277\025\003`\216\371\251\261?\260?\2105;\273\333?IT\026sr\246\341\277\002\260\340\344\245\357\344\277g\350\014\357\247\276\330?\251L\'E\256\377\352\277\376L\2248\233\001\325\277\016|\355\004\276\310\330?\345\355\253|]#\311?\312\340+\306\354u\343?\255\265\004\207\222\313\303\277\312B\037\204\320R\353\277}\361\016j\317\372\262\277\224|\221<\256c\331\277\"*\304\352\352`\317?n/\256`\370\324\354\277x\301p\354\377\246\302?\266N\302G\031Z\316?\004\322q&zn\340\277\374\004\223\315\340\201\355?\271\322\0376VD\333?-\375\217g\312r\340?G\021i\230\371\232\314?\006)2\244\323s\263?|\337qG-\344\266\277\361Z.\303\261\263\273?|\377\362\266\245\253\306?\275QZ\335\323\351\350?d;r\370\3202\334?\013z\335%\372t\346?\215\020\221\211\250\246\303\277\235\354\240a\236\034\340\277\340I>z\020\242\331\277/\3319\002\310\324\345\277\347CS7\0225\327\277\212\325\312\223\274\335\321\277\363\020\335\244\253\250\323?N]\366\232\257\360\340\277\037l\306\360\210\013\246\277\276\263v\351\350\360\275\277j\247\013\027\244\272\353?v\244\304,h\342\342?\235\314\\\026\272\354\315?\027\263\245\355\2429\334\277\377\243W\254\033\342\327\277\272\246\346\017\302G\260?\326\242\023\217\375\010\341\277u\363\336\022\0175\303\277\327\375\220\n\213C\333?\270\220H\273&.\331\277\324,\036z\267\033\334\277z\331\337\026\3678\354\277\354%\247\247\332\247\275\277+I\031\266U\002\332\277jn\005\236\3234t?\277\200(Z\0108\352\277e:\213\017\370Q\345?\257\365:\314M&\333\277\362\323\001\004M4\346\277\td\270\323_\336\350\277\314U\240\345\2348\315\277\304F\013\325\313\247\325?\247\315F\314\\4\331?\327wN\227&W\333\277\016G\273\266p\243\333\277\304\365\247<Q5\315\277$\214\254a\337\313\323?\302~\236\310\350\t\326\277\250\347\3050n\275\335?\374\227\254\230\266\325\260?\267\352\253!\3221\333?\371?\200\347\226\335\307?\032V\024\032\323,\340\277^\271\305$\022\250\324\277\362\303\027\330\3153\346?\016\014*<\370/\341?\376mu\327,X\332\2772\201i\356\247}\311\277\300\303\302\331s\211\341\277\023\005\363\035\346\016\322?\022\376 |a\236\351\277\213\004q\017\206F\274\277K\306\236\362\374\242\323?\302M\214F\234\"\276?2C\356\226Py\304?{\361:Q%\312\330?\n3x\207*2\320?\353|</\'\275\333?\340\360O\010\336-\347? \312p\303V\323\303?\361^P\313\373\326\327?XLh\206\347\322\333\277Q\367r\037OL\321\277\311\372\210\275\352k\327\277\201i<\031\t\000\344?\255H\013\325\025/\335\277\3067!_\326\031\341?\370:\204\177\211\276\270?G\264\037\'X\225\316?\311\333N\312\246 \307\2775-\221\001\272\031\264\277k:\2434!\324\261\277\036B\364{\376\324\266\277d5\"\271\302R\333\277\377\361T\035{\352\331\277\335\305\273\277\253\360\270\277\264<\255\372\317\367\340?\253+tg\352b\351\277\370\007\214\214.4\307\277\267\002Nb\017\320\272\277\211v\301\0257\366\305?\222\262 !A\367\315?\351\252M\376(,\320?\267\364\257Ma\247\314?z\255\236=\304\377\334\277\3025\r-\017\030\300\277\3538\237\304\223\211\332\277\275l\367U\035\026\327\277m\027MG\200s\343?$a\206\177\306\327\316?^L:@\340\266\320?c\241\233\372Oz\337?\220\354p\341_\257\333?\266\357\0053k8\226\2779\2042\217r\351\347\277\2230\254\247\200\215\353\277\227\265\240%b|\335\277\240\354\217s\231T\351\277P\254q\350M\003\341?\244ch\315W\030\321?Wy\275\246)7l\277yg\250\020\273\311\323?\327\371/P\256\240\341?\317\327\247k\037E\304?\277\270\337\263\216\335\335?q\2419<\277A\352?Hy*Y\223\334\201?\\\016r\0101\261\320\277\367\311Fz\237f\342?\277\271\245\367\220\252\330\277\234\306Yf\245)\326?\353(D\204-\306\327?\255\322wPuQ\312??\032\376\000\211n\330?l\026\3207\337e\263\277\202\274U\016\326\312\305?\312\271\204P(3\354\277\236\353(\2246\214\327\277\010\301V?\235\365\276?\3062\230k\260y\323?4*\214\326\262\371\313?\263o\3071\313\270\331?T\037V\205t%\330\277\210\252\354,\017\301\341?\264C\000\030\313\327\331?\275W\267\215)K\361\277\234M$#S\010\323\277ACx\301\225\254\303?\237\316\014\033IP\332\277\372\325\345\006~D\317\277EmP&\034=\252?\207/\320\245>o\270\277-\263Pl\260\225\346?Q%\372\373\340m\341?\010\267\355pb\020\353\277\200\372\301\265\313C\315?\231\322\023\334\237 \322\277D\003M\3365\323\324\277\r\2752\264\031D\307?\253A\306\270\242\177\351\277\310\0067\326l\241\332\277\243\275\021$\317\222\230?\376e\246\376\352\347\342?\3413w=\347\352\345\277\324\216\366q\316\033\264\277\331\222\033\177V\341\333?\203\230[4R2\316?+;\272\\\316\312\305\277\321\315\343M\306\213\270\277vF\013\330D\206\332\2771dS\302\325\206\341\277\2628\234\013E8\325?\032\244\024\013A\200\343\277\327\370k\3676\334\275\277\323T\013\031\201,\347\277\3734\222\305\004\330\270\277\313\201\246j\034\216\335\277\377\035%p\264;\342\277\2376FT\277\374\331?m\330\237\275\304o\316?\375\215\343`\261\204\333\277\016\026\225\312\371D\323?\332;\316\361`\316\313\277a\245A\273\305R\302?\207\263fE}\261\321?\300\303c\317\227\245\304\277\360\371n\335\332\255\355\277E\030\0036y~\335\277\320L\233\250M\"\326?J:_d\217.\331?\275\315!\303e\341\344\277\r\230\253\347\214\203\321\277o\225\356\365\203\023\301\277\034\036\"\201\322L\256\277!pf\207$\237\264\277\356\322?\303\323J\337\277\203\302\217\365]\272\350\277g\270\276\3613 \330\277O\230\264\215>3\333?\257\020\321\032\333z\336\277\201\035\313QB9\306?\243\351[R\254:\344\277}j(\2524\020\304?p\325\245\320\276\314\271\277\223H \272\220\212\320?f\205\tM:\017\300\277X\350\r\370\343m\334\277S\243\324bOw\320?H(\"S\010l\337\277\330\310\312\342/\331\347\277\366^\260\241D\027\307\277\n\371\024\364W\336\335\277By4\225\013\347\337\277\201c\304\333]\252\310?\230\373\317K\310!\333?\026>!\317\261S\350?\366s\245W6\375\346?\323`\352\276\371G\254\277f5\'\240\335\340\346\277\022\036g\321\375\350\305\277\242u\376\242\215\'\326?\302\352{N&\202\254\2778\034p\215\371O\321?\224\037>\344\007\320\327\277Q\233\327\277\327\360\325\2779\320]\227\033b\333\277\316\013\353)G\331\323\277a\034\223g\345\263\334?\247d\327\357\241\303\322\277}\223`\025\300]\343?\005\311\340\036u\334\341\277\224e\206<\365\336\324?9\005\023\221\304x\313?B\332\240)\323>\327?\336\300\212\332\253\360\314?\335\232W\0243\005\352\277\304\037\300V\211\307\327?@\202+\204\264\301\313?\035\357\232O\334\375\261?]*\"\245V%\332?\263\350\2610\256\221\244\277\r2\353\277Ye\301?\200\301x\206Z\347\337\277E\323\351f4<\331?\245m\t\327\375%\330?_>j\233\251\323\332\277\305hZ\314\265%\325?<V--\245q\337?8\313\342\331^\242\341\277\232\034\r!\327m\322\277\252\r\225\373Kb\332?\202,\277\030O\177\304?B-\201\233[\233\331?\270\200\212\240\016g\235?\352\202\366\266\226\024\314?T\304_mJ*\337?\272S@f6\275\344?\307\240\300S\377\260\321?p\260l5\005\'\342\277\263wC\265\253\013\302?\261$=\344v\242\336?\303pRd\254z\335\277bd-\261\020\266\261\277T\030\335_\005\371\317?\246\201\204\334\356\006\357\277M\324m\016\363\353\336?\331\001\353C\362J\323\277=\024\313\2407q\334\277{\222\213\263\263\027\324?\236\304\244\362\021\222\335?KU\331P\274\230\315\277\034m>\031\236d\217?\320\240\371\241\377\001\323?`\214\245\312+\325\260\277N\216\025\307\010m\304?\327\300\303oD\305\345\277#\340ngv\342\316?\030\r\360kxP\265?\312\3268F\332\021\320\277\rH\235\"\001?\327?\257\351\234\251?<\266\277Q\363EN\255\004\353\277t\361\026M\034\034\271\2774=\216K\301\364\335\277\210W\2403s\323\270?B\225\232~\312\301\326?\356\242\001*\321\'\301\277\252\322\035\026Ju\315?\277\217\230\257\204\201\267\2779\222\275y|\'\300?\207P\351\333\313\221\315?kj\007\371\307R\303\277\325\256\3065\341\233\320?P8;)F\202\326\277P\331\234}7J\315?<&\264\204\264]\340?\026\027\003!\231\027\302?w\334\233\200\302\246\341\277\321\256\256\303nG\330\277!\262\374\376\304\232\332\277\007\346\233q_\220\332?\002\225\362\363Cp\316?\365\214\033\254\342\271\347?\361\007\002\327\2201\337?g\'\016Ly\254\341?\231\324\333.0\010\344?`\376}\206\213\226\322?\374T\010\364\323\324\340?\271\003\233]\026\242\320\277\232\t\241\003\345\365\306?\010\324N+qY\345\277\356\013x\\_\271\313\277\311j\203_\336^\342\277\2553/\242\376\323\331\277\227\237\013duk\331?\331Y\2516\306C\331\277v\302/g\216x\323?Y\370\016\330)\243\300?|\233\243\177^4\330\277\341z\212\341\247N\326?\213\245\231\324\361:\263?\324\026\210\302\255\354\320?IB\021\356\275\030\340\277\362\275\261\t\352\003\317?=\025\262up\203\307?\361M\242\305\361U\306?\213>\321\004]\327\341??wG\351\004?\264\277\365AD\017\330R\304?\335\236o,C\303\333\277b\030&\244\256\253\351\277\323\242\006c\023F\323\277\353\305\013\330[\334\262\277\361\315zIG\032\351\277Ev\376\t\240\024\342?2yT\034\255\277\273?\025\264\245\376\316?\337\277Q\205\\\010s\004\330\277\213Yhe\030E\350?g*\330\311\306e\341?\004Z\357g~\203|?;C\177\331\3513\277\277\324\321\263I-\232\327?\325\003t\204\356T\355\277\346G\232v\311\033\326?\225\003l\362=+\302\277Q\370L\231\354U\264?K\315\260\t{B\337\277\370\002\010\207\236<\325?]\235eXLQ\241\277\271\010\313q+0\302\277r-\231\217\013\002\272?9\003\277\246\316:\344\277\275\377k\023\344\350\300?=V*IX\007\222\277EM\224\330\255\222\340\277P\014\274v\227\343\267\277\024N\340\261%*\327\277\372l4\317j\336\335?)fr[\231\334\334?\014}g\326r\303\304?\331+\260ms\025\301?\356\232\323\366q\330\333?v\364h\357\026\354\321\277\306\263\336\200\351+\337\277\375\r\231M\2376\322?\275\231\010\262J;\340\277W<\362x\357f\323?\030^\217\361-\237\346\277K\353\207\377W\253\325?\326K\241\351\245\362\331\277o\306\361\364\361\"\322\277j\334\374\007\346\355\341?\377sD\010\320\253\340?M]\344O`\030\320?;\177\375E \316\222\277I\243\253\005Kj\313\277\225\263\270\306\373\375\320?\310M4\374\006\007\322\277\217\301D\352j\253\334\277\366\"\262\305`\206\320\277\261\370\254)\260\362\264\277g\306:j\350\344\223?Qd\316Go\023\350\277\237f\350\214=\315\327\277\037Y\013IV{\341?\n\016y\231\261\306\314?o9gy\251j\321?\324\361\300\241\037\254\303\277\364\004+\314\274\000\316\277\301_\357\203\246\330\343?G\334?\343\246\261\324?\306\313\354.\225A\334?\274\212Y\220\"L\311?\213\n\234\205\373\347\335\277\022E`\215\362:\346\2779V\270\235\302\337\257?\036{0\200\010\026\305?\tOL\315 \363\205?,\324\205\221\310#\260\277\353+\202\\\307)\331\277\265\226u\230(\220\317?\353(v>\341\364\273\277\355\210\307|\014\026\320?\003\247\227@u\034\324?^\216\344\344f\260\301\277\206)\n\264\311T\337\277T\230\221\243H\021\346\277]\024\213\377nf\274?BIk\"\243w\322?\354\243%U\nr\337\277-\024c\271K\017\342?\277n\263\330\362\263\342?\307 \331\271\211S\302\277\246\326l`^\263\342\277\223\247\252\360\360r\267?\345\177\375d\353\250\261?\223\345\215[\2004\341?\240\331{*1u\321?@\311\001)i\010\343\277\352\246\330\311\007<\316?\200\001\2467\350\326\263\277\356\373\300\247CS\335?U[\272\304\177V\341?Y\256\273\371\265\t\341?\347,X\2160\327\273?t\006\337\225\"\030\317?\204\372u\027\032\350\337\277\035ln\357\212\277\332?wF\257\010\322\203\320?P\313\310\307%\'\345\277j\004U\271\202\036\346\277\037\235\r\333\262\216\346?\035f\226\361\020\251\321\277\316\266\351-\013\274\351\277=\017Sc\'\353c\277=\206\306\371\nj\303\277t\027\304\254\221\340\302?\021#\245\004\001\202\342\277\214\213R\360{\003\332?\330\261\311x\275E\357?$\014\252\212\341c\313?>\201\204\006\332n\231?@\366\005\232\237\312\322?\033C\236\333\270\314\327\277\206:\217q\330g\307?\025\207\000#\002\377\267?[`\250\310\375\344X\277\262\346m\352\007n\333?\352\321k\006m1\322\277i\2643\030\255\326\333?\351\236\230Y2=\322?\221\224r\250\321#\337\277Fl* A\205\341\277.\342u^\253\342\317\277\351\345%\371q=\343?g\364\321\232\330\332\343?\277z\336\253\332$\334\277\033y\320le9\342\277\257\364\2257\262\320\306?W\240R_\342\t\300\277U\237\230Drj\336?\257\023\032\354\366\000\311?$_y\'c\261\335? \303\234\003t\'\341\277;\240\220\360\323\202\342\277X8\367\341$\305\333\277\261z\230\222+W\241\277]\017\313\376\243\304\311?\266\'b\233\3455\250\277\025g\177\251\372\312\332\277\327\223&\222g&\322\277\336n\365\377\215\235\341\277LIv\000P\304\336\277\325p\375\344\235\376\351\277\213\274\344\233Y\242\335?w\313\3070\230\260\242?#\375X\204\001\206\353\277\"qK?\235\331\251?\204D\342F\204\\\337??u\265\313(\366\337\277\035sj\376\366\004\250?\001\251k\002\375\232\305\277\272M\334\207\343f\343?\262\242+\230 \254\323\277\232\032W\316\221\362\341?I\243~E\3335\341\277D\213\306R\202\351\272?K\227>U\\\337\271?\245#a\005L\331\245?\024\232\327\3701\314\336\277\264\261\261\014C\276\345\277\271#\324;\376>\330\277\334\000:\317\340J\301?nA\226\361\017\332\242?\321\275\210\016%\233\325?\232\262]\254\312{\331?\317\017Z\2706F\313\277\026\250\331\010\"\n\333\277\001\n\217\005+\030\330\277\201\006\326\275\035\243\321?\020#\262\307\"\361\325\2777\356BUS\321\312?\337\250\003$b?\301?\023\232gt@\233\304\277\010\232! \235\257\323\277\343\242*\235r\037\322?Z\300=\0307\317\341?\273\325\245DIQ\310\277)\274\223\274\334u\322?\317;\014*\211b\301\277\273J\252u\373`\327?\362\365\031\360\256P\362?\334\340\313.L\020\332\277\'\345\033\356\254\016\311\277\271\020\206[\010!\352?\357\001\262\242e\364\331?\177\3713\"\325\243\314?\016^|\273\204\326\330?\203Y\237\265\207\316\327?\031\231\215\202\333#\307\277\225\317\227\372\3537\342?dCK\255\315\360\300\277\205v\202\2055\355\271\277\3444\224|\260\246\340\277\374\346IS\253v\270?\322]\241\313\374\241\257\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "U\375\022~\372\025\311\277`\036\231\233R\260\275\277&:9UY\002\331\277=\275?P\354\245\333?\270\232?\334\362X\302\277\323\r\265\006\356\004\324\277#^\207\254\r\273\300?j\206\273\343:B\341?R\210\215\323\021f\333?Z\373\237\272\265B\305\277\004\304\212\310Y\334\225\277I \373lp\027\336\277\003\\\216\264\202\035\323\277\221Y0\023\313\361w\277\035\335`\273\312C\305?\327R{!e\377\300\277\354\371\346\260\355=\345\277\254\343\355\262t5\335\277\243p]\3379\000\300\277?\326\272\254 2\350\277\230c\021\007\007\022\325\277QH\276\026\n\311\324\277\246\2632\3623\213\315?\263D\310i\177\303\323?\031\020Pm\273\321\232?o\222M\306X7\260?\320\360<\010\013\203\245?\214\336\017#\375!\341?\005G\277\201\311\354\267\277\r\300\350\327\365\014\331?\035>\205\247\007\322\341?R\214_Z\341o\334\277\01714k\' \325?\351\314htU-\324\277\271\023\246\304\250\021\340\277\327\031\301\221\261\005\333?2\216O\257G\331\303?l\316\224r\360N\333?\241iW\271B\211\323?4KP\247\374\245\304\277\003\372\265\034j\033\327?\025\377\262i\300\030\314\277*\266\370v\355\004\333?\223\216\2740\021p\347?\313\375\344\016t\273\301\277\276\201\r\017{D\252\277\2026\372,\207 \260\277\202\265\335\202\271\200\310?\272\025\005\366_\t\337?\354\037\351\235\003\343\333?\r\003Nh\001\013\311?\307FC\3369z\265?b|\364\364\360\266\305\277\275\002\316\310\027\226\330\277s\351\014\004\311\222\261?\214\267i\261\n\241\334?\256\264:X\324X\267\277\214\231gV\020k\322\277\305ym\334;F\314\277#\275\021\276\310\233\325\277\201S\225\202\275\345\344?\2602\367\307\227F\323\277]K\'\014\300\026\327?i\'/8M6\322\277\350\222b\033y\021\304\277\014\325\247\302\013\207\340\277\315+\302O$V\255?\204\"\207\206[\317\313\277\251q\221h\272\247\321?%z\311Vv\256\302\277\211\035\303y\207\003\330\277\236\367\306\246p\017\322?\224\271\216\305\201\323\326?;W>\237\365\302\332?\221G`HF\027\340?\236\364(0\004\324\300?\272\367\264\323f6\323\277\n*\232h&W\331?\234\tE\360I1\320?\374\250}\022\005\220\340?\274\300\233\3048\275\272\277\004\2049\350\033\370\210\277\325[\252\354\227,\333?\363p8`\024\301\263\277\0059 \311a\320\322?\340\350{Z\330\216\302\277\205\261D\300\271\312\310\277Lju\202\376d\323?\340\360;\261:\020\336\277\002\367\327\235\374\025\312?{A\302\177}%\261\277\340\003\323\345\372.\337\277\010w\272&.\004\322\277\022)\216\275+ \340?\345wG\314t\247\265\277\t\013\232]X*\321\277\305Z9!2\236\341?\206\215\240\221$\275\335\277\016\033\205\034\241P\343?\221\236\357\352\022\366\264\277\016\032\005\361\343\317\322?\372=?9\243\216\314\277\226yY\3700\'\300?\304\243N\302\321\240\315\277\346:\237i\226\314\302?@S\371\306l\357\333?\300\034\351\034l\203\334\277+:\031\320\245\315\266\277\353\221\020\265S\215\304\277iEe\376\007\266\322\277\225\205oQV\353\326\277\321\374t\350\026e\317\277\320\353U\222\363\342\306?\263\356j~Ik\316\277\316`JRr\213\336\2777w\036\267\220\353\310\277iX\331\277\305R\341?\2427L\027\036\337\341?\211\334T\237\314\265\331\277\242z\317\357\243\326\340\277>\343J\tv\331\312\277a\334M\035\243\336\332?\376\311\010\206\243R\254\277\237\025\206\334d\264\273\277\273\201\374_\266%\313\277\262u\346\252\365\250\341\277\323\306\320j\316\275\326\277\014\352\004g\357d\330\277\233>\307\271\344\002\322\277\307b^\352\220\002\277?<1%*y\305\325?\274\033\371\322\362\225\304\277\262)\016q\245i\311\277\177\004\276\331\371N\313\277f.?t\'\206\310?GK\210\323\221l\320\277\317\017\035\325\331\312\324\277!\026\3264@\017\311\277\337-\277R\336l\302\277\241!U\022*&\312\277\206Z+\025\016g\325\277\306\357a6\032A\316?<\006z\371\322\234\313?\316?\250\035\337\001\326?\270\377\226\255\272~\272\277\272\235fB\366{\334\277\320\362>\337A\017\341?\352\217\225\325\2628\310\277\351\361\373\215Jb\226?T,\237\001f\204\326\277\271\002\200\363\021g\321\2772\017\3641\200\333\320?\375\024$,\375\227\327\277:\2250\220_r\301\277>\334d\226\031\270\340\277\221\245\327\270\234\375\311\277L\207>\267\"=\343?Z\367\235\235\232\024c?\220b\235[3 \310\277h\202^\300^\003\332?\214u\014\220/\307\227\277k_w\337n\332\275\277A\032\354\023\231\315\266\277RV\314\"\244\352\331?\354v$\207\020\'\250?\226\307\334\356\234\241\307?Y\362\225\002\220\227\312?\365OfY\0258\312\277R\362\337\237p|\325\277\002J\030\362U.\323?e\337x \007\246\325\277glbVU+\321\277\227\313\275\276i\233\305?\021\347-0\356\234\340?U\207q\313\375\000\343?.\335\207g\322!\300?\355`\026\274\037o\273?\213\226d\361\233\003\334?q\037z\223\3522\264\277\371\025.\021g:\321\277\352\037\256zYB\340?G\017\035\002/\005\320?GH!\274\326\256\310\277\311\311\321uN^\322?\277\001\322a|o\311\277\324\235m*\215\233\311\277\001\210sI4\330\321\277n\372\'<\300\317\276?I\315\264)?\\\307\277\341a\'\363\333\t\301\277<Df\330\366\236\261\2772\313\347\332\260\220\246?8w\024bK \326\2777\025\014Nj\274\234\277\334\233\003\023o\314\314\277\207\351\036M\336?\300?\223\007\230\277\316\233\343??&<\220\363\310\311\277\ry\037\320~\350\231?\024\037u\264\'\271\326?\303\323=\336\310n\255\277\224\010\222:\2529\341?^\006\265\277\237\223\307\277=\306%t\341\360\275\277\260\337\031K\005p\306\277\027Y\305\027\005[\247?9\313\2061?\224\345?t\332\227\364~\204\264?\322S\r\221$H\322?9K\365%S\222\325?G;\223\3233X\320\277\344\334F\365\211@\306\277\326h=)\253>\331\277\343\344\320\230\253\222\340?\323\210\316\203\327_\346?\315\207\'\265\3668\315?CQ\356\366\202q\347?0\010\367\366\221,\270\277\302g\231\345\267N\323?S\210\021;\220j\301?c\363\252=!\367\341?\276\223/\240k\035\315?\244\220\303\334H\223\266\277\206[\036\354\017\n\251?\212\035&\003\302\325\306\277^Dn\237\211\271\302\277L\367\304p\227z\300\277\227\364\250\005_g\277\277>\006>\360\036X\234?\231\330\364\032W\322\311?\376\301+s\256\330\333\277\3445\203i\251\315\327?\036\017\266\033\016\374\337?\217\317_\3367]\300?\352\230Z\246E\335\334\277D\306p\232\002}\322?3\322]T\217^\334\277\022\264\344\030\367\026\304\277%\333&\035\337\314\311\277\"\276\034A\251\201\271?\tk\241 \004\212\240\277\305U\270P\360-\205?\371\216\376e\232\262\327?\237\205\021\026O1\342?\325\250\356=\330\035\332?\006f\325 \n\341\322?r\027\272p\255\205\266\277\265\246\026\245\004\345\253?_Z\355\024*\002\311\277\326\343\216\241\343D\322\277!eC\035K\334\304\277j\201A\025\035\232\304\277\017\315\t\2271\232\311?e\342v\233\241\356\307\277t\232\3108\343<\323\277\212rY\230\322m\327?\204G\030G\267\005\332?\235\t\227a) \274\277\323\033\005\240\335\305\327?r\312\363l\275\206\331?c\031`\332R@\341?\235\002\205%`8\316\277\033\360 \2679|\320\277\331\"\207\0047\340\310\277\330\232\rd\260\370\343\277\027\003oh\245!\262\277C\346n+\277\255\335\277k\374R\035\227\301\262\277KP\310}\372\325\270\277\323HDOM\221\314\277\246\\\356\305\005+\204\277g\266\373\317\034\344\261?O\\\201C\"\276\300?\214\3413\375\231\240\251\277\3125\222;U\020\344?K\222\016l\265\017\304\277{Rk\275\333\233\340?\335t\315%\377R\327\277I\2660\215\225~\315?\205~\262\373|l\330?\276\313\033o\324.\321\277.h\336\301YO\322\277\272Xwo\210\332\311\277\332/\252*\037\035\334\277l\255\303\326[\224\327\277I\200Z\001-\304\333?>\021\271\225\353\373\275\277\316]+\270\235l\324?\"\331\375)\230/\331?\337\317\267\247\021\373\335?!\207\017\362\340\340\332\277\353\255@\351\312\335\314\2775Sw[\215\302\275?\271\243*w\320\014\320\277C\376|RX\300\221?\232\301\032\344\274\361\326\277Lhu\265\3552\324\277\214\344\225\207\210N\341\277\036Z\345\317Y\373\333?\007L\247\257\311Z\341?_\227Uz\327I\277?\200\336\321 \331(\326\277]@\017\320\376t\334\277,\365x\246S$\304\277\215&2\315\032\013\320?J/.\221\032;\331?\264\3466\257{\360\322?\005=\206\rMz\326?\203\364\032\223!\232\311?\367\276\014\210\255\025\314\277\365\215\263\206\001\370\323?\271e\223\0135\256\311\277\332?OQo\231\315\277\311\243\351\000\223Z\275\277<\313@e\250\007\252\277\363\270\363\"\230\373\325?\377\327\361\2002\343\337?\373w\014\317\265\033\321\277\025\253!\271\335\237\324\277\023\235=\020\371\216\245?\355\261\355\344\316\235\330?&\304\357\333\210\377\305\277\222\211\217\351A\233\300?7j\270\257\270\357\334\277\300\360UH\t\274\333?I\277m\3131\233\321\277W\340RH\262F\304\277\277\2646\007\222\370\346\277\016\017\016\350\240G\321?\033\330\233)\376\343\340?\007[\314\266\332\373\302?\226\002\267\024+\245\177\277_\030\260\026 \251\306?\325\214\326\221\321\225\320\277\223\340\004\270\340R\341?\352\034\016\005\220z\335?p\260\202\222ft\260?\246<p6q\033\335\277<\007,4\002\325\302\277\331I\207\214\266\367\252?\206#\274\247\237\373\320?h\r\334\346\272\006\316?\024\231\035z\365\200\321?\361\371T\221\314\017\251?\355I\2340\005R\314\277\204A\367\266d\005\316\277\274V$K\321\260\320\277\337\324\234vx$\243?\2049\260\311s\305\240\277\216\351\032\017R\371\310?\223\' \216\366\373\302\277\347O\020\370\322l\332?\203\201oI2\'\346?b\232\277\377\323F\342?\2563\236\346\0373\324\277\232\031\332\302\025\255\320?T\037\032tD\365\325\277\037\336?\004\006\t\340\277\241\243\367\215\336+\240\277\235\250\323(\344\347\314\277B\226\351\347\347\006\304\277E\014\017=s\307\342?\335\202[A^\021\334\277(R\342\202A%\337?>\036&\255\241\244\340?\275\274\365|\377\244\264\277[%\270M*\323\300\27742\201\313\326\367\301\277\362\341\304)\336l\266\277\333f3\300\210^\330\277%\317\243\032\370\304\307\277\356k-N\300\260\315?y\300A\363Y8\330\277\365\364\304!;e\314\277\236\204\007\0228\212\262\277D\371\241j\371\335\223?\rRQ\276\255\265\271?maJ#\003\354\334\277\266\376\353\372Mw\316?\031\264G\'\346\331\334?\355\373t4[\007\300\277\336\227\265\034p{\301?\326\304J\260n,\262\277\213\010\270\256\205\366\327\277l\366=\202r[\317\277\367P\3757\256\312\265?\261M%\242\013u\336\277\254\215N\032k\324\317\277\247\220\036=b\333\330\277\261>\205\016q\036\310\277\367\332O\375t\326\263?\217\257\305/\357\217\330?\210@\254\321a\266\344?\351m(\'ou\312?i\332\342\314/K\321?\177\251>\336/\025\322\277\225\330\271\362N\215\241?\237T\337\0058\242\312\2776\310\367\375\215\001\320\277\352\334o\235x\177\320\277O\351\331|qn\310\277\344a\307\021l\224\334\277\201\341\271\307\277\371\323\277\232\020\2365\330T\333?*\365<\224\034)\342?\274\016\201\255h\307\344\277\313\225\t\323\0107\264?fr\212\223M\335\312\277\201;z\007\224R\270\277\017\211j\222\200\316\320\277\272\305X\272\362\352\326\277?DZd\261\346\246?\254{{$\020#\336?\377\223\202\n\245\\\323?9_\240\224\034\377\304\277\351\337\346\002Q%\342?_\201@ G|\270\277\202\264\014`f<\305\277uE|\n\237\020\251?Y\"\347\250\212&\332?\032\315i\016\322\322\332?\341\002G\361*\"\326\277;b\260w\026\323\325?\245\332\240\322>o\271?\362\007L\022O}\344?\204g/\020*!\331\277\304\r\024\005\213\366\303\2771\252\233-M\004\300\277\233Hs\320\372\371\327?\310\202\320\215\342\036\344?\236\234S\031\022\215\340?\"K_\2204\026\331?\337t\260\370\352\337\314\277<;\014~+n\330\277A\332G\256\320\202\334\277O\220\216\033.\177\331\277$0Aq\325\374\313?n\013\211\265q\"w?\002i\224Hb\245\267?\375W\001\341\320\343\310\277\302\321S\\\236a\323?\t?\033\376\317$\310\277\322\322\346\033\247D\344?\245\014r\020mI\246\277\226\253\352\036\0356\245?\335}\211\364\2574\340?\322\\\346\322\026\224\305\277\357sT\331\356\366\322\277\254\331\306^\030e\324?\345\223|ip\200\320?\363\200\243s\321\024\330?C\375\370~\344_\323?\231$\326\320\367R\326\277\336g\274`/\307\301\277\203\016P\354u\n\324\277\247N\310\345M\355\341?\261#\211\"Q\362\320\277\334\000\234\310L\272\302?(\212|#\023\203\245?\177\313\352\301\323\232\341?\306\246\264v\253=\327\277q\322\030&\007\\\337\2776{\214\270\347\032\344\277\205#\306V\3701\325?d\003\317e\016\343\320\277\245\204\013\3550u\327\277\370\266\346\2113|\341?\240;Z#\264\364\311\277\332\256\373-a\327\303?\006\266\315j\241\342\307?\025\253\022\220\013\356\341?\'\314\3538\026\210\330?o\177Di\312\227\310?\356\010\232\010~j\333\277\337\363Ek\270R\311?\220\200/\233@U\344?\212G\013\361b\370\321\277\256\303 ,\320\273\303\277\362\214U\336\263\025\220?\266\201\337\022\236\356\336\277\315\2277|\270\010\333?6${\272\213\217\335\277>B\227\235H\335\310\277Z\244\347\024\232e\324\277\007\264\326~v\307\331\277N4\'\340\0015\316\277F)(:\215Z\262\277a\326\310\030\301p\276\277\224S_:*\304\327?\002[\346$\360w\320\277\373\210n\352\304t\277?o\206\346\"\0042\332\277\000\243\236\031\232\316\251?\216\331\220P\266\214\332\277{\034\267\215Q\202\332\277\254\337\"\223F\226\264\277\311\245\340r\2139\332\277q}:r\022\221\311?\221\273z\332V}\331?D}v\230\221\376\322\277\344\211O\232\311a\333?\014u\235\242_\203\303\277\203)<03;\267\277\n ^\030\246\022\276\277\377\000\221?\256B\303\277\331a\201\202\3368\330?e\266{\205\273\306\324\277\254\337dI\337\002\276\277\371?<[<L\306\277\310tF@\260\331\320\277\021Jm\314\016i\300\277\026\235\343;x\273\321\277\230>\202Y\232\220\335\277\"\3436kR\217\331?\021j)%\311\252\341?s\373^w\265\337\340?\257#\022\363\331#\335\2775\211\320N9=\205\277\215\0311\026\271\361\340?\251>J{L\316\331?\231\363\330Qq\235\332?{-\036,\340\226\322\277\326\262q\023~N\222\277\031*~\3351a\336\277\207R\022Bn\017\326?B\235_L\241\210\322?Hy\330\354[V\240\277\034|O-\311\036\256?\215\030\376W*\325\341?\210OI7,\251\320?\235\\,(\024\266\326?\372\274\254\247\360\\\323\277\035\376\325e\0108\301?\203\317I\355\200~\340?\300U\377\370\311\026\355\277\217\323\214\346\244\"\260\277\034\\\353\334\345\"\343?\344\300\270\344\3712\274\277\357\317\335?\364\010\336\277\344\272\325Vr\324\323\277\302\\|\223\327?\324?W(\202\027q\335\333\277\"\363mE\271\240\323\277\225\375\262\277D\020\342?\334\304\273e\211\016\340?\247\332o\235`O\344?\235\322d\313n9\325\277aM\333I\264\027\324\277\357w\t\325\3364\322?\033*;\352\343\346\263\277\345\021\\\224\220\"\323\277\314\237G\375\362o\313\277\314\213PVZo\255?\003y\255>\314{\331?\2506\355S\235v\312\277\365\365Q\301\036O\270?V~\247[\2320\310\277\231\267\027\tl\323\334\277\217\331\335As\026\323\277\00623\026\205\205\327?\026\034[S\\\032\320?\234\350>\354I\023\250\277\267\\\300\317\353\370\321\277\02113\372?\302q\277\355\007\207h2\332\334?P>\351\223r\270\244?\310\331\226\272\300\234\301\277\225\257\324!\177\311\306\277k\260MH\233\\\231\277k\327\270\255!\377\326\277\307\037\032\177\311H\260\277\247\231\021\332\271\333\272\277*\177\'U\201y\320\277\244;`wM\374\324\277\334\360\344x\374\232\344?V\244F\2237\344\346\277\371i[)\267\325\210\277j#K\346\231*\323?#\241S\335F\021\307\277\373b\373*F\214\203?5\306\364\362\024\235\324\277\016-\343\232\243-\321?\313S}\r\333\003\333?U\246<\233\346`\326\277&\245\3558$\352\340?i{\017\337\016\245\311\2776\357\346\215R\225\325\277\200\\\013df\340\333\277\331\333\306\006h\250\315\277\271u\337t\316:\334\277n&\336)`\263\300?\030l\001Q\025\217\302\277\312\3404\212vK\311\277\217\377A\232_\036\326?\002I\203f\323\261\313\277\351\313P-p,\322?v\013\033\261\203\030\342\277\263\3036 \272U\263\277\341\353\216\245P\241\332?\033c/\350\000\362\275?\020\235j$o%\321?\035\300K0\265\021\327?j+l\202\355b\311?Lq\002h\367\213\256\277\206$]e\t\307\335\277\202&b)4u\232?\367f\214O/\363\266?\226\002\207/NU\316\277\201\271\244\035uK\346?\007@V\336\344\373\274?\036j\232\346X\306\343\277S\036#\256\037\216\303?_t;\217\336\304\260\277`\331\337\3556\013\335\2772\237Tuv\300\323\277\376\320Rt&\334\340?\014\235\231F\323!\341?\253\301\315wc\323\272??\267\037\243\037\025\325\277\306\274\264\203r_\315\277T\235\367y\371\357\342?\316B\260\344o\367\313\277\177\204\222$\300W\304\277\021S\004\343\216Y\342?P\235\230/\277\276\305\277\204\324a\316\016I\335\277M\240\365\240\344\311\334?\303\2150n\252\354\333\277/\243\337X\204\220\321\277\\\233E\3277#\266?0\250;\251\'\212\326\277\010$L\231\355\317\336?\302\205%\235\340^\316\277n\310\273em\274\313\277\rWF\316\256\245\317\277I\207\200)`\212\300?\032\303\242\325\306\223\325?\206;\327\313=\232\327\277E\336\003\331\367\246\274\277\021\373^\335\307\243\264\277\001\206\317H\215\324\340\277\337\316\013N26\317?a.\271\236-\230\277\277vmWBg6\323\277\367l\212D\267\336\337?\267,)7\023}\257\277\351}D\312\350\370\312\277^\r\236Z\033\240\270?E\347\267rb\025\343?!R\331\023X\030\326?.f/\357%=\317?\343YW24\312\336?\244\337\277\235\325R\323?\200]\372k\3465\326?V\347\215\007S]\242?.\335S\274\216\351\264?\331\n\301\315\271\003\205\277\254\343 i\031\345\316?V\276LY$\263\344\277\217\255a\274\010#\337\277\202(,\343\215\341\322\277\023\244\257\237,W\333\277x\263\031\367\302\000\320?\225\3668\031\"e\321\277\335\304\036\234:\202\264\277\002!\233\026\253v\241\277\265GK\035\207\232\321\277\000x\037\034,\212\323\277P\3231C\200\220\346\277\344\033\312\317\313\234\330\277m?jX\266\371\305?\32753\300\347\273\305\277\331Brik\032\332?\030\t\275S\350j\315\277\364+G\370^\210\322\277\222\033)\021]\337\317?\353\254\243\273\301;\330?\227\261\242_\274[\340?#V\312\212\340\272\312?v\313\242 t\261\310\277\302\254\226\327\331\271\306\277\220Q|\006\311\377\326?\030\314\276\317h\267\340\277M\256=\377\300\004\304?\310\223\002\352\274K\264?\305\255\300\344\225\201\324\277\211R\003\303J\003\353\277B\313\277\016\021\306\325?\247\227x\307\315\346\323\277\3042\2576\247\202\322\277\035J\313UHw\311\277\311\026.\301R\031\260\277\356Q\233\002\031\222\317\277)Cy|\2107\310?\027\273\177\323\202\241\354\277\314\237>Ua\357\333?\037,\226\030\212\347\260?^\364_}\320L\314\277\221\342\305O\343J\341? \203`p\353\207\260?X\202\240\344\302\303\300\277\243\177\3441\220\217\301?,\363\031\3711T\221?\215\235\270\0321!\332\277;\214\357ci\375\313\277\257F\014\224\211i\322\2770\317\262$_\241\333?N\245\001\007\177[\306\277\214\265\357\205\204\216\355\277<S\246q\360\305\332?\247y\032>\346\310\266\277\313\255\334\",\241\345\277\237\231\310\0210\216\343?\356\310sIv_\266?k\314\355TS\336\310\277\244\010:6\270\004\224?\272\221\242\263\3103\330\277\032\252\262c\361\314\333\277\217r\365\351iXd\277i\211\\m\036\256\345?|\372\305o\003\235\312\277\351VoUCX\330?\263\375\021\334\314\016\356?\017\300\206\007\2128\325?\213\027\273\244~h\331?\252\254\034u\246r\336\277\263\367>\013\033\326\313\277\314\257\272\315\017\006\336?\332\253\256\270\017\322\311?\r\313\336#K/\306\277\330\331\275\360\264\032\345\277{\245\373\353 \233\317\277\251h\371\254NV\313\277}$ bX!\317\277\226\275\306\217\032\240\345?r\312<M_\242\314\277H4z\222\225|\177?\260\3215\330r\275\315\277S\321\022\244\267\321\333?\225\301 \320,\357\335?8\305\221n\026T\300?\335E\360\377\2569\322?\261N\206\301dQ\275\277\246[`\247\221\031\302\277\334@\"\023$\243\302\277\212\304\372\237\'C\240?\324\266\361Q\340\010\330\277\360\2737\351c\211\342?\267\006U\370\0168\353?"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\317\'1u\001\372\332\277\035\0252\353\375\347\227\277\257\363\217\345\225k\345\277!\023\222\276\013\204\300\277~\313\323\205+\352\317?\260\025h\rb}v\277%\314\207\027\326-\323\277\263Y~\357\313\333\314?\322_K\031\314\301\320?7\177\233i\267\030\315?e8w\024\2603\306?\276r\376^\312;\255\277\0167bLl\021\332?\345h\355|\216P\324?\265d\314\024\272+\257?\031\324d\233*\"\311\2776\311\021v\270\236\266?3\336{\305\n\264\261?E\375\017\200\304\230\345\277z\2277\352\250\316\330?\021\014\237-\324\354\266\277\2247:l\016\303\303?zI@\017\245\001\262\277\226\372S\reU\223\277\365i\272Yd6\266?\261?[c^\252\313?BLr\204\206\003k\277\016\306\003)\275\t\306?\313Z\316\356\224D\274\277\207\001\204\353\021\356\251\277\274\304\254\037ML\305\277\373v\207\250H\334\210?Bkx1\364\007\222\277\036@PE\317\351\313?kw\323\252\235*\233?UaA&\177C\232\277D6\262)\240:\301?\321}*b\273\'\275\277\307\177wyn\241\304\277>\204{\327\252\353\307?\312\253Q\336\376j\255\277_CL@\316\313\306\277\003\373\236Z\212C\303\277su\203\302E\373\334?\252\266\301\001\355\227\302\277D\225\250\360\024\214\335\277e<]3\377E\263?\027\376\327\251\335\202\345\277\324g3\001\004W\262\277#\224\2215\3427\272\277P\037\322\332AN\340?I\271M@\326\022\321\2777>\037\013\370\204\302?\032\0040\255\356u\275\2772\357\200z\216\264\327\277`\320\267\256\254\375\315?mMVP\236\006\301?\366h-@\233\271\330\277\026\366rVL\355\314\277G^_\350\224\267\263?IE\2467\177%\322?5\002\261\346\216f\302?vM\275\3739\213\313?Ig\014\t\240\036\331\277$\314\n\231\304\201\206\277xM\241\331\350w\223?s\345\223\313\033q\306?\374U\"n,R\313\277t\306\210\354\370\211\312?\344\360\355\206}\372\242\277\2030l\3525/\216\2771H\263*\312\314\262?\026W7Ir?a?\203\227\233o\306(\272\277\351\345\rM}K\322?R\021{C\025\211\324\277\262\213d\365~\240\253?\036\371\224\002\\\331\330?\216ri\023e\230\240\277\351\313\262q\222[\316?\317\004 \257\333\202\300\277\252\355}|\177O\324?\300\2161\261l\266\305\277F\264:1\242\362\323\2777\206\2535\000y\234?\347\276{\260q?\326?\200\366\006x\366\350\341\277Vb3\250oE\332?\200;C\363\332\273\226\277\023k\234\031\001\223\320?\345\201\245$5/\321\277\335\201\374\372{K\262?\004_\016H6\351\324?W(>\027\227B\300?e\302\222\235\031\365\244?\207\366\003\013b\257\312?\221\217Y\254\017<\237\277Di\351\373\261\203\325\277o+\316\025]5\325\277n\203`\217\273\343\324?\326\027n~i\321\313?(\347\220\377H\214\324\277\222\360\232\264\340E\226\277\r\367\020\254\354\236\321\277\332F6\370s\343\326?I\274K\267\270f\227?\275~\r\024\026p\270?\262@\211\231$\014\307\277\'\026q\2766d\341?;^Jk\331J\332\277\340\356\213\272\344\201\245\277\345\227\370:\014\265\340\277y\234\325\256\021\225\325?] \316\370X\235\313?=v\236\026r\340\255\277\322\262|\304\270L\324\277@1\320\364\035Z\261\277\363J>\324[\271\327\277\333\254\367\270\235F\254?\335\371vA&o\276?!\266\374\237U\367\316?d\2673\377\305\226\311\277\3231\366\203\377\301\226?\020rz\325o\003\231?\250\256\367\371\243\277\335\277\300\375\366\360\313l\234?\333\004\272\276\347\270\311?\363\'$k\315\016\247?\002g\305\023\302\247\246?\307<T.ax\321\277`>\312\255\207Q\301\277@x\202\266\023\326\333?$\016@\263\236,\343\277\247\223`\010\035!\276\277~\310\242\004x&\305?\033\272\232\031H\314\316?I\033\320\017\236O\322?2\335\310\232^N\307\277\232bp[\267\255\254\277\321\252\304\226\204\032\330?\321\230\373e\201jl\277\311\267-V\031\311\313?\357\245\216\276\347\305\343\277\001\354\206\371\246\247\262?N-\205\3052\346\324\277$\220\343\350\230u\276?5\252\226\027\334\373\312?\221\373\321\003D\273\313?%\323\367\306\342\313\224\277\303\355\34345\206\242\277\275\177\025\211\027\022\334?\316\377\240\213.\373\307?\267] \016|0\335?,\272\275hp\007\305\277\314\035\302\"/5\277?-g\334\221\200\354\300\277\3165\201\256\201N\241\277&\272\320z\225\031\316?:O\357_\022\212\303\277\2034\025Lc\252\276\277\013/\017\345}\250\312?\235\357A\234US\271\277W\227\362\273 \035\332?\262\312\244 I4\301?\321V\216!y\224\335?\3275\'8\257d\307\277\335\224\374?\354\262\323\277\003\201k&\356\204\302\277\263\356U\316=\021\325?\274\344\205\025f#\263\277\031\205\217\240*f\330\277\355\304\316\240\217\021\301\277\257q%\355\001\266\325\277\rW+\377\000V\304\277\216\232\216\304\\\027\316\277a\025Oj\332\256\220\277\3104\335M\233v\274?\364\330\351_de\261\277\257\332\260\220\241.\313?\013\036\023\205V/\341?\t\223\270l_%\321?\340\035Y\227d\227\222?Ymrs\206\'\340\277\352\223\377\324E0\317\277n\364\247\221\356\330\321?,-\340\327\243\200\250\277j\254\014\357\335\201\300?\320\327\227\035\204\270\315\277\222\001&\250@\322\333\2778\005@\331\256w\330?\370\370\332\361\364\263\305\277\336&\3453\026e\337\277l\226\212\350\277,\314?^#Fy\267\"\306?\254C\3259\306E\337?\254\233\241e\203\330s?\350\010@\361/\244\315\277\261\241\207\301S\315\255?\241\201V\307\310I\311?}\375\332\007NC\231?1\343\210<JH\315?r\372\271\332n\334\223\277w\270\203h\n\371\334\277\231\353W\242\277\212\331\277\261?\017a\261:\312\277\215:f\360\013\373\325?\370T8\243\'\262\350\277\311\341\227\372Q\202\307?\313\345\363)\242g\333\277\003\033$+t\204\306?\235e\305\212\247\027\307\277\034cq[;}\334\277\001\3457a/\332\301?n\2531\230\250$\256\277\364\316\353\017\244\271\263\277w0\016\205A\272\266\277rd\033\322X;\312?\307Xm\304\367\215\324?\204\263\371\361\023\212\223?O\031U\213\352\264\302?\007\336\305\013\246L\277?\216@S\275-z\346\277\003\304d\230\352\003\315?\220\311\215\330N\277\317?\302\242\226n\250\264\323?\314J\354E\360\214\333\277\260\375TD\203\010\324\277\313\333>\016l\270\333?j\272UD)\035\233?k\217I\231\252\257\316?:~\032r<&\326\277\004\333\373\005WP\335\277\002\335\374\020\355J\305?\236\301\322\220\0004\322?\004.`\253>\332\221\277sv\202\355!z\323\2772-r\364\342\256\241?\033\2470\372\233r\343?\325Pdv\247\032\300\277\304\331\226_ft\321\277\246\027\247\333\272K\255\277{\000}\013\253\200\324\277\223\266\323\301\227\226\306\277\235\027\264\210{F\265?e\030C%\240\367\274\2776\310~K\362o\241?Lj\254\007\2779\243\277\023\323\372\355\332\304\300?\027d4M`\252\204?+#XY\371U\325\277K\020\276\326\303\277\306?\305\305TXw\266\324?\373\273NV\310\337\327\2777j\247\375X\301\300\277Es$\276\272\014\272\277\260\203\212\331\272\256\311\277\253I\221j\256\277\270\277<\002Qz\255G\326?\245pL\273\326\002\301\277\225\270\327\350=\200\307\277R\3065I\302T\251\277\243\300\033\230s\211\334\277\233[\005\"1@\331\277\242j(\267\336\035\336?\360Ni\nk\372\274?\255\333\253\237(\261\342\277\024\211\243\004\007>\266?\336Q\010\2016\352\326?\017rL\002y\206\303\277Z\267cNo\n\332\277\252\016\'\224+3\310?\247\360\300\2228\244\315?{\353E\252<\307\313?\364\017\024\327h\346\264?\232R\376b\250\340\321? \205\343\333\302\241\332\2777H\030-z\314\300?\277\033\231\245\341$\335?\"\351J\325t\223\336?@9\211I\231M\262\277B\311\367\223\027\242\265\277.\217\301\365\240\241\323?\251\353\323\334\307B\251?\237)0\227\373>\236\277ZZ\036Y\3746\324\277d\273X\360\000\203\324\277\211M\333rb\212\303\277cR\214 v\010\265?V\230I\032\"\024\272\277\r(\303\235\023\353\310\277q\020\312\365\312\214\323\2779U\326\205\205\323\274\277\240!\254\272\030c\224\277*\005\206>\252\374\253\277\246\014\317\200\3166\322\277\367ke\363\235\227\254\277{ffQp\021\277\277\374\366O\333>#\320\277\377\243\210\3427D\266?l\350\364_\224id\277\323\306\257\306\321\274\330\277\010\241\200{Y\265\301\277\225\351\235e\360\367\306\277KZ]\340\227\320\330\277N\027\352{\262\326\303?!0L\341\005\231\300\277\230\301\013\027\337\021\250?@g\250\310\320\365\275\277^m\024\313\260\265\302?\300\010\376\350\232r\300?.\0243\034\307\000\335?\273+K\347\017\304\302?\324(\223\236K\004\313?\304\361/\275\220\002\265?\2053\010X\361>\316?P\355\256\013:\250\202\277\373\250\304\376n\000\322?\021\033\001\313#t\263\277\210;\000\271\213\241\330?\356\301^\021\374S\320?`\230\221\251K\215\264\277\325\351\2577\367\360\300?\212\000\264\016\377\017\321\277P\217\r\247\226h\224\277\374\214\255\220s\270\300?6\364\206\374\324G\302\277\216\"\314\224\220\\\326\277\220\331\222@y\255\304?eS\026e\320\200\200?\200M\026\"\275\303\317\277\251\321\t\356\006\t\346?\334\207\005\233\2238`\277\313\025\001\205Z;\333?SR\353\0246c\334?\343\317\233\322\006\221\202? \250\037\037\036=\336\277}\346jpZx\306?\3233\335\340+\265\346\277V\222\306@>C\343\277\357\224\265\323\265s\320?z\236}\370\217\037\261?\376\376\244\327\315\251\320?-vE\376{\001\300?*P!d\257\257\327?\321<\315S\210\230\262\277\341\231\352\203[\355\315\277\253j\204\031\313\264\276\2778\347\023\025\014\354\345\277\305\3035l\210+\304?\261e\266\022\036\327\313?\300\252\221b\017\336\313\277\017\016\2779\360\201\314\277\034\226\357\277\210\355\321?\207\231\342\302\216$\322?\177\222\242\317\351$\266\277%0\262*\272\207\221?\002\302\362\000@O\273\277\306\352g\264L\306\247\277\250#\325\001\205\350\320?@\013\301Y\243\326\340\277$\314\221\317\027\242\205?.\202\342M\320\021\307?\364[\207\272\322P\256?\323\3031L\201\240\312?\264&\254\223\204\205\315\277\356\254%\252e\215\306\277\037&\357\353v=\332\277I7\361\360\323\345\243\277G\344\201\224\267\001\201\277\t*5\013\374Z\271\277\003\246\350j\201\364\335\277N>\232Mi\326\312?\3633\372G\ti\304?\357\236\034\016pB\270?=\177S\022oS\304\277\247\177\017\212\271c\331\277.\211\232\2344>\275?B\336P\242pz\252\277l!y\316v,\311?\371KxD\001\233\266\277\340\253\217\\\305\345\264?\303\357|\261\374\016R\277w\275\370\255\331\005\332\277\'p\033%\257\027\247?\250H_\374\320\272n\277\306\364\r\265@\336Z?}\335\212[\0176\241?m\312H&\324\231\262?i\3667\3137\363\267?\357_\265\337(B\261?\343\320Z\013\350u\316?Gq\334L\305\301\210\277\377\245\271\025kE\335\277\306t\277\302\242\360\340?SolE\264s\304?,\356?\250\0045\305?\212A\010\262\004A\276?\227pwN\372\n\323?\337L\306\323\326\243\326\277L\231\035\260gk\325\277\022\345a\203\2756\275\277]\322\334\031\235\376\223?\247-\372zl\030\337\277\207\211\"H\325\023\274?7\032fP_\321\320\277\367\204\345\206\227m\324?\275\317\253\251\356\002\322\277\\\316\267\313Rw\234?\310V\312q<\004\330?w\023\235\003\313\340\335\277\224:D\366\362(\256?\207\276\027Q<\203\320\277\235^\206\250(\233\243?\236\r\201\274\237\236\267?\307\300=\002\017*\301?\326I\273H?\210\324\277n\302\331\226\212\277\270?\022\353\357n\023\343\320\277>\030\311\254\010#\317?2+\264\363\341\314\274\277\023\031\033\231\017\273\306\277\216NP2\376*\335\277n\235\377x\307?\253?`\027\313~\252\254\274?\004~\007Y=\237\313?]4d$\017\355\240\2772M5\310\335\'\346?\033\230L\264\301u\304?\303\215\302VK\021\301\277?\331J\205\024\360\303?\256\024-s\225\307\245\277\314\266Z\023\034\366\272\277\305y\202\343\234L\322?V\362,h\322*\340\2773 \303s0h\313\277\024 \222\356-\217\303\277n\305\357\226\"\373q\277\311 p\307;\312\304\277\025.i\032+\361\326\277.\374\036\034}\242\261?/\30325\353\274\306\277%C\315\036\370\245\247?\252Z)\206\006n\313?1\023\302\275u\302\262?\017\032g\371&\333\242\277\212\2435;\257~\311\277_\035\326\204Q,\325?,\254\336M>\341\331\277\n\251\315\314\234D\261\277%\345\251E\217\216\256\277\017\315\3238\351\206\267\277\345-\276\234o\304\344\277@\275\3117a\035\321\277\260.\000XP\364\257?\263}C\325\243\314\316\277\205\230\t32\376\321?~$3\305\362Z\277\277\204\304V\350\022\316\270?:\027t\240\362\036\322\277d\267{\352\035\274\260?\033[<\333\253\257\252\277nU\230)\365v\267\277%Sx\212>k\241?\226\310G\2332p\327?\303$Oz+\235\327\277*t\005\266\023\224\272?\270\022\233\304>\336\324?\261\226\253BK\270\331\277\3320Jr\204\262\303?\023\270>\345\026?\320?=\315!gG\337\232?w \247K\362\213\307\277\237\017\351\243Z\305\252?w\266\346\001\302\261\300?\246\341\306\212b\354\251?\244\373S\306}\215\337?De\325\017\207\217\300\277\254\331!\371\345\346\321\277A7\201RX8\303?)\0035-\316\\\256\277\244\227\300Fom\203\277\215\022v\307\026\245\305?D?X\275\014\315\303\277x\321\201\254\"\334\340\277\251\337+\204\243\247\227?k\341\277\027\367\237\301\277\360\025v\023V\262\322?\237be\265\375\256\317\277\310e\372\320*\260\247\277U\350\211\252\020Q\334\277\322b\357WK\036\337?Z\305sA\277\261\324?\234\315\014c\341F\223\277\331\245-Ay\266\320?Zw\326\356\213\'\261?\2276\346\341\223\'\252\277\026\272\301x\220\245\213\277\251\364v\037\301\367\267\277\030\261\020e\232c\324?\026\275\206h\223\335\344?\247\360c\215hr\276\277\213\353Go2\214\330\277\227\352E\216\013\027\307?\316\'\271\353r\376\324?\014\331\3244u\\\231\277\233\372\01489n\252\277\024\371\352\344\204*\313?\214\2206\255\006T\316\277\211\352m`\036\014\310?,\370\340\311\262o\314\277\373T:\243\332\377\327?dI\237\321n\024\240?\372\252\2621\316\366\246\277\216\323Q!|\020\302\277\nV\200l\370\253\270?\350\035f1\354\340\242\277 U\235J\335C\336\277\235A\376\361\355\222\331\277\203\276RH\327F\275\277vLg\316\315l\261\277\317z[y]\305\267\277\004\273v\330\315_\332\277\3144\270\215\026\265\310?\324E\326\373\3523\216\277\347A\217T\3122\322?1\277\352j \305\306?]\376\224cm\300\315\277\270dY\377\214s\321\277,\375h=\276\343\307?\352\373u\221\354\312\277?\344A\311\376r\204\252?\035\351\177\204b7\275\277\006X\241U\355}\264?\346\357X\220p\333\305\277\207\371$\036L\341\354?\264>t\013\272Y\324\277\330)\022\013\323J\322?)\347u\242aA\335\277\346\324\260\\)\315\221?K\200\255!\367r\260\277\304\327Wv\261\232\242\277W\3243\'\004\253\257?\035\205\260\254\222\354\303?\322k\304\324X\'\311?\275\026\'q\325\346\226?6\377\304\\\007g\321?#m\035^\215\236\261?\275\005\343\024\312\206\304\277H\370\350\032\2752\273?\205Ce\300\326;\331?\026\303\026\335|\273\275\277o\024\346\375`\265\332\277zKrS(\271\273?\344\254\332I\272_\310\277b\3622\3723T\317?\234J\'\361<\255\272?\240c\273ED\265\302\277\217\033%\334\311W\322?\217H}3bi\321\277\241K\322\305\326\273\245\277l7\366\2575\357\332\277V\032\234\302\304Y\250?\22080\014\352\220\313?\267\177\217\213\021N\270\277u*\311\'\025\273\266\277\274!\212\251\253\255\327?=\020-\364\037\204\323\277\026K\376\021\333\251\242?\327I\255\363\304\354\313?\332\335x\272\200\031\331\277\335\257x\222\257\017\322\277z*\253\315)\003\332?f\334\206k\004>\313?\202\314\207L\030-\313?A\215\253B\030\311\270\277\" \272f\005\261\320\277E+\315\276e+\336\277\202\355|\331\242\253\177\277\373g\365\253MF\271?\260\022\025\260n\361\322\277j\375[\216\307\033\332?\220\260w\227\224L\277?#\212\347)=\275\243?E\366\264\302\267=\265\277\021M\276\235M\022\266\277u=\317\342\372b\337\277Ck\216\r\231l\322\277:\243_F\016\364\265?,\307\233uV\315\337\277cm\001\020\374}\263?wV\035\r\225\002\255?\364\251e\314cS\324\277\027\277\177\206\266X\323\277>:\005\3332n\271?\375Sm/B\022\272\277\253m\330\313e\"\304?\036\346\263\210Z\213\311?\2352\242\237\331A\321?i\013\261\332VW\264\277G\350x*\330\326\272?:\240\n\350!1\274?\271\033\021\256V6\201?\002_@4\004\027\311? t\236?5x\301?\037\t!7uu\275?\0025<\253\365\376\314?\002\030\023D\320\t\353?\201\256\327\341\215\347\273\277K\377\2071\217\277\265?E\315\216-D\245\251\277\261\1773Yd#\321?\362\317X\201\200\026\322?7\306/l\300\243\311\277\240\016\252\251O\240\277?\224\330t\313\222\226\312?\363~\022C\357\323\303?\014\030\2450\307\205\226\277\240\253D@]\202\301?\256\005E\330\267\247\304?\334\221_\030Pqr\277(\255\330t\354\257\312\277(\277sj\326b\313?h\003\333\003mg\326\277\374\335\365\301\317\003\274?\250\331\362\226t\266\300?/\004\306\271\200\000\254?\275)\237Gl\216\306?\231\032\240X<-\332?\304R\016\247\360^\324\277\213?\310N\255o\264? \374P\n3\243\247\277\316\231\226\246\301\307\306?\204\306\334\355\005a\333\277\021&-\006\347\335\276\277_\257{-\332\036\267\277-,W%\307J\300\277\326\207>\003~\020\316?\275,5\025\375L\257\277\321?T\255\310\246\333?\234\032\260n]\314\251\277\342\016\322\301\314\003\306?Z\024i\336\247\256\240\277\347\376dPp\004\263?\375\317Z5k\247\251\277}\232`F\230O\235?|\272\014\374\r\344\302?\262fS\261\241\211\303\277\231P\316=\220\315\337?9\005&E^\307\271?Q9\354\025\263\321\267\277 \026\200_6\275\214?S\233(\224E\002\275?wiHD\357)\267\277\251J\216e\376\200\321?\235\030\357\257\241v\267?\033b\257\347\321m\327\277c\2414\017x\300\320?\346\223$aA`\277\277o\322\304\005*\227\334?\250\247\371\232Q\345\311\277\303\275W\005\266B\325\277\027G\350\354o\210\275?<1,\231\263\337\327\277\021\241p\004\024{\300\277\216\250D\356q\222\314?\351I\216HB[\317\277\307\031A\375a\024\335\277z:.\237\337\220\270?\324\377\031\357\230\260\340\277\037uU\303\312\253\321?\315\027\026\354\343\340\302?\024\035\372\211e\035\343\2773\246\245\242\256\370\234?I\"\003d\013\312\261\277\256\200\370\273\226#\331\277:~\037\332\034\205\260\277\377\274\204wt\222\301\277\005h\201L\252f\353?\373D+\245\227\251\334\277%\357\202\342<\344\335\277\031\004\336K\037\335\334\277\033f\005\251\026\210\266?\353\320rx\222>\252?0\2102\t\357)\326?8@\017\010\231\211\257?.\264Z\255\366{\325?t\027Z\027/\214\361?\\1\342`/\362\277\277\311Wc\250\007\310\335\277\006\216\263\306\237i\264?\301\003\314\355Z$\220?\037Qz\r\321\353\311?\236\223o\'\272\222\333\277\027g}\300J\375\316?Z,\244.N\212\361?0Nr\264)\325\303\277\026\354\001\312\352*\306?\242\360&.\351\341\305\277\263\252\345\303\367O\340?;\343C\366i2\307?Er,\315f\255\340?\003J\306^\n\227\322?\203b\177\025\250]\260?\001%\212\"u#\222?\216R}\326\352>\267?\327<\264Z\367\325\246\277\232\310\024\234\347\020\316\277\353a\340\020\020t\300\277\205\307\216\330\351Q\355?\231Jnx\006\332\312?\021\215L\215Iv\226\277\031\241\352\010\357\361\323?\034\003\005!+\315z\277d\266\340u-\030\302?=G\325$\253\263\332\277\322\335\203\210\253\217\300\277\220\274\033C\340j\204?\023\332Y\244=\367\302\277\263\027LQ\272\267\320\277\001\344T7N\241\324\277\307\260\316c\243\332\331\277\320!) \222\212\275\277#\360\225\254\313[\336?\343\345\316\363\244A\257\277\256h`\220\357\250\326?\264\266\334\300\204\374\210\277\250\264\300\370S\244\336?\276\221\257\376q\272\265\277\257\261C+\241\316\307?\r\023t\342\177\367\310\277\353\"_\310\300\205\325?\343\217\177\223\366\301\275\277R>\037\335\346\320\231?\304\255\210\357mX\336\277d{\375H\336\237\350\277\376\037\377\226)\342\327\277\333\212\256\367\031\002\327?@\254qG\372\207\327?K\003\t\340\276\220\322?\320+\236\344\236n\301?\256\021\367\003\227/\341?Z\215\270\340Y\026\270\277\251\212g\027:\237\320?\236a\352]X\347\270\277\002a\026t\364\312\226\277S\033\356F>\323\275\277QG\204\240Y\321\324\277\301\325\301\340\350\007\301\277\314MA<\263\350x?"
      }
    }
  }
}
node {
  name: "normalize_element/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\2313<T\236k\307\277\376\215|\0258.\274\277\\Q\272\331\034\316p?\2302\214\331~!\322\277\275p\232\276\350F\255?D\251\330a\371\006\216?\260\237\246+Am\317?\354\303|:U\321\320\277\203^1\nL\321\325\277\337K\262I\301\036\324?\257\212M<\313\227q\277Y2\r\337]\253\305\277NS;_\304\030g?\'\003\"\231A\024\261\277\203\273&\243\273\277\267?3+\233\336\325\212\303?um\3022\234\025\341\277\214\n\234v\361W\261?\375y\226B\3606\322?\301\362\240su\333\322\277\340\177\272\310]\337\262\277i\320\350\224!B\277?\202(\355CN\345\302?\372\207\345\226\026\342\322\277\226\0164\202\024\326\321?\245\254\363\204\025\037\272?\366\206T7\030H\270?\22022V\350\314\322\277\246x4o\014d\261\277Z\2769\033\033\002\320\277\257k3?\310\356\334\277\270\207o\315L;\273\277\\*\303\\\362=\271\2773lkxj*\306?\3430\260\0349\330\316\277\021\354^\352\326_\223\277F\232\216]\216\034m\277K\031\356\211,\260\325\277\301\037l\260\031g\311?g\250\033\263\223E\326?!k\"\327\361|\274?M,H\304\311\236\227?*\003\002\276\274[\320\277Ea(u\252=\316?LO\377\235\370\235\244?\031\177q\370\344}\305?+*\241\204Ky\246\277Z\017R7\032x\317?\257\n\275\366\251\337\261\277\001H\207\223\006\003\254?`\244\222\355)t\302?\311\224K/\"y\257?\020\373()\212?\261?9oo\032\370\274\234\277]o\221\375\306\313\250?w\316Bos\226\271\277\275\352\241h\257\204\325?\260V\000\355\240\363\316\277i\021\003\223\333\231\232?\257QQ\251\346u\314?\216\210\333h\355n\302\277\235\341\245w\357\254\301?/\373\213\300\002L\303?2\304\315n\2635\321\277-\2418\366*6\310\277l\345\276\250Y=\304?\351O\200\273\rA\316?\017n\360\202\340d\246?\030\355\256\201\310\023\241?\007\303\022e\351h\272?\206G)\254\344;\264\277T\3145b\307\'\325\277A\233\331\252\033\205\257\277\277\306\351x\327\241\326\277\252\023Q\305*\366\315\277*\350\363\307\202\350\321?\272\332B\316\332\365\236\277\215\260k\221\211E\206?\221\177\350\367*4\314?n\2718\277\245;\315\277\026&\217IS\016\267?\244\201\3071z\245\310?;\003\362[n\272\213?}DA\304\333\303\246?\357@W\217\355\234\212\277\302\200\231`\256M\305?\355\225\326o\275\232\336?\237`\035\021\243\271\336\277\343\230)q%\335\276\277\320p\300\000\240O\271?Dx\364g\027.\311?\036\274\266F\204\'\304\2778\\z\255\2478\245\277vD>\2550\300\325\2774\305X\247\327\t\300\277\n\364\376\033\331\177\322?\007\177\351&\372\310\310\277\004\201\253\340\033\252\265?\2525b\270\246\216\304\277\030\177U\20691\323?\351:\233\372\361\000\314\277\330\272\233T\275Z\300?\265\332\363@w\350\322?hk\177\363)c\320\277\267\372\215\240\177\005\255?\373\003\260\263\211G\271?k2\230\256Tf\274\277DD\236\253H\233\221?\3137_9\3704\307\277\3269\244\\hJ\304\2776\324\272oc\014\262\277\364\025\241\3717\251\305\277\010\nE\003,\326\267?\215\270:\202j\240\303?\255\017\034L\227\313\276\2775\"=\3511/\303?\264L&M^\305\302\277Fx^\251\357\225\325\277\317\227\037\246\216\006v?\333\301\202\003I\370\310?\016\3255d\222$\264?\261\356\336\356\305\327\302\277>7eB\202\377\326?\240\255;2\204\205\260\277\306\364\212Y\374\341\306\277l0]z%\271\310\277\305\311\260[\364e\305?\362\273xf\226\337\245\277\3528\036\310\201\217\270\277\263\326{\367\243z\235?%\030\246\nbR\325?DZ\304\334\313\\\316?H\013\2331\303\r\336?\357+\314\313\024N\226\277)f\267}^\013\311\277\274\371\341\260\233!\267?\260\354\224_\2114\302?\245:K\361m~\227?\300\374\277zv\260\304?\027-s\360\016\264\245\277\033\201=\374\351\314\243\277\t\250^\010\240\301\231?\\H\244\227\002\253\325?\326\311e\030\235\250\266\277\302\027\230M\222\355\302?e\304#_\341)\270\277\000\002r\024\202\332\263\277\037gT\243\266\251\306\277.T\312\014O\031\277?p\244\022\302\235p\271\277}|\352\247\260Q\226\277Q\372\350\347\244\006\273\277\374+\022<\314\203\332\277\200\233o\3522\205\246\277#df7\177_\310\277\243b\314\267\241\321\267\277\177\247\201\336 \215\300\277\335u\373H\242+\312?`\372z\272\333\355\261\277\252\207\260\024?\253\330\277\301\356\362\206u\372\311?\327\351\020U\371 \216\277\366\277R\246\354\255\264\277\t\237M\021\255\350\313?\213\361\340x\256\225g\277; \330J\033\341\341\277\030i\360+/\227\306?\n\036\277$uGV?\336Y\027 \353K\272?\312!R\277d_\312?\032\310\3124\234\355\314\277\342lTH\263\032\206\277\037\341cS\316T\304?\016\343\257\350\255R\326\277et\030\350\335\372\332\277&\000\333I\036f\251?\325s\264\367,\376\320?\211\244\nyy\035\276?\023\227\321\211\260?\274?\361=j\360\221\t\244?\002FNs\261\225\307\277pi\217\314\246\361\304?\253\201|W\200-\315\277\252\234\231\013a,\260?\234\262\013r|\232\321?|\342\357\304\033\003\236?\035\266\'\326\344\325\267?3\242\205$]r\277?\376\213h.\317}\307\277\0258\r\267C\276\305?\230\017\214e\t\220\271?Uq\231I\334\365\335?\270\301N\354\267\026\324\277\036R\n\322\006]\302?\246\350i\241^\252\244\277\307!\017r\361\370\320?\375\273\226\225y$\326\277\260\302\"P4\275\315?;Cy\212\'%\325?!{\344\"\311q\325\277\371\'\215\365\276Q\323?\001(\014\270\0202\232\277A\005\026+\351\376\306\277;\223,\211K\367\253\277\213\300\304\004\002\222\243?\023\026i\035\246\'\251?\'B\\\277:[\322?~\343\336U\315U\305?\330\274\277\nqM\321?\021|\353>\344\001\201\277%\326\355\207M\235e\277>l\003\010\343:\311\277\340]\231\313\037\356\276?ut\206\322\343U\251?\354\024\036\000\276\023\311\277A\371\210\263\217\261\314?@ \266\007=.\264\277\315>\366\263,R\325?\377\324\332\014>\371\276?\353\353\265\325\323\026\261?>\255\000z\036c\314\277%\232\010\346\251\331\311?\037k\257`\357;\323?\352\t*\307\3538\321?\221\361\340u\371\207\306?\240c\307\303QC\310\277\222\367\323\334\033\252\350?\215[\304\265\202\251\320?a\213rmO\210\313?uP\245h\003.\267?\035\232\r\351L\342\320\277ru\010\236R1\315?X69\243x\376\263?b\224\233\223\2417\255?\351i\246\312I\377\265\277U\212C\361\342[\250?\216\277T\nS\217\274?F\346\301w\264g\303\277~\341\262V\201p\210?*\005u\302\373\000\261?\354\270U\006\\\251\322?{\207Z\300\307\202\274?\343\221[\371N\264\313\277Y-z\364\335s\310\277\347G%G\365\007\303\277\000G\330\312\225\343\323\277\345\003K;_\024\322?\272\326Hj\n\031\263\277\340\t\253\325A\225\237\277\323{%{\210\206\310\277\212w{\332?+\270?\233=\006NR\337\306?\"\315\332F\3110\276?;\010Q\360\277M\304?\036\214\316\021\020\274\246\277\252\252\367\366\261\340\307?\033\261\327C\244C\325\277A\221c2\263T\305?\223R\177\307\372[\276\277\242\206\262V\363\231\306\277\316.\363\024\204J\263?\220G\220\252l\302\310\277\212\377\333\332\024\220\316\277&N\345B\245\270\324?U\357p\3508\210\273?\351\254\337&M\035\320?\243\233\237\310\307 \306\277\247\020[\300bb\315?\353_\3754\217\177\240?x\225lq\322\364\305\277\255\2247po\206\274?\324\tNA\362\026\322?a\210?\324TZ\247\277\274\262\336\177\247\237\262?\253\273\005 \n\035\310\277\n\301V\332p\222\271\277\014\2073b\364\346\300\277\025\230\336m\224\254\332\277\330\022T\006\231P\272?\r7\317\006\310<\317\277\212P\354?>\025\236\277\360G\311\344T\210\250?\211v\206\';\307\303\277N\003,#\336\004\300\277\323\200\364n\234\353\324\277\300\315\262hh\345\317?<I\'\300]p\226\277\205H\200\344d\240\234?\007@\300\373\027`\215\277\016\244\027-\337?\337\277\223\314\310\006\362\n\324\277k\332\277*\221]\301\277\0228\240,\256O\322?\\\037\301\034\375\001\253?)\357@*SB\327?\316J\226\322\016\227\233\277\327GO\2538\375\245\2770t\266o\206\341\247\277\251\237\302\nV\303\313\277\221\t\260\322\300\017\254?\241\032\261\224\304\261\320?\224\344\030\220\004\323\234\277\225\277\353u\232\357\317\277\213\210\331\341\200b\313\277od\3255\222\\\270\277s\263CvU\017\311?\330\261\221\020\232\273\264\277\275 \244Q\034\214\313?\3741Z\356~\273\270\277\031\244\344(\371;\245?W\221\336\233k-\313\277\200\256\270\037\000\341\327?V\231e\237\372\035\306?\375\237\366\3232\004\321?\000:\n\036\340P\322?\356h\023\222\033\036\325\277\1774\267\330\216p\263\277\202\035\265i\207E\261\277\251xD\005 \234\254\277O\312\312`\025Z\323?\365\322\204?\342r\321\277\r\225\306\016\031;\304?\006\256qB\246E\341?Z\271\030\201\335\002\273\277\317\362+<\321\036\320\277\234D\006[p\332\231\277H\270\3247\311\034\316\277F\311\302\367)R\306\277\312\210w\037\030\250\322\277)\315\247\324E\247\214?\325^\016\354\363#\307?\322\037X\200\362w\320?B,\235\0248\265\252?A4c}2\271\240?\\\010X\362G=\243?\204\013l\354V\376\330?~\246\377\351\247\221\322?\365;\335U\212\031\321\277\323\305\247\335\267\276\265\277Q!\220ab\206\316?\322\260\301\362\275\215\262\277\305yg\374Ed\247?*c\255\022\363n\241?\332\264=\340\315\005\233?\331\266zL\005\320\261\277\264CD5\3343\256\277r\235Z\333b\370x\277r\350~[\222\306\343?\327!\006\374\025\365\243?\255:\033\221\227\202\242\2777k\234\036\325\313\246\277K\231\231\025\270\214e\277\217\004\251\333\306B\305\277\025\325\'W\021\214\314\277<\200q@\017\037\241\277\201\225\363su\006\271?dj\334\"\201a\301?\327\223\255ltK\273\277\266I\233\314\\7\306?\005\023([\303E\217\277\3744\232\007\3547\327?\317\263\"\264/\301\304\277a\347\356$>M\301\277j\000\325\030\256\340\313\277\243\003@\347\024G\316\2773\210\3779\005\234\301?0\263\023\204PT\272?e\260\233\020k\256\341?\326H\355\360\301i\226?\374\251\307\247\331U\251\277\252\231\267\302\3052\313\277\251=\002\312\350\\\254\277S\227\007\005\316\307\316?\224Q&\227\\\210\310?x0&\3677O\214>\320g\2469\276\304\266?]_\332\240\376f\322?\321\204\2022\024\243\260\277\251\266\351\263l\322\252\277\302\330/_\\\205\304\277\242\313\252\020\006\207\305? \210\262\033\027J\324?\037\373\320\302\301\000\215\277\177\3619\317W>\311\277U\326RjxM\301\277j2n\007Y\355\324?\306\237\260Q\211\211\276?U\2320\275\001\336\211?\203\3217\356;\177\274\277\300\362Ik\353\321\314?\334>\334\017i\373\340\277R\207\314q\214\025\266\277\366\313\273\227N\016\234?[<H.\227\232\300?\314\270\347\201p\323\301?\377\242\242\256iY\312?\204l\216;=\373\312?\262f\310\234&\036\260?\250\350\374\241\013!\320\277D\031\242\306\002\020\306\277\256\252\"E\205\373\236\277*\201\245\3277\306\300\277\223\205\205\263\004\275\273\277B\010\375\357\345\232\306\277B\275\\\031A\372\334\277\221\240E\375\264K\316\277\3610k\234\264S\342?b\316,\346DZ\331?\245\310h\337\007\t\325?\323\210\366\310\332F\320\277\202\016\327\212B\211\274\277T\026-\353|\372\321?\005\013\340\025\357\321\206?\321\200\201\215\031\203\302\277l\017\020RT\301\327?\024\362\316gS{\302\277\344\243lC\247\262\314?\375\313\215(\275y\324\277J\371\350\030\312\212\312?\272\256~\266\203x\326\277W\374`Y\025[\270?\177M\323\261&\321\312\277rU\010\345$\217\315\277\300`/\332b\220\302?\342\330\271\037Ev\304\277\263<\322m\033\270\303?\246\3110\263\255V\260?\346+\373\375KI\323?\252\240\030\312P^\277\277e\313r\035\213\313\305\277_\006\263\244\227*\262\277^\345\330\003b\317\267?\327\030\360=\246+\316?C`\356Hh\240\305\277\306K\316\020\036\262\323\277\222tlZ\301\024`?\023\360\177$\370}\276?\370&3\374<o\310\277\223]\005\037\263I\301?TY\217X\317\177\275?!\277\213\241\307V\333?m\020\031r\255$\321?>\207cB\205C\300\277:\251\203a\353E\312?Xt\352\014E\034\302?n\210=\333J\204\330\2771rC\013\007j\324?\033\013\314Y.\215\320\277\210\023\374-:`\315\277\211\320\3573\036v\250?\244\252\307c\'s\332\277o\222\322\020\272T\331?\005 HM\362\372\321\277\261\000\347\270\002\365\236\277\366mg\242\300\272\250?^o\264\007\270T\321\277\372\000\371\202\321\231\200\277Yt\306\253\222\217\322?\276\242\004X5\017\333?\333auP\314\204\304\277<\2000\243R\236\270\277\247\220F/eL\245?\252$2xYb\300?\342\221\022\256\346L\303\277\244\224RE\363\361\250\277\217\302\226@L\225\300\277g\234{d\237H\324\277\311\002\341sf+\317\277\222\n\242\006\262\t\317\277{\200\342\321\267\202\234?^\237\274\017\337\245\273\277\032Iec\237\350\315\277]V\211\275\327=\240\277`\251\314\013  \270\277\201\206\230\306\2172\265?\277d3\226\023i\241\277\234y\303\233n\217\244\277\231\305\361\031jP\277?j\307\277ul\232\302\277\376\007Oe\354\\\267\277\326\272\021O\315\305\326\277X@\352w\225\323\302\277Z\272\347\360\311\212\307\277q\355\372\307\202\243\320\277\254\225\331\332\337\t\306?\302t-\230Z\306Q\277\313\017\337\036\220-\327?x\337\357\241\322\302\312?&\215\372\032M\245\322\277\342\334V\246q\230\307\277@e\"D@\315\272\277\312\206+\346\237\027\271\277\353\353a\303\324c\331\277%\312>\243\"\371\325\277\325\317\302\371=\210\250\277\036\347\003\342.\337\300\277]\002>\037\027\364\221\277\241\303V\247 \"\317?\021X\026py\277\200\277\266\213\350G\240\362\267?\365\301\022\034j\201\331\277\245\017\352\225\254\013\206\277\210\263\363\006\367\377\244?\257\337\371\024\344\321\324?)\007L\372\037\262\252?\270F\373\025\350\352\327\2772b\215\351?\270\306?\274\232\"\002u\022\311?\220\325\016\276\321a\320?Y\227>\377\035\242\255?\267\371\356\364(\203\322?\327#\025\372\257\370\212?\232\270\270\231\362z\271\277\240*[{\0105\325\277J}2\353$\363\303\277\3342\221\022\317\274\314\277\022\036\224\356\224D\305\277O\2045\333u\360\306?^\253\\{\177\312\300\277\243u.\017\353.\323?L\363\\\343\213\205\304\277%T;\037\347\033\312\277\364\343\215\274i~\245\277\350\275\341vsL\275\277k\324\325\340\343\312\241?U\340L\303\212\337\273?\027\263\231:\244\310\301?\2672\217\332\013\245\307?\010\355A\241\033\247\315\277\2707S\210F\010\267\277\366\004\363K{\362\301\277\314\217\210\212n\330\245\277S\277\013\357\177F\311?K\230FX\301\236\332\277\307\211\025\315\342&\334\277\232\257\204u\253M\275\277\264\213\027\363\243\314\315\277\372@].\264\205\307\277\316\020\244\251\344\240\272\277\233\236\22428\030\306\277a\200\230\226fg\267\277\330\242\356m\n\304\262\277\235{F(%\271\304?\330_M]g\201\316\2778\364;h\327#\226\277\314Ztd\243,\303\277\332\321\335k\"|\264\277\244\272\373\255)o\247\277A\371N]\263I\252\277\340\240n\221/\275\310?\262\020\017\205\356\036\270?\321\014\337\034K#\312\277\021%\230\217o]\317?[\233\264\331\271\303\270?u\006\305\3473\030\277?\251)\033=\230\000\322?|\306Ys;\240\245\277DN\216\2305\251\304\277A\357\327\323U\027\317\277#Z\024\201\032\327\321\277\017q\016\352\363<\324?\352\313#\245\351b\202\277\366\035\236\335\372\020\315?\220l\367\303\277\263\260?\001\035\r%j/\257?\0018\273\335\332-\326?\260\033\227\030\242)\302?\n\201\r-0-\312?\3272\355\376>\341\305\277y{y\305f\344\320\277\273\'\357\010\363,\311?\224\2514t\231%\225?\371=\242)\320\221\312?\026\0239\310\243y\307?Ty\243f\035<\265?\275N\371}\277!\231?\007\213\025K\226\231\344?\'\r\t\rG\031\317\277H\216l\226\270\214\306?\201\305eg`c\307\277\345A-\014\315\030\220\277<R\312\322\035\221\275?\241\325\t\007]\014\270\277=\245g\204\030-\267\277\275\254U\201\350\361\256?\331\013\300O\314V\270\277\020\366\244A\205\316\324\277\341\036\276\177\223u\271\277\363d\204H \005\321\277\025y\224+\356\277\263\277\020\307\246}\274N\312?\367z\265t1\020\253\277\354\324,\275e\007\321\277\337&c\214Y\236\266\277o\224A\306\373K\262\277\336?\200\246A\250\216\277k \023\325\212\n\300\277v\025[\340\276R\317?\216\236\327\364\222\206\333\277xVV\326\327&\274?\354\264\364J\347\322`\277m\255\0347|\234\324\277\031K\274\355.\335\222\277\242\356\027o\213E\260?\233\026\024\027\342\332\271?\262ro\014\204\351\317?\016nF@|\203\340\277YJ\234q\210\275\267\277X\265$2\370\341\277\277\325\233\311B6\346\301?@\370\300\211A]\321\277\315}\276~\311H\236\277\210\201\376\216\366\235\252?\202\331\226\213\004\344\310\277\333\364\2518\314_\270\277Xm\234\2715(\263\277\320\332,\227\247\210\306\277\342q\352Hx\210\314?\212\304hh\327\021\304?\215\362\020\363i\265\275?Z\300\035\236\226\306\327\277\344\351\r\241\260_\311?N\240\010\364\005\341\353?\316\201\325\205\335\220\305\277\037\004h\250\246\347\305?\260\310V\007\266\022\271\277\222F\244Xiw\245?\361\2708\310\222[\331\277)6]S+(\272\277\347\003\321\214\242\036\307?\'\242\353\355\261\013\270\277X\242\377\300\007<\313\277\315{o\027\312w\313\277\215G\347\223\215\210\262\277[\r\n_\014\245\273\277\222\230J\320+\263\265\277q\242Ax\234\t\340\277\254!1s\375n\275\277\221+\243\211\262C\223\277i\310f\273,<\254\277\270:\322\312\372\217\314\277\327\26172S\314\307?b3\001\006\031\262p\277]V\017\021\362\204\307?\263\325b\265\333 \254?#4\316\361\240d\241\277\0346\002n\026K\262\277\372V\342F\002\250\253\277\371I\240\255Sm\277\277*|\003\220DH\314?\371\021\245@\366\014\262?\370\373\264gL(\320\277\356<\340d\304\017\310?\033\340\315x`\021\275\277\220\362\334vM\325\273\277\220\325\263s\031o\275?:\325\331\262\203z\313?x\324#\247\202\014\330\277\3454\022g\rT\324\277S\222\026c\016\221\226\277\307+\322\242(\321\321\277\255&\326D\307\272\300\277\007\215\035\372\360\017\310?\024|\255S\017\337\226\277! \013a\2053\320?\302\216M\245\365\037\326?\327-y\"\307\037\332?\013V\3038>\252\240?\024\306\272\352c\"\227\277\351\252\211Z\301]\326\277H\005\010DE\234\270?r\273\\\340\374\363\325?\260\'\241l/\346\263?\030x\363\376^\267\250?\240d)\222\307\214\312\277\030W!\2234~\311?{~\207C\235\260\324\277-\270\2040J\314\352?\026b\366\210\337\002\332?\033\271\330\263\225\227\310\277e\374\230\251\341\"\311\277\332\024\340\210\326r\324\277\270L)gZ`\300?R\332L(\314\353\242?;\253#u~s\312?t\374\255\306\022\350\246\277!\243\352c\352\220\340\277\332|\025\013\213U\321?H\252\302\312W\177\256\277e\337\020\364\275\375\321\277\206`\243\361\n*\237?y\344\274\360\227\013\307?\2014\013WB\345\304\277\204\272\300rM\354\252\277\354\324]\334\256\033\340\277\"\312a\007\026\010\301\277\220\304\025\223:J\316?Z\311{ym\022\257?\273K\332/9\347\256\277\036J\300\325\215\022\321?\003\362\337\247\345\355\300?OY<b\227k\247?\244[\361>\356{\261?\304\2734\006g\321\276\277[\253\2759}~\303?\'\244\215$\217,\276\277\251\251\'\374\232,\252?\321\006\237\330\260\315\266\277\177\000\346\240Y\242\334\277e.T\204]T\302?\277L\231\342{S\243\277\026\237sm\324\037\306\277p\255S^\235m\300\277JQ\005]\301\334\305?\350Arm\261\010\313\277\270\206\305+\200\000\320?;\227\351\364L\035\273?\341\353l\203_p\344\277\351{\276\265\030X\313?\247\311\3602\t`\321\277,\232\0227\334\353\304\277\326v\207\017\311\n\325\277\230\246\240\310\252R\263?e|,.\355\246\304\277\217\203#\257\256M\231\277\327R\325\017\331i\274\277\\\021\n\0261\202\270?\266\276~\320\217l\311\277{\327\2328\233\260\276\277_c;\257J\032\201\277T\256l\003\377\363\322\277\024\375\253o\275\252\310\277\256G\216\274o\211\316?\200\022+\220mE\243\277o \260tOB\322?\230\340\345d\265\312\352?\254#E\251\036W\277?0\271L\016f\344\261?\345\003\274<\007\200\270?\000V#29F\316\277\322X\244Py\223\247?\255\345\253\224\210h\303\277\266\3136\253\242A\222\277\010b\270\335\2129\245?Mr\245L\270_\255?\223\021\177\027\257\001\306\277\2655\215\324\035=\323\277\365\245|\367\213\367\263?aG\346!^\033\331?"
      }
    }
  }
}
node {
  name: "normalize_element/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\334\331a\261\021?\241?\223\330\317,\201i\314\277G\n\344\370\313r\316\277$\035\357\347\006\215\301?\203\365\214\256zF\227?k4\030-\225\305\325\277L\373\240Cu\234\272?(\014>\324h\302\253\277\034\306DL\343[\276\277\270\371\277\375\307\231\252?\n\305\004k\246\020\307?\204\226b|\245\305\260?\372\232X\250E6\302?fKz\363\033\324\266?\'l%_\202\357\305?5b\334\360\356m\314?\216\321/F\215\357\307\277\312\007@\025\\\314\276\277!\365v\022\375\307\327?\t\315\371m\200\025\241\277U_i\016`\301\304\277\301]\253\200o\223\265\277\273\277\212\2272z\243?B^76I\017\303?;!\374k\002\212\321?\346d\013v\375\305\310?+\255\342\276\n*\310\277\354\324\312\315?J\241\277\367\323\346w\217E\321\277\035\212l\027/\254\315?\375\373\362\210\312\321\262\277\010\013\344^#\033\267?\252l\367\247\355!\254?\017V\234\t\317\203\304\277~\020T\263[>\263?\341\222C\215\316D\345\277\263%\367\267>\322\316?^Y\014\020Z\362\311?*\265\032\230\n^\243\277\366\007\367\216/\221\265?B\302\3361\316\"\230\277\263\034\235\230\243\243\304?\346bRy\007\256\307?\371\357J\321o\353\200? \030\202\364\332\245\266?j\303\350\002\2327\264\277l\322\337S\246%\321?v\235\250\340mw\320?\005\220\341+\265\212\326\277\361\220\275\214\251\004\322\277\2048\372a\221\014\326?\337\357l\2719\214\336\277\216\000\255D\212\001\300\277\227\253w\377\301\337\300\277N\264\220\\\330\254\257?\367\020C\351\201;\277?n#\334\202\261Q\270\277\026\346[\021k\353\213\277\3654u\356\257\177\301?\350\254y\010\241\362\237\277J\326S\021\037$\204\277\207\026\367\2129p\276\277&fhZ\350*\301\277\255?\347f\005l\235\277\364\332\346\260J\337\274?\007\307Sf\025e\266\277\3237\352\340\305\315\260\277F\376P\271I[\306?\017^\021>\247\252\201?\276TQj&l\310\277|\330X\270|\207\260?+dH{\036\216\325?\225\007\262\227\320\240\302\277\324\324\340e\025\353\311?\311O\200\373W\375\241\277\377ZCH\026\305\322\277f\322pB>\367\202?\310\251\313\235\274s\273\2774>Ch\010^\322\277\223\034\316\222#\t\223\277\367-\225\0103\262\304\277\260a\371\006f\360\235?\016.\274e/J\321\277\366\n\246\344{\252\306\277>\362M\017w\321\270\277\337INJ\202\361\312?i\360\023 \262\331\335?]\216\357\365]y\257?\326\342\",xl\301?7\346)\271\275\360\316?\340[9d\347\035\303?\2648\375\270\373\233\267?\364\315\342y\177\231\265\277?VM\224\241\226\200\277\000\214Z\0304\020\317\277\304>\374\260n\277\260?\366\227\251/\325\300\246?\242\2405.\277`\226\277\352\0216\311\341H\260?84Br\357\223\317?A\266\242\350t\372\314?j\235\037\327\347j\275\277\037x\217\005\231\343\301\277\323\013cIU\"\220\277N\377\374c\202\316\320?d\262K\204N\337\305?\031\345\221\023)\261\275?i}\256\026\277\030\306?\331\241\0105\273\333\250\277S\\\nl\333\r\263?\016L\310;\356$\304\277\213\363\303\337\177O\236?\216\237\r\031wE\314?B\240\231*\316\031\266\277~\033\3230X\000\265?0\236~0[\217\326\277l\241b\326\177\214\300?\267\003\253\'\346\222\265\277R\014\323+\211\233\306?\310l\334\206\275\205\265\277\264cWD$\034\245?\365\346\240(Gz\200?\237\0010Y\234\356\224\277#,6\350\245\357\315?A\231<NN%\254?\364\267s\327\260\214\302?\274\244\037\0002\177\277\277q`\211\304\230\371\266?\261;K\370\203H\304\277\263^f\245f\365\343\277[\201\372b\371\207\325\277(\276\003\013=r\320?|\352i\343\271\035\336?>\323\231\320\207\232\301?\363\272\006HC[\200\277\326\303QYH9\303\277\220\276\323\355e!\201\277\301\263\337u\'\031\304?z\202\325\347Rm\323\277\350q\365]D\r\300\277}\221\306B\200\010\333\277T\321\222\365Q\032\303?\367VY\203\361\202\310\277\302\207IL`\007\230\277M\037l\304\272\351\313?\316\234\r1\244\017\302?_\371\223\212s\236\322\277v.w\202\227g\322\277w\207\034\361\360\004\304?\336\370\373\2709\021\305\277%\353w9\257\344\260?q\373\326\212?z\274\277\021\255\301\034\022\237\310\277\335_\177\225\321H\276\2775\234\330C+M\272\277\335\tOI\263p\274?1x\324e\353(\256?#\301s\365\251\306\240?xa\223U\035\\\275?\362.6\017mn\272?\"N\006e\037*\240?\257\272\013\013&.\307\277\364\266M\243\017l\272?\321W@\357\005\307\300\277;\317^\373\363\205\241?\213[\223<o\220~\277\234\231>\n\021~\251\277\016\235\021$\230\243\301?\032\177h\215\201\216\264\277\2119\024|\362\210\320\277\273\206\202f\236vP\277\005)\201ND\002\273\277{a\003Kk\026\303?\323*%R!b\252?\354\232\024\273\317\307\255\277#\347\257Y\270\230\311?\020\366\032\020{\274\272\277(B\375\211\014\300\306?\007@\001\"\004\252\256\277Y\2241 \310\355\317?\030\217r\025x\202\202?\242\276\014\tc\205\324\277\302\025W\3321\216\244\277\240\345\303\271v\277\300?\177\213\316\364\313l\237?4az\037J\326\276\2777\346\027\230`v\300\277o\212\205\245\005\317\273?0\247\220\322\201\364\263?\324w\370\332\004\'\247\277X\224f\2116\225\277?\210/\255\344x\207\260?[/\007Ga\251\316\277\270\001\273\247I(\303\277u\366\217\274=O\273?\303i\365\250\036\340\267\2779\027V\264y\275\225\277Th\'\365\330\367\245\277r\215\314\276\304\212\276\277Yy\315\177&\246\253\277\337\266\262\277\033h\303?\241\335B\256\356v\230\277\230\265F^~\303\240?\032\002\373\230\274c\320\277\227\250\013\345\301W\304?\337p\347\366\361\017\320?\350/7k\035\025\244?Ot\244\300m\346\220\277\251\262$7\205G\315?\3647\245\267\344\227\304\277\252Z\373\246\263\224\276\277q2p\357\211\034\245?\327\363\373\370\203\256\306\277\001\322\250\003\336\001\322\277b\242O(!\315\266?\\a\257\260\316\027\321\277\003\347\003\253\231\330\202\277\355K\221\307\241\316\325?\346\342\233\217\267\223\341\277\342\361\346(\177P\313?\251\262p\356\252\341\231\277\346\254l\236\3130\270\277\tl\016;\271\263\201?\375\325\\4_P\204\277g\000\274FQg\262\277\351H\214\337\235\334\246?\363\355H\253\217N\330?\372\361\213-\311\330\311?\317\340\333\330H\241\225\277\025}^\017mI\322?R\201\322mP\224\205\277\255\243&\307?\036\301?\213f{F\262\177\300\277A};\232\355\272\336\277\017\211\300\370^\301\274?s\024\270\272\335\227\276?\265\215R\327\323\333\303\277\351\240\007\356\021A\311\277\r\233\202\2413\357\320\277\004\274\241\226\324\242\302?P\205\366\354cT\321\277\0001|\004\311\324\304?\324BP\241Ta\254?\325\030\375\177)\257\246?\'}\321\265?(\316?\212\021U\272}c\331?\231fg\372\207\360\264?\313\267\224\r\205,\303?k\001X+\362\035\211\277oY\021\331u\250\245?Bu\331T\307\205\303\277JI\252\356\354\010\240\277,\211%M\356\007\301?\212\347\231vd\227\321?\260\313\351\032\001\242\234?8R\260\354B\260\332\277c\206\006\256F\020\273?\360\340b\3707P\266\277L\327\301\333\254\221\302\277R\376@\271U\236\216\277\365%\236as\270\320\2770\372=`\340\315\252?\234\207\2505\177\262\255?0eh\005\364\032\326?\206\014\214i=\301\265\277\036\254\262\033b\254\331?v*\270v.\\\265\277B\246\033-\365\364\302?1glXD\003\305?;&@}\221\261\257?\220p\345 2L\304\277\375B\257\226\265\276\262\277uNe3D\215\314?\366\001J\245\350\026\266\277\331I\212\305RG\220\277\357\230^\222,3\274\277F\214\033\n\021\310\303\277k\276\250\337\351B\310\277*\'fg5\376\304?\216F\253e\017\346\301?\337\355\032H\327\010\303?\363\355}\212\332\334\245?\373o\350J@\212\304\277=\0328\212Nt\300?\243ML\323`\334\254\277?q\264\323(%\331\277\366\226c\344\330+\304?\3042\266\231~L\235\277\034Dw\037]\204\257\277\300\211\306\027\031f\266\277Z\354\317\354J\313\232\277\234\250\366\2173Y\321\277\212\2613gg\253\275\277~\275T\332\n\035\326\277\001\3373\032\357k\325?\375\374h\2128\254\223?\232\033\\\375\003\272\277\277\225e\210\366?D\306?\343QF*#\237\261\277\222\357\027]\276\360\317\277\356\325>\351Q\310\316?\274\037\210U\220\223\276\277\346\025LE\207\304\302\277\t\354\271Gx\273\244?~^\2203\255\351\301?t~I\007\233\025\330\277\352\010E\217\220\247\266\277M\313\247\t\270a\324\277+\340~\206\335\351\240\277\220\n\021\345\275\304\270?\023\004\3260\266\277\317?\243\223UG\031\017\270?o\355n\370p\037\254\277\324\002\23314\317\303\277\001\274\243\366\352\363\252\277\267FdEW\\\320?\242qRh\316\030\216\277\214\314\200:\207_\237?<\\\267F\003\325\300?4\366\240\2068b\246\277\241\345N\241\200`\271?\257X\352\327~\302\265\277S\346\r\177\002\323\323?\326\026\262%\007B\266?;\016\020\215\240@}?\346\021i\323\016|\275\277\355\005|\243\2634\217?.Z>n\332L\257\277aL\3776\243\366\320?\033\213\274\263B\026\306?BX!\330\306Y\323\277\307\325\273\036\316\004\265\277\245\265\200\311\007 \321?c\340\022\340e;\304??\371\316\274\306?\315\277\026yK\331><\272\277\315\025\034K\254\261\267?\204\234\013\315\313\237\314\277\251q\360j/Z\242\277\327\240\271\014\331\220J?7\002\010n\364\022\301\277\377!f\361[\266\325\277a\0066\317\035\236\246\277{\353[u\225\221\212\277B1\257VU2\273?\271\332\272\301[Y\334\277\342\363\366\265%\377\302?\206h5\363\327\027\313?@Z\026\365\014e\324\277\303O\250B7I\306?\361\224\253\200\276\312\270?\216\210_\'\013q\323?|pI\002\362k\264\277\\\210\3244\023\227\262\277zY\212:KJ\271\277\374&\337\226\362B\242\277n\231&\207\027\204\303\277)1\327}\025\212\223?\t\233\302Z\377{\243\277\266)L\202\005\305\276?B\220\371-T\233\335\2770t>-\013\306\211?\371g\001[\225w\301?\023\315~G\345s\217?\026\332\376U\313\003\302?v#\371\312zc\312?\224\346\266\236\344\223\305\277\311\312\320E/\237\304?\317n|\241Y.\201\2779\324\201\312\342\315\275\277\365<\356`C\255\241?\034\331o4\212\363\314?\221\310p\231\177\331\222?\031\237\016\221\202\375\267\277\251\251\326[\261\275\305?\371.\300\r\205u\302?\257\225\377\204\354\351\242\277E\213X\233\233D\305?&\003\273\273\223r\274?\342!\316i\303y\315?^0\\[Z\013\344\277?\364\250>\251z\275\277\327\030\022u\351\211\274\277\321\225>\374\300A\311\277\226\322\266\267\362\306\300?\032\200\206\325$F\265?\205\253\213\200#B\267\277\226Y\224\320\273\007\301?\003,\211S\332\030\270?\262}p\034\300\223\257\2777K\236\324$Y\306\277\007\275\364\004\303?\301?u\230#\240zY\262\277\r\204`\013d\262\326?z/\206\374\353v\341\277\255\2642K]l\253\277 \202\333;=\233\240?\025\2204\257Z\326\267\277\243\321y\000\207H\206\277\234\250\365`\233\244\265?\344\264\301\361,\302\245?\227&\2449\332\373\301?\224&\220\252E\314\264?\306\324f+\\{\250\277\2121\261b\3563\211?\365:\251q\324U\277?M\025\204\3255w\330?\376\354\205\331\3169\273?h&-\030\264\263\322?M\030\336w\206z\244\277\034\t \273\005\373\275?\\m\177D\035\021\200?\234\240}F\r\212\304?&\020\305\214\326e\305?<~O\331\327\373\274?\307\351\322\035X\211\312\277\t\200\321\'\272\024\261\277\236\332^\234\231r\273\277\014\317n\373\247-\211?\265\003\213}Oz\305?c\320t\227\322\210\260\277\351\013\227\023\0002\237?V\222Y\010\342\034\246\277\t\337\317\262\264\334\317\277\227\302\022.\225\353~\277\356\216=\300\030J\307\277Q\232E\357!\356\306?\315\016\330\374\027\214\210\277\266\244F\377\217\367\323?q\372\366\266\r\357\221?\035 j\372\006\000\225\277JH\031\204\025\334\307?x\226-\301\013F\227?\346\270\205\373\"\241\230?LD\310\361\263R\262\277\250\256\312Z\262\233\301\277\215\225\214o\206{\257?\273\014\177\005\235\311\324\277\236\350\262d\261V\305?l\013\314\342\256`\303\277 \346A\373cb\223?\3167\020\321\232C\261?@\027\237Gm\231\261\2778=\313A\304\360\302\277\037zN\004\333\367\256?\323\222\202qf&\271?g_\177 \225\270\234\277\374iu\377~ B\277\334\002\372\377\321\222\323?\361\267\203\313d\253\260?i\230\032\375i\367\272?\014\336S\375\242\031\305\277Hc\201\234\233\222\215\277L\206\325\221@\004\261\277?\373Ls\034w\276\277\003$\023^a\277\245\277h\324\243\377\314\253\274\277J\326(\273*2\303\277\022y\260t\001b\330?v\364q\006\276\303\230\277\021\264\212t\005\037\300\277w\333\206I\234\226\303\277\252z\277G\215^\263\277aS\306\341\235\206\311?\377\020\306\364\030\205\267?i2{\241\215\354\266?y\332\025\375\020M\246\277\225\314\177\206\375\032\225?\325\177\332\261(_\267?.\317\277W\177 \304?r\345\324\245\n\212\244?\240\350ak\354;\266?\213\333\314\342O\340\255\2771\221\242(6l\302\277\023B\327>\217_z\277\'JzU\021y\274\277\251\330\212\000U2\276\277(:\245k\023\217\315?\027aA\205\021\261\222\277\317E\240)e\216\304?\204a\0304*o\310?\335\027:\010}Z\302\277{o9\331\t\210\314\277\026\303\323\376T\005\252\2774\014K\233 \330\244\277$RP\255\213\350\221?\300\260\271v-.\300?\274\313GM\017w\321?\002\201\020F\325G\274?F\261\305\022\311\373\244?O\364\243\231h]\312\277\200\211y\234i\327\302?\334*7\227\303\362\320\277\233\346;t\t\322\315\277\302tZ\002\006\026\302?\253\355\302\253\336\177\270\277\304\327\323\003KQ\242\277h\220+\262\264\014\317\277F\241\027M\263L\323?\201}\226\020\n\251\263?\2566\342u\337M\270?\311\211F8\005\022\312\277\'\317\200\377\342\366\307\277Oc\177\005y\323\325?\200U\373\317\265\007\320\277@\345\307\206\005q\320?J\364B$\343C\302\2774\007hT\260\214q?\016\007\215\302\355\t\224\277\202L}\256*|\262\277\010\213\277q\354\223U?2\273\003\346\2613\204\277\003\353Sc\000\367\270?\215\370K\270\205\004\263?.\366\277<T\360\260?\221\332\301\\\355\031\252\277\366\223\025Q\326\r\307\277\276\037\235\202\315\201\307?i\304\213~\333^\301?\004\001\364mL\213\326?\31325]\226\350\305?\374\300\241\352$\260\213?\314\202\324\204\260\010\316\277\252\230\361\273\233p\266?\364\2573!]\325\274\277\203\230\244\266\234\244\245?\327\003\243\252\362\206\244?\000+\303\t\213\036\321?\031X\0103h\002\210\277niB\354\317\354i\277\010Q\026.\374(\266?\263\250\026\241$\030\276\277q\324\206\3173\250\265\277\025\r\337F\231\220\260?\021\374\330\323.\261\264?\376\\p\247\367\233\271?\302\354r\253\260\351\225\277}\r[\372\002\021\244?\264\231J\313\001<\303?\264I\361\274&\223\306\2775\371$c\001\322\341\277\273\325\242\324I\036\315?\304\025iPa\324\303\277-\272\332\303\030\317\274\277Cq\212#\227\331\237?=:\246\251\315\252\270\277k0\252e\335N\233\277\027\300x\303\037\020\304\277x\"W\314\277\261\200\2775\323\261\212\213Q\271\277\276\212\314\251\363\005r\277\214je\355\323\222\227?\203\266L\031\\\022\300\277f\375\035\031\020\246\340\2772\232\351\307r\365\267\277M)\316\014\023\243\274\277Y%\361\236}\301\276?Q\245\215f^\273\263\277\233\22515\030\177\251?\203{\202\3775\252\315?\235\342\272\321\221\340\321?\035kp\215;\324\273\277b\310\2619$\037\270?#\341a\354$\266\266\277v\006\270/\233\203\317\277\"\243@\002\t\335\251\277X\036\244\343\306_\246\277s\325\327\275A\232\267\277}y\001\216V}\315?\323\362\275\255\2311R\277\240\350\334^\213\337~\277Z;\332\177\374\241{?\271\260\300\363u{\242\277\205\345q\245\231\233\302\277o\236)\340\2048\273?\014\264R>W_\316?!T\371\372\177\301\315?\035z\010\247\000Z\321?\352\311B-\300\001\301\277\264l\362\354\365\360\254?\324\301\272\027\263\203\300?\354\220-[\237\005\276?\333F\225\3371=\302?d\315\347\371\020\245\302\277\211%\031\212\005(\322\277\257\024\365N*h\260?T\355\315\212\230\022\242\277\224C\270\322\214\275\271?\2178\357\005\234\216\234\277D\\\325\214FC\300?U\271\371R\013\376\312\277\225\301\303w\204\013\223\277\253\315\272v\206\312\204\277\315\"\254jz,\302?w\342\346\221\361\211\276?\266\311d_\355x\235\277\260p\2758\024L\306?\200\265\366!~\271s?n\211:\377/F\243?\"qW\310X\017\267?\004\341\322\336\022\206\307?\036\371\314L\021k\321?\356|\356\221\300\205\310?\237A5\004?\030\300?1\255\027\325\347\233\305\277\316\223\020\033z\035\241\277\024\\\201N+\204\315\277`\246\214{\313\312\301?\323\017\244\240(\305\230?1\005\224\263\274\321\271\277\022\277\031=\360\275\265\277,f\266\362\366\205\300?\233\215\270z\367\263\270?*\257\317EG\227\271?\220\265\031\241\364\223\240?\021o\200\232\375,\266\277\363\206__\320\364\263?\331\331K:f7\261\277U\002e\342\340\374\271\277\232i3\355\240b\305\277\3560\352\251H\031\273\277\330]\365*\347a\245\277\016\271CC\225\343\321?\264\345W\262\223\031n?QQ\205\257\365\362\271\277\201\030\246]\367\r\300?\020\342\356\334\022H\307\277\207\374\331Y<r\314\2771\021\225\204\302P\273?\373\220\240\307\364\215\204\277\037\237\324\022U\374\273\277\340\226sh\300\t\246?cR\206\323\354\\\230?\020!,\306b\235\300?f\007\032X*\366\274?\363\312F\276E\257\264?]/\034x\303^\254\277%\243\317\346\347d\304\277=\274\254\316\360\363\300\277\213\264\351{\274V\226\277\241\207\245\271\"Y\272?C\227\025\334JF\320\277w`P\377\310\247\351\2772\277^G\211I\246\277\2575I\213\343/\311\277\017\177\245\037\312\261\240\277u\320-$\325\036\274?\372\007}\031V\001\305?8\241\362\336\316\355\311?q\206\030Q\320b\321\277\260\336#\236I\311\244?Y\273(\323\2131\207\277\344M\356\260\343\247\316\277\260R\005\230\320\323\266?\345\353\343\321+9\323\2772\265i\350\240C\266\277e\325k\333f#p\277(I\336\362\247\324d?x7C\245C\332\250\277v\315(\223Q{\311?P\224\221\322\225\371\233\277U*\365\016\3764\304?@ m\312\227\367\303?\025\r\206f7[\275\277\020\030\003\\\272\035\322?\317s\276k\245{\264?\222P\250\360\372h\336?OA\360,\326Q\260?t<K\340\312\217\320\277i\354\301\0055\034\317\277\3104\237z\2205\311?\3347\203\267M\257\327?\3445\032V\217O\300\277\245\310k\245\362b\271?ui\251\352\277`\247?ux\223U\366\203\305\277\211\030\021B\013\305\276?s\206\005\035\347K\304\277\344=^9\242X\264?\365;\n\221\220]\233?.@\210v\364L\217?\223\014w.\272\004\257\277Q6\311\204\273\356\267\277\271\331~\224\374\264\320?a\225\024\330\315V\276?|\t\246X\313\263\265?\306\027\204\023\326\303\263?@\355W\"\324\321\315\277\255F9\251\n\030\275?\312\254eP\217\346\306\277\305\336\001\272\276\233\303\277\272C\242\206^3\273\277\001\376\36337\204\264?\010\231\270\000\213\216\306?]Z\251\217\301\240\275?\034\"cm\020\337\321?\227\343h\277\n\262\265\2776\206a\237\210a\313?\362\344`M\227h\323?\230f[TlWt?T%vt\2605\301\277\300\202J\241oX\316?k&\263#l\235\252?:E\275\355g\334\271\277\376\'`GHj\301\277i\266\222u3\026\304?\217,\325W\323G\334\277\034:\276\234\342o\273?;\333`\223\224:\265?\362-\362\363\025\340\323?&-X/#\006\324\277\233\321\353\201A\334\277?\271\025\324?\367y\256?\227\202\267Ge\343\251\277H(\273\003*\213\246?C~<\363\210w\331\277\373\352\310\346\250\333\311\277\273\350>\314\364Y\303\277k\205\231\204\261K|?\361\3747\225\357$\253?\307\\\203\3534K\264?\222\305I9u\323\310?i\312#$\213t\322\277oq&H\037\242\320?zV\366@b9\325?\200kqk\362\035\202?\360\303%U\367\306\264\277\034\026\371\214n\337\312\277y\323\211\034\366,\305?\030\313\211\274r\206\274?\025\345\264\216_\351\253\277GQ\\\206@\037\316\277\275ktR\263\022\267\277d\267I\2560\322\306\277\246XC\027\017$\272?\016iF\363T\221\322?\353\262\312jm^\314?\003\005\307T8\021\301?z\205\026\263 \357\267\277\225da}\254\007\225\277w\337\232\230\014\215\323?\004\037%\201\200f\303\277\366\306\277\030 \272\352?B\376\2004\006\223t\277\364+\236@>\341\272\277?k\'5\313\025\310?X\360\022!\026,\244\277\347\257\242\224\301\350\305\277\341|Wb\314A\274\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\226\263\210z\027\305\260?\002>A\367-C\305\277\266g\211t\2166\210?LH\343\240~]\266\277\017\324\n,\220k\254?\373\233(I\264g\216\277\313\027h\326\322\010\265\277=\277\375\202\241\241\267?\315\372\350X\320\337\301?n/\245+\353\223\320\277s\325\355+\211;\317\277\004\036\223%\334\273\304\277\035#h8\227~\315\277\257$\324E\211\223\265?\"\236|\205\352t\317?\005i\364\344\307c\241?\202}\271\377\366\024\234?\320\220\307\367\036u}?\n\225\361E\341=\274?1YR\216ff\321?8\357\252Sp\226\265?\334\272\006\034eQ\304\277\331\211\211\360\020\202\313??\253\"\271\300\327\252?\221T9\310<\364\277\277\377\337!;\020D\300\277l\336^\234\347\026\271\277\337\240\021)1\377\311\277Y\257\314\327\203|\274\277\262\004\263x\017\216\235?\264\373\320@Nv\320\277\314w\367sx\202\312\277\270\366h*\002\032\272\277M\304\236*a\331\301\277\335;\266\255\332\232\304\277f*0\306\3411\251\277L\353\026\346\232\231\305\277\265\363\037\364\321\271\240\277\374\234\341\277\246^\303?\377\357\000N\307\363\314\277\261\257F\364\327\371\321?\3145$4\245\302\241?<\267\000\2012y\302\277\031\372Gr\326[\234\277c<\241\326\237\340v\277\277G\307O\200\315\254\277R\300\301\377A\343\310\277/\266\243\202M\253\222\277\367\375\260&\245\253\303?\203\001\310\n\233n\304?\351\234\250\216j^\304?C\t\236\306@\320\316\277=\350\345~\"\\\310\277\201\340\023\327\013\017\305?\206\001\356\207\221\350\242\277_\276\344\343\347\204\277\277~\373\211\350\014n\312\2772\031E\205\321\257\266?\243\374\305f\325\245\225?\314zFu\325\017\301\277\223\030Tz{o\260?`\265\273\373u\252\305\2778\250\3249G\254\233?\315\215\001R\316<\262?\321\220F3\221#\263\277\256G\263;}\231\260\277\351+\212\216\010\360\303?\375\255\\8{D\246?l\340\230\203\342\241\321?]N\222_%Q\305\277$e\301\007\020\224\304\277\035Y&\306\005\374\277?\010\036\376\340!\037\323?\211w\203\240\333\322\250\277}\251\262\025\"\262\300?\037\374\267{\277a\307\277\336U(\342\003\200\240\277uo\210\016\331\336\314?V\007)\375\006c\264?r\316\276L\267\322\300?Ce\032\026p\027\307\277\021\250K\323\344\264\313?\376^G\236\276@\300?Yw*\2432z\205?\212\243\340l\374d\322?\234\216z2\034\003\320?\030\204\221\252L\t\311?sGo\025\250>\240\277\264\201P\305C\304\312\277\373\206\353\332\303u\317?\334\317>Q\376\215\251?:\327\310\351@$\312\2776\265\202q\303V\320\277R\310b\236\364\343\235?\300\010\304\021\366M\301?\315:]\234Y\326\215\277\314\337q\202\207\357\260?\202\251\342\303LE\027\277-\315\032^B\223\313\277\213\0344g\000\330\324?\362\320Wp/$\261\277\210\204\022 \375\325\267?\266{\374q\374\'\303?\030\272\0241v\031\202?\326\225S\207\322w\316?l\004R\003\372T\311\277y\020p\212}\351\313\277>Ax\324\030\332\211\277a\\\354\014\266{\322\277\226\276\334\254Z\314\267?;\207\365\272+*\303?\r\235\014c\331\205\260?\253w\356\310\245\205\314?\360\356{\327\370+\304\2777\377\002\022{O\314\277\000,\357L\202\000\321\277\272K\030jz\025\267?t6K`\363\022\312\277H\257\354\360/\251\314?\256\277\333:7M\231\277\274\216\302\233\257u\274?\325\277\307\246/$\303\2778C\316\235-\212\303?\362\215\037\240_\200\260\277h\030\322\n\331\335\257?\0109\373X\025h\307\277\365\005+\317\365\231\264\277\362\356\302\203c\022\302\277\211\3413Z\256D\312\277\nY\020\302\302\355\317\277\357\322Lx5uc?\326j\332S\362\213\325?)\223ee\r@\304?\014\377\350\277\232\036\306?\013\223\347B\273\370\322?\345\306\311\212->\311\277\236!.\021\377Q\251\277\313J\200\205\241\363s?*\213\214\305\345\263\260?\032\004V\273\"\262\315\277\023\253a\264W\357\261?\030\343m$?\232\321?\204\363\262\375\346G\266\277\226\234\322t\231t\327?p\213N\375L\007y\277~S\337h\212H\315\277\372\034\033\350\023\276\307?\334\341\206\337\340\254\235\277\0005TQb\351\303\277\345\225\013dL\361\271?\2022cqs\303\317\277\231_\342\364N\313\320?\300\004<\353jf\314?\r\327A\337(k\300\277MWdM\005\253\310?\210\273X\217\013\004\225?K\205G\330J\273\261?\322\316+z\2276\315?\313\263-G\312:\243?BQJn\270\305\300\277!\343\354[\235\341\310?AI7\024\215\230\254\277x\335k\250\241]\323\277@\337:N[\225\303?\243\214\247\rGP\301\277+%m\007\240%\266\277W|\004\245|\027\274\277b\360U\367\241\035\220?\nn\211\255<p\275\277\237\307\376\351f<\237?\341>\336\302C[\241?A\223^k\032\341\266?\3432\326\300\226V\273\277\324mz\322cj\305\277\265\217A\220\255n\321\2774\301\007%k\005\322?\344\r\363^f\374\305?\005i\224\262\202e\272\277\325\"Y3\330\210\300\277\233\236r\372\323\237\312\277C\370l\225\315\365\303?K\257\207\364\314F\300?\350\362\232\320T\006\262?~a$\314\220\263\220?t?\032\337\317\020\321\277q\002\320\275\355\"\317\277\251\364\361\001c\t\305\277(k-\333\235\377n\277A\316\231\330\364X\261?\305`%\216\240W\315\277M\357\3020$\024p\277\365\207\374\264\337h\200?\334\343\214\355\235c\306?\263\346\354\221\355K\307?<\351u\212\273@\312\277e |\030\035\324\304?A\254\236\255\3241\320\277\364\323\372\n\037_\315\277C\314\253_\202\030\317\277_\3177(\306*\267?\205$\235\2524\337\317?4\375,c\357S\322\277W}\351\247\277\272\247?\356\273\271\353\034\312\307?\265\273^G\312]\217\277\262\001\316 9b\276\277\273fT\016\342\373\323\277\273\017\002\211\237]\270?f>\tD\325\254\302\277\216\371\003\023\020L\305?\323`qxs&\267?\341\371\031\235\256t\265?\2608zD\r\201\302\277\227\025\'\320\017\237\321?\353Dt\355Z\223\324\277\244#\320\270\246\332\252?4\304\316S8T\252?F/\030\t\3250\330?\177\021\240\305\234\274\262\277\224\230S\361\036+\320?\212\366\010\337\225\t\245? v1k\200T\254?\256H\200\240\3545\317\277\213d\320\034&n\314?\345e\310;\357\321\321\277+\377\275\n\344f\260?W\3743s\276\036\267?,\352\330\233o\316\323?\003\010Z\377\331\314\253?\372\031\220\301\206\267\233\277A\214\316\226\2119\253?\232$\177\317^\363\313\2770\221H\341\336\303\323?\325\030Y=\222\210\254?\206\237\"\212f^\313\277\2238\323\341\362\035\265\277~\002\222\376q\020\302\277;,J}g\275\315\277\027RPeeL\266\277\206\222\270\201\214\364\261\277\005=\032LP\t\245?\227{54\035H\256\277E\322\256\233\372\235\272\277\3629\323\207\234<\322\277\241\024\257\333\004\377\236?(\210\254\355\2230\261?SM!\240\244\316\265\277~\215\334\034\326\275\271\277\362\242DI\220!\305\277\215\314\023\032\324\241\230?\177a\t\275}\371\316\277\3438)\327\256\276\314\277\202\377Z\226m\001\277\277\222\250\341\300\324\027\246?\3467\312(Q\320\321\277\242u\373\211\206\016\204\277\\\333i\325\260\240\270\277\276\035\014}\005y\312\277}p\356\240\272\037\300\277\340\332r\300,\233\276\277\315\224St\236\322\321?\3177\014\3730@\266?\354:\226\020[\323\253?\346\224\221\224\207\276\332?\373\226\032fF$\234?u\253\230\300\245[\300?\3555\247rW\310\304?\233\024\007w\364\331\323?\356h\375\374\353m\245\277\'\275\000sn\n\262?\330W\350\307\330\367\306?\241\325\246\274<\254\301?\'l\375\025Af\313\277\327p\261\202T(\264\277z7\214k\007\224\264?\006\211I\234\254\225\257\277\322`\365\025\252\274\330\277\311\010\003\223\223U\314?P4L\256\253\362\310\277\036\010b\315V\'\241\277\267[\320=z`\243?\233\332\276\227I\002\312\2771\032\374\001:$\300\277\004\210\234\356\233\230\304\277\224\213\224\351\367\301\255?\266\304]\277\371\202\252\277\010\355`}\247\357\210?\363G\014\361\273\261\322?\341Ly\326/\003\322\277+\245\025\343\215\320\311\277T\236\313\321Y=\250?\242\377eD\234\252\266\277t\205\005\2108h\306?\2247\312\353\323@\320\277\241\230\347#\024\215\300?e\300=\300U\377\307\277\375\014\313\241!\260\270?l\315y%\r\000\245?\327\321R\201El\262?\232Y\023$\345Y\323?YL\000q\014\330\264\277F\276\327\263N\304\274?\215ur\353d=\315?\274\363\327\335\274>\260?\003\310\272\007\220\031\323\277\2136\321\312\310\274\210?|X~~\242\232\323?\375\364\227>\344O\232?\347xn\251.%\321?\355,\021\005\377i\310\277\264bR\031oh\253\277\252\247\351\245\312\253\316\277\370;X\331\344\224\316\277;\236\\\3562@\302\277\326\301\364\260\255\341\317\277\355F\212>-\236\210?\361H =\215H\322\277\221F1\315%\367\223\277\232{\345%\020\240\317\277\266^\354\356\366`\305?:\r\200\317\030\207\245\277\033\376\361x\346r\314\277G\032P\251\355\235\266?\215\341\2228\034\314\313\277Z\303\342\027B\243\302?)\007X\r?\223\270?{\033\300\363\201\331\213\277\266-W \351\035\314?\337-\276^\234\302\275?\261\255\361\350\304\271\310\277\343\331\330\362%g\256?\313X\337R\331,\257?\271\310\324\314\"\352\274?q\345\034^?I\315\277l`\213=+\315\321?\203\337DZ\350\355\310\277\315\246V2\370x\320?\232\243\3305\232\014\300?V\226\200\345\226B\261?\201\211\332J\305\330\315?\306\355X\347L\223\320? *\243%\267\004\303\277x\2026\323i\026\255?\251p:\305&\207\302\277&*\255\353\177\210\210?G?\362\022EZ\305?\036-\313\276\251\362\221?\312\320\275\024\034\016\270?\315Q\323Q\244\315\311\277L~\007+\023e\317\277]\202\3631y\303\241\277\324\033\036\201J\232\225\277\315&\273-,\036\213?\255\031\205zO\245\271?\224\014\313\224\272\224\265?\214j\304K\237\244\320?\r\010\334\013\260K\244?\275o\340\251\316\350\301?\345\327\322m\010\225\313?\265\304\370\206\374e\265?&\203\322\367\007\360\312\277\275\201\315&\372P\271?l\345\310\270\256\207\303\277\256\204\230\342\026\201\273?\353\316l\346K\005\301\277\023Iw\002\266\223\221\277\252\314\205\0057\350\265?\207\220\017)\326h\322?\246\250T\247z\231\201?\267}\225M0\303\300?\230\374xG\343\031\264?j>\265\326\031\177\317\277\201Z\306*\035\361\263\277\2064k\354~\333\313\277bW\031\260\266\320\222\277lR\363\215\022\247\255\277\032\213\265z\326\304\306?\244\210\330\341o\331\312\277D\212\204v\215\351\320\277\332\273+\035k\363\210\277\341\215ut\227s\303\277=I,\023\270u\305?\2745\333\271\225\345\263\277q\357\347b\203z\276?\n\367\316\3179\262\247?o\373\231#24\304?\202El\227\000\326\255\277A\024\037\010\004\323\302\277\3761\202\030\272Y\307\277\222\267\0312\277\377\313\277\336z\302<\306\351\305\277\236\246\217\277\237\370\324\277\270\210\240\007&\001\307\277\371\207\335M3\255\302?8\312j|\036\320\271?\310oU\0214\360\316\277\366\3449\352<M\306?\351\024\362b\316\r\320\277\250}\334Y\'9\251?u\"\\:\372\273\243\277\020\014\266\02129\223\277\251\365\221\002\353\031\304\277F\254hZnh\263?G\205S\203`p\266?s\013q\013\315\217\311\277\\\257\273!\242F\316?\276\354m/\370\263\300?.[<\344\361\356\311\277~\203\345)\221\362\326?\366\213\031^;\006\260?\002\252b\304:\223\272?\213Xx\326\004k\233?\315\032\304J}\253\305\277V\2621\320h\004\321\277r\272\361&\303L\314\277w\242\224\321\207e\330\277)\277\356\236\250\037\311\277\023S\250\372\230\303\210??\311z3\375\352\312?l\371Q\350I=\270\277*\364\n\206\305\233\300?\342\253\373\002p\022\263?X\312\216!wJ\275?\320Kn4\345\345\274?\223\'\204\353B+\257\277\036\341\377\224\204\270\303\277+\220g\246\021T\206?;\036\337RaL\316\2774+\034\264\377\233\241\277\216(\"p+\303\230?m\253QN;\004\325\277\313k\306\261\2511\301\277\335\334\263\270\242\307\314\277t\203\016?.\002\300?\206\363\242\006\337\177\312?\212\225\337d\231\273\303?`Y&\277\303h\316?\343\022\203\333sP\271\277.a\326\357kI\267\277\221\324\020\013q%\314\277\234O\236=\221\205\266?\354\241\226\000\216\351\302\277\014\036\213\335\362\323\261?\037\201-n\250_\305\277>^\224\252O\206\305?\246\246-9\210\330\306\277\031T\301\257T\240\317\277\330\016\005\370&7\267?\3655\"yh\341\245?7K;\3534\325\323?\\\364\010\021P\232\257\277+7\333\276\204(\224?\3172h\210_\272\233\277\342\244\271\230\331*\304\277\305\312\206\213\320\034\271?7\022\205\264\247\344\263?\325\261M(ju\270?z\305\343\246\032p\306?\265\020eV&k\263?\303(|t\263\226\261?\032\373\027\371\267u\276?\340\265\213@<\301P?g\305\367,\211\032\245?\220\231\322\025>\017\275\277\353B\223\327\344w\273?}\323\0163Z\332\270?\033a\243\217jm\274?\006\014\030w\"\316\260?C\231\323/x\374\322?\320\242\230\212A\336\320?\234\264]\2223\031\323\277\210B\021\263\'\272\312\277\313\256\210\231\r&\320?\327\353n0\265\364\273?\021\367Q\325jW\316?l\215V.Ow\226?5\243\213\375\344\311\271?\026\242\314N\223\345~\277\n\212\207\306\201\276\262?\231v\227\270\247\026\313\2771\3008\024\250K\261\2772Yt\225\333\330\301?\375\201\374K\373]\275\277\021&\341\024R\036\260?\262k\260\002\025\345\267\2778\026\017)\010L\276\277\034`n\001\231\364\317?3m6K\360*\226?\001\246/\345G\240\256\277&\032\341\372\304\017\263?o\360a\231\n\351\272?\325\325\221\357\334C\316\277\240\tj\261Pw\303\277\343\005M\014?\255\310?\230\022{D:\036\313\277\202g\222\335U\324\305?\342\325\364\243\330\344\265?\"\306o\005\322w\301?\256gu\335.\336\266\277\267\013v\265#L\312\277b\004\367\254\"\177\277\277\375s\267\237C\\\304?\362\201\037\24075\312\277;2\226)\316\330\326?\325(0\240\261\224\305\277\006{. \024I\223?(\343URFq\301\277[\363\364U\323\313\274?\212\316\310E<\354\315\277\341\305;\024\017\340\264?\365#D\223g\341\320\277\013\370\177oS\200\315\277`\\LT?\210\311\277 \277\277n\201l\302\277kD\300\364p\351\272?\265\333\326}\261\312\311\277\257\227\321\231\207}\264?U?\266\261\257\216\310?\021u\252\213\326\235\271?D\335\351\333\202L\263\277m\332\nKx\023\261\277`\230YV\374\001\262?,J\371C\200\200\313\277\314jQ\251\244\213\313\277\333\312\tP `\303?\177\262N\2763I\320?\255\233\354N\313\276\202?,\201\r\363\243\214\232\277\354\3768=F<\261?\304\211p\360\254Q\324?\230/\026bs\035\324\277I4\364\'\330Y\270?*A\255\305#\322\301?\374j`\234PF\302\2779\210\275\332\273\227\326?\205\262\213G\337\311\260?\212\2267D\017P\253?\360\250}\310\204\377\243?\0327l\230\263\304\311\277 \332\333l8e\275?\210\363\020\206/A\276?\337\013\306\\\034\251\312\277\260\270\305K\301\r\303\277\337\337\212p\250\311\227?}\254\3461\007\353\306\277\301\3320\364y]\237\277\317\r\247q>J\277?\240[\225\211\314\256\267?\334\031\030\265$\"\323?\224\204}\024\344#\322\277?!\202\371\203?\302?`\026X\257\325Q\265?aJ\226\274\366\334\305?zXqf\323Q\254\277\323\367@\345\363H\316\277s\246\262\277\026\215\306?\3739Iy6bx\277\364j4\335\226e\325?\307\210\306\326\326\037\210?\007\nD\2537@\253?\332 \232\251l\235\271\277\0232\2344\0374\317?\243I\252\2700-\320\277\263\2627\201\024:\242\277+\023\376\200\260\265\315?\363\206~[,P\312?u\341)\240\213\255\256?\302\360+\302\317&\312\277\244\347\301\267\005\221\311\277\034\340\036\330\016\314\260?W\360\2555{&\261?\365\337\361\370\351\253\302\277[,C\277\272\235\271\277\321aS\307\232A\300\277\207=\237\353\205D\310\277\021$,%F\250\273?\254=\222\316n\224\266?\220\036mM\nX\247?\002\026\232\267\275u\314\277\301\372:\317\001\357\257?<\330ra;\232\315\277`L\332\342\274\236\320?,\320\327\311R\362\232?\253\246\217\252\010H\273?\360|JU\302\274\321?;M\273\241\272\"\267?\324\024\231\302\335w\246?\313\326\346\313\3221\313\277\317\022\2611x\207\241?Y\303,\263\260\365\314\277\365\214\331\244\0233\305?\332\341\345x\262\301\264?.\035\274\035\030\204\266?a\244\005{3\345\321\277b\376\321\034B\201\211?T\263\210LE\322\322?\351\000v\036\266\210\306?u\030~\232\213\226\320\277NEQ\'mx\264\277\314\335\242\377\302\335\313?*\\\314Pc+\320\277\317i]1\305\335\242?\003\261\217\r\343:\315\277\364\026\243,\007\270\312\277\203\317\027\233\330\221\276\277@\244\240i\300\311\312?\223\265\r\327\262\262\266\277\366\304\'\317\226\250\243?\256\211\005\231\331P\233?K\241\324_|N\304?\221\036r\363\257\331\312?\027\212F\257<|\310\277\351i\366\244\373\256\257\277\311N\257p\316\304\307?\211xV3el\306\277\030\240\350\275\337\201\261?2\366\234\177j\225\314\277\221\000\312\251\361\007\310?}\210\177W\243R\300\277\375,\317\256\245\177\235\277\316F F`O\322\277\201\317\212\006X\307\317\277#\363\342\003O\376\314?\022W\023\227\340\221\270?\341\375\234o8\337\316\277\206\251\373\363tO\313\277,\235\310W\334\326\305?\275\r\312,\345,\312?}gi\310\016\252\256?\204\212\242\n\200E\303?\016\325\3472\036y\274?\205z\027\365#\347\300?\366h\272,\332\365\261?\317\013\t\350\031\347\244?E\265w\222\032\374\260?\336yM\375\236b\252?\257\002Q\032\035\016\220\277y\337?\206\305+\271?\"\002\345\001\363\'\312\277\002\210\251B\271\253\321?3\177\344\022\271T\312?\323\257\320L\366*\263?d\274u\\I\325\312\277\377\242\002\031^[\246?\273a\270.}\200\325?\005z\333\235\355\247\323?\353L\333\371\232Fb\277\363\357e\344\277\242\323\277\232\216\004\372\357\023\265?E\347\236\355\r\000\241?q\273\236l\247\220\322?\237\253\366\030\254\334\275?\232\200w\344Dy\320?\033\320\223\222\316\252\253?\013\272\203(o\361\303?\222\257T\335\024W\304\277$\037\306\343h^\312?=\177cv]\253\217?\177\014\375\007(\277\320?\"\251\r\20233\307\277\3443\373\326O\"\226\277 \331\202u\251q\277?E\222\022q\244\272\300\277J\\{\001\351P\266?\220V~$E,\327\277\035\0215\031\346u\255?\231\240\301Q##\306?\001\354G\027Z7\314\277\305a\342kg\375\230?\217\206<H\250\330\305?\230\000T\r\357\272\317?kFW?]\305\275?\025\335\257\364|K\314?\00182\210\200\017\304\277b\211\300jt!\226?\202\243t!\2266\302?\247L\327k\350\355\274\2777\016\037\274\3173\276?\025\032\013\370qr\277?C\262p5\315\t\247?Zw\262b`\226\250\277:\376*D.\377\273?X\341\314\221\225\352\263\277\275\265\nbx\243\317?e\177\325\027\016T\306?\2605\003G\317/\320\277y\250\335KP\357\325?\256~\3074\237l\265?\234\234tm\273\335\263?\'[+B\317\031\303?\271\207C\010\246a\256\277\324\271\307\264\330\316\313\277&fV\026\237\233\256?\326\317h\372\026\030\316\277<\001\277\341ID\326?\215\360O>1\236\245\277^\335\004j\226\367\307?\020\022Q\030\0237\224?\310(\277\\\215f\263\277\217\361N?\311\365\310?\260\227>\216\201\367\305\277\222\214Mi\262k\316?\217\344\020\334m\016\275?\275,)w\"9\303?\326\037\337k\0035\320\277I\365\312\2729+\251?&\204s\006\203\205\272?\335\336Tl\352I\232?~\320\262\211\372>\327?\007\347\363z\320A\273\277NN\250G\316G\305\277m\210\031\351\265\341\314?\361\221\016\351\326\345\320\277s\210]yf\313\274?\000\205\177+6\321\264?\323\270%\221\030C\315\277\3579\322c\0254\263\277\343Vk\034\026\204\277\277\000\204bk\2416\251?\001\262~i\212\365\321\277\220\344\333\220\027\023\254?\'\rg\312\332;\270\277\201=\300\002\355b\260?:\203\335\361\005\201\244?qDe>\025r\267\277\275\331I\305\205\354\303?\034\001!\276\305?\320\277\206o*\311\255J\323\2776fs\334\277\303\240?G\215\246\177[h\221?B\353\213\027\345\317\314?\302M\313\204H\322\276\277^\356\366|\\{\314\2774\275\025\021\007!\261?\3253\320-\327\231\321\277V\314\241\212\026F\314?:6\273\272\005S\275\277\037\302O\224\271T\304?\215W6\305S\032\317?f\311\220\365\214\013\274?\323$\363Mm\367\304?\000\221\255w\371\033\312?\272\367D\335!\330\237\277\310\301\355\0142s\321?\346:\036i\010\223\222?9g\311\306\266\234\273\277\356\177!\337{\036\225?<\232\263\242IJ\262\277\032\236N\376T\312\323\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\356\310d%j\017\261?\022\"e\316\ta\311?Y\214\264\377\233=\330\277\026oi \330\017\223\277\370\262\361\000\337h\305\277\251\326\220\250\352S\233\277gG\222\354#\273\276\277}\210\246\343/\277\241?\271;*\224\202\343\274\277\344\337\360\310\3015\255\277o0\212\241\226;\301\277\034\301\252\033+\017\246\277\315\242}xQ\242\271\277\215HS\360\303g\313\277\330\237m\241\200D\304\277\004\340\274\020\017P\303?5iG\234\2001\274\277\204\257\016\257\263\202\261\277xG\274r\023\001\266?\276K\3366}\\\313?\006\035\237\274W`\262?\032\260\250\272}-\233\277\255\037R\002X\314\230?\014g\221%q\336\240\277G\007\010aZ\022\250\277\274Ea\327?\251\301\277\003/\025\014EU\325?T+\2546*+\300?\\\005\211\027zS\306?\366\"\322\201\226\226\301?\036\\|\376&~\322\277\3441\225\001\354\305\264\277\316f\220\362\232C\300?u\235s\336h3\265\277\003(aNX\222\260\277\026S2\206\343\217\324\277\243\234\240\225jY\301?\027\206\327\323\356S\226\277\250CSj\377\222\203?\323\237\302\333\326\276\241?M\375\'\253\217\227\246\277\245>\250\232\275J\300?\244\273\365y\347i\260\277\206S\031\344\264_\300?\2359P\274\217\374\240\277\t\210\256D@\270\302?\002=wS\360\226\300\277\356\337\311x\335\343\270?\313\2450\321\0033\261?\345u9]\004\'\221?\237k\014\027\254\017\304\277xz\177~]\364\326?x\007s\203\000\345\275\277\236d\000`\333\035\264?hm\211c\226\350\260\277\207\254V\341\224<\247\277\224\030\251m\221\331\306?\250\262\374t\260\244\246?Fj\001\330\251\036\274?\361\005\301\031\215(\255\277WX\357\0066\367\232?x\205\004W\177P\240\277\241f\022Q\216\007\306?\031\013\220\247\267+N?\3154\375\277\233x\325\277rJL\203\301V\277\277\253\257\302\303\251P\316\277s\210+\322\"\235\307?[x}\036`\\\272\277\006RN\342\t\206\227\277\314\013\377\3250\"\250\277\321~\005\204uK\262?\233\361\202F\213\221\271\277qht\327\367z\245\277.\371e\362_\014\222\277_u\212Z\355\207\337?\310=\345V\307v\326\277\317\261\231\034La\224?\226\320r3C\364\316\277r\305\364/9\004>\277\234\0214o7\344\320?\204\231\345\260\246_\304\277;\001\325\017zf\240?{#.a\314\335\216\277\220\367@{Cp\301\277i\367\t)e\376\271\277\000{d\274\313\234\274?\310A~\241\020$\321\277\303n\020\315z\226\222\277\307\261\216\251\344a\274\277\023\373\n\335e\372\267?w\352^\361ZT\261\277<\224fwMa\266\2778\303\003\201\025\307\222\2772l\037h\260\r\303\277\223\361R\212\222\373\264\277\227\2617\250\252\001\273?N\030\342\n\0108\301\277\006\354PP\277\220\272\277\2330!_\272\ts\277\321\032\273\255B\254\323\277\216\274O\240\004O\300?V\033\025u]\304\201\277\322\274\345\232\251[\265?\216I_Ie\363\314\277\313\026\023\2003\251\267?\032\020nG\200\241\254\277N\204\030\021\263F\271?.\014~Zx\311\306\277k\252S\222+\302r?\335\313\323W\224\255\272?j\\\251\352N\016\224\277\333\361\201\230\3633\302\277-\rg\341 \322\275\277\371\245\336L\253~\232\277\200\241\001G\255\233\247?\204t#7\240T\261?\000+&\000X\360\322\277\314i\304\213\205\331\233?\335}\322EmP\270\277O$\267\350 P\302\277h\342\242\365x\004\321\2774\364\207\317\002s\234?<\352n\305c\240\322\277\010C\355\237\244\251\206?kN?\376\336\325\302\277\034\320\224\0140\007\245?^&v\361\2603\247\2773x\317L\341%\317\277\336\005\216\233[\270\320?\361~\217\010\324_\323?kpM+\274\032\260\277\025gJ\331\353R\262?\214f\033\t\200\253\264?\021\226u\244\234\375\204\277\3315\333\323\317\350\240\277\000(\311\341\034Gt?\243\267\203\207\272\026\273?\205\357\222\022\005\327\250?\337\322%\273\265\016\243\277\024\232\357\330,\005\243\277%\306P\213\250Z\273\277\305\033f\272\003\260\266\277W\260\005\034\303,\303\277\364\002\230\212\031p\303? \312\034?j\025\263\277C\016\255g\250)\271?[\024\rp\277\030\274\277>\222\330\205\220m\243? \276\277\001*\233\262?\231\373\036\321<\300\270\277G\200\000\324\260.\307\277\250\350\020\376\321\301\304?\030\222&O\216P\271?\2248z\270\221S\302?)\032\331zN\332\261?!o\332-}\337\304?\320^\213b\324\024\307\277\315\033\223\003P\024\263?R\003\377\345=\355\311\277\222\241\001\270xJ\310\277\001+\231t\377\222\253?K\356\330bF\322\274\277\024\363\364b\006\321\314\277\323\271\020\016\332\243\322\277\341\353\361^\235\327\324\277\357=\177v>J\343?\016q\274\266|\365\272?\333\222Y\214\262\251\237\277p\022+\300\317j\324\277M\n\"\304Je\257?\227H\n#\210\214\255?\004&\200\323\350\320\245\277Z\273\335\036\367\264\307\277\223\264,\305\341I\321\277\350\266\235\364\234\230\306\277\216\n\363\353<\270\266\2777\236&\0214\221\340?\355eI\260\030(\271\277J\362\357h\270\010\302\277\210\036X\335\240\372\243\277\034E\272\375\375|\314\277\3142[\374\353&\256?!\320J\231\217\341\303\277\337\031?\376\221%\232?\"\033F@\276\357\255?\210.\332\265\3301\252?\300(\374\251\'\205\302\277F; :w\007\236?\205\207\341\341x\224\271?\001\242\201*/W\243\277\305\027\236\234\326\346\274?d\320i\201\th\305?<\024\3626\251K\322\277\306\021\366\026/\326\262\277,\307\301b\276\310\267\277\213\312\224\227;5\317\277\345/\022\266\354P\200\277\235\265\270\361)\035\310?\242J\226]\255\266\214\277n\"\n\244\240\302\262\2774\341/\243X\334\331?\013.\034\"\231p\243?\330/\203)z\272\277?\220\315\255\331\360\022\273?\254_2\200\242\232\264\277\024fp\367C\t\265\277\375\213\305\207\260l\315\277W{f&]d\257?\264\007\310P;\222\270?\267\003\215\300\271\301\256?\205*H8\350e\226?i\003\035\337\270\353\274\277\363I\315\253\010\235\303?\022L\234\350TT\301?\364m\301\3617}\303\277\357\220\203\005|\375\271?\361\355\032\331\263\232\242?x\021\321\031\262A\323\277\232\365\230\307\202\206\300\277\246\255R\257\310o\261?<@\213\014\3679\250\277V\032DT#\201\301?\341\353keq{\263\277g\253\317h\340:\250\277\022\275\300\355\354\247\255?\361\233\220Q8\336\253?AA\322\274\372\320~\277\262\354\203\363`\314\256?nmjD\214\347\313\277\027,\270\333B\325\252\277\241\375\316qg@\204\277\377f\231\341\'S\307?#k\344\344\355\307\247?\221\223\220\312Y\021\230\277\025 \260N\217\177\262\277\310\343\275I\377\357\272\277\'H\230\353\225\305\301\277\321\277@\241G \246\277\236\035M\202T\225\254\277\224\222\214\036,\332\254?Bb\213\202\363$\253?\311)M\374\031\036\306\277\227\005\241\257q\340\313?\'\031\r\314z\177\307?3n\245\307$r\303?\361g\311\350\234Z\300?\320\316\273\003\037\345\315\277\235\267\242\321\014\021\307?Z\231e\302\250\177\235?\213xi\347\342\371\230\277\206\374q\203\341\000\233?\234\244<\\ \364\242\277\031\242;;\006\347\276?\305PnT)\276\300?\026\217\326~w\327\316\277\231\321\345\376#S\271\277,\001\376\242\027\252\261\277H\036\310y\376\013r\277\035\004\231%1M\305\277\201q\210\273+\006\305?\330\005<\313JY\217?z\205\352\305Km\253\277\n\0175\247\025\317\272?,~<\272\270\013\321\277}Y\033j}S\301?\006\200\ny\304o\275?\006\325\014FYw\264\277\340\236e\024\014\220\261?\237i\275\232)\276\245?\243Ym\204#\227\310\277u\331\025\321E\347\277\277\266\235\3273\276\372\202?L^\244\264\2342\271\277a\332\253R\212\367\246?\367<\367\252D\314\265\277\372\340IO\354\\\322?\207\352M(\303\222\304?\312w\345g\017-\224?\377\33363I4\257?\007\240X=\346\261\301?\316x\'n\032\\\316\277\n\r\013fc\332\272?\370*\020\221\356\342\263\277\334\337\302\330\001%\260\277=G\243K\177\314\301\277\234#=\t)NZ\277\343\3156L\265\255\276\277&8V7\244R\315?u\351\201\266|\345\314\277Q\004\310\206\033\'\241\277\3128\274\323v \312\277K\2576\357\315\312\240\277{\032\220\370\221M\214\277\266n\023\252#r\254\277^\317@!\343\021p\277<\260s\201\336\266\265?\t\266^Z6\'\317?\330Bk\275\n\201\264?K7\344\272\340\r\306?\261r\255\034\237b\256??^\224<\016\223\266?WY\363\241\323B\276\277\343g\342|\007\236\262?\226c\001U\376q\243\277j5\352\360\006\234\323\277|\255\256\276nv\313\277\017\310\007\334\002\226\322\2778T\307\201%\354\313\277\225\245\303M\377\375\232\277\226\336soz\000\316\2773\303\373Go\000\241?rK\311g\034\354\244\277\364omp\317>\250?\253\031\366\225\020\"\300?&\347@\244\312\255\222?\300\'$(\324\237\307?\316\367%Q\003\310\326\277@\"w\021\021\326\277\277\177\335\360\322]~\267\277BR\274a\037a\246\277\030\224\230\236\374\320\202?(\336G*}\344\264?Z\022?\033\216y\241\277\231\2719\224\203\361\220\277\004\2771s\022Q\256?\230\266\030\242\205R\244?wQ\237e?B\311?+4\2409\3705:?\000g\215\310?\344\307?\332\271+%\217\241\304?6\300\003)H\261\302?\001k\370\217\250\327\306\277(\002\3156 5\263\277\354\252\230\013o=\305?\241\264N/#\210\226\277k?\305\241G3\276\277\245\254J\364\3024\277?\003\365\033G\177\265\273?\324\177\031\0354\315\305\2774\234\360\026\360\261\306\277\370\3246%\362\205\313?\036\370 \244j\366\242\277\212)\0343\035\027\313?\3130L\276\376T\263?\326\324M\276\215|\300?\273e]F\356t\276?\234;H\253\343\227\310\277HKr\36532\243?iwl\010G&\244?&\027d8N\342\272?\346\3768K\221\341\304?\325\341W\375\232\\\304?&M\276&\\_\222?\265F\255z\374V\235?\256\342\267M\305\241\217?\221\240\333\367Sg\234\277\205\260E\265u\325\205\277\300\314}\376\306{\300\277\240(\224G\034\356\243\277\257\312\243\272\r\266\342?\240{\006X\254\253\265?j\227\233$\035\332\254\277\216B\355\3520=\207\277\310\221\215\317\331y\250\277g>e\025\360\306\263?$c\226\241J(\247?\271D\310\020\277.\315?\334BX6\361?\320\277\2663\007\307\315\243\265?N8n\346\302\017\204\277{\004\277\311\016\327\206?\376_\336\250\300\351\256?R\321\237\2343\200\252\277\025\346\343\244\264\315v?\343\014\025\\\201\354\275?\264\340\344\273Z0\253\277\313\307\023O\260<\253\277/\247\320\025\363\271\255?\030\333\007\334\023{\301?<5\211Bvn\263?\345\373L.7\376{\277\306/p \204\212\201\277\304j-.\255\370\270?DT\275M\362\377\243?:\216\333\366\342\343\272\277zwp{\0249\251\277Gv\013\354\177\372\243?\023p\206\212iW\267\277Me\036=\346\336\225?\201$\rH\242%\333\277X\n\341.`&\272?\'\303\371;\004(\321?{\326.\377\2044\302\277\323\347n\014P\272\276\277\0211F\252kP\271\277\222\261T\004\356\366\313\277\037\246w/\266\210\246\277\233\335 \370\307\001\233?u\237\226\1771\000\220?\"\026\235\\\362\240\235?\200\240\230\376\372\213\266\277\\\215\260QnL\257\277f\320\306\323\345\243\300?\376\231\277\3541\224\323\277\200Hk\227\337\213\312?\215\205RD\277\242\255?\263\262C\262\372\'\213?\001eD\273\230G\265?\021\264\262\t\226\272\212\277x\323\351f\2119\300?\226\206@$\024o\246\277\364-\222\212\001]\340?\360\361&\023\036r\270\277\315\336\226\272\234_\204?\215c\222@|A\305\277\326|\350\025\237\324\254?\033\314\205`\361O\301?\3308V\337\350E\311\2776\336b\336\376W\244\277`\301)\312\353=\265?u\360\334\255\373\254\263\277\317\345\244\216\"A\253?*.\306g\225\332\314\277\367\352s\026\221\244\313?\034\361Z\3426\315\273\277\342\251\330\000\202\233\307\277\230y8\256Q\214\265?H\262\021\321G\355\207\277H\003N\224\247G\303?\341\337\314\213_\205\320?\220\375\260\332\210l\341?Iz\206\202\240+\253?\2216z\307\332\272\242\277\234p%\2360\037\300?\205\023\365\341Px\275?@\337\033\335\250\361\270\277`\027T\373\017\014\311\2775\202\227\264\021\236\250?B\214\343\020.\310\257\277\005&!\035\273\355\271?\030\224k\3723\204\251\277\274ra*\245r\267?\360]p\r\254\341\277?\337\367\3114\343\034\260\277:\332\0220\375\300\303\277\010v\345\277\377^\307?\207\240\263P\247\311\236\277\331\251\271\020N\307\216?1\003\275\240<\225\276\277\330\027[\363\036\347\272\277\221\030\000\345\256\177\245\277\026\033u\375f\261c?\303\023\373Z\022H\307?\241\\\034\035\0260\267?\031\363a`\235\033\223?B\204\363\322>\033\256?\352\260u\347\324}\261\277\247y\356\037\311\275\253?\210\036\025\203\352\267\307?a\370DHFd\264?T\242\322\n\206\377\310\277\316\340\200<H\266\324\277$\241\323\243\033\250\304\277\262\200\256\227MG\203\277\002\337\212w\260\245\260?\265\320\001\276A2\223\277zW\'\243\035\246\220\277\026\367\347\231\310\027\325\277r\222\245\301e.\307\277\022\361\032\215aS\323?;n\303#m\236\314\277\240M\374\224\370\t\255\277q\342\324\345\2712\223?z4 xf\013\177\277\346\351:\352\022\374\271?\330\217L\317\273\007\261?i\303\007k\232e\304?\323\r\010m\000\333\316\277qHgN\tv\247\277\000/\332;\037\375\221?\330\006\206\302\255\"\227?\233&\227\243\253)\265?\326\371\377}\017\177\217\277\\1\343X\206g\240\277]x\236\024\303\367\304?\356\332\326\333\371\273\232?uK\035\267r\225\271?\376\271#\234&\245\241\277\024\363@\021.T\201?\237\025K\223\267@\322?]yv\317\025\305\264\277yX\344:\374\211\264?E\255@\330%\300\307?\300V\255^\224\200\263\277<\3664\377<\236\307\277\210\303}>qB\324\277\217x9F\272A\257\277@\342,X\013\261\301\277#gm\010\274c\275\277\250\2666\362\375\240\310\277d\360\221\217\2738\264?\006\366\321=3\376\246?\372\301\372\316\302\315\260?W\343\234\013\035\277\224?\354\364\376\330\234\004T\277\305F\242\225\002\201\267\2776m\"w\347\030\242?\233\230\316\303ki\224?\000\323\0239kE\254?\220N\024\373\2075\251?\214\264\374\201\036\237\260?\371~g\375\377\034\262\277\277\322w\271j\373\312\277ej\370\026\272\357\257?\305\000$\242]U~\277\243!\334bB.\305\277r\003\204\254u)\\\277\030S>D<\350\271?IY\201\333\375S\305?_\'\203\320ZP\272?\016\274@\266\026\033i\277x\264:\346^\023\310?\025:\300\376\274K\244\277`\036\232\025\0016\215\277\252\216\327g+\237\277\2775\365y\2471\261\244\277o\256\226[\037b\243?\332p\326d\345b\251?d\003\366\3153\332\310\277\263W\255O\374\024\266\277\277d\241\374\247l\265?7\033A_\267M\320\277y\217\265qzb\316\277\361\326\036\371\363\014\322?@\210\035~\372x\300?\210\006\315\223\317\306\264?\316#\265-\036e\243?\310\240C\000\251\360\221\2774\030Mvv\303\262?-c\"\000\0045\316\277\357\271O#\022S\243\277\212\006\372\001\350\002|?\314\030F\017\342/\267?\227\367\024\022\211.\302?\327\300v\262!\326\313?\005\255\234t\341\206n?\024\314\233\345s)\267?\231\344\325M#\354\303\277\026;\235\201r3\266?mB\000\317\217H\301?B\367$$z\273\240?/XZ\021\016[\266\277\221\231\017\375\362S\312\277\227\367?\263z\325\265\277\"\270\235a:\261\260\277\n~m\023J\315\273?\325ioW\344\332\322?\362\233\340\214N\016\214\277\237V;\037\251O\266?\227\t\000\353\341\317\261?eO\t])\231\246?\344\323\362\221\264\003\302\277{D\232\305\000\226\234\277\274\321\312\036%\201\272?g\375\304\227\275\326\222\277iM,\021w\370\204?\205g8$+\004\246?~t\237$j\355\322\277\026\"`\311c\245\267\277E^\304\355l\340\227?\3343#\235\036\237\265\277\251B_j+\257`\277\306T\250\247L\324\271\277;\241\344\220\312\276\331?}i\245\0311\214\322?c6+\372\346\311\262?\000\314\241\326&N\274?\2058\346-vf\232\277\323e\310\311>.\303?\010\312W\256C\312\254\277@\316\377:iU\255\277\243\022\301*\243F\241?\305\307\357\007\251\255\260?\361\230Q\206\316g\304?1\222/\373yA\272\277N\263\224\2729\255\245\277\374E|&\240S\266\277n\257;\242\262\204j?\"\230\356\211c\317\261\277\345#C\355\373\257\302\277\274tX#\325_\306\277\3418\360!\360\210\256?3:3\341(V\215\277F\252\367\212\210Y\272?\346\310\003\355Re\300\277T\314~\310\342\347\314?_\326[*\346\265\202\277\006\353\364\005\016\305\277\277\340\303\357\275\327\013\270\277\306\227=\230\205\227\250?\354\241\205\000m\353j\277\237\211\263\327\373\370\240?\305\271\260\037\215\341\253\277\332\332c`\340+\301\277\203k-\275\367\013\306\277l7\377\350\322\331\323?jm+\\\354\262\253?\233(\242\245[\241\310?>)\014]cm\265\277\031\027H\340\200\257\304?\362\304\365\n\323\324\240?!1-\324\247\014\257?\300\304\215\034g\354\276?\225\003\016\037D\335\277\277\325\242\024cA\346\276?\225t\200\363\027\013\306?\307Y\227\306c\177\313\277\3301\266\314S\305\245\277\017\362E\273\373\357~\277\334\226\010\017\327-\325\277\211:\313\315b\237\267\277\304\025\256\002\016\034\265?8\354BM\356\301\272?\360n\326g?u\212\277\017\025e\020\'\351\246\277o\336l\365(\330\262?A\271\275\360!0\307?\340\341\216\367\270\300\225?\331\207;)\254\350\314\277\3301\317\263Xz\260?\302\213\303\240C\247\237\277o\206\2607\177\373\234?\305\304\247\021\311a\262?\004~\207%&G\246?-g>\275\2064\277\277}\2227%\346\202\267?\344Ge&\366q\270?\232\361\343\360\300<\274\277\227K\336\\2s\203?NS\216\365\352G\300?D\260u\027}t\320\277n0\345\325p\267\303?#H\262\033\361q\276\277\377\236\345\307\025\341\304?\027(\250\'\"\341\270?b\322=\305\365}\300?_\266\245w\035u\271\277.\240\337G\2562\226?\037Io\220\245\365\323\277\2257\026\023\205\016\246\277>\234ON\353\270\237?F\265O\177#\302\234\277\035X\361\272l\226\322?~t#\221\032\225\241\277\265\231\007\361\277\324x?7\333\254\216!\263\304\277\310\226\037\003\252\007\303\277\342!6\266\363\247\306?\375/\tO#\263\201\277\243\371\231\023\254?\243?0\365\235<\320\002\303?p1,\205x\366\260\277\344\360\227\327\235#\260?\3418\241\333j\241v\277/\332\311\365u`\240?\201FL:\376\336\266?\340^\033\275\344<\224?\227\224d\246I|\326\277\253\277!\024\036\303\305?\364/+1\276\325\303\277\375\225+,\336\332\251?5\005\240\006\220l\275?\365_\275\3202\r\303?\321~\303K\270\177\205?)\340\305\031\200\232\313\277\022\205N\005x\256\300\277\350Aw\033\n\177\347?ia\232\245\031\001\260\277\2769\234\345\302r\230?\004\006\305\302\350]\256?\255\320w\340\353}\252\277z\215\244\300\305\346\301\277\252H\216\202\357T\312\277*]&\207,P\270\277\242\377\275y\255z\245\277\207\016\3250\n\334\317?\330\177\020W\334=\313\277\3032\3544P_\232\277\2273\020\275\247\214\275?\240\305\350\3227\327\306\277\n\260\262+^q\262?\023\320\337\277\233\205\242\277]\363\254\2716%\233?)G\255u\212\345\317?\007\214\024*\t\221\272?\030cG\227\221\026\300\277>\371\261\024T5\310?\314\377|\321\377\207\221\277\252\205{\327\005\302\303\277hq\371-\034e\234\277^\206\243DY`\317\277\333\367\241}\334%\307\277\327\006\261\302\234\"\270?\207sDX\275\372l\277\311\367\251ug\233\261?\022\274\306\037\363o\320\277\034Gp\242g\272\263?\324\232\300(4\334\320?\241\311!\360W\323\264\277X\"\230.\240\374\237\277\212y{\313\241\235\322?\350\314S\272\303P\317?\345f*\207o\257\320\277\332F\212\332B\251P?\307\315\316\360F:\302?y\322v*f\345\246?\302g\323\320\351R\273\277\236u\333\347-\303\210\277\314\262\366\365\240\270\320\277\n\241\360V\265\201\246?h\314^1f\320\254\277\354\217\n\254kh\331?O\234\035\214\0273\221\277D\266D\346\247\"\300\277\316\323\035_F\355\214?\3450\237Hg\274\235?\347IF\215\254\311\252?\373\'F\3218A\307\277\213\230\312B\217\342\260?\205vM\324\314(\310?\220\212\301Q\236\023\253?5\215\307t\215\312e?\n\031\021\355\010\223\314\277\314\232\321\240T7\266\277\324\232G\213\356\300\256?\256\325C\032\2117\274\277\355\225\034gu\251\273\277\201\352h\013\016\036\266?\233\327G\306\201\007\246?\220\202\nIw\353\320\2775\n\275R\234`\274?\305\247\210\224\222\235\326\277\312\263\004\262\205\320f\277d\362\301\371\002\257\247?sF\216\317\266?\332\277\276\376\357\013\333T\265\277.fQ\242\327j\235?s\034\353$S\340\307?"
      }
    }
  }
}
node {
  name: "normalize_element/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\203I\2057^\017\245\2776\270\346>Y6\307?\366\231\246_[\366\303\277\350\377\305)\302R\226?\375\262f\3444~\331\277\361\376W}\276\023\264?\362\\y\273\320\320\262\277\325\334\221O\3177\253?\236/\2641;U\303?\222\025\002\r^\246\253?\007\035\024V\231\000\277?\245\261r\320\324\026\231?\032)\257\023@O\262\277\312\212l\332\276\025\310\277\340\333\333\344\212<\227\277\263\212\305\202\200\223\256?\231$\300E\304#\253\277}5\360OrG\303?\022\203\215\307y\027\255?f\213\323Ot\265\247?\266\027Oe\355\277\243\277\355o\310G\307\225\320\277{)_\226\341\031\243\277}\317\255mW\244\262?\360^\322^\300\236\312?\246\006j\322\0036\311?*\275\262\260< \261?\027\351\337\021E\327\261?J\247\2541+a\314?\374\224n\334\225V\220?\275V\204f\262\300\255\277TJ\245Q\027\376\265?\247<\207\210\243O\257?\236\311\265\027\026\214\312\277Z\211R$\014\002\206?\'\207\256\212D\316\300?\030?\316\355*\n\310\277\330^\302C \254\246?\032Z\321zV\001\305?\001#_\241\332\001\301?B\004wtj\255\252?\0232W\353\365k\241?\002\316\274\026\370U\227\277>\311/=\343\232\322?\226<\314\202\274\361\256\277\266\315(\327\033g\300?\253\250\357Cw\003\303?\t\242\336\216J\320\221\277\006[\277\377\016\376\266?]7\360\226kA\265?\243Nz\021\256\303\257\277\251\272\017\374\366\377\322\277\235\233~\312\357\362\246?>\357D\211\263\025\263\277<\333\222(\037~\267\277D\264\326\034j\254\275\277;X/\306\206]\312?.\026\245\263\2427\207\277\021\206\265\037\261\355\240?\360\037T\034\261C\301\277\\\312\320\206\346g\262?1\037BM\366Z\323\277\033\375\222\310q\210\301?\315W\214bC\007\230\277U9h\210\022\216\275?\232\027\002a\340\031\266\277_\227\036&\273%\254\277\361U\247S\262N\262?\237=\241]\210\225\242\277\204q\034/\230<\303?r\375\237s\202\216\235?\255\032\263|\356O\306?\332\335\376\261\013\377\264?N\257ua\036-\260?m7sv\034 \300?\213\342\303\357\203V\264\277\3644\372\217\035S\200\277c\3132\002\007B|?\345\304\315\004$\207\254?k\007\025P\277\321\266?\007\206\215\203\255\216\257?<u\"\327\220\211\217\277\n\325v\204X]\276?:#\310\355\327\307\232\277\235\375\035\273\364\017\262?S\350\377\333I\345\265\277\030\036\331\252\225\302\220?\026BB#\336\325\236\277\226\364+f\202j\242?\226\343\'\'~o\272\2774 \322\026\027\013\241?\033\303!\t\2450\252?:I\322\022E!\263?\274T\322w\027K\201?\343r\343\255\243I\327\2775\216\013\336\312=\272\277\304Ft)b\310\250\277d\002\037\'<o\304?`\224B}\3142\271?\233z1\234\227\337\273\277\'\0373\001\243\n\261?\026\325\357\316|\326\257?}\315H\t\013\317\252\277\220\032;a$\251\267\277\261\346\256gP\342\271\277\272,?C\332\024\301?\236\265 \3003!\244?\342\262v\257Pj\226?\306V \321*\327\224?\\[\013\222\350\336\264\277!m^\024\024\272u?|Q:\241\211\263\230\277\305\202|\327\261N\270\277(\235yF\375?\273\277TB\277{\306\307\263?O\177\3729\204\207\331\277\237\231\334\365G\333\226\277\347|\2560\202\366\323?\010J4\0172c\232\277\257\340\353\250\332\237\264\277^6\251\336*\365\331\277\2464hH\232m\266\277Wv\200\255\223\275\307\277/\337\033\236R^\272?\256\233\323\235<\000\245\277\374\260\367\306~\303\271?\301\'\017\344T\323\310\277i\037R\273\243\376\241\277O\301\270{r\030\310?\016\003\247\\\023\323\201\277O\333\307,V%R?k\031v\006\242E\261\277BQ\363\373\206\253\232?\365u\322d\310\034\205?\272Fla\320\355\274?\232\376aD\373\241\322\277\371\237\333\014\010\224\314\277\350\3667\373N\330\206?\204\201\261y7\316\313?\274C\023,\223\251\231?\377\216\224=\361\224\304?\267dc\225y\340\245\277\312\365\245\031\r;\217\277K\tr}4\260\225?\"/!q\300\232\255?\302\231\351\3346\216\220?\223\206\334\225\245\372\270?\332\321\334U\003M\303\277v\232A\357\352\211\275?\310\331L\031Ky\247\277?\373\302d?\231\263\277@\247]D\223T\202\277kq\216\233\365\362\247?%-\nze\300\317?O\032\231\262\371\326z?\032\331_AK\210\225?\247w\004\025\326[\262\277\215\303\334>)]\231?\305g\207\001t\347\234?\355v,k\361G\220?\2139c\222\215\311\257\277r\3714\210\303\244\316?e\007\203\024\227j{?\314\036N\010\003\373\264?\320\325\010jP\003\320?\021\346\304\220\242\200\272?\004<s\312\240s\302\277w\221\356\342\307\304\221?%X\217u\262\367\321\277g\"\235\'E\204\232?\026\367\177b\027\202\253\277/\224\272\365\306\244\243\277\324}\030\376\331&\263\277\223x?~\3779g?\324\014\334]\334\254\260\277\220\003\312\027l\336\242\277R\315\307\226\341\340\255\277^\3151\377\246i\271\277\300K\315\\\2246\244\277\211\325d\202\346\250\273\277\366\224d~O\362\275?$\240\276.\030y\242?|gk\325\315\333\220?[\022}\237\222\r\310\277\n\031\244\007\232\340\301?\375S\020\r\322\014\262?Z\272\217t\224\201\327\277\327\006\370\230V\004\302\277\331E\223\254^\374\241\277S\260n\365\340\026\262?\217\262\212\271E\244\264\277\r\330Q\027\245I\306?\361\247i?>\n\205?\303\317c:\316P\264\277\275V\272Z\230\220\260\277Sg\205\202\242\215\273\277\026\271p\363u\\\250\277\232?4\367k@\306?Q\252\336j\354\233\304?UNi\310\303\003\222?\205_\341\023\324\346\274\277\357\355m\312?\245\314\277O\232$[P\342\264\277\207\251\272\3156\374\231?-\256<\021\320{\242?L)\212\241B\356\314?\247\202\020nED\262\277P\356\301F\365\347\253?\007M\346\302/\205V\277~\353\020\300\370\257\255\277*t\230\027\246\246\225\277i\204\215=\246y\230\277\227\037\3479\014\020\314\277\3322|\320L\n\272?\rS\037\033&\240\274\277\362\216\207\224\305\335\251\277\324\272i\360\301\021\200?l\001@\254\364\304\273\277\313\344\202\2305x\302?x\223=\006\210$\215\277\265\272<Ta\211\232\277L\201g\267\201\004\257\277h\377\266>\311\007\276?j@l\270C\347\265\277z\274\360zV9\263?a2\'7\333\244\250\277\\\265md\272\377\264\277\354{x[6\270\275\277\363\230\333\261\016\250\302?\007V\305\001\331\274\266\277\342\321=w\204$\230\277\334dQ\227s\360\241\277/\265\376\354\323\000\246?\337\303\333\013#\364\212?\273e\223\"\031\300\246?\266o\253\317&\325\247\277\3435\233P\230\314\311\277\217<+D\246\353\241\2776\334\365\353\265\204\267?\000h\010\335\207\314\265\277w(%C\226M\304?\360p\250N\325\237\222\2771}\206\242>\205\255\277\317y\221\370\376\313\305\277x\213\376\201x\343\230?\337\346\343\010\002\204\306?\321\246\323p\033\272l\277~\016\2327\014}\264\277\225\333\264\244\366r\262?!q\273\307Xn\243\277\217\003o\217Zs\276?\220\206&\034\004\205\263?\227\312\024\233\242\375\260\277\027\235\264\275\221\367\261?L\372b\276\375\240\263\277\234\270`\223!}\207?\020\311\035\2442&\223?\022v\317Y`\335\207?~o\326.\005\303\316?&~Q\344DQ\266\277\255\216|`\251\024\267?\010u\301\355\030;\235\277\252E\352\246\373M\245\277\356L\373\373\244\374\277\277.\003\371P>:\263?o\275\340\316\367\237\274?\232\352\353#\323\327\240\277\217$\031l\205\334\256\277T\376M\354.\307\204?\250>\377\223?\205\244\277\036\n\014\216Xw\246\277g\200X\371\031\275\276\277\024U\222\327E\265\312\277\264[\351\361X\201\252\277?\352\310\326\232t\242?q!X\217\256\373\247?lw\364Hu\224\322\277q\340\261aE\005\260?V)#\000\265S\273?\013\324\244\375\362\334\220?y\014\230.?\333\263?\375\231\255#\364\340\204?\267\307\010Y3\226\312?\005\221\367\363\177,S?\005\333\025\214\270~\252\277m,\266F\334F\227?[r\'T!\314\224\277f\335g\376\031\r\243?\262\252kJ\242\253\322\277g\363N\260\306\334s\277\010nV\321\351\\\223\277\254\265\r\375\273y\254?`\031\212c\035\375\265\277<:\213\363X\026\315\277\243\034d\256\211\212\220\2776[7\237\222.q?a\273*#\224l\211\277\314\031\203\004X\274\320?;\201\315\244\343\205\270\277]\323\372\300\022\202\271?\263{\214e\216\200\237\277\022a\254a\340\030\224\277=\277\330\367^\337\303\277\243\2610\330\357\301\243\277\320\002\366\364\217\025\315\277[\000\356\016tj\264?N\350a\355\201q\230?\352\332-\255|a\255?\3468\267mG\316{?\035\224\374\036\021:\250?\205\336c\233\245\232\264\277[Y\000\370\300&\305?N\243m,\213K\300?y\230d#\303/\312?\225\030\360\344\261\314\274?\340M\237\222\367\216\257?6\201\316\325\320\030\264\277?\251/v\246\233\251\277\032\301G \361\267\227?\364\227\276\302Dq\274\277s\342>g\347g\235\277u\237\231\264\"\327\301?iP\354*m\266\260?\351@\274\272\263\024\240?\311\342\225\272\215\370\275?(S\370\"\267n\241\277\345w\252\264\367\356\300\277\232\211l\210\2052\256?\202$f\rA\211\300?\306\217\236\004\360m\301\277\336,\267M\307\027\324\277\371_\242\272\204\361\265\277\321`\366\323\371\341\250\277\217\272\007g\240!\267\277\007W\223\357\332\232\267?\352\347\232\344\001=\305?\000;\025s\253\237\234\277\371\250sP\303{\304?\335\255\306\314\3555\250?l\376\306\344;\243\233?Q!LQ\203y\252?l\375V\006\220\244\266?MFC\006\250\313\320?e\347k\324\317\202\240?\277~\022\313>\345\225\277\271\003\304\363}=\257?d\027~\220\347\273\246?\036\246\274\344[\016\275\277\267n\332\022\255f\265?$\275\223\313O\000\314\277\250\235\213\177\363\027\244?\"\\Le\267S\007?{|\342\261\034s\255\277~Ku\242\311\344\253?kG\026b\376\001\266\277@\027\304\3257\235\265?\007\377\361\327\252\275\307?4]Y\237C-\261\277\372\353-\230A\371p?\210t\220\212\346\260\253\277\255\357\276\331i\273\327\277=\322\026\'\033>\245?{.M\251\320\353\240\277\'b\275\350\245a\242?\341\021L\320\341\022\231?\330\010\033\3258\270\242?\276\034\240\252\205l\215\2775\'\']8\"\220\277\006\330\005-9\376\260\277\323\252 \317\340\261\237\277<7\036\3520F\233\277\330\353\245\203\212\021\316\277\020r\352\03590\322\277\00122\316:\275\302?\303\310\2218\022\203\243\277\370\355\256y\344\213\262?\315\352K\r\230\r\271\277/\236\240d<*\262?\325\365\230\021|\r\311\277\211\210\006F!G\221\277\256e$N\270D\313\277s3(+\345\016\262\277/I/\336\033\221\261?\256\027\\\330\322\341\217\277}\364VN\300*\223\277\320\244\325\342<\346\274\277]f\255\312\231\313\305\277^\022\367\210~\307\274?\014\021]\034\240\271\242\277\022\254Wk\356j\306?\202\207\032\333\263\345\266\277\016A?7vN\320\277\021\t6\352C\237\262?\233[\004!\310E\254\277{%\023\264\225\265\305?U;\343Ah\004\300?Vs\354\025\300U\264\277+%r\314\037V\261?O*\030E\'\315\252\277!N\343\022!\243\270\277I\305\003\356}|\226\277\\\223\r\326,\233\212\277nj5O\304\331\262\277\275}\3630^\204\301\2775\311\317\005\202O|\277\005_\246i, \305?J\246\314 \'\205\217?\177\324l\304\334\363\310?,\211\365\212UH\313\277|\254\321\305Jn\212\277@\177\365\3633\274\233?\"\371jo\344)\275\277\324e\206O\024\306\242\277&\206\210@\225\034\301\277\222\034E\320\311\352\274?\035\340\177[\330\224\314\277:\030\235q]\336\300?\024\305\356h9R\272\277\375\325\004\265\016GP?}k\350\r\n\'\231?\037t/\253\037t\244\277:h=\025V\030c\277\301Q\372o\364\266\211\277\207\274\273\236>_\206?\001\260@\231\320\231\303\277\035\273\326)\200D\300\277)w\237>\331\344\253?$L\243X\313o\303?\242\\\230\206\267\301\254?8\025L=\013\327\262\277CW|\200\310\236\316\277&\211@\272\372\024\315\277\204\362\004\022\0001\302?)\330\031\263\374A\232?\023\202u.\231\376\255?h\030\3547\235\002s\277\371\033\222\023h\361\243?\366z\026\220\005\234\303\277w\273N!\\\r\214\277\2526\240\026\366\204\300?\000}\362\204v\311\335?^\002t\371\010\316\230\277\336\337\203\223_\r\224?\325\333\313s\305\334\304?K\261w~\373\316\302?=b\352}\3635\222?-\261\022.\341\035\320?\251\022\007\345\213\340\227\277mKTk\345 \261?A\351\334$\376\335\257?a\324\214\205\014 \233?\221wna\345\325\230\277F\344p\237\330\233\275\277b\253\271\364\351d\265?\312\034\"\354\\\233\200?\320n\320\014\025\253\206?\240a\350\324\3155\243\277\301L\234\300\345\300\255\2770\027\260*\304\355\255?G\323\356\323\360w\263\277`e\352G\207\277\232\277\232Z\276\235\226~\304?\032rDI\230\034\275?\3677a\031;9\266\277$\265\032Y\374[\272\277\\mo\365\023-Z\277uc\316q\301\271\256?\363\035\216\251\241\013\223\277\025A\350\214\203\023\330?1\013\304C\352\301\267\277\036\270\260\346<h\316\277E72\246\272\225\310?\250E\027K\n\260\300?\251\263\333s\026\246\265\277\325\020P\253\356\342\271?/\345\315E\302\263\313?D\3034U\376.\240\277\235\035\270D\036S\261?\364\266\216\252\341<\316\277\307\276\0372\221G\253?y\251\"\343\321-\264?\274\345\320\023\305\321\270\277{H\020\322?\272\323?[P\3709Z\213\215?{\205\025\350\206\242\307\277W\024\020=\347\303\303?\013\372\321\227\024\261\306\277#E2%\213\331\226?<\365\270\220B\307w\277\037\256\273\'\271\026\226\277\204\274\356\305Z\242\321\277\351_\270\245\271\021\255\277\221t\350i\277\003\314?1@\340\r[\334\234?k\232\3507\2741\246?\356\267\252e\037#\336?h\035z`\361\202\277?@\2418V\314]\253?F\342\037Z:)\266\277d\304\002\032\327\324\263?\257\222\352^\257\342\224?\005\276\227ie\377t\27798\325\003\200\237\276?\034\250\231\351\272\222\300\277~!\325R\204f\306?*z\371A\223w\276?\231HG\030\t\030\310\277\363\003^\025\353\033\245\277\037h\237*\t$\305?j\001\273R\342\305\204\277.G\224\316\207\027\262?\006\312Z-\376\t\302\277J\226\307\221\370i\272?\026\026$\337\001s\232\277\006A\366\323kk\252?\227S\277\2337\213\276?l\t\200i+\343\222\277S\201A\216\246\234\221?4\017[\343\314c]?\026\274\313\355u\027\331?n\025\013]A\367u\277\000\312\r\343\261z\243\277 \240\352:\345\376\225?\312|?\361\242\031\247?\'\346\2773\221b\275\277>\247.#3\361\264?a5biO\311\264\277\255\260\360<+\222b?s<kU\201\267\210\2771S\346ot\206*?lKh\345\361\032\310\277\236&K\341\234g\220\277\031\032\274\300\207\027\227?I\021C\323\351\212\236?I\035\315\336%\201\301?\370+\250R\250W\213\277\315V\343\305q\006\267\2773\325\271\236>y\267\277!\313V\346G\020\252?\354\214\253\345\277\201\255\277\303n\246\253\345L\277?\213\212\321\351~\325~?\371\262\025\241\t\230\323\277t\002\310\016\357\276\251\277\335\037\0030JK\264?\224\341\321g\376\342\301\277\316b\214\275\254\\\302\277\244\n\026&\030\223X? \331\216\311fE\204?\246\234V\021i\302\260?\275]\267A\"[\216?P>\273j\344\236\222\277{\034\272=\237=\267\277\216X\213}\330\030\264?\264\210\301\202\004\306\267?\030c\233\335\270\255\256\277E\345\326\220\005\337\245?\235=+\364\220B\304?\300\356 \273TO\267\277s\353\277\325\344\322\252?\312_\223\361\261\277\241\277\277\rC6R\323\321\2778\202\314/\031\271\266?\264\000\031\370\364U\330?\257\017\032\274\365\226\264?\226\213~\366\241N\302\277\250\016Yp\013\312\241\277-\337?\257)\240\306?\2703\326\201\314\270\253?\224\362\0042\365\210\224\2776%\347\203\255\245\244\277\212\033\216\302\212\246\262\277\035\240\327n\341L\253\277h\221\002d\'\022\307\277\321>\244Nx\232\241?H>U\325Zx\323? ,\263+\366gi\277J\203\263\303q[\274?7\300Q\277\025\340\301?\226\n\013\353\215\220\243\277K\351\363\265\357\255\263\277\264\320\312\204\353\303\217?\261\004\202\373b\205\276\277\253\033\035\232)\351\250\277\244\033\313s\300\275\273?U\004\236b\236-\271\277R\311\2776dH\256\277\t\322\247q\371\035\260?\246\202\242\230S\213\250\2777u\232\204\266\201\241?n\324\010\277\234\362\246?\232\275\304\327\356\242\306\277\300-\371\016W:\204\277|\014\246C\222\243\300\2773\276\276iA\333\246?\023V\340\025\337\224\213?y\270\272\313\3336\305?\025\351.\217!L\265?\301\262\331\013\321*\242\277=\213\256\241|r\245??ay\2475\217\312\2776\366\234\361N\232\275?\023\303\204\377\035\035\312\277\207\3306\037B\362X?0\331\342\314o\316\306\277\204\002\214\3215\002\227\277\306\325\t\351\354\252\307\277\336 \346\336\001\271\220?\273\323\241(0\354\270\277\365\347\251\017\225`\316?\261\247\267\225\026\023\231?x\316\205\345\204\027\276\277b\315\203\036%\251q\277k\336I\326\273\250\270?aL\221\213\321M\272?\247\336\327\262pn\255?\344\347/iHr\304\277\257\336\326\365[\007\177?\344\246\013\330\367\177\323\277^\334\355\307Z\002\300?\247\r\354\365\232 \276\277\326\302/\220\334\223\271?\356\366\304/\016,\254?\363\023u\\\234\271\227?\305\014\343=9V\303?\335=l\227\005\220\250?T4\340@+\364\272?\tp\244\374@w\254?.\355\t]m\206\254\277\205~L\217\002^\274\277;K.<\305u\260\277^\t\251\312\004\006\276?\237AJ\025{\314\207?3\315\347\rv%\230?H\352\277~\013\032\230?\310\217\"\276\272+\241\277\256g\310Q\377a\312?N\322\013\353 Zs?\006)m\221vD\242\277E\213\267\250Nk\321\277\322\003\374\373\356\303\264?\363}G\372\003\206\223?\305\303&$\030\004\316\277\364x\014R\335\373\313?\316\016@\'F=\264?\263\211!\316\276s\264\277m0\261\374\006\022\261?Yw\274?S\t\262?\222\036\025#s^\256?\014\207\213\365I\034\211?\264_l7\217M\244?\360\232\364\260\221\366\260?T\302\342\302\212\224\213?^)\021\255\232\027\323?\341;\213N\010J\323\277\374\007\337#\236Fj\277\030\004g\002\205P\244\277|dB\023\271o\273?\344s\032\255v\306\240?\371\0371\332\211\264\275?c%\030\021\225|\275\277L\331F\257k9\263?F\333\025\331\261\032\263\277\276\246\363\034\036[\235\277\035X\302\245C\027\260?XHa\005\210\031\256\277\310\207\031\263\005*\225?\231\257\262Io\274\204\277\344\203\027\302\260\222\256\277\257\361\317\001\263\000\214?\331\026\277\225\002\352\246\277\347\344u\311y\007\217\277\237\354\231g\362(\266?.\203\314\376\347\273\277?\354S\215j)e\260\277C\242\247\377\"\243\252?\250z\275\330\302\262\257\277n\211\347\305\312R\325\277\354\036\037\307x\266\275\277B5\215\355i\353\262\277\0212ux\\}\301\277Im\350\241\207j\273?e{\365\2379s\261\277\365#\317t#&\300\277^o\366wm\263\264?k\247 :F\'\270\277o\312\030A\222\032\301?\000B\231vXT\205? D\036\214\306_\246\277t\246\325v/\006\213\277\322sa\353\226\312\271\277\347\337\202\032\326\206\276?\300\340ISF\275\251\277k w\362\260k\313\277\021\237\2361\303\"\300?\354\223!\201\024\224\245?\356\'\335\240\243P\251\277\343\036yC\214\322\267?ur\233\2747W|?\305\221\265\267]T\235\277Q\373\262^\222\t\300?\304\230\332\r\377\253\266\277p\234\300G\256\332\272\277\331>p\004\2318\243\277\214\034\362\357\n\214\302?\3310\216\204\303\"\254?\2077\264\362W\025\263?I\025&\026\000\036\223?7\177\340\273\231&\276?\266e\037O\251\252\261\277\340\237\205_3\217\265?\301\245\263\323\266N\316?\336\370\004\267\033\334\307\277\253\336m\r\312\372`\277\'\231\300\037\030\240\234\277l\013\002\252\237\037\304\277\222~\033\216\217r\322\277\215\314\302\330@\375\253?\277G\316\3169\310\270\277[KV\362\376\035Z?\221\\\003\234\3554\261\277u}\252\t\005\261\232?\362\251\374\"\201c\260\277\350f\037\304\271\240\272?j\226N\302\005\204\266\277\311\250)\010\247\342\253\277\'*\274|F\212\263?\251>\"n~\361\255\2778\230\226\024\006\016\262\277!\310\027\311\274!n\277\216\261\\\353\r3\234?:X\312\276\025\222\311?\341\303\240\320\257\024\310?\024J\0210\357\305\301\2779\202\024\304\232\022\266\277s\224\303N\376X\242?\004d?X\027\261\315?\212\006A?\217\'\327\277r\236<\323\013@\261?\000*\023`E\257\251?\201OJ\373\t\252\266\277\374\006\236\210\201\020\260\277\312\244\357q\377\265\244?\233\336Q2\357T\324\277-%\006\261\206\037\330?\375+\237\207\344L\300?R.X%\344_\262\277\305\244Ec\215Q\313?\000\276\300c\234d\321?"
      }
    }
  }
}
node {
  name: "normalize_element/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_contentt\000\000\000\007\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\006\000\000\000\002\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\006\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\005\000\000\000\002\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\005\000\000\000\005\000\000\000\007\000\000\000\005\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\004\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\007\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\003\000\000\000\004\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\003\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\007\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\t\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\004\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\007\000\000\000\003\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\003\000\000\000\t\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\005\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\001\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\004\000\000\000\010\000\000\000\005\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\007\000\000\000\005\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\001\000\000\000\t\000\000\000\t\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\002\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\006\000\000\000\004\000\000\000\002\000\000\000\006\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\004\000\000\000\003\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\tt\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\007\000\000\000\002\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\002\000\000\000\002\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\010\000\000\000\001\000\000\000\006\000\000\000\005\000\000\000\006\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\005\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\004\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\006\000\000\000\001\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\002\000\000\000\006\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\007\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\003\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\007\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\005\000\000\000\003\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\005\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\006\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\003\000\000\000\003\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000\t
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  input: "normalize_element/component_10"
  input: "normalize_element/component_11"
  input: "normalize_element/component_12"
  input: "normalize_element/component_13"
  input: "normalize_element/component_14"
  input: "normalize_element/component_15"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_6"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_11"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_12"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_13"
  op: "Cast"
  input: "IteratorGetNext:13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_14"
  op: "Cast"
  input: "IteratorGetNext:14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_2"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_3"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_4"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_5"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_6"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_7"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_8"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_9"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_10"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_11"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_12"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_13"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_14"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/PC0_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC1_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC10_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC11_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC12_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC13_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC14_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC2_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC3_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC4_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC5_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC6_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC7_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC8_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PC9_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 15
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\017\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3651483654975891
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3651483654975891
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 15
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_25327"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_25326"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_25397"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_25396"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_25466"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_25465"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_15"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_16"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_17"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_18"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_19"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_20"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_21"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_22"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_23"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_24"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_25"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_26"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_27"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_28"
  op: "Cast"
  input: "IteratorGetNext:13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_29"
  op: "Cast"
  input: "IteratorGetNext:14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "ExponentialDecay/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/initial_learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/logits/BiasAdd"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:15"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/labels"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/Assert"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims"
  op: "ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/losses/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 15
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 15
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 15
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp\\part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_25397"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_25327"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_25326"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_25079"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_25080"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_25396"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_25466"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_25465"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}
