node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_9897"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_9896"
      }
    }
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\370\356\342?\325O\311?g\276\234<\331\213\335?\320\372J\326\227\233\340?(\2028\017\'0\331?\337it\377?k\327\277\242X\270\366O\201\324?\203\034\357\351EH\323?\343\214\0372\376\340\274\2771Q\316a\010J\304\277\237\273n[\245\305\325\277\020\243s\300\246u\325?\302by\374\203m\333?\036R-\236Q%\253?\375\264\233*)A\332\277.\207\304\332kC\325?\244\221*\345\020\314\323?\205c\257\332\251\367\306?\202>.\375\215n\330?\224\033\301\235v>\326?\353:\0227\300/\266?0O\204`\227\331\316?v\250d\010\031+\311?\235\203gB\223\304\332?R<\364\376\273\025\325?\366T\332$7\361\323?\234T\260\235ZC\325?\300\300\275|\374\257\341?\333\246x\\T\313\331?\000\231\214\031\227\240\340?\020\222\211\204\204\342\327?\245\031\346_&\245\324?\316\225{`K\270\327?\331K*\205\006\003\332?j.\334^w\337\310?c\334\303\024\233\305\330?\307*\245gz\t\346?|H\266\302\r\033\320?>\344\322\235\314\244\330?\274KV\003\234\367\332?\013u\375\'$>\307\277\353~\004\264cY\333?\231\024\335\202\276\027\326?\361\364JY\206\270\327?\335\351\357!\270|\333?k\021\356!#\230\324?\323\264\264\350\327\265\315?g\264\372\217\361M\330?\214\246\253\"y\272\330?\220\026\302\305\345\223\340?\235:\003\341\022Y\333?\373\371\337\337\332\350\306?i1\035\337\203|\346?\317%f\007\246d\322\277F\330\246g0|\317?(\224\215 \370\314\325?hg\207\256\372\022\316\2771\365N`\225\346\303\277\202\230|\2320m\307?\264\377\"\344\223\200\327?\214\323\326\251n\205\313?\371o\271Uk\274\277\277\363\032\375`\307\034\307?j\345w\375\366s\327?\357\0326\302\211\205\304?\252l\355\267U\024\312?=S;\005\361(\320?0\344d$s\223\302?\2310\365N`\225\326?U\271\263#\223\033\321?X\254\300\024\016R\267\277\021]\'`\001\355\331?5\251\025d\323c\325?Wsg\303\355\322\331?\254\013.\014G\306\330?\016\335\354\017\224\333\303\277\371\353\241\277\310\262\350?\224\374FC\337\300\310?\372\272\312\342\027\201\322?>\306\201\374\021+\333?z\223\370?4\261\273\277\255=\242\370\347\030\342?q\345\252\201\377\020\274?o\010\372\260\203\357\334?\206\357\365\234\221\224\326?\363A\350\003v\363\326?\315\316\370w\343\310\216?C\214[\365N\277\313?\033E9E\005V\327\277\277\007T\244g\037\327?\342\001\310}i\331\320?\271\341V\305DX\325?\363\246\205?\201\177\327?\220\354[\367\240\261\321\277\246Lb\367\272\230\311\277b\010J\033XX\320\277\274\3774Z\263\272\316?\306\335\210=\240\253\216\277\354\214JE\276\246\341?\2321\273\335\201\320\341?\245\374b\276\325\035\265\277.x,\021\0038\325\2777\010).}\236\327?\326s\220\337\364\221\331?\200E]\357\'\370\262?|-\246\241_\276\310?<\370\313\037\272}\333?p-\254~\031\212\323?\252\031\010\270\326\315\324?n\030\303\244\021\226\327\277\274\311\322\373\204\273\306?\217\216\253\221]\351\320?\3109\271\370>\311\307?}\275\322d\214\260\316?\360\305Q\230{\361\311?C7\373\003\3456\333?\306*\357\364\224\346\330?\302 7c\233\313r?5i\t\350tO\344??\227\241\330\247\357\305?\205$q^\265\025\320?3\031\216\3473\240\327\277\336i\235~q\245\325?(c|\230\275l\321?\273\355\245\235X\257\306?\002\213\025\230\302A\304?4\265\021\364\274\300\324?y\327\321\0377\217\320?\245\230\315-\276\262\325?Y;\202\002\214:\303\277ZM2\315\317\250\346?h\213\020\303\263\251\306\277\221\214D\204YJ\251\277\207\257\247\004a\272\320?\316\344\366&\341\235\321?\220Q\032A\225\340\274\277\367\364\350x\222\225\310?\353\232\034\200\005\227\310?\005\336\013\304\231\374\323?\312\317>=S\373\331?\032\276\350\237\236F\322\277\365\317\272\343\240\306\323?\337\252F\n\300\232\323?\360\220\2759\267\344\336?\\\254\352\335\006R\331?`gT*\362\265\326?`\263\226\341\303\025\320?\235\007\301\364\007\224\332?\004e\t!\326Q\307\277\246\370S>_\016\325?\374}\326g\224\317\312?e\002\2708\256o\265?\311\321w\022l7\323?<,\317\341,\265\276?\377\305\267\240\214\253\336?\003\243\201\016\251X\310?k\341&a\256\236\326?\010de\352d_\230?\346\323:\334\324a\307?\003Z>\273\021\320\327?1\244\232\304\346\004\326?\\\253=\354\205\002\302?\037\224\203\033!\252\332?r\204\220\034~q\303?\256@\035$~\244\325?\310\271\250q\3127\321?\224\243\000Q0c\323?\020\271\317\340\245*\347?\333\313\256b\216\261\324?\327(\024\267D\r\301?\370X\362_\275\235\333?O\3333\t\346\001\305?\221\032\311\324\023\314\320?\207\0147\"\020\326\324?\000\240\324\250\321\365\326?S\344s\233.\223\327?\364\031q}/\360\326?>\373\272\241cf\325?o\207\341~\033\235\340?\210\365%\237GZ\316\277\025\257Y\376\341\206\250\277\266\200\022\227\312\370\311\277\307\246\256\337\300\342\326?\027sc\274\336d\310?\210Q\214\003\0322\320?\036\007V\274.\217\320\277d\205\021\261w5\336?\306\355D\007,\322\312?Z$q\177\303\376\327?o\020\255\025m\016\305?\251\206?\273*m\320\277-\353a\334\313E\325?\032\003\004\326\036\264\312?e\362\027\304Q\003\305?\233\367\007\343\n\234\255?K\245\247\341\276\002\263?\314\364\350\231\240~\315?\357z\304Cs\270\331?H|Y\240\376\257\302\277\324Orf?{\306\2775\314\022\225\364\315\272\2772\254$\252\236i\270?Z\244\3440\363\370\336?;H\231\036^!\314?\267-\302\373G\362\330?u,c\001\033i\326?\214\314\361D\357\330\317?\352\200\332^\301,\332?\267\353\3067\353>\314?\022o[c\351f\321?\267K\362\216\031\311\277\277;,`D\323\000\323?\240\330\257\340#\007\304?:\201\237\'T&\312?\r)\263\377\tG\340?\331>\211t\344\355\335?\316j&\204\263@\336?\3430\252\242\376\316\254\277Rj\212[`j\302\277\316\220\205C\312\352\342?\350\260\261\001\307\224\325?\025Q\270\303\313x\271\277*\344\010!9\374\333?\265E%\267\036\354\310\277U\224\"d\346#\312?\307r\277\0015\216\322\277\353t\377\334\300\262\310?/\375\307\031\365\326\307\277\300C\024=7\007\236\277\261GM`\337\363\327?\ni\215A\'\304\325\277\2327V{;6\304?\334\276\242\266h\334\324?9\227f\343V\373\330?\214\247S[@!\224\277\216\202\226d\323\200\327?\266\217\252`3\304\322?\326n`\027\352U\315?}~s\332\256+\330\2772\306\352\003\207\237\303\277\004MS\035\325\035\323?V\367#\240\035\213\335?\303[\214&\274)\324?\224\360)\245\014\201\326?z\252\340C\313r\331?\032t[\205A\027\333?O\022\001=\303\n\327?\307\222\305?d8\334?N\364\226\376g\305\301?[\220\261\003|\361\330?\333;\376f\275s\314?\235\304\326\"X\213\311\277\357\251\377 P\205\315\277%^\371\207\210v\325?\003M:\2004R\322?<\247r=~-\333?\214\005\317\316\263\343\342?$\336\317cs\331\326? z\326^\331?\325\277Z$\222\215\254a\344?A\235\217\276\213o\331?8\013b=Ad\340?|\360\332\245\r\007\307?\233K\273\342\363\324\271?r\303\214|\240\r\307\277z\305S\2174\270\303?\250&\230\234\240n\330?\300(\275F\375\273\310?\347$\255[\261}\232\277\241\310\007\373~\003\320?E*k\037\033\226\310?eK\177\304\351\003\300?\262\217\343\301\365,\311?\344\327r\333|+\306?<\317+\340\226\366\302\277^nj\177\353\263\305\277\324\222\267\361a\325\262?\350\'A$\350\324\334?w\333\205\346:\215\301?\r\300\'RqN\267?\320\323\302]\244\255\325?\343\244Q\375ZI\327?\361\360\340\037\235\327\321\277\270\236\327\216\230\017\332?k\371\334d\257\322\324?c\341[\300\032S\263?p \311Q%\257\344?\277%B\033g\260\325?*\215V\275\025,\326?\035\223\305\375G\346\326?v3\345;\337\354\327?#\204h)0\317\300?\002+\352@\224\267\263\277\264\263\001;\253\003\327?\251v<\034\023\030\326?\235M\344\325{\"\316?\215bV{\032\250\335?7tq#~(\321?\341\007J~\202\223\343?\0237\372\332+\332\277\2776\200\320\335\"\356\336?G{\027J\201\340\321?\341W\223D\202\353\321?O^\277\273\360\336\320?\226l\310\201O\332\303?>Lo=\022H\310?\333P\020\300\366A\341?\233\301\204v\363y\327?IA\\\336\301\264\336?\300+\335\270 6\324?Z\236\305Z\225\347\325?\014O\371!\200%\327\277Ps\217\370W\007\306\2777\354k\033N\262\315\277AL_[\201\231\311\277\265\332&\211\343H\310\277\333\300_\304%\244\326?\342\306\261\036\214\022\326?\004H~\016=s\315?\336\0003\337\301\317\274?\002p\201>p\031\312?{\026\204\362>\016\323?\031~\005\243q\254\304\277\366\247\001A\210}\306?\255\243\252\t\242\356\327?\210~\252`\r}\270\277\345\232\300|\313\277\321?,\274h\033\301\276\276?\004\030\371i\232\377\311?\272Bi\271}\240\326?\302\000\035A\205~\332?}P\202\304\227\205\324\277\211\020\364\243#\261\276\277$\257sx\255)\313?\3235\310a\206\177\222?\026\233\373P\016\213\336?\362l$Cm\237\335?\337\013\003\376?:\273?\355l\237\300\001\316\320?5\027\013\205\000\007\324?!\366t;\034Y\307?K\3652\304\220\240\325?\032W\267\325\007\355\326?\273\307\004\302o\277\331?\007\013\006[\025v\314?g\221\324\337\236i\321?\252\313\020d\220}\333?v\322\014\363/\023\326?oJ\026\203\311\305\321?\305\034gGh\323\311\277k\341&a\256\336\310?8\305>\\\315\025\331?\313cQ\001\305\202\334?\350\337h\246\377\325\270\277\254,]\003S\264\300\277\300<\350\002,\254\316?\334w\024\000F\304\330?\005zU%\231n\330?\0027\336_5\375\323?\235\376\005\345*T\300?@\257.]w)\312?6~<O\227`\344?5\030\331\204j9\261\277v\256\203\336v\274\322?w\321_\001\257C\304\277\006\006\367\240\363\034\335?7K\321\343Z\241\324?XJ\"==\335\326?\273\235\330\236\264\013\325?\177\263A\344\374&\322?n\337\243\376z\305\320?\002\343\215\212\007-\305?H\232\354]\213/\307?O\026\347=\010\340\314?c\000\362o\341\212\311\277r\336A\344\333\230\323?q\230`\037:\220\330?^wF\235\261V\320?\373\306|\345\346\300\326?;\231n\310\365\245\317?\226\2606\306N\370\327?>Da\037\266W\334?\221\254O{B]\330?\2018\223_\324(\273?\324z\205&\005\355\314?#J\275\237\001\022\322?\374b!\000Y\004\307?\231\324T?\004\017\321?9z\241%4n\321?\210\263l\367\274\254\322?\377N\244E\307\237\301\277\361X\277\333\264\000\307\2777\244\366\307 \034\326?\245\3507\002\247-\346?\355Xt\004\323\335\305?\007\351\214\234Ca\333?\321Nz\235\334\010\317\277-\317\244\311\234\031\313?T\275F\334\2556\320\277\272ui\211\266\337\301?\211\200\340}\227J\261?\266\235[\215\221\221\326?\323\031\326\\\207M\323?\326\255}\205\365\224\315?\201\246\261\3772\306\272\277\002}\307\225\037\335\334?\252\020\217\304\313\223\323?\3232R\357\251\234\303?H\231\242\226\305\310\300\277k\242l\035^\010\300\277\020\376\311\010=\325\302?n\':`\221\276\320?\264\306EZ\317\265\304?\353\253\253\002\265\330\342?\327$\211or\t\317?\223jD\325T\273\305\277\246\003a\300\365\225\332?\245\314\274\013J\207\302\277.P\326\230\245W\306?\014\261\227\371P\232\312?Z\231\266\240s\216\325?\320\022\236\257\335f\207\277\261\252\2717\032\233\302?2l{X\373}\267\277-u\363\001?\362\323?\242i\344ND\032\306\277\032p\320=oS\320?\227\302(\255d\254\342\277\037l\312x\010\241\307\277\247\313\244~\305w\324?\361^\275\243)\257\262\277\355\177\343\337%@\332?lH\365\000\212\017\340?\014\372\271>\377\377\317\277\213\273\007\t\315\005\314?\177\213\312]\266c\307?\261H\2705\216\375\322?\207\327\232R\003\362\326?\2071m(J\374\315?Z\261\tz\271\231\324?\344H\014\247q\024\306\277E_\346\340>\327\350?\353l\257\242\222<\320?\r\030E\213Ch\262\277\002\002\347\326\265\207\303\277\362Tn?l\353\330?\317\301\361\204w\334\332?\262\310\002h\214\275\313\277\372\227\2442\305\034\301?\030o\022 \226O\327?\370\322\312s3\222\333?\034E\326\032J\355\321?\037J\264\344\361t\334?\251\234\335\367\373\007\272?b1\352Z{_\330? K\366:o\204\324?6d4\331\334$\303\277I`9c\024\333\320?]\2613C\262Y\325?\356\253\027\350\177\336\313?\375\323\330!\250a\236\277c\345~$x\005\317?\302?\327\204\325T\313\277\250\317\243\034\253\230\316?S\353\232\034\200E\324\277\304XK\246\257\214\240?\206N\266\036\021\025\322?,x\033\345\252C\314\277\363\201J\200\2150\274?foB\204,\311\315\277b.\251\332nB\322?\202\036j\3330J\332?`\031~\344\224H\332?&Wo\334{\033\332?\205\315\245]\361\371\302?k`\355 ]\t\327?\313\377\334~\226\372\330?&)\237\324M\030\321?\'[\023\301\356*\325?\204pX\\\024\244\326\277\336\2059\203\267\256\326? \324\240\303\327r\326?\257\252E\341\006>\301?\231\220\244\3362\213\340?\324\325\374|\204/\321?4-\220$1V\321?\3472\373]T\342\334?\246D\320\240\272\034\254?\226\275[\017\025\231\321?q=\310\272\321j\322?\3244\336\014\355R\306?(\\4\t\203W\303\277\310\234%\320y\360\275?)\3305\020\201\231\340?\374B\300\010\267\010\303?\310\316\333\330\354H\322?\365o\362\266-\245\342?\nuG\265>\033\322?\332\005 A3\000\341?\337\311\237Vnu\310\277\365_k\337q\244\340\277\273\300\233$L\307\325?n*\367\247\371O\326?1\266\020\344\240\004\305\277U\272`\025\024\253\305\277\2321\232\317\230\315\275\277\252,\206\202\204\356\326?*^\033\3408\337\310?\234\017\225g\332U\314?\324\355.H\341\027\312\277\201\013\r\037l\214\324?\251\303\310\232\252^\324\277;,\273\375ER\325?a\005\256\341\330\351\332?\375An\320\250\n\323?[b\334B\224\205\250\277\320\367\256\234\030\355\335?\356\325\"\375Q/\343?k\320~A^\321\334?\345\216M\336?\227\240?;k\\\244\365\334\343?\031S4\377}\200\326?\273\262\217>{h\312?z\223\370?4\361\322?\334\3423<j\n\330?\225\271\226\034\271f\325\277\321\254\256;\304\034\323?\313\0308\003\320&\322?\343\271\010\235!\346\317?\246\020#\337\000\016\302\277\223d%\377\366i\326?\363\321\230\377F\361\317?\210\232K\036\r\357\320?@5\034\236wF\324?d\335\313\277\216&\331?N\335K\320\025[\276\277\260\033:fn\370\276?\234\007f;\225\302\303\277\344\343\250\026\3606\306?\345\004\022\271\205\323\326?\222\312\024s\020t\317?\006\200\t`\363_\345?RI\235\200&\202\322?\271\243A\002-z\312?w\251l\263\014\314\273\277\225\321\n\004\350T\336?\336l9\270\360\023\303\277\275&\234\304\275\005\301?W\264\030\300\204\037\324?\027\033F\203\014K\326?\250\323.d}\334\323\277U\344\306\343XM\315?\372#\322W\014\256\307?\373\316\212\003C1\323?\277RL\224s\030\346?J\036W<Xs\317\277\3643X\345\000\311\324?\223\033f\344\003\355\327?\033\3700\377\021\233\303?\024\312%\002\223#\272?]k\020b>\213\327?\244~(\342\276\337\320?\032\"\033\006\373\310\317\277\374eAr|~\321\277\023_\263}D#\336?\300\215\234\236\332\215\335?\206\264\235!\342\207\307?(z\"\200\202\250\324?\266\222\251\304m\033\301\277}\263\315\215\351\211\320?=\231\240\0027\275\300?\212b\250y}\034\322?\350\035\300\205\351\271\313?\250\234\304Z[\374\317?(\273x\303\246\343\311?\224\376\271\303\201+\343?\0138\225V\215\257\341?\036\0249\351\"*\303?\2419\343\342E\362\326?\341\027M\035\232\350\307\277Y\240\037>\227\306\264?\t\361\324e)@\263?B\351M=\271\203\326?\225\311,\037\242\001\253\277\026\275\3279\233H\315?\230W\tq@\246\340?W\240\253\347\203\351\310?\2505\356I7\364\266?!\002P\275\034\223\325?X \325\013\231\206\275?\3761c\300H\236\322?\312\034G\203Fv\323?JV,\033)\235\321?\037\035\354\207\267R\302?2\347\327\336\300\207\321?\312\236\251|t\317\327?\331\004\275\334\314\215\324?6\314L@~|\324?|4\315\"\2610\320\277\342\225\301\244:\325\321?\207h:\\\'\005\326?\036\256\356\273\226\016\320?\002<\263n\315g\323?\303\227\r[Hz\311?\225+\233\275\\\331\320?!\013M\351\313\030\312?\321^\371\003P\322\310?\0003\204\010\335\n\344\277B\265^_-\357\326?lO\216\327\303d\232\277\332Bg\004\341+\331?\217\314\237F\214d\300?Z\312d\376\362E\314?\352\\QJ\010\326\325?P\023\246\275\373B\325?>\351D\202\251f\314?_\000\310\246\350\212\262\277\272k\307\334\316\341\331?;\000\342\256^E\320?\360U#\2425\222\306?& \344\304p\330\330?}\301\270e\321\005\324?2r\026\366\264\303\316\277\037\207hD\316\232\202?\310\253v\304V\r\232\277\255\326\354\365\254s\307\277I(\"hq\353\324?5\314u\277\257\266\331?\262d\320\0010\273\303?.&O\274w\022\300?J&\247v\206\251\314?vM\212\207\336\177\313?T\353X\000\256\277\301\277\301p\360}X\014\304?\221\331\223\237\330\263\326?\264l\265\240Zq\330?h\200E]\357\'\323?\274\361I\202\313>\331?\237\223\3367\276\366\322?\312Q\035\376\334\210\321\277\365\025b\375\270`\303\277\310\211e\351\371\211\324?\324\222\226\343x\362\327?\376\305\"<\220+\337?%^;\244Z<\325?-\245\374\336\205\261\336?\234\222\203D\240\033\310\277*\205H\237\271\373\331?y\245\362\227\222<\300?p, \233\201\035\307\277_]W\304\227&\334?j#\215\300\016\222\331?hk\022\366\314\026\262\277\226jU\001\255/\333?h5n{\314Q\336?\373\246\270\303\211\\\320\277\304\201\353\345\322S\306?u\361\216\276\017\250\276?\323,u5\036\021\323?%\177\322~\333{\256?\365\021\370\303\317\177\333?\333\331\001\036\353\276\270?~\2707\001~\264\322?-&\364\002\005A\330?\3322\350\235mb\321?\356\0064\205\214\017\323\2770A\364A\"/\300?\365X\351\244\255\200\310?(\345\275\203\002c\325?\022\374\312\336\255\007\330?\t\250O\366\277q\301?h\211\235B\021\177\323?\350\n\276\202\227\r\320?\"\"\220\246\325\253\340?\312td\274\030\220\327?\264\314\001\006r\236\307?\274g\023\026\313\343\330?->G\334J\214\321?g\321R\261\345 \216?\024\254\026}\252/\306?\236/0\n\006\000\313?\232\204E$\216\345\310?@\364j\241\3409\272\277\232>;\340\272b\314?\010j!\226\007\310\313?|\030\357\001\231\241\325?\3261t\r\257\373\275?Z\226\267<97\316\277\025\275:dV\361\332?\302\346V\347\234\310\305?\362<\237\236\312\253\314?\222`h}\343\316\310\277R_\267\204SQ\310\277\377\251<\252/\005\302?\'x\371\214\372\332\306?P\216\002D\301\214\314\277\230a\253\035(d\333?\032\200\262\316\235\005\322?\304\250\265z\230\207\323?L\220l\tTZ\323\277\236\375\222\2363\263\307?\377\2301`$\317\333\277\322\207p\304A\337\314?\241\355=\001\271\351\307?Q\357\322\033(\317\311?\214\311\260\304\342;\306\277\007Zh\204\nP\331?f\265\351\235DC\343?O)\247$\210F\326?\202\322i@1p\300\277\030\036\342\274\213\271\320\277\232\354<}F\032\275\277\320\313\315\334\350\310\325?\006!j\354\\b\332?t\tE\302\020\034\316?\241\351\231\034F\332\302?\266\362\222\377\311\037\337?\251\016\034D)\251\330?\355\256\375\256\031*\260?\365\372\254\225}\025\313?\264\327\222\300\254\361\336?\016\225\261g\360\363\307?7\236\031\016\225\220\326?\222\002M|\234\306\324?\316\270\272\255>\350\326?\354\210dDy\321\313\2774mZ\204\275\344\320?\337\344\022\242\327:\324\277\006(\262{\227\367\327?\273K\034X\022\311\313\277\221\202\206\202B\322\324?\357\"\310\030\212\001\272?\212G\230X\317\377\341?\314\253\000\000|\307\303\277\306\272]\324\223\036\332?\032\nLeY\311\332?\010\360P\363\331*v\277kw\027A\306\020\320?B{\324\343\347\324\337\277\223\365a\336_\024\326?\277\233\260\365\363C\267\277F(\266\202\246%\276?\374,\355\220\366QJ?\364\253R\335\320\322\330\277\361\232\035\312\314\334\306\277\340(\334\237I\252\332?\225}\231 \321\241\320?\034\317F2\324\366\265?7p\346\333\253\244\337?\313@\257\211\026j\325?"
      }
    }
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\265\025^\366\2512\304?7\276\274!\tr\343\277\231\033\307\240\367\354\277?k|h\027\272\257\260?\250\267\222_7S\324?\326\327F~\365\037\306\277\327\343\315\000h\253\250?^\272\315D\2466\305?\303]\305\373\324%\312?\032\242\n\177\2067\344?\354\330J\340\275\000\337\277p\030\026\355;\220\341\277\356\305az\014 \346\2776+\364$]1\326?\325\255\277\241\307\332\337\277\333\356K!\203!\271?\322\315\027\336Yy\273?P5z5@i\332\277\210\226e\035\310Y\311?\270\026\230\333\336\352\335?\346\367\313a\326\017\327?\247I!w\256{\316\277.\357\303\244l\317\335\277\003gB\366\356M\317?\265\225,aL~\275\277\201\226lDI\253\313\277=\302@BZ\244\344\277\277\314\325a\025\007\253\277Q\322\r^\005b\342\277N7\014\303\240|\244?\325O\027d\255Sd\277\313\301\307\273~\\\343\277WW\313\276\247I\316?\263\270\234\236\271\377\315\277X\301\024\212\031\206\342\277:1\230}&\024\333?W(-\267\017\324\260\277o\270_\243\204\027\251?.t%\002\325\377\330\277ez\272\241\306\220\343?\352\267\n\275Y\036\340\277\017b\203_\314\221\270?q\207\246\034.\232{?[ \244\033\0375\332\277\244\255u\242W\025\255?\264\233\317oN\333\330?\251\213\261\237\007\257\335\277v>\362\275u4\277\277ao\377\035\223\375\337\277\034Y\236\254\275t\327\277\335\214\242 \333f\340\277\324\255*=\313Z\323\277\335\337\352J\025V\342?R\372\370:_\342\327?\263\221\224\201\266\246s\277\260\335\342\206\204\024\321?e\243Z\341\351\227\347?\202\230|\2320m\307?3\000\3208?\213\261?_<\007\277\242\225\304\277|\271p\234\353f\305?\337C\262\025nX\316\277\022\367\273$\214n\337\277t0\264\235c~\313?\340\013\233\032\313\350\300?O\327\352\335\345\303\305\277va\265C\r\260\347?R\266\212\366_\204\273?KJ0\213?@\340\277\224.\242\222\337\007\342?\374\345\315\300L\004\336\277\233%\\#\335\252\310?\\\202\276\272K\336\337\277\346\034\334\240mj\257?\364\362C\276\256S\307?9j\340\242\356\336\325\277n\351f\271Kf\263?S\250v\237F\216\336\277\356\226\344\200]-\345?\007\205\326\375B\223\311?\031W\032\000\303\325\341\277S9\222p\306\325\350?b\203\350\275\357\347\332\277(E\216!\276\333\321?\036>\002\342\"u\336\277e\312\342Y\335\205\347?,\225\340\242\315P\322?\256\314c\346e\301\316?\344\373\034\376\036\305\344\277!\210=\376\034p\341\277\023\324\021<\225\276\301?\373*\257KC\203\344\277\351\351\3106\025N\340?\226L\302C \260\321?\304\t\351|\272r\324?!\023[\007(\t\310\277\346\nJ,\2040\315?XLS\241\r\002\270\277\030\037,\204Q \264?\240\354\230\200\200\021\351?AV\001\010iW\325?;\007\205\367\013\254\327?E\245l\354m\016\346?~\202rx\224\214\305?\025I\005_\342\271\341\277\n\214{G\033\264\230\277\310\262`\342\217\242\344\277\032\223=\303M\246\223?e\237\215}E\216\326?\314\275\372W\332R\307?6\350\350D\304\205\334?\224\221H\025\244\235\316?\037\217\317\032r\342\341\277\224.\375KR\231\315\277\306\027\355\361B:\343\277\'3\275H\221\312\313\277\231t\204\241H\326\316?\277\245R\242\333\201\301?@\335\376d\245\254\322?z\227Ak4o\304\277\330\363\322\240\252\272\326?\247\020<|\241\031\301?b1E\024\356\260\345?\342T\020\250\243\210\305?p\314x|\367\036\311?\340R\204\212`\322\344\2777\n\377\330\3321\311\277\004EE\377xm\340\277\357\354\206\310D%\334?\200p\364\347\221\365\325\277\214\267|\301\372\201\336?\020\013\020`\354X\351?\307\262\252o\252\377\314?R\237\036\272$w\314?\021\025\221\376\3523\323?\340Fo]\326)\322\277\255\310C:\227\275\304\277\332\375\026\334\220\370\253?\333Y\354\335\274\304\305\277\246\202i\234v\306\336?g\272\266;\2246\276\2771\203\347\2246\213\342\277\255\220,?\364\315\303?H\222{\025t\326\341\277\003\003kI\005\035\250?\253`\257\013\232\261\345\277\324\177\326\374\370\213\340\277\334\341# .\322\332?\203)\0243\014i\344\277\020C\'[\217\210\327?[\251\261\316B\214\345\277\261\266s\2531\262\340\2775G\024bG\006\334?\254$\252\236i\325\342\277\313Z\267\377\320\345\332?\215\362i\241\246\216\234?\016\230\321\331\023n\304?<`h\277\377\300\350?%\204I\034rf\241?)a\340\230\351\207\262?\373\263\274\376f\332\347?E|\253\236a\244\332\277\t\261L\"ow\346\277\331\344\225\220\264\300\265\277\310Iz{\204\030\327\277\266\306V\206\'\252\272?_\267\347}\014k\302\277)ED\224\243\276\261?u\3254\326\233\244\310\277F\213}\023T\336\344?l\267\270!!%\314?=#\370| ;\324?\'C<\257\004\224\273\277\317\370\235\252k\202\254?\207\201\232\231\032\032\225\277\021\001\207P\245\246\341\2773\237\030\376x4\347?\357\r\014\300\t\374\246?\246K\367!\014O\335?Re\030w\203\250\347\277\355\216\030\177\323\242\321?\"\300\216\244IN\347?\377d\306\272<\306\317?7(\205le1\211\277{\350\314\207\261\026\344?\005\340\300`\016\r\341\277\325O\213\003\340F\320\277\337\325z\330n/\251\277I\264\354b\375\223\307?\254%6\202\001\302\341?.\302\3329I\312\260?XIT=\323\312\340?\021\266\216`\231-\331?\345\274\367\036\313\016\350?\215\030\311`\275\370\345\277\217\224\210K\351t\351?\375\374\333\213\206\221\210\277i4^_\220y\343?FW\361_\2032\345?\317\263\243\202\324\267\315?\367G\316x\021\\\351?\225\017A\325\350\325p\277\263LT\251\270\365\302?\321p\261?\334W\324?j\301\007\206\336\250\254?\t\n0\352b\354\307\277L\371\265\232\032\r\335\277\234\2016\336\302\177\346?v\226Q\023\032\024\261\277~\313\030\366\346\375\301?v\363\277\"\340\014\324?\223\232\352\207\340Q\315?(\251\002\244\354\343\314\277F27!\245\200\334\277|,\\\332\231\327\262\277\273\307\343\263\206\\\344?\357@\225\201\240/\303?\265\367Nq\301>\351?\032\263\231\0016\371\340?\231\032W\022\217\272\341\277t\225\017\275\234\304\311?\235\031\026\006\331p\265?\242\003\232!\270\276\342?=\335\222\177\332\246\350?\257\235\203\302\373%\343?Fa\325(=\266\304?\224T\"`\337\024\337?Ua\\?7s\351?\363\370\305\276\307M\325\277G\2753\034\307v\332?\345n\204\003)\312\307?\256Bo\2267,\306\277:\340_\251\323\246\336\277\271\221O\033\027\206\321\277.\246>5\003\301\343\277[\357\026\314\210\240\273?{5\233\"\033#\316\277r\367\336\204\347\312\334?\254?\035\352\322\232\341?_\330<<\273\344\257\277m\211\277\232\301g\322\277\n\343\365\000\340O\216\277\005\346[\376\307\262\270?\265\3229yp\373\273\277\272\241\347\036+\333\267?W\255\257\"ag\303?\311=]\335\261\330\306\277\324\266\202\"\355\261\311?\342\010\255\342\350\345\344\277\354\265,\241\263\263\306?\206\017x\242\0343\342?b\216\3241\235\314\341?\262L;\014\030\352\272\277\307[\225\341\313\006\271?\024\257\262\266)\036\345\277\361\\)\025\236a\341?\243\261\264[\344\001\275?*\"\036\344P\032\343?&\243Ni\222\022\301?\253(\034I\233\r\274?7\2245E\333\314\334\277\262\220\312^\000+\307?\334\226L>\013\374\313?\031\302\326\021,\263\350?\346\246\204bV\350\244?\022\337\005!\213z\301?\273\356\357d\036\326\326?\346\314\270\241\020^\351?\000\000\000\000\000\000\000\000\222\3406\350\205\232\301?Z\241\243\260\346\033\351?N\251}\000s\t\350?\227Zk\3775\346\276\277\243\361\372\202\314D\330?\220p\265\251\025\201\311?z48\276\264\360\327?\370\234\005\353I\252\311\277\026\r\337\343\310Z\334?j\346\177\250\352\024\345\277\2125\035\200[\027\266?\272\275\007\\\025\260\271?BM\302\277\347\213\335?\251k\355}\252\252\344\277\rjd\374\240S\341\277z\205\252=\221L\316?\364\276\226\374\364\204\330?\263\205\035O\226\035\200\277\031\0016\234\t\270\336\277\211\314\277\n\256\301\210\277\334\355\037\260\027\257\250?\242\270\302?\225h\307?~\002\203\377\010\336\331?q[\2661\321\273\346?\025\037\372I\020\t\320\277\367\327\341\236\235\002\323?\310\365J\264?+\341\277F\303s\000\016+\326?\307\233\241]*\333\271?\253\210G\240\311\227\313?\307\202\302\240L\343\333\277\377K\347\375^\216\231\277\210\373\300<\001 \327?e\335\344\\/2\320?N\251\277\034E\357\303?o\206\275~\370a\274\277\032o+\2756\333\341?+g\224\323C\231\340\277W\212.\271\233\261\343?V4\214q\264\331\340\277\252 PG\021c\342\277\2246\217\242R\025\320?\214\274\254\211\005\376\343?%\271\262\372\331~\343?\231\310y\275\003\325\346?\013\275Y\336\260H\342?Cs\276TCM\270?\220\"\235G\346\215\305\277\261\374\032\305IL\325?$\206\3238\212\"\347\277)\301,\376\000\365\346?{\213\354\"\003{\255?q\265\004\317sz\342?\016K\003?\252\341\327?V\205\037\377y\330\343\277\322\020~wev\314?~\225t{\3468\324?v*F\2011g\275?p\315\302C\275E\337?s\241\023\276\3168\314?q\020\000^\227\310B\277\331\346\214I\373\366\305\277+%x\001\376\302\336?\310\001`\341\3113\342\277\"\350\303\016\276\013\346\277vL@\300\030Y\335\277\220\020\345\013ZH\210\277!\022tj\035K\351?\332#/\306\0334\341?w\204\323\202\027\375\313?e\222\354l#9\351?\247\343\265;9\375\335\277\356\210Tb\350\002\340\277\273Ig\273\235\230\330\277\210S\234Y\001\264\345\277\372<\002\\\351\345\250?\322\022u0\254\254\337?k\225+\177h-\272?\r/N\235\303\214\303?\267\337\220\374ws\342?\0210\343;k\226\275\277\376\203\354^e\353d\277\235\0052\0376\257\273?h\004\033\327\277\353\267?\261\367f\304\232\004\312?\004\210i|\262$\323?j\275!\205\231\323\333\277\027\000\364E\214h\303\277\350\024\201=h\256\320?\017K^\370\0343\352?q27\000\227W\314?\356p\340z\271t\341\277\240\352%\000\336\006\307?\237\317\374A\217~\341\277;\355\000\272\365;\314?\022\267\366}\271\310\260?j\2117`\307\347\260?\320D\371\376\335\355\321?\025\027\211\001\371\357\350?\241G1\345\350\026\327?\231\265\332\344l\021\330?\001\363V~\225\323\317?i\330\362A\004Y\277\277\272\333\263\266B\273\314\277\361J\222\347\372>\344?8*-\337\327\241\242\277a\231\276\244\037w\203?-\020\363\233x}\347?d\221&\336\001\336\343\277\314\241\373(\331 \304\277xY\270Q\t\364\256?eG\364|\027@\324\277\323\265@\314ob\346?\330\272\324\010\375L\327?\337\375\257B\343,\331?\002-\372\226{y\214?\343\366pn\270\264\346?B\275\021\304\026\016\306\277\222tQ\035@\231\345\277{\2328^&\217\341\277\233\331\370]\"\350\343?`\265K~8\306\323?\371\232i\353u\305\277\277\333X\3442\311#\305?\002\0031\236{\316\342\277(\254\\\301\231\314\347?\374\320\273g\023\326\344?\035eq\275u\027\347?dEh_\324)\341?\336\377lP\240\364\303?i\344\220`\3545\320?\331U\3141\356@\276?\004@p\360\340B\342\277\3223\203\031\317w\312?E\360\340\243\325\373\305?\025o\016\036@\233\242?\366\254\020\373\251V\320?\244!\035\375\263\217\325?\270\276Y\224#.\344?\036\200?\302QN\351?\237\342\233\032&\242\316?L\2647:\337\266\302?\026\372\036\375H\364\321?\330\262\245\334\2679\264\277#O4=\230|\257\277L9\374\301\002\220\342?\265N\236\252)f\301\277\341\341\352\276ki\342?y\203\232\347\251\212\267?\364\340\213\202\"\216\350?{\364+BV\\\254?|\274\312\271\230\217\311?l\360\031\344\211\273\320?\302h\373\374\234\247\313?o\247c\204\246\233\346?\330l\037\321\210\302\265?\3771!\244v\330\312\277$\376\027\276ti\340?\244:x\201\355\233\343?\001!\'\206\303\326\305?e\273k\236]\035\301?\231\236\212\375`>\254\277N\373\246\343C\346\240?\351Z\305,\305\037\344?\021\276 \267\231i\317?\232\213\307^R\251\316?r\307Y\340D\327\331?sX\320j7\260\334\277!3\371a\342a\260?\2042\200\374\024\343\236\277\013\226\352\002^f\342?8^\211Y\222\260\302?\320a\000\331\322@\306\277\245\217m\327S\304\306?\273\247a\256\373}\343?\267\001\n\273I\010\331\277\030\000.\361\025\027\254?\035S\373\235\273w\347?\312\317\272\004\257/\316?\2747+Gm\207\273?\245\232\335\203\245\364\337\277\010\002d\350\330A\270?kyH\245\2265\314?>\236+\204\264\312\305?\363\032`\213\202\305\344\277Aw\356\342\242\277\326?uq\341aV\177\303?v\035\005\343;\214\324?$\035\016\340g\233\347?\307z0JL\'\314?$\216\310\271E\307\310?\306TU\303\331\010\330?\234>T}[.\334?\204\251\366\201\225W\241\277\361\210e\216@\027\321?\200h\203\237z\234\323?H^\010\377C\366\302?-;\006\\>/\315?\333\350\020\366\365\225\316?\330\222\237\236\210\317\326?\177C\362\337\315d\342\277~j\311\236\225\230\254\277t\373Y\352(\240\307?\201\263\224,\'!\336\277K\0027\377m\236\332?\205\356P\034Y\234\334\277\303\327\327\272\324\210\336\277\264\352\357|qo\324?\010\322\377Q\037q\260?\327\312\235\374\2123\325?\303\253\233A2\263\344\277m1\344}\301\223\301?\207\376\t.VT\332?r\311\314`\347\341\343\277J\352\312\210\207\207\310?\r\301\026`\304c\311\277\213P\256!\037\321\342\277\356\237~\202QJ\351?\365\370\367\370\010%\265?\327\361\336\237\362\262\264?\216\'\233\325\2572\311?(\\4\t\203W\303\277\263b4\002\\6\347\2778\005\"Y\372/\302\277\266\376+e\370\323\330?\312vt\022\000R\344\277\267\0101<\233\372\307?\216\371\251\277\230\214\313?\201\210`^x\314\344?\302\216\326\203\017\306\311?\n\345T\235\233\327\337?\227;3\301p\256\254?\206\336\013aoA\323?Q\005\355\037U>\341?\000D\260`\321\243\350?\025\206m0y\350\342?VmP^\330X\277?\360o+\030\360\r\315\277N\037h\242[\261\324?H\300\350\362\346p\344?\202iA\275S\340\323?$\325w~Q\302\343?@\365Q>\3537\336\277\361\225\345\220y\211\343\277\307sP\236\206c\236?\323\361=\310W\247\310?`7\317\205OB\270\277\240\225jU\001\255\307?\033\250B\362\204\024\312?\'x\330~\0218\316?\206\262l\275\021\243\302\277\354\352\300\377w\300\265?\267C\005\177\246\373\302?\364\211<I\272\246\344\277\313gy\036\334\035\344\277\302.\314:\312^\332?\004\333N|1k\334\2774K\002\324\324\262\300?O0@\373\301[\200\277\022\3619$s4\313?\n\002\330>\354^\341\277\265WY\272\006\246\270\277\321\001\254\002s|\325?\203\300\014\276\027|\346?i\275\347\331\017%\254?\016\037\307\305\007\254\336?\t\205\357\232\343\236\312?P\247\237\344\314~\301?4(?N=w\305?\027\266\013r\274\'\345\277\244\317\334}m\001\325?W\362\210<\017\217\336?C\'|\235q-\346\277\333u%\270G\245\314\277u\215;J\312\202\302?\376\335\362\001Wsq?\236\"\250\226\204v\272?@\313\014~\217\270\322?\353\222\016b\251&\326?]BO\0242!\341\277\211\337\003*\322\263\342?\334p/\233\306\027\330?\221^\365\374@$\311?\273H\374\345\356\216\347?\371\245\227{\365\357\331?\372\215\300i\013\331\342?\037\277\267\351\317\376\346?e\375\221\342\026\005\225?#\223\337\344\257\367\330?\326@N\363\351\014\303?\337\275\321\376o;\261?8\207$\340\373\016\260\277\225~\302\331\255e\330?\315i\303\037M\016\341?)z\277U\307?\317?exG!$\346\332\277t`9B\006r\350?Rw\n^\231\\\321?\354\353\n\307=g\343?\030\331\204j9\306\340\277\033\347\241|b\231\320?\313O\303\032\333i\322?4o\017!2U\320\277V\335\372\033z,\302\277\177\035\356\331)\214\314\277R\027Q\\S\365\226?\2215\227\331\357\242\307?;\0227\300/\"\333?\225rJ\202h\224\307?\356O\363\237\177\354\343?\237\205\2205\033\222\304?\204%\303\226\303\323\345\277\021f\301a\365\t\341\277\024A\234\207\023\030\312?\023eN\033\376\350\326?\316\276\331\203\2349\334\277T\362\034WD\311\307?qL\375Y\177\215\310?\354\254\314JI\005\344\277\303r\370b\367\266\320?B\356\277!\226\305\344\277\013\016\212A\273>\350?\270\351\317~\244\210\306?\202\363\024\377\230R\305?\362\260\324\243>\003\272\277$b\347\371\025c\227?m\370\'\002\346\013\340\277\341\321)<&Z\312?\210\354\213\235S=\341?h\230\271D\036V\236?\021\032\003\343\3075\333\277\277Uq\277P{\271\277\362\024I&m\313\302?\022\267\361\304\377_\270\2772Wi\377\301O\326\277\324\273x?n\277\314\277y\244\311\336\2658\350?T\276\014k\317\321\307?\221\256*\337Y\331\227?l\347\034\270\332\365\275?\313c\017\345\362\274\320\277`\225\207\\\333\241\333?\201\311\021[\017\231\300\277G9\n\243h\004\220?\262\275\263\311#\260\303?q\023\377\301\321\277\344\277\230\211\277y\263\376\310?\017\267C\303b\324\215\277\013\213\335\200\307\336\347?\337\375\257B\343\354\304\277\270;\316\341\030Q\325\277\"l\333\244`\225\256\277\331\275\313\373\356\314\342?\372\010\374\341\347?\351?\211\250\262\275P\037\310?\304\250\265z\230\007\343?\206PJ\255\234\342\343\277\202\270a\312vt\335\277\343\206\204\224D\233\332?A\277\214\265\001P\315?\246\264\243\335\215\n\347?\237\013~v\033\257\325?sK\253!q\017\317?\006\246.t\200\273\313?\370\336\337\240\275\372\240?\"\202\334\013\355\030\244?\212)\252\341\317\356\320?\233\017|\3129J\302?3!\336!b\026\327?\033z0\316\204K\334?\345\211\326@\251l\324?6}\321y\350\226\305?Z\001\317\007\025&\346?V^4\\\313A\331\277\373\3226Y\376\327\300\277\241\230\243d\305\362\334\277{F\350\210\370^\311?\371\312\223\326\245g\226?\000\230c`\272\234\341\277\273#\010\374\206\256\325?e\247\037\324E\212\344?|\242\004`\260Y\337\277\334\350\357\347\014s\310?\001\253~\000\255\364\345?\304Yt_\214P\303?A\2354\005\031\236\324?L\362\216\031\311\032\312?\270\357(\000\214\350\350?\006\275\365i.\032\314?[\266\224\3736g\331?\273n\235\301\327\376\342\277\315\216\371%\207t\312?\305o\320\177\213\245\276?\313]N\200\226\353\276\277\231\005\301\200\261@\324?\257c\267*\344\245\326?%\016\260\301\210\036\325?\033\355](\005\202\325?vh`\375\002.\343\277\330\303M\374\007G\320?\010dD\334{\274\330?\013\262\n@H\033\341\277\257\272\212\234\360\330\312?4\343#\030\275\311\340\2776\227v\305\347i\344\277=\235\247\021e5\277?\277\331A\200g\366\345?\224]zE\001\354\245?\034\n\300\273l\246\320\277\010\244\314\0376\205\320?\354\350\217\233\247\333\306?\357m\300\010\226z\301?=\r\030$}Z\315?0K\267\374\362\217\303\277C\257\232BB\257\342\277\241\322-\340\n\215\326\277T~\010`\271\024\346\277\n;9\001U5\326?2e\267\001eT\345?\301t9\251XJ\316?v\210\177\330\322\243\330?\230\204\260\277\221e\337?.\232\204\301\353\t\342?\270\253x\237\272\244\312?\350\343\322\337\3506\265\277\262\314*\205\243\030\330?\224\020r\377\r\261\272?@@) \016.\350?z\273\014\234\277K\265?T$\025|\211\247\321?\n )\340\246\330\351?\334\004)\302\227\223\344?`\225fN\362>\342\277\254\334\321 \201\366\340?\235f\201v\207\224\330?\240\247C\237vU\343?\r\335\326\341b\250f\277AP\311\224jz\337?\265\332=%Y\032\223?\262\251\251\033\336\"\335?\241\027I\026\213:\326?`\005\225D8\236\337?.p\036\363\246\307\323?\351\307J\277\211\220\226\277\\\266\214\212\356\017\347?F\214\350\350\002(\311?\241\261\335\332\025<\331\277\330\301\230_\223\326\306\277\0075\317S\025\001\261?\232\262\323\017\352\"\320?\r~\333F\025[\223\277\243Wf\276A\203\301?\320\204\201B\2306\261?\367\203\313t\371 \325\277\251\253\361\210\300\307\311?\26299\t\306=\311?\340\025\034\271\311\203\322?\260\271z\200\264\300\342??\373\020\242\034\317\265?\022\326k\037\227\335\323?G\363\375]jG\260?\n\007\214?\233f\333?\337l\265\177L\210\341\277\313d\335\344\\o\344?\010\237{IB&\315?O\203X\354\345-\333\277h\333z\227\234d\351?\375\247\270\3754\346\311\277\032\0336\241{\234\322?t\312\212~\300\005\335\277\177\374B\033\302\251\312?\206\027\351\3523\314\341\277\335|\237\201\303\321\322?\2769\226V\307\232\314?\206\337\362\375y\377\325?/?\303\335Q\212\324?=&\367\340Z\222\303?\226\361)\337\267\312\311?\266\362\324\033\234\245\335\277Q\216\270\266\246\257\323\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\373\033z\254\225\340\241\277\220Z\264B\211\275\326?\274\356\010\002\277!\321? \346X\377c\370\326?;\242\245\237.\032\321\277Epuc\356\330\330?wz\020\310F\234\301\277\002O\265q\037\224\320\277\024{h\037+x\311\277\272R*<\303\357\335\277#\275\013\010k\353\315?k\000\241\273E\\\320?\024;\\\243\314c\323?\341\235:^\232\305\335\277\025Jp4\221\343\303?\\\273\243\265X@\306\277\333\324Hd\202N\332?\315j\313\312@/\325?\316\323\251\300\003\342\303\277\367\231\212\277\263^\320?C3\025\003\240a\306?\313\'\320\31482\321?\026;3$\233\351\315?g\244\224\306\036\020\335?\251\035\0278M]\300?\361\025\366\027\356\032\312?\210\304\363\010$\027\320?;2\373\341\214F\340?\221\312^\000+\021\325?\264\004\327\344B\310\324?\372\261\356\304Q\336\326?p0\212\324j~\320?\231\374\005q\324\300\335?\306\335\336=YT\321?\224\014\245\233i\347\320?\336\265\3375C\005\325?n\371\'<\221\365\314?>\344\322\235\314\244\330?\260\315B\022((\266?.F\321\301\0021\332\277\205q\334\316c9\301?B=\326\274E\210\254\277\2560\032\205f\017\322?MR\364\033\201S\317?o\227\005,\034\265\260\277\227\221\027%*\314\306\277\373\201\202\275O\366\307?\031b\253\272\375h\326\277\030IqD\255_\330?\363\265\302Owy\321?\224\364\366\010\261\n\274?v\033\324~k\'\341?k\207\330\303\013`\326\277W2S\234\233\035\307?d\361\337\337G\005\213?\013\354\224\273\215U\331\277\333\366\3420=\206\334\277X\330\362\033=\266\253?\246&\376~\352\205\244\277h\017Ig?V\312?\031\032\323<\025*\326\277\323&\024C\356\371\322?\304\256\016\374\177\207\321?4`[\002\232O\245?oRf\275\367;\325?\371\262\274\304\273\320\315?\022\335\222\240\350\317\323?\352<\324\3756\240\247\277\006X\365\003h\245\315?\243\013E\025Y\306\321\277\"E2\036\204\204\317?Q*eBa\212\335?\352\352\320\341\010\357\320?\034Iz\377\274\374\331?\224\201\352\274\031w\321\277}\377\254\032\000\201\332?\224\374FC\337\300\310?\240\220\370p$+\323?\340\304F\0172\177\307?r\200h\377fV\322\277Q\233\037\034?\226\326?\'\014o{\'\213\315?\032l\250 X\270\323?\033@\307`(\324\300?[\t\233\t\237\020\311?~<\262\301\333\346\317?\373=\322\\~\022\322\277\320\232\037\177i\321\302\277#\225ReR\"\321?\344\246@EY\350\310?F\347_?\202j\303\277;\002v=\352R\321?\360i\322\226\010\216\306\277\030-\233\224\335\'\322\277\022\366/A\364\301\321\277;\361(\327\014W\310?\344\"J\275\237A\323\277Vr\004_\207\240\272?\031\334 \244\2704\330?-\225u\007\312P\301??\034$D\371\202\331\277m~p\374X\332\262?\031\312\211v\025R\304?\200E]\357\'\370\262?\214\027$\340\204\000\303?st\tE\302\220\317?\247\234i\241\350*\321?\213\222\210\327\222\341\261\2772\332W\334\207U\312\277\241\246!\240~\364~\277\013\003\277\333\366\034\312?\272\232#\310\224Q\233\277\376\004\274q\367\336\306?\253\312Bd&\213\322?7\222\035~\253\263\320?6\301?\276\347\264\326?\317\037\211M\032Y\327\277f\340\333O!\262\340?[\315Q\177q4\221\277\016\212\377\236\314}\314?^\323\305\236$\372\321\277\2271.\352\315\007\317? \330\n\375\300\023\317?\312\'T\005\335\275\321?\241\247\207\274s\225\253\277\333\337\227\002\353\333\321?L\037\323=_\261\322?\307\347\241\370)u\317?\314(T?\210\007\323\277\007\303\353\300ZQ\343?(\025\205Dw\034\317\277X\377J[\032\307\310?\273\227=\001\373\005\316\277\013\244\233/\274\263\244\277\300\3504\003C\363\325\277\3633\334\035\245\224\323?C\213\360\037\2405\314?\244)\320a\235\256\262\277\315\232\263\231\236\213\317?\211y\271\374E\330\306\277\274\220\016\017a\374\332?\315\241\332\032\360\375\315?\266:\202\031(0\212?W\300\363A\205\031\320?\020s\254\3771|\275\277\226\304a\202}h\322?\003\034\214\"\265\332\331?C\246r\2266u~?\301\343\231\2374\267\274?g\265DW\267\264\307?\033\177\242\262aM\325?\024\371\242\373Av\321?\357\017)@\363=\325?\322\271.>\375N\317?dD\036\230\016\343\314?\364ns\375\227x\237?\355\251(\240\201\377\325\277\334>\263=\335\355\315?r\214\006\036O3\217?\005%X^\352N\330?D\307\006\271(\206\316?LG)\266\274\321\314?\315\001\'\200\007\253\326?\256@\035$~\244\325?\273\274\265#\007\262\316?^Q\245\301\310F\341?2\0206\002\022\311\331?\336$\037\0366O\254\277\377\354\242C;B\320?$\357\034\312P\225\313?\233\235\034p#\206\255?\237\341\264}\033$\300?\320\372\255\000SD\301\277~\360N\374 \344\325?S\344s\233.\223\327?\226\246\265\'P\335\303?\205\253\352\202M\337\317?\014\220h\002El\325?E\247\000{\371[\325\277r\212L\310 Z\316?\324\253\022v\233\001\332\277oh\251@V\205\313?R\245\246\230\034\342C\277]\027\237~\'\230\245\277\204\177\0214f\222\330\277\216\270:\337\323E\321?\2071\n\376\216\223\324?#\323\004\376\256W\267\277\373\3221\240Do\265\277)Z\230\t\257\362\315\277\024\336\016\242\357\315\265\277\202\275\364\274<\031\325\277e\323|[\321b\321?\277\372.[\241~\306?\373\355\004^\332n\327?\n\177+~\370\036\306?LV\301\177%\035\325?\355H\263\201\215N\327\277\234e\375\0038\277\327\277V\246-\350\234\243\311\277r\357\216J\271\224\310?\266\232;\033n\227\335?\033\263\245\275\363\232~?\3367\337\004\266\265\302?\266\231\325\376x\366\262\277\245\3101\304w\203\321?\307\006\373D\330O\311\277\020\257\353\027\354\006\316?\273:\360\377\035\260\313\277\217\023.\375\256|\314\277J\275~\363\250\031\277?\335p\231\177f\243\256\277\002b\022.\344\021\323?P\235y\377@5\325?c\030fW\020\271\334?#.\337~\351\002\313?\376_\267\000\033\255\330\277\010\341\275\342*\310\254?\2656\215\355\265\240\321?\256G#\227\346s\311?\340a=b\262@\321\277!\006\272\366\005\364\240\277,dK\342\356\244\327\277Z\2700\373\n\014\320?`z5\037[?\325\277\220k\333\341\303\255\241\277\'\364\237\332\205K\341\277R\370\246\310\245\032\312?Y-\227*\244>\313?\'\262 \336\204\014\341\277\021\374\024l\310\344\302?\215= u\340A\306\277\343\0062\361\375\303\321?\207\305\207]\004[\300\277\341\217\252?%\033\321?\211$.\213\177[t\277\005\235\367\234GG\324?\337\331\005 A\263\303\277\004Dw\377\016;\323\277c\031n\002\004Z\266\277\320KA\216\030\003\264?p\244\340\347\307x\274\277\354\270\206\276`\\\324?\031\322\372\276,\353\334?\372_\360a\335\225\312?\013\225E\202%\256\332?\355\007\002\205\366A\321?\t\347\256\200\235\366\320?\035\243Dd\273\257\325?\017Z\216\336\020\255\214?\\\2070\237(\340\321\277\202\316\336\370^\354\316\277k.\324\355.H\275\277)A=\205u\306\314\277\r\237\235\241\362\016\324?\001\317j?!\324\307?\257$\232\274\330f\331?\010P[<\037\022\327\277\027i=\327R\333\340?\352\344\220\375\301\372\320?\241\233?\236D\241\324?\345\234u\031@\360\243\277\272^\363\332\007\201\234?3\035\225\366a\230\303?~\221\nB\375W\321?~\205\263\370\240)\302\277\300(\275F\375\273\310?\220\231U\3518H\304?\247\027\3475\227\227\264\277\221w\317\000e\363\243\277+\327\035\203\374\211\321?p\210D\343\201\357\320? \256\305<e\024\311?\325q\004\302\261\333\322\277Xu\363\3400I\324\277\323Rb\237L\030\241\277\313+\327\333f\352\341?$jXB-<\325?\270\177<&\030\357\316?f\034]\204\255\202\323?+p\r\307N\323\236\277\327\256}\277\240^\324\277\365(\"\3448\307\327?\241K\027\346-l\317?p\347\004e\0010\306?\304v\241\000$\257\264?6*\211O\256\347\247\277C\025H\232\211\263\307?p\355\341\036\215\373\327?\222\3232\255\250\034\333?\246\233a\366\364\t\306?3\341U\336\247\r\311\277\203=\036\341Q6\305?\330\364^\204B\347\331?rV~\370}\250\302\277\332\374d1V@\320?-I\226z\263Y\304?\021\261m\303\273k\177?\253\210G\240\311\227\313\277x%,\2368H\324?\177\001\265\377\236+\312\277\275\251\345Z\366\234\304?m\342&\233Y\350\323?\205=\241b\222M\244\277\005u\200\026\001\004\313?\263IUE~\236\305?\212\010\275\006\226\006\314?H\301\327\000:\206\310?y9p\367\007\004\315?,1l \237\010\322?v\177H\001\232\357\323\277\024\263=\376\373\241\332\277\231\000O\234\324~\325\277\255K2\027]\203\331\277\022\\Y`\227:\327\277\204_,\004 \013\332?\026\300\224\201\003z\340?,\307\032\344\3444\323?v\333\307\002\rS\321?\030\202wM\243$\317?\366\014\237|\223\t\322?\245\240\272=1\200\324\277\275\223G\036%\202\320\277\375&\373\204?\205\321?\202\200k\335\274\247\323\277\007C>d\241\010\302?%$\341a+\177\244?\203\252\311:\2712\317?\261\255\270\233T\362\332?G\307Y\001S\300\266?}P\202\304\227\205\324\277:d\271[Hv\320\277\200K|\305\205I\303?\344\315+\350\007?\323?x\243Elfc\323?=\2727\335\267\374\241\277\005_\342\331/\351\303?\021\243JAu{\277?\014$\360\323-E\212\277\027\370\345\'0\370\316?\321D3\252g\034\320?\032gxXM\374\330?\313\022\337\201\350\346\315?%\027J\303|;\332?8\230\234\3065\277\203\277u\200\026\001\004\242\325?\321\252\330\220f\311\251\277\273\335\201\360W\267\324\277@\345N\237\323b\315\277b\271k*\007\212\314?\362:f\311\261/\230\277\337\332T\240\300\202\254?\007\315S\302\270\200\320\277\334\376\215$\336\215\320\2776\316C\371\3042\302?\342\302\211\001uw\312?k\266U\275\2722\320?\251\014-\374*\n\311?\005\3374}v\000\322?\300\224\206\274\023#\246\277\340\216\005\277\354\242\334?//\002[\014\373\324\277\352n\246[\331r\320?\357\203\240a9\033\327\277\225:\320\\\n<\322?\211\031\216\245\027\316\277\277\202E\253~\230\311\256?\306\274\361b\037l\252?\177\263A\344\374&\322?G\307Y\001S@\307?)T\036z\336\317\251\277?f\363z(8\312?\332\010\037\245m\327\306?\315\303\021\275\357\014\330\277g\350\206C\3029\266\277YJ\243\275Rz\246\277\226\357\266^\025 \313?\324\2301\2012x\315?\271\246@fg\321\321?\201\256\"HJ\037\314?]t\r\216\355P\342?\306\317\363eq\230\303?\210\221\322*\002\265\266\277\021\342\014\366\r\351\315?y\0047R\266H\212?\243\2259e\207[\276?m\332R(\207&\315?24d]X\216\315?\217\341o\203\363\314\320?\373\201@\241}0\326\277\316}\305\\JD\276?\375\0020T\264(\324?\232\004\363\200G\216\316?\204\251\271\036}\372\302?\030.\243?\321\310\323?\211\003\215>\213\312\327\277mc`\333\252\275\315?;[\233!\260M\317\277Bh\322\340\225\250\261?~\214\224>\305FE\277\246v\377J9\347X?w\223)0\256\202\320?\3223\203\031\317w\272? \362\361d\222\354\315\277N\257\275\344\271\035\336?o\031\027\336JN\256?\317\233\355~\323\203\330\277\341+\364\240$M\335\277\351#\225\316,\256\306?\351A\305a\376D\251?\035\306\266\242S\253\225\277\262\033l\240\257\217\265\277\207\035!^2\251\332?\307|\345\346\300\027\321?\177\254\032c\253\364\332\277\362\322Mb\020X\276?\343\t\224\177\363\203\325\277<\2275\363\334)\270?\031,\213x\241\357\317?@\346\332\202k\217\333?\261x\177\366\002\267\316\277\025\255\266D)\177\237?#\333uF\3060\314\277\307\225ay\343f\317?Qf\203L2\362\324\277\322\014\230v \241\324?\267\206\010\356\366\217\336\277H\351g$!\025\332\277\364\337\203\327.m\306?-\220E?\277\224\323\277a\355\234$e\244\334?C%\307\000\375\374\326?z\307\204\363\004\235\325\2776X\030`/\355l\277\177\213\312]\266c\307?\264%H\370 \374\304?\026\266\321\3062\371\301?\313\252\235\233\025\325\322?R\330\342\246H\266\300\277\017\257\220^y\265\322\2775\001\216V\030\317\315?[}uU\240\026\306?\345\333\026\300\357\272\322\277Qg\356!\341\273\325\277\tM3Y\263\000\307?\317\301\361\204w\334\332?k*\213\302.\312\327\277\242\337)\252\237\263\240?\222\346\023\242\021\246\322?\253\231\357\277\031\245\306?\272\240\000\202 \335\332?\357\027\232\210\n\027\256\277\206\003Bg\251\'\275?\353\031\343?\264A\327?\246\272\200\227\0316\274?\330\313\276D\037`\320\277M\246#\343\305\200\276?Xl\233\373\016\362\317?`\231\022\244\255\345\325\277;\276\305\334\030\357\320\277\177\260\337U\007\'\311?v\320xd\244\005\336\277(\372t#\311?\321?-\215F\333\204}\322\277\327\024\344A\\4\242\277\002\375\002\235\360\342\236\277,x\033\345\252C\314\277\307`\222\001Q\215v\277\301\330\214\035\236/\331\277E\005\332_n^\312?\352\031\312\242\023\266\334?\274\016\315#\034\206\333?\350m\246!.\251\321?\235\243+d\360(\305?\t\022_\026\250\177\315?\313\377\334~\226\372\330?\233\201_]\364\231\302?\024\230\312\262\222\034\277\277\"Q\313\203\2628\333\277=S;\005\361h\317?\350\350D\304\305\270\333?\275H\025\203\217\332\310?\215\372\271\333\324\304\325?)A^\223^i\265?\226\025yH\347\262\310?\323\326o\303{\020\321?\241\237\014\002\351\352\310?\303\322e\326\367\206\311\277{\305K\036\354 \324?\006\035\252\262\272\230\210\277l_u!\254\177\276\277|\013o\377_\257\325?\022T\350\027\200\241\343?j\247 \036\rP\322?\327\257\t\2438\313\317?\2300\375\277\250\254\334?\226\3038\311\240$\320?\2650n\027X\317\304?|\024\t\001T\314\334\277\'\355\364 \220\215\332\277\022\301\366\233\242\006\330?\014\315T\014\200\206\271?d\315\206\004\245\313\316\277\262E\024\213\306w\260?Q\265\006\204\020o\317\277L*\"\334\307>\332?\00513\340\352\210\320?@2\205\035\262\300\244\277zQ\375{\327=\331\277\250\335\361\036N}\275?\301\252z\371\235\246\331\277\001\305\002>\303\304\324?\314j\323;\211\006\320?\212}\033\305\346!\327?\322\202@\3746#\327\277\337\231\032\262\313\001\340?*\305\022\377E\212\317?\363|\330\233\260\256\255\277\215\033\310\304\367\317\326\277\352\362\234\343\222\031\315?w\247\226\010\2578\317?\030\347[^:_\241?\t\025\034^\020Q\333?\235\356\237\033X\226\321?\257\212\201\277\251\231\333\277\244\264\307\243\005|\247?\376\370\2056\204S\266\277\313\275\300\254P\244\311\277\221\214I=\023\263\322\277\303\222\376\240&a\317?\024u\346\036\022~\323?:\203T\304\310\026\303?\346\262\217\035m\377\316?\201\217E\303\367\270\332?\324\370\277\002\034k\320?Z\350s\203\3339\303\277\251D\002\333\3733\322\2772\253\005c5w\225\277]\026v\305JT\317?\217\256\353z\026\302\313?\326~\235a\213\331\327?\245\370\327v\003\232\314?i\273\360 \311n\321?c$ \313\'\320\312\277\225\321\n\004\350T\336?\352\374\241\2725\000\320\277\365s\226\233\2404\272?o\177\221D\355\206\305?#=V:i\253\315?\250\323.d}\334\323\277\227\373GS\373|\245?wn|\033\322\020|\277\312\013<9;\000\317?\3145\026^\223\177\305?\177t\240=M\334\323\277fH\231\375O\270\315?.\003\316R\262\234\246\277\026\n\340\177\216\003\265?\026&\235\222\275\357\263?]k\020b>\213\327?~\3673a\240\320\321\277\231)\255\277%\200\323\277\302\216\326\203\017F\335\277\213\327\304\033\374q\317?\2744\217\r\356\230\323?I<\217@r!\320?\242D*\020f\250\254?\376\374\316a\204\021\325\277J\252!7\344\033\316?5\024-/\257\022\270?\361\261\315#\005j\225?E`0\250\004~\316?\222)z;\035\243\315?-Hm\301\326\225\320?$\376\027\276tI\332?\037n\233j\254K}\277N]\032;\270\246\322\277\247\274\014\265\\\354\325?\346\216a\302&\272\325\277h\372\2318\301P\302\277\253/\236\203_\021\324?\373\357\034%\n\010\306?w\227\325\205i\251\323\277\031\026H\365B&\311?\206^w\241V\344\323?\304\214e\004\230U\231\277\343<\367y\347\253\302?U\310\3603\211U\320?#\370\351\274\351=\255?t8\302\273\277.\321?5\353\020(0\327\313?\206l(\316\264q\275?\342\355L\237`\261p?\376\353\303\027y\233\316?\3040g\203:O\240\277\014\212\213H\271 \313?\314\202\235#q\335\222\277\332\025\341\303x\017\330\277\356\313>4\230\253\335?m\274\205\277px\314?\357\013\236\370 :\313?!\256\234\2753Z\327?^\332.<H\262\312?\225+\233\275\\\331\320?\330}*\033\224x\324?=\001=\242| \316?\226\246\243D\224\364\227\277<)\347\031h/\214?\254\241\273\301\243O\325\277</6)\334\335\300?\212f3\301O \320?\344\334&\334+s\321?\rv\375a\317G\274\277\216J\177i0\221\267?s\005\210@\375@\322?\004\245\354\035\003l\324\277\263o8=9\224\327?x\340\357Y\317\367\315?wD\215[/\372\315?\223\370\201P\203\216\321?/\244\005`\352\004\323?\032\006\342+p\350\326\277\317\003\016W\2752\334\277t\327L\235\313\375\323\277I\302\327:\345O\325\277h\270\\X\222\027\320?\353\177o\211\022c\324?\337\235c\335\313?\324?\nC\257\002&\267\251\277\023\351#\225\316\254\321?\247\036\314\232\026\304\306?\205\274y\005\375`\326\277\347\277\375<\352\010\230\277(9?\000\213\256z?$\215\251r\334T\215?X\375\266\314\216\371\314?\276;\350\310\200b\343?^\013\037\266\231/\312?\351\210\021\374N\027\310\277\303l\033\251k+\314\277_b\207\214\242b\273?\372\337\337\332h\004\314?\346\371\035\324\217\327\345?\024\365z\336*[\311?Rc!\276<2\323?+\312[d\361\321\321\277>\351\261\036\330\240\234\277\355\233\177\344k\211\322?\347~=\025&\002\342\277\027\004\301\2510\262\310?\343?r\245}w\315?\231\251A\177>\235\322\277\250h\223`\375a\317?\255\233{\335\\\273\340?0\376l\232-\217\322\277yq\207\362\252s\300\277\216A\006v%\227\316?\325B\311\344\324N\325?\242\257\244\005\375?\312?\014\355\265\003\"\002\312?\333\331\001\036\353\276\270?\030\352\205B\321*\235\277\020\300\366a\367|\305\277\021\337\313u\001L\301?P\300\033w\357M\336\277,\006\325\'5\213\300\277\034\354,\376\337&\321\277\277\002\240\243\270\227\323?m\301\367\243M:\326?\377\345{\302\351\017\323?\320\023K\241^\266\303?|\223\215\2440\261\307\277M\350`\303\364\271\324?\314K\027\305\037\003\317?\024\220^#5,\254?\3079\240[\236\275\314?\0132v\200/\336\324?\306\301\245c\316\363\325\277\250C\033>\361u\320\277\305\035e\200\350\242\203?]\300.7\326\315\244?/\314\327\237\243Y\320\277\026\214\245\243w\005\320?\021Vc\tk\343\305?|\030\357\001\231\241\305?\351\240\205\343}\305\324?\307\216:\370\221t\312?\203>\005~\\4\302?\341rW\327\352p\211\277\235\021\245\275\301W\322?.\325\334<\233v\323\277\277\245\326\332\177\215\323\277\233\245\263\177\335j\213\277\323\310|zK=\316?\003\250\261\326\263\224\312?p\207\033*\245\353\315?\212\025\034\373\345\325\320?\367\3061\016\005\236\267\277\221\365/\244\036\275\334\2774\317[\206I\202\313?\264^%\202\345F\330\277\336\366-\010\037)\305?\252\275\302a\355\030\316?Q\357\322\033(\317\311?\254\224\371\242\230\027\323\277\375\235\t\'K\250\206\277-x\321W\220\346\310?\374\361\345\245e\033\211?\336)\323\036\345\226\316?Tp\272]\026\360\340\277%\270\313]\317\200\306\277}\251\356}\351n\242?#\204\005\377t&\331?\373r\013\002\320\315\321?\371W\221\374\201\245\246\277\2661v\302K\260\333?\245\342\367\035`\371\323?\342L\237_\214/\333?\003\027\330!\006\323\260\277\342\273 dQ?\324?\3307X\201\037\252\232\277#\271>\244\306\341\330?\220\216\243 \025\022\332?\366d\274\265e#\317?\313gy\036\334\335\335\277\360%\340\031e\344\306?_\220\231\260\242\253\315\277\213\026E\264\302Y\341?\222s(dc5\326\277\364\\2\320\255\276\223\277G\320\220\330\213\364\316?\254D\260\334\230\277\324?VK\031\274\330I\327\277\342@\202\301\271\257\315?]-\240\345\263\233\311\277\251\rw\303\360p\335\277\032\371@\033NS\305?\237\261\253\240\324\244\330\277\223 u\236%\006\317?\263k\316\003P\263\320\277\316\010%\202\'\343\302?>\213\323\200\251\265\271\2776\0304>\335\n\345\277+n\334b~\356\316\277ej\371\036\201\001\320?\022\227o\277t\201\325??\363\305 \250\001\312?\376e\367\344aa\324?7\264T \253\302\273\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "T\206\026~\025\305\321?60E\373P\020\330?pB!\002\016\341\331\277\025\215\030\352n\246\305?\022\023\324\360-\254\320\277\204\200|\t\025\234\322?N\303\"Lr<\274\277{\207n\0053\367\223\277i\006\310\002\354\304\305\277\275\266\351\225\323\032\310\277:1\230}&\324\322?\362\210\300G\263\350\313?\\\337n\346\343\034\303??\244\204\005\234J\331\277\017\214\315\330\341y\326?\324Z\342\022\221\253\301\277\372IR%\014\373\317?p\337\3258\274\034\311?\367\370\214]\005\345\321?\222\035\305\200\277t\262\277\215\365&\351\016\240\305\277!Q\262\346\021m\322?\233\t~\002\305\333\336?\017\335&\273\035\212\302?\207\337\013\233\032K\331?\225\025\375\200\213\276\321?\367.\224\002\301\322\336?KZ\216\343\311\346\331?\274\360\377\272\005X\326?\037\227\202\177[\001\320?~\376\336\032\226\016\243\277U\366~\037\345\222\313?h\237}\233\264\337\327?\363\350\004<\202~\313?9\304\252\007\355Q\304?72\0235fL\274\277\271\201\310C[%\332?\353vr]c]\277?\353m\226?\235\372\327?\247\277,\'\200\346\301\277\332G]!b\371\327?\010_\322\367\236:\302\277\344\'z\205\252=\305?\230\350\342%\356\347\346?mX\256\022\207\307\306\277\007\346\2158\tJ\340?L\014\023W\337\n\321?v>\362\275u4\277\277\026a\324\377\203\231\333?<\210:\377\270u\332?@Sm?2\300\333?\355\206\naw\362\343?\361\026\202\373\205G\322\277\275!\246\247<\370\307\277W\241\324\240`m\320\277\241wS_\320!\273?\200\003\305U\206\355\302\277\220+\273\201~6\320?B\325\"\201\212\323\310\277\345M4\3763\271\322?\217\301\350\304\256\205\222\277\256m\243d\346@\320?\317D\340a=\"\342?f\215r\027\376\337\314?\273Z\264!{\024\262\277\006\334-\250\363\321\311?\244N\304K\005O\262?\006\224\227F\335\030\266\277\255\200)\240\334x\327?G\333\204\275\201\260\321\277\t\330\263\214yB\321?<?\326\2358J\314?\310\345h#\021y\325?l\205<\3047\373\303?\377\361\271n\2452\272\277 \215T)\207 \355?=\322\277\250\315M\317\277\344\223>B\007<\333?\212\324\3566\363\324\250?\343)\026\205~\"\260\277\316\014\013\203l\270\337?A\221\027gF\236\300?\225)\244\004\026c\334?\032\205\207\3355p\306\277\tl\020\336\005\247\320?\\\"rU41\301?G>m\\\030L\305?\002\357\252(\332,\316\277\370U\230B\020\265\314?\332\200\276\343\312\217\331?\351\357\010\033\\\302\306\277\345\302y\037\344H\311?\262\006\367\034\273\270\322\277\307\026.\035\006\002\221\277F\236\240$\217\355\325\2776\222\302\3048\342\307?\300z\232\233\210a\300?1\005\020\343\332u\321\277RV\035\203_t\320?E\375h\027W\205\311?\375\260\224\033\373H\310\277[\372\002@6E\302\277:\243\367\327<\330\305?\274\356\010\002\277!\325?`>Y1\\\235\322?Tg \\\"\223\330?\274\"\370\337Jv\314?a\2633\267\010-\302\277@\3174\233\246S\326\277\314\275\372W\332R\307?\265n\305\366A3\300\277\n\300\334z\217\253\311?\002\'\035\335\357m\327?\215\003T\335\310\341\310?O\343b5+\025\317?\010\221\312\034\344\230\331?\223\204\325<m\253\250?\316\351\204`\355\331\244\277\360\027q\t\331\\\305\277-t\014e4\264\307?\242\374\356g\302\300\321\277\014\031\302C\256Z\205?\000*\250\352\026h\312?7\010\347\021\253X\266\277\3572G\177\375J\316?\352\036\372j\036\362\264?J\037\241\003\036\332\314?j\2034\337\230\320\312?\355\306q\226HX\334\277F;\023?k\303\343?\037:\024p\225H\232?Q%V\210?q\306?\3307\203\001|\236\307?_\347\t\370\363u\275\277\232\206v\210^J\303\277\214z\363\341z\020\321?,\271\314\341AP\312?\260\372\351`yg\304\277\374\265\253Fey\321?[e\"|Z\213\313\277\033\002\262\235\020\266\312?\345$9\005\236 \331?\267\343v\375\274\010\316\277\357\263\302\333 \246\323?\032`Q\327\373\t\267\277>y7\232L\252\311?\216\025F\304\336U\337?A\222@ #\342\310\277\315\212M\320\313M\333?d\013{\271\323F\306\2776\016\253.\226\330\302?\265\353\224\375\251\347\320?\221\325\316\254|\001\237?\244{)~\204\010\321?_\007\311`\227q\276\277Q\213^\231\371\006\313\2775g\330\203\244\252\300?\035\341z5\2740\271?n]\377\350z&\313\277\235\377)\345M/\223?\005\224\237\267%0\265?\226\327\000[\024\254\315?\255b;)\335\247\311?@\277\255\303\3522\332?\232\007\260\310\257\037\312?%\221\340\272 \252\314\277\225\033\373H\000m\353?14\215\334\211H\305\277S\004\274\365/\203\312?\014w\204\214\255\213\216??\301j\321\247z\321?u\232?\205\247\000\306\277p\035\210\321\030R\311\277\317\370\235\252k\202\254?\241\222uc:\247\217?=\344w\344Y\223\324?>\231\332\255\300\353\275?\360\017\000\301\301c\350?4\335\004B_8\320\277Z\020\210\337fT\306?\031\225q\337\254\271\276\277\026\313\004.U\212\262?\232!v\"\230U\322?3_\261\310\247\256\263\277\217\327\315\326\013\317\307\277~\2455\376+\310\325?\222%\316\345a\374\324?\241N\263\037\255\332\320\277\212\260\341\351\2252\316?\201\303v\275US\275\277?\334\233\000?\272\302\277\265\304\251Z\373P\321?3<0_\3428\261\277\305\000\25249\347\276\277\301Q\270?\223T\312?\365\327\n\036\317|\303?\330\205\233c\253\221\230?C\304Q\342\010\014\306\277`\371\271\3027$\265\277\373\312\310\177VWd\277\266\227]\305\034\343\305?\213\365\323\240\344E\345?\026\356\350\301\325(\321?u\362\267w\354k\311\277s\002\005\244\036\036\305\277\240!\322%\322l\325?\223\376\3014\312\002\267\277\323\3121\027\300\255\263?\006t\226\301g\327\230\277\221DF?\316\277\247\277\373\021T\307\t\227\306\277\256\232)\245N]\311?\272|\024C\254\335\307?\371%\352\036<\307\337?\357\017\245\007O\362\340?<;\021\253\334\227\270?tZ}\226c\211\262?\351J\343\233\226m\311?\217\254\272\026F\335\251\277\330>.\273q\034\330?~\353\0364\026\250\272?\333\0059\336\323\213\314\277#Cu\020\307\374\271\277\217\016z\374\3774\305?b\314\247\330\342d\314\277\022\025h\177\271\271\320?\331\366\013\260n@\263\277\3153a\301\036\217\312?\310<\227N\220\375\327?\264\221\312\230\253\264\306\277\262\t\366\200\365\017\315?D\205\013\365\313\222\272\277\245\250\216\260\003\202\341?.\214x\333\032\313\301?\267\245\006\2012\031\320?\r\023\323\246f\346\232\277[(\231\234\332Y\320?\327\331\220\177f\020\325\277\235\302c\242\265 \324\277\377\003\017\200v\217\314\277%\010\323\007\375\022\312?Zr\211\341\362\361\302\277HxWJ\212 \212?\352U\307\236\373z\342?b\001\002\214\035\303\323?\320\205\252\373t\372\320?||c\204\307\351\333?\347\246\005\343k\305\242?\210E\261\201\031\370\330?\226\007\206\377\266\237\321?\241\254\316 \364\"\314\277D\332J\330L\370\303\277\363\261y$w;\311\277h|\272\025\035\244\303\277\264[\313d8\236\327?T\270\324\367\320\364\254?\243\261\264[\344\001\275?\341\314T-\216o\320\277\313\022\235e\026!\311?\365(\"\3448\307\260?0n\376\272.W\340?N&M\007\333\035\312? ^\370=\3010\304?\206x\177\027\021 \321?\tE\270\236(\326\237?\327&_\032\320\034\323?\307\t\372\250\022\247\274\277\3233\234\266o\203\303?\247\363\270\332PR\303\277\241KY\002\0002\320?S\r5\351:}\244?\216\346\351\330\030&\300?\353\354\\\377K\245\324?O\362<\033f\246\321\277C\225\033\276\345\347s\277\351K\210\034\317%\317?\014\215i\236\n\325\343?H\340w\"t\017\236?$\026\347^\026I\334?KN7\232m8\312?\377p\374\365\257\321\302\277\034@\277\357\337\274\323\277\376\211>\335Hr\321?\'\367\371\3672\264\306?\343\320\021\257\241\212\312?a\261\237(}\337\267?\361\t<\244\326\003\320\277\033\360;~Vv\325?\216\301\324\340\307\242\336?\202T\253+vf\261\277\016|V\343\266G\320?\264\300h\240Cj\331\277y\016~E+5\304?\t\301\252z\371\335\331?\177F\211`\223j\276\277\2471\214\201\226*\322?\r6\267:\347\304\305\277T\"\303\t\320\337\310\277\277\343%I!\332\261?\320EC\306\243\224\340?f\321\246\260sO\271\277\242\035\036_\316.\305\277\216\262\372\372\214Q\332\277>T\277w@\376\322?cD\201\302\311K\326?\317i7v`k\200?!\223\214\234\205=\314?WV\327\367\232K\221?\315:\004\n\314u\317?]\252-\320IJ\325?\3575F\3437\242\300\277)Lk\025\365\260\303\277a4L\351p_\314\2777Yz\237p\027\307\277\212\3531\364\374\'\274\277\221b\200D\023\250\304?1\351s\336\224\214\342?^\232d\334\273#\322\277K>\227%\021\314\302?\333T\366\300;7\305?\372\205p/\335\342\266?i\210\021_y\322\310\277\355\262l\241\274s\253?\311hp\235w\n\320?\030\276\021\037\320\200\256\277\360\206\023\034\207\017\306\277\272D\232\035N\205\323?\217\316\257\234s\246\304\277\204\313t\371 \225\303?-s_s\263d\331?`\234\021\010\350|\307?0dT\235\376\201\264\277\252\255\001\337\247\t\332?\351\037\n\207Z*\310?\027S\237\232\201\000\340?T\031k$\256\210\317?\267\233\340\233\246O\303?\364\203_\217.[\330?\214\032\0026\3264\323?\310Q\312\265\262\016\301?\202\222]\304\322[\321?5\304%\205\201@\335?Y\276.\303\177:\333?\026\372\036\375H4\335?b\321\235\365c\362\305\277.l0\201\031[\301\277\204\304\013\\\375\\\302\277C\244K\244\331\341\326\277pY\t\006\245\"\305\277\321\205G\321\271\221\326?7\017q\275\2673\303\277\356H\314\036.\332\322?\347:\t|\260\322\302?,\031\341\234\372\010\230\277\247\312Z\267\377\320\305\277)\363\352w\274\244\333?\013\345\216H%\006\317?\002eS\256\360.\320\277gC\243\340\316\252\301?\342\022\221\253\242\211\303?L\241\230aH3\350?\361(Ib?G\244?\2736\n\377\330Z\307?|i\340\000``\265\277w\350G\005FE\303?Xe2^\3539\275\277\361\212\371\034\314\344\312\277\367\022t\305\326\375\326?\277<\215I\271\332\254\277F\247\031\030\232\347\307\277\363Ox\"\353\235\306?tM\365\"\342\177\326?\177\017\003\002B\320\321?\227\n\"96\216\316\277\310F\336A\005j\314\277m\223\'\234\037w\263\277\274\324!\232\355\310\305?W:\304\344\262\366\315?\367\020\001E4\323\331?0\021o\235\177\273\322?\315\325E\300\327\006\326?M\270\333\036R\306\306?\314\363;\250\037/\324?L\241\332}\0329\277\277.>`y\353\327\315\277\347\320\267?\366~\273?\365\245\320\334\267\030\316?Drl\0345\317\321?\313\002y\270\025\251\304?\373(\033\275\267\365\303\2777\312U\2077\306\303\277\261\335=@\367%\334?\230\3756\233\371\033\331?Lq\260\222\352\026\334?\007\"\315P\303T\272?\364_\224^\243>\320\277\260\342\226\2073\\\262?\365s\371\305[\235\310\277\"\261\366\332\340\302\320?\244\216+\201\326\364\321?\224\357\000\354/\375\274\277&\275\271\t\010\367\304?\177\317z\276\207\307\272?S&\356\336u)\263?\362uz\336D\346f\277\201\266r\202xU\302\277Z\252.\207\255>~?y\205.v5X\303\277sv\276\3416\001\320?\016`\333\354Y!\314?\330n/\'p\204\302\277^\217WZ%\334\300\277\203\220\003\341\320\\\350?\035\322\177A\230|\317?\315\256Z\035)p\300\277x?U\"\334\246\302?\265\330\222\372W{\302\277_\322\265\202\350\001\331?\372\263f\376\255q\274?\352#\215]\344\226\274?\354\214\032\014\250Iv?G\3156\273\336\313\302?\354\367\001\236m\233\244?\333\343,\2740q\240?z\356\024\335@\"\321?\217\223\035v:k\321?\310\364\337\336\220a\321\277\255\210y\332\n\257\300\277\210e\022y\273\363\311?@\270+\211&\257\302?\216\201+\217$\367\341?C\241L@\237\212\350?\302\332\030;\341%\306\277U\333\260\032\t\274\304?$\354\035f\026>\313?9\221h\033\342\314\310\277F^\326\304\002\037\326?\352\256\354\202\301\265\323\277\000\311S\332\013\232\300\2776\364\201\252\3629\316\277\223h\362b\233\263\337?\2265\332?\211.\325?\333\374\006\300T@\247?\265\260~\236\314`\303\277\250\355\025\314N\365\323?\030\000.\361\025\027\254?I\370qCr\203\254\277\2645\205B\302\377\306?\207\355\274\307x\030\300?M{R?\322\324\327?q\323Up.\264\245?\254\337mZ\000\205\301\277\311\004\272\376v|\323?\202#\036\334\337Q\330?g\340x%fI\305\277\375\267N\000\036\201\210\277j\025\232w\336\276\304\277\311@\330\010H$\303?\303\334\266;\340\304\242\277N\243\301T\320@\277?\022\207l ]l\303\2775\323\275N\352K\337\277#\033\357^S\277\253\277\245\017#\245U\004\244\277z\265\263\032\330\313\314?\210\214?8<\020\305\277\276\201\013\252\364\260\265\277>\232\003g\235/\307?\327\350\254\201s\347\327\277gh\227\3126K\325?\261<\376\301vf\343?DVc{\300K\235\277\261\265k\000>Q\325?\022LV\301\177\245\314\277J}\027\276\327\263\327?\320\217\320\340\000D\346?o\335I\033yf\306\277\357^\244\006\211\243\260\2773\177T\334\033\260\327\2778S|\327\373\350\313?;\362\264\272\244\003\312?P\264\376\330\034\316\313\277\"\240FJH^\313?\2225\321\204yQ\311?{\002\325\375kR\320?:U\204\274\232\023\327?\276V|\"\323J\320?1\037\367J\254\316\260\2777\225\373\323\374\347\302?:\013\326\223T\001\314?\305Z\031\340\304\210\325?<\027FzQ\273\305?\336\322\305\001O5\304?S:\375Eu\337\265\277\322\353\344Fp\247\312?\377M\275\250\274\241\315\277\353,\3044\035K\322\277MA\206\247\272\364\303?\207,&\304\311\356\247\277:\251\324\221\310\343\324\277Q*\242\245yg\225?\277\3213b\013\346\315\277)\014F\374\365\320\305\277S\016^\242\027\301\311?)?g\332\0273\305\277\200\200\224\\\356\341\301?\222\r\377D\300\374\311?\272\334\375}\010\242\304\277:0N\266`-\313\277uc\356\030&l\305\277\355\356\246\000\275\225\312\2771\341\341\207\2240\325?b.\353\366@\310\311?1\314\004!+\210\241\277\242\030\351\335\t\n\224?&\001\007@\036\362\321?\264R\214\034\267R\324\277I\275#:6H\300\277rl\252\337f\240\255? \214\351S\330\026\345?:J\363\001`@\321?[l\244\266\036\317\313?\201\201\326\262k\261\331?94]6\327\274\315?\345RK)\236\351\315\277\232!\270>j\033\313?\261t\272\003\247\004\307\277\365\311\037F\347\200\261\277\'\2507\\\021 \245?B\363s\"E\r\323?\252\220<!\205|\322?\330\355\365\346\036\257\305\277\340\377\272\337\020\306\252?\023\014\r\342\010\364w?\263\010(\201\213\235\270?\377J\276D\202\312\322?\225i\333\000\321k\246?\246\211N\001\366\362\317?H.\203Z\241\002\315?h~-\226\277\316\304\277\312\322\271h\351\206\271\277\245i\016\030=\032\315?\311\"M\274\003<\320?\r\373\177\315 \333\277?\236TE\002W\303\337?\327\227\327\327\333b\315?w\257\346B\335n\301\277{>w@\341\005\310\277\326\367\310\203\200>\324?\007\373e\346\270\t\305\2772\355\264\230L\323\277\277Cm]b\0236\314?\312\351\004\227;\361\276?\223\350\334\"m9\244?f\373\014\177\270\361\316\277\300\315\301\267\331\355\300?\007\316\031Q\332\033\303\277\270\253\374\327^\260\264\277h\355\021\305?G\321?:Z\325\222\216r\311?Y\312*Si\027\251\277\017\272B\'\235+\311\277|/\031\"\002)\322\277\254\265I\250\215\250\244?\2268\331\243\303\205\335?]\203c;\204\226\320?\027\254\006\233\031\201\306\277f\031=\022\212\010\305\277/\207@\242\307\367\304?\316\240%\270&\027\303?\324\251~\347\017\264\275\277=>\306\201\374\221\315?\303\302 \033\016\354\321?H\322\301<\\\331\310? x!\302d\317\345?\255\021f\177E\243\266\2773\323\007\334\004)\254?\2536\305\004\261\303\317? \035GA*$\310\277\343Ai^\304-\322?\377VW\252\260>\310?+o\201\343\266&\334?\274[\233\276\205\022\244?P\030\265w\035\\\305\277B{\026\000\272:\340?4K\346~\245\370\264?!\255R\366m\363\312?\302\021j\247b\272\310?\t\240\275\237\277u\321?vy\010\035S\373\312?\203\272\355\347\271*\266?\251\322`d\023\352\321\277/A\333\244\201#\320?\217\373\332#iq\326?\375\211\210jcO\305\277a\220\221?Z\024\326?\343B\3243s7\302\277\312\202.\206\027\351\307\277\306\206E\300\365ep\277\277&\316\376\376\234\326?Zl\356C9,\330?r\225zX\240\304\304?\364\355\217\275\377\213\326?(\214\230\237<(\323?\213\263\330\334\207r\310?\266\035K\006\035\000\270?\354l\310?3\210\343?\251\202\027\236\023R\314\277\016\331a\310\301W\310?\224\231\373y\215<\316?\030<\361At\255\271\277i\371\211\034\205\330\326?\205\032\256\243\344\264\301\277R\004\037 \353k\312\277\223\330 Y\341\022\304?\223\376^\n\017\032\301?\205\273i\351\300(\336?^L\022\317\002\202\262?r3\036\235\241U\310?\323\005i\204\206W\320?\"l\333\244`\225\256\277\352\262\024\240\330P\317\277D\351\342\241\265\303\304?\203\234\377p\272\331\261?\361\020\245A\372\273\311\277\347\\\345d=\220\315?:\364\016\236\246\"\337?\255i\317F]T\221\277%\200\264b,\021\321?J\351\253A\036\025\237?@W\021$\245\017\304\277\377/l\007\002\350\262\277\224b\313\033\365J\320?C\320\207\035|\227\313\277 m\261\025\023\237\316\277\203\353\335a\013(\244\2779\266\236!\034\263\307?\n\305\014C\232g\302\277\313\320_\205\347g\315\277\0333\34434\371\312\277:\177\311|\366\222\311\277\363P\200\315\336\276\251?\220\002\3723r\314\330?\305\311\036\035.$\306?\333L*\277\261l\340?\033$\216\206\235s\302\277\3317\336\272\356o\302\277\250\227\316=\332.\324?\230\277\366W\205\211\217?\006\357v\200\321,\231?cT\204a\341\240\332?\253\260\363\030\340\340=\2770\243\026R\227\357\270?[\314\225b\303\252\337?\240\200X\374\307\276\320\277\3655\344\002D\277\326?\211\203\276\323\350\376\275?\000\212\025^\027\270\300\277\265\333\221^\222R\264\277 4qa\223\253\321?\355QM\203\201\353\324?R0\235\265_g\306\277\326\224\236\310\027\335\314\277\374\306Sf\265\006\306\277\257\344\317\\L\330\265\277C8E\313\252\235\270\277\256\333\332\241\345i\307?\321\306\266\261~\330\324?\277\270\361zr\305\326\277\332#q\342\3559\263\277\343eU\2358\355\325?D\324\257:\2232\306?\025\254q6\035\201\340?\241\260\264!9\370\330? Dt\000\253\000\322?\253\020\221\305\366\215\235?W\276\253A?#\232?9d^\242\325\344\346?T\306\340\335\241\023\313\277L\231\212C\354B\320?\303\251\305\226\324\277\331?)\262\272\373:u\251\2777*?\302\223\212\311?\375\344\377\300\342\021\325?\231\300\010u\354{\325?\224\303\345\200vj\312?\375\034\325\237\263;\277?\334e\236\340\213D\264?\263>\212\337\271\234\307?sP\212\242|K\257\277\335\222\342\004\"\233\320\277\340\262T(\034\213\302\277\247\213\332\0369)\307?\247b|\373\347\'\325?\350\353\246R\273x\273?\005\"z\010\231\032\323?L\350&\030k\013\300?\273\317\226\030p;\251\277[`\260\227}\211\300?V\021n2\252\014\301?\006>P\270h\022\324\277\354\352\002\034J\206\320? \026\270\334c`\222?y\314\037W\023Y\301\277\224+a\022\323*\310\277\311fy\3440\224\317\277:t\335\010In\250\277\247!\211\342~\325\310\277\251\031\255\376c|\260?\345`\025\363\234\302\240?\036M7\201\320\027\320\277\310\234\307^x\360\267\277\375\240O`\021\316\341?\3611\270\343\326o\250?F\214\350\350\002(\311?d\302y\202\016\004\334?0\232\370\027\377F\316?m\241u\236\302\233\332\277<\372>\240\\\350\302\277\243\030j^\037\347\265?\262\206I\300\001\220\316?\205\3704\345\022\340\301?\243g\'A\207R\347?h\314E\370\356A\303?O\030\336\366N\026\224\277\307\024\213cM\372\312\277\370\351\221i\341p\307\277?\2451\367\034\232\313?\335\3665yg@\305\2776w\221\225\241\242\305\277\370\025\357\360l\311\264\277i\244\010\0352\255\320?\347\212\224^\202\360\312\277\332\211\232\001\221\262\331\277Q\367\333\200\312V\260\277\027\354\n\246/\276\303?S\330=`\273\207\316?\306}\365\002\375O\332\277\006{\227{\026\276\336?\356\246\252\274\\E\204?\353\333r\303)R\321?y\206\340 p\020\270\277w`\177`.\254\247\277,\234b\335\221T\320\277\227Q\217\341o\203\240?\377\361VD\352\311\316\277\000\321a\370g\n\311?Xx4a=&\340?\371\346\253\242G\245\343?"
      }
    }
  }
}
node {
  name: "normalize_element/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\340\225,@>\225\326?\230\317E\205\342\265\332?N\231za[\324\335?\261L\001a\216\273\336?_\307\311\016;\235\325\277\246\354\231\312Gw\334?_c4~#2\273?[\032\t~e\357\300\277S\271?\315\177\376\302\277\350\246I\000iE\331\277\032]s\201\252\325\323?m#;\302\253\235\326?\243s\237\230\314c\303?\205\302\024\243\266\246\336\277b\344\331\243?M\321?\211a)\300\347\357\257?\246t\372\213\352\276\325?\022\031\220\234\320\024\331?\321D3\252g\234\307?TdB\006\321^\304?4\210(\211\231\273\314?:\037\"^l\224\322?\203\254\341\001\351\213\327?\243%,}*\337\331?\2378\302\232\261\005\320?\352:\267}M^\323?\316\213U{\277.\337?\364.\346\000$\207\342?\321\231\017c-\231\335?\353 \n\301\005\364\331?\276\271d\301i\246\336?6\217\303`\376\312\325?\363\377\354?\031\000\337?\333\017\241\3371\033\320?@)\244F2u\326?\357\264\353\224\375\351\340?\320\372J\326\227[\323?\020\231M\333\032,\334?\230t\255 zP\323?\320n\200\333\013s\321\277\344\034m\003\024v\326?W\351\356:\033r\300?Me\366\036\323?\334?\342J\207\230\\V\331?\321\266\324 P&\273?Z\007\254\301\240\361\321?\277l\361\337r+\323?X\27664\310\321\273?\354\033\363\225\233C\340?\327\324\036\233\211\016\330?\013\307=\247j\314\305?\336\273\027\251A\242\352?\323\223\350\033\2070\323\277\344\305\272\237\360\345\313?\306@l#}\336\311?B\343p\203-x\322\277\222\327\367\237\004O\322\277NU\014\035\\6\326?\357\345_G\3632\303?\335_^\374DP\321?\331\035\030a\006\272\313\277\323&\024C\356\371\322?\317\214v\303S\233\326?\204#\355\353e\000\326?\262Y`U\336\212\317?\211or\t\321k\326?,\326O\203\222\227\311?z\321\252\330\220\346\302?\267\243\356\271\002@\322?\367B;\206K7\305\277\255\036\346\201~U\324?\235/\264B\252K\326?\335\223\311\241,\331\327?\301\341\005\021\251i\334?4\260\300\035\311\341\310\277\244\336S9\355i\351?\3566\3327\030f\313?\355\022\223?1\325\323?=\332\223\033\240\217\325?Y\373\\\351\214\332\303\277\205D\332\306\237\250\337?p?\"\236\323\311\305?\345\324\357>\236\310\333?\263\230\330|\\\033\322?\276\275J\302\256;\324?\216\311\214\376j\352\275?\000\342X^\214]g\277\030^I\362\\_\320\277\211rP_\"\240\325?\033e?\2034\200\317?N\002;\001\304\222\264?\310\355\227OV\214\326?\316L\325\342\370\206\320\277\366\336\316te\006\306\277\022\366/A\364\301\321\277+7\356 \270\302\321?l\031\217\243PN\246\277buX\237z\375\330?*\315\336\000\320\364\343?\2727\364Sr\007\213\277\234\353\352D8\\\324\277\277~g\377,\253\317?\211\202S\3769u\322?\t\253\014>(\003\313?|-\246\241_\276\310?\324:\375\342Jd\334?\327\252U\242\211\003\324?z\312(\236\314\242\277?8\031\260?\344\310\326\277\325\377\275\004<#\322?\254\315Ze\001n\320?\350z\252\\\013g\326?W\010\212\243\233\222\315?T1\031\267f\345\316?\32048|\230\336\327?\377\037\'L\030M\342?b\254\234\341\371Q\246\277XHm\240\310\354\347?\350\005\301b\022\207{?/\215\035\\S\303\323?X)\363E1\257\326\277\336i\235~q\245\325? \330\n\375\300\023\317?=b\364\334B\327\303?\331\217\271\327\356\303\325?\033\3341\320\020\351\325?\tb\352\370y\035\324?KDS\321\2634\324?\003vw\225\234\260\315\277\r \031\376\025\252\350?\312 -\204\213K\314\277\213\025\332\336\023\020\260?\376$\302\257&\211\256?\360\210\303\377A\027\267?\376x\022\205TY\303\277\245\263z$\261&\321?\353\232\034\200\005\227\310?\330\"\263\304\024\366\266?\205\034c@Y%\327?;\340\272bF8\320\277\334\352\377=\364\264\333?a\233\\\245\036\326\322?d\210\214\334\r\001\322?\357\206\372~\346\003\327?B\276|\231\305\227\300?\263`\003\236\213\361\321?\254b\001~Sy\335?Nj\375g\254\201\275\277\177\231\326C\207\002\320?\374}\326g\224\317\312?k;\3716\365\350\306?\210\330`\341$\315\323?\247\213\271\020P\006\320?O\220}5\254N\331?\210\221\261\034\031\022\313?\177z\236\005\302J\306?\303\025\001b\323\311\224\277?y\263a\250\236\314?\217\'Y\271\335l\306?yK\244\372\357\275\333?T_+\333f.\306?]oz\233\'l\326?\010r\324\372\360f\315?\342\224\024\263\271E\332?\260 \213<b\327\321?\024oK\201X\270\334?\233\320\034@\\\305\347?2\006R9X\305\272?O\326\301$\t\000\307?\354\326\327_\033\026\326?\310\346O\300\033w\320?^\033\3408\337>\312?y\000\315\030\315g\270?\202\201\020^\365_\335?3/,$\005\373\340?\362&\001b\371\220\323?\236\231\036\034\005\253\322?o\207\341~\033\235\340?\244\r\3212\234\374\321\277\362i%\3372\310\261?;Gpe\201\335\314\277\314\230\345_\211\017\325?\340\001T\'V\374\325?BHP\333\n\n\301?\013D\354\237\351]\325\277\001\237\243~\254\032\333?\271\001]\003t\002\326?\314O\036\324M{\277?2\325a\277\006\310\325?\344\3725a\024\'\321\277\033tS\024\371?\275?\177\031\354\203\265\374\256\277\360\010\033\\B\327\316?\201\372\345\1771\334\267?\0339\240\337\326a\307?\222\255.\247\004D\314??\222P\002\264P\340?\"\001\335v%r\316\277{\252\371\340k~\321\277\010\352\304\200M\037\233\277}p%\330\013G\303?\027\302 \237F\360\342?\367\331\022\003n\'\325?;\rA\243\256\224\324?:\327\305\247\337\211\300?\245\3101\304w\203\321?H\275\n\235\225\274\310?-\220\003#\355\316\317?\3768\t\301\204\263\264?\0018\356{q\265\310\277Uu\250\tO\246\314?\304\022(\305;>\323?\002b\022.\344\021\323?\347$k?\337\267\335?\\\374u\300\330/\343?G2\365\004\323:\327?/\t\345\267\307\326\304\277\001X\357\000\347v\265\277h/O\245n\300\335?\005\005\224<\215*\323?~\231{\212\024\261\277\277\262\232\360C\2144\320?\252J\031@\021\256\321\277\006\366\230Hi\266\315?\017\216\345\237\021\223\324\277\334\006 {\336\211\324?>\006+N\265\026\332\277i\241\256\377\204\304\262?\"J \312\274\372\323?]\250\231A\276\374\335\277\177Ee`pO\325?LV\177cS\327\300?\354\335\274\304\232B\330?:\207+\232\3401\236\277\223\351+\243\354\210\325?e\327I\277u,\310?\242\257\346!\317\205\326?\226}\262\275q\355\323\277\342.\014\242\377\257\312\277T\3441\177\\\315\275?a\334O\276\207h\327?\265\246\232\325\022]\274?\002\321\366\\d\312\332?N\2532\235\347Y\341?\032t[\205A\027\333?\013\225E\202%\256\332?\317\337\235\337\244\'\336?\272{\312{\346v\313?\\c\206|\206f\330?87\\\232\021\224\320?,\226\t\\\252\024\316\277\0322\242\335\266)\320\277\234\226/\232[\302\300?\260\243\014}\371b\246?\200-m@\235\225\332?\241\t\034\"\3218\333?\225\226\364\244\n\316\334?\010P[<\037\022\327\277\360\255\376\2765\346\346?a\0130\342\361#\332?\203\310\032\334s\354\335?3\332\354@\204\325\325?\306E $,&\322?q\366\326\331\363\251\253\277f\014\234\001hs\314?\r2\013\345+\036\314?\200$\221\"\327r\312?QDm\270\033\206\245?\251\2447\244\235\017\251?\301P\352?)b\327?e\027\220\346]/\310?\233C\255\304\227d\316? \250\350\202\331\210\312?=x\263\'\375\224\311\277\226\"\330<7\202\313\277\213\177\351\376\373\035\320?\267w\262@`\252\343?\342h\3309\027\220\320?\036H\305\234\363\225\301?6\003}\236\026\356\330?\237\207\342\247\324\231\303?\016{\312\377\036\033\323\277;\207\225~\200}\331?P\t\374\237\313m\323?}\021\341\035\350\272\320?k\212\266\031]\024\331?\022N\013^\364\225\300?\201\034\234\241\033N\323?\330\322H\360+{\336?,\246\210\302\035\276\340?NVV\344!\335\322?\204\246\200\017\271t\301\277j\337\334_=n\321?|\311\357\002_0\334?\021P\247]\310\372\236\277Yg\276{.0\331?N8G_9\251\315?=4\240\234p\210\322?x\370cA\376%\306\277_S\357\3029\027\334?Z$\324\251~\347\263?{\006\036)lP\315?\235\231G\2336\345\322?\275rZC\353\031\325?\021\214b=\336\371\322?hu\027\315o\275\327?\256\356\375\262 9\325?+\245gz\2111\326?\006\306\023\244\306B\323?Z\236\305Z\225\347\325?\014rY}\\8\325\277\276\347\270\001<\265\321\277)\005\037{\244\336\321\277.\225\022\335\016(\323\277)\217\362\274\351P\321\277p\306\366{\336\344\332?o\037E\337\325\231\334?&\032\346\374\373i\321?\241\233\201\272\026g\307?\tv\323\230\326\307\313?\034u[\277\354 \327?\315&\270?\264b\315\277I\245u\247}k\236\277?\365z\275\034\362\326?\210~\252`\r}\270\277\306\215\370\241\024%\314?\035\316\231@S\247\320?# \221|F\036\315?\272Bi\271}\240\326?C\317^d\237\223\335?,k\264\177\022]\325\277\353\240\3719\221\"\310\277$\257sx\255)\313??\000\312[\205\177\302?\002\267\356\346\251\016\333?\301;\371\364\330\226\323?\225Ud\266\\d\301?\357\335\254\342\tt\342?6oA[sl\322?\216h\361\030\324m\314?\214\0023\2254\265\324?\322\206&\375{x\330?\243\334\205\377\327m\325?\232W\330\200\306\324\321?\327LB\022\213R\266?\261\261\001\307T0\332?\226ay\343\346\314\300?\022s\033\235\213p\240\277@\345N\237\323b\315\277U:\016r\315S\321?Gbz\251un\310?\216\361Y\205j\026\327?rY\340\206s\350\301\277\243\310\234_{\003\307\277\006\254\250\003Q\336\307?\355\353e\200\260x\325?\214$\213E\035g\327?~)\362\332[\000\321?5\256f:\307\302\310?\262\005\214G\014\257\315?Dj\034\342\006Y\341?\223`\375\341\337N\300\277v\256\203\336v\274\322?p\320^}<t\311\277K\240w\031\264F\341?\215\250\232jwY\266?\313\316\252\350rw\317?V\311\317_K\274\306?\263%\253\"\334d\323?\252\301M\251\277\034\316?\177\334~\371d\305\325?\300\320\300\033\024\305\316?\341\253\004(\231\336\313?\273\226Vd\360\207\320\277\354*\315{\326\024\274?\013\200L\306\214\313\310?\243\237\374\037X<\314?\337\333x\240\343\335\324?Q\345(\376\367y\324?\262\210\274@\244\372\326?\217G\272\260\177\250\340?\273:\360\377\035\260\321?\265\352kD\315#\320?1]\210\325\037\341\317?j\nF \274H\272?a\241{{|g\304?\362\352\240;V\343\327?l\017\367h\334\341\316?\210\263l\367\274\254\322?Y\324qF\336\203\315\277\205\314\327]\207\007\272?=\333\335\342e\366\333? E\031\201\343\330\340?\355Xt\004\323\335\305?\227&\276=|W\330?S\252\247\003\027\263\322\277mc`\333\252\275\315?T\275F\334\2556\320\277B\031\025\376-}\323?\341\037\235W\310\036\303?\024\355*\244\374\244\305?\315\323\220#c\326\322?\006\231\246\000\377\261\323?\016\234\330\350A\346\302\277\025\0210\200\021\220\341?\306\275\277b\211\336\270?~\224*\264 R\264\277\2133\2069A\233\320\277\203\n\312\021\213H\217\277\234b@\274\317m\323?\275\372\374 `g\263?\004\362\265\377\262\217\245?0\007\346\2158\211\343?P\000b\236\327\320\325?\314\006\333\200\266r\321\277\177\345\326\336\206\234\331?W\026\267\227UT\314\277p\020\245\244$\367\324?\031,\213x\241\357\317?\337\326\006\274\006\\\332?\034\216\266C&\215\301\277%R\344Z\376M\325?\367L\250@c\257\274\277\206\256D\240\372\207\322?\242i\344ND\032\306\277\031\274\\\202[\020\326?\301\346\034<\023Z\343\277\335\307vc\346\'\322\277c)/\205Ii\322?\240.\030}\2010\301\277\226\253\304\341q\266\340?:\266\371\332\216\004\342?/Z6)\273\317\324\277R\n_\0042\340\331?\313\020*\345s\366\321?m\352U\307\236{\315?9\315\310A\205z\322?\313\252\235\233\025\325\322?\235\300\256\005Ap\277?\305 MH\255(\315\277\300M\220\"|\371\340?\t\"\203\303\250\367\321?\240]thG`\303\277\361\025\366\027\356\032\315\277\235\250[,\373d\323?\235?\267\341\301\200\340? \335|\341\235\025\325\277H\256Q\305C\016\324?\323\376A\0035%\326?]\230\226\242\246\'\326?aBy\335*\241\330?\340_\210\305=\320\313?\027m\351,\016\302\317?b1\352Z{_\330?q\202\200\306\226/\315?\017\257\363\2104\236\305\277s(\350\233\331S\312?\256\241\222BrU\323?\322\365\276\235\266\331\217\277\032\261\344d\301H\267\277\302\304z\376\017\013\316?\236\020S\205\263\031\325\277\033e?\2034\200\324?@\274\360{\202a\323\277\t\270R\225\327\306\303?Mc\275I\272\003\265?2\017\354:L\342\312\277~\342c$9h\321?v\353N\332\3103\314\277\242}\254\340\267!\321?\026l#\236\354\306\340?\222\363\325\300\034>\340?\373\365\267\302\303\315\327? \361+\326p\021\304?o\372\314\274\311\355\323?L]\246\344\244\311\332?Uq>\320e\305\313?\177L\316\375\223\307\272?%\263\027] y\330\277Q\232\366bb\322\324?\215\3405\236\276\324\335?\214p\213\340\034\201\304?\373=\322\\~\222\336?{\265H\177\324\013\333?B\021\305\303\377\306\326?~\376Z\342\361\202\327?\272\201#\375\315\366\274?.0T\223\032\271\256?\030\030\303\346-h\330?\226\215s@\267\374\324?\3774\377\371\307\214\314\277#\211\271\377#\256\314?\372\317\232\037\177\251\346?\0271G\352\230\316\314?\310\316\333\330\354H\322?\377\031\357\330\031\260\341?\006\375\032\203-\372\316?{\033\366\326\033\220\330?\212\244\243=\332\017\321\277Qx\032z\325\024\340\277\242P&\240O\205\334?\237\230P\034\2338\320?O\227 ~Y5\311\277\2745\372\342\234\"\271\277\264\204\010z\240\374\305\277L*\"\334\307>\332?\264\327\016\210\010\346\317?B(\214\271\255%\267?\377Q\345\305\323\274\322\277\221\264]\231\236\315\315?\002\353\335\3045c\327\277;,\273\375ER\325?\367\337\357\274\371r\327?\356\312\221B\027\034\326?/\215\2721\230\032\272\277O\"\302\277\010:\345?\212\203\370~r\255\335?\306\000\242\303\360\317\303?\345\216M\336?\227\220\277\354\316$\3731\267\337?\034\345\005}\216t\331?6\335\035\337\377\303\326?\343\r8dfS\330?\227\317M\366*\215\326?\326W\364\332\256\210\331\2772\346K\373(\233\314?\351\231\301\214\347;\266?\232]9s\366k\261?\236\274#\276n\354\305\277\260\315c \021K\325?\311M\334C%\"\326?\036\363\246\307[S\314?8\334\242\'\300\213\321?l\274*\006\376\246\336?\320/\177\302/\256\202?\245G\273 \016Q\273?)bl|\201\264\311\277\331\016>{\313\250\321?\374\004\253E\237\352\324?\246\272>{G0\320?\376\351\253PI\202\341?RI\235\200&\202\322?\344D`Q\266m\324?\252\3441=@{\300\277\225\322\330\003R\007\342?\223\3677\211\275\'\313\277\320\221\246\213^W\275?\027\354+\264\030a\320?\252j\335an\222\324??\260\374\\\341[\325\277J\374\376\213oA\277?\336\262\001\340\361\320\325?\3411\321Z\260X\321?+\210\242\274f$\335?\262\320\326\332^\177\321\277O\324\251]\331&\322?\\\236\234\333cm\303?|\370*\340;\275\262?#\360n\002_\223\314?\372.\000\350\213\230\330?\007\201X\340r\217\260?\231)\255\277%\200\323\277\306\014\236S\332,\325\277\023\353;\\\376E\327?d\227f\302H\222\331?\252d\000\250\342F\311?Y\023n\246\000\240\311?\322L \272\332i\313\277\367\004&\3033\031\317?\2210\210\037\316\211\323?\010\343\n\234*\347\303?\233\213\001\n\334W\312?\254\337\320\204\273\355\322?\312p<\237\001\365\317?\"\361<\002\311\305\343?\367\340\275\274c%\320?\177\344\304\301\037*\223\277\2419\343\342E\362\326?x\2270?\334:\320\277\367\336\306\003\035o\304?\253z\267\201T\355\307?\000\234(S\026\317\323?\\I~\006\314*\265\277\026\275\3279\233H\315?\307>T\\M\305\335?\226\271T\000\347\240\321?m\356\277\000\210\334\317?_\267\245a:%\324?\273\373\261\203)N\323?z^\340\250\313\030\323?\211eL$Eb\321?\027Xt\251\031\353\314?<\025\r\2458\277\322?\354\037\372\244\311\373\325?\034\244T\200\367\'\304?i \361\206\217c\323?\250V>O,\205\266?I\226\335\335\024 \324\277\246\010\025\301\244]\331?\307M\211\373\372\347\322?\004\324\'\373\337\270\323?\3214\017\375fd\324?\312\007\024\034$e\320?\273jT\226\327\000\323?\362\026\376\302\341;\323?\226h^Hfy\313?\007w-B-]\330\2772w\353\004M\256\305?nEj\363b\325\261\277w\363\371\315i;\323?r\305 \013,\333\307?\221B\376>\210\311\320?=\234\237fq\024\300?^\203\337\002\340\212\306?\035\3273BG\204\320?\035c@Y\245\262\277\277\021[\325\355Ge\340?\225a`FFA\317?4\306\177h\203\237\317?\364e\016\356s\241\327?\257\220\301\243\360\r\335?\0165e\002\331F\322\277\214\365pv)}\314\277W\241\324\240`-\263\277\214\315\330\341\371\326\317\277\212d~$\333o\324?\240$\260{#a\332?^qi\343%K\320?\313\260\335\177\\I\303?\375\273\343\271cV\320?\026\371\3245\203\215\312?\nI\207\003\370\331\311\277\000\312[\205\377\272\323?iyy\225\020\207\305?\230>\t\246y\313\305?\212\177\320a[\322\320?\276;\350\310\200b\343?\300\253\253#\303\001\321?\223)Q\274\353h\317\277\244*u\342\325f\310\277\363(\215\177<\307\303?AGi>\000L\325?R\020\372\241\353e\344?s\033&}\316\333\322?\252\207`\003\277\031\333?\223A\305\243\032\027\320\277\212?\212:s\217\306?\271\3676\036\350\370\304?\301\373\354xz\302\314\277\342\260\023\342\272\367\324?\324\207\344\032U<\325?R\365eH\231\375\266\277`\302\r\235C\376\327?\240\000\345J\230\204\341?\255\031t\235\241\323\321\277\315y\204\242\222\235\313?\250$%\034\376C\306?\330nqCB\312\331?\361I\345\365y\357\300? \333K}\315p\327?\025\321\351X)-\317?\337\266=\341\357\216\265?\252}\235H\356\270\302?\245E\340\274\366T\314?\244\013=\244\020o\326\277\277\215\255\\q.s\277\000\000\000\000\000\000\000\000(\345\275\203\002c\325?49\255\302\003\326\334?\366B\277\276\357B\315?\\\304\034\251c:\321?*\335\341\237\347\t\264?dA\274\t\031#\335?:\234\361d\324\210\323?*C\013\277\212\002\326?\276\370`!\214B\326?[\355a/\0240\330?\331\n\365O\313j\317\277\244F\002\274\356u\240\277\244\214v\344a\004\325?\217X\346\010t\201\324?#\251\352\275\257\314\250\277\261l\007\237\275\345\324?\005\031\"#w\303\314?\0346\035C\370\376\320?\321\237\252\000\347^\312?\234^\333;\240\365\253\277D\254Y\3025\222\324?}:?A9\274\320?\331\002\306#\206\327\321?\307\013\2167\236t\316\277\t\r\253\025\3717\317\277\273\356\316V5\363\317?a\310$\002Yx\317?\370LTA\325\200\257\277\212~#p\332B\332?\032\200\262\316\235\005\322?\277=\370\036h\344\264?\001\354\355\340q\033\327\2774\317[\206I\202\313?}\217~$\272\241\332\277\322\246nW}\350\313?(CUL\245\237\313?\005\221\034\033G\315\312?\337\234:$\357{\315\277Q\351\026p\205f\303?\220\265\216\303\303\250\334?\260\277\323\001\234\240\305?\226\315\034\222Z(\211?\265\201\340\2264k\332\277\331\303\207\247\221\365\301\277\330am\010eL\270?\204:\366\375\345\344\340?\353\327\010\212@\361\317?I\013<\234e;\323?\2243\322Z\352C\336?E\212\371\240\004\311\333?\270c\342=\244\353\313?i\213\323_\233\314\266?^\312\n\217Gz\341?\326\261\245\242\014\260\323?\324\361Ve\3702\333?\221:\t\276\314\344\326?\215\371\322>\312F\325?\204\263\337\003\t\304\322\277V\t\375\351\222\263\315?\001W\r\035\226\341\322\277\202\266\213\037\031\301\340?\363\353E\274\216[\321\277\335\337n\203\271a\301?\211\002\001[\363\235\303?Xd\246zS\215\336?\0249\247\006X3\316\277\314ZLd\315\345\326?\021\002\217\373\230\207\311?\365\206V\202 \233\317\277j\336\222\230w\207\314?{7q\315x\266\341\277\223\316\033\202>l\325?\000\267\335\272Q\032\274\277\316\010%\202\'\343\302?\322\322\354\354\361c\265\277\246lG\'\001 \333\277:\256Fv\245\345\312\277\355$\307B\031\217\323?\177\230\316\230\223\341\323?\222\204\320\203\263\202\321?OH!\177\037\304\335?\253M1A\354\320\311?"
      }
    }
  }
}
node {
  name: "normalize_element/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\\\262C_\356Q\314?\270^.=\365#\316\277\331\240\345/\343\\\312\277\264\257<HO\221\334?\t\016\27315\360\263?\315jh\240\205\306\275\277\224\021\027\200F\351\256?p\325\320a\031v\326?F\357\022\244k\311\326?\202\300\363 wp\323?:j\226\025\324\001\307\277\036a !-\302\317\277\277\331\377c\225P\332\277\232}\375\224S\320\255?B\006v%\2279\311\2776W\356\201-\341\273?\245a\235\317%\301\275?z\254S\304m\335\325\277\254\213\374v\351\221\316?=?\224\201f\204\320?k\013\317K\305\306\305?\314\323\271\242\224P\324\277\361\300[{\372\343\303\277=\251\243\241N\322\332?\364\177X\200\000c\271?}4\350\t\234\314N?\363\216\266\236\337\377\325\277KZ\216\343\311\346\331?\300=\021\274\010p\314\277\206\317\357^bj\334?c\201\n\242I\275\322?h\260\251\363\250\370\322\277\210_V\315\030\013\344?\026\025q:\311V\326\277\361\"\331D\342u\323\277F.Q `k\307?K@\310\211\3410\311?VDM\364\371\250\332?\004f\021\314\311r\266\277\250\215\352t \353\324?g]H,\316\275\307\277\205\374}\020\023\036\276?$\016\227$\350\022\327?]\007Y\236\0305z\277\211\244\362\203\256\325\251?a\302hV\266\017\341?f\243\357E\346W\304\277\2412Y79\327\262\277\370\210\271 2\027\311\277\025$\021uz9\263\277\202u\332\"\202\324\313\277*0K\330\n\334\312\277MV\0349\230\356\317?\001}\215\352\225\256\300?.\337-\242\203\264\236\277\351\244\255\000\225`\333?9\010\337\240b\301\332?@\302\3155\016m\315?\003<\350`\235-\266?L\363\330\340\216\201\312\277{\026\337\253\261_\325?\266\323Z\301\004(\326\277\nH\240f\355\333\302\277;y\252\246\230A\316?r\\:\244 \221\316?9\231\331c\371\245\323\277\025\327\245\004\314\325\335?\335\303\322~s\230\303?]\ry\231\233N\313\277\"P?\240\032\214\321?\213\257M\225\265n\307\277O\317\273\261\240\360\341?VO\234\222b6\311\277\365\3613\242r\233\336?\353\363br\264t\324?\267\010\255\003\367n\235\2770\212\210\334\2707\234\277\326}t\250\256\225\306\277\325#\252C\260\242\333?\005tW]$\000\327?\007\326\253\247\332\027\306\277\036\177\263\336\271\301\340?\244\345\037\001\314J\275\277\035}\352]^\256\275?\377\365~a\001e\313\277\265\302\262\241\264Z\340?\261V\'F\032\205\317?\314;VB\332\363\330?\223`?\376\261\024\324\277\n\321\306\266\261\376\313\277\335\230\340\314\226I\263?\373\250+D,\007\326\277\256\217=1\2418\316?\274.\323aK0\336?\212 ;`8\206\205?\242!g\212\316l\316\277\215\301\026\375\231\250\330?\261b\237\235_V\316\277e{\343Z\243\024\340?U\275\374N\223\031\342?\234\332\235\336Z@\340?\362fh\227\3126\312?=\205\267b\332\022\337?\3729O\206\364%\321?\240V\352\274:E\321\277\243\023\266]p\337\325?\357\250s=\270X\325\277\360\307i_\253J\261?\002wf\243\357E\310?\3017M\237\035\360\303?\244\235\005g\021\006\317?\325\333\023\342\231)\321?\000v\352\241\350\307\320\277\332\001\370#\034\345\321\277\267\246/:\017\335\322\277\037\243\033\345\2115\325\277!\346\026\343\221\262\331?\351\302@\276!`\334?\t\346\"\235\005\312\304?\357U\n\005\225\006\324\277B\036\250\360\363!\267?\352#\317y\266\\\315?n\267\352[b<\335?k\037~@\230\002\324?H0Y\005\377\225\317?\311\375PaS\004\332\277c8\350\\\233\327\325\277I\005_\342\331\357\320\277\375Gl\230\035\271\304?\243\000\027\205\331\333\303\277\025o\te\206\362\323?\211\366\312\037\200\222\341?\332\256\320\007\313\330\312?\3145\026^\223\177\305?\002\222\270\340o\250\325?\231\270\270:\276\005\327\277\321\nF\004g\231\317\277\005\323\027\337\243\300\266?\254\3315\347\001\250\273\277\256\010a\342M\006\316?g\272\266;\2246\276\277srT\250M\240\315\277\303\350\274==\363\224?`6\205\276\211\333\315\277O\362\270\342\301\232\275?y\370|\336\236\361\326\277\206\017x\242\0343\310\277\217\364Px\\\026\311?>\225\221\202\300-\317\277\344\013 \2356:\306?\331LS>\343F\331\277pMp\240vn\320\277\312\000\355\232\3222\324?\257\033\000\273\344I\321\277,\240/A6^\314?\215\362i\241\246\216\234?\221\367\005O|\220\324?C\"\310\234\302\345\340?%\204I\034rf\241?L\345H\302\031\027\330?o\353U\001J\005\337?}s$<F\036\307\277\230\377\251\033\234\206\326\277\320\336\256\321Q\222\256?X$\0367\231D\300\277\336\247\r\373\373T\322?\231\346F&\032\203\313?\360\344\r\017\3454\270?\313\3022\221-\246\324\277\243\021C\335\315t\330?1\352\377\301,\331\315?77\3075\025\224\300?\213\026\003\230\360S\261\277wi\303ai\340\327?\215!\245~\203\233\324?o\302\367\335\370\203\320\277`\226\321#\241\010\340?\366\360\300[{\272\337?\"\355\322\310\337\244\306?Q\017U!\263\355\332\277\222R\226B\234\336\330?El\250\377IO\340?\361\362\225\274\021\310\324?\263\t\017\036\226\033\262?&L\275\023X%\324?\244\233/\274\263\362\316\277Y\375\021\206\001K\325\277\353\211\360\'\021~\271\277\262\273@I\201\205\317?\003\335\352{\005\320\322??E\032\204\3252\253?XIT=\323\312\340?\255(\353X!\274\314?\222\352\371\242V;\332?Q\221\267\032\341\206\325\277\370zk\036\217\262\342?LV\301\177%\035\325?\212!\367|\346O\325?\236\177\232\336\356\372\331?\351\304\365Z\226P\330?j\230\251b\215g\341?\225\337X\006\213\371\331?\"\262\274i\002\336\310?\267\366\272\034\341z\277?n\3339\305\221\244\271?\370\334\256<\355\225\276?\340*\364fy\303\314\277\357\251\275\004~\277\336?\232\3253k\306\365\264?+8\366\313\253c\267?m\205\372\247e\265\300?\255\224\022@9\243\320?\003\212\005|\206\t\330\277\344#\224\204e\350\274\277T\274\035#\321r\331?G\207\321\275\2307\333?\236\251!\273\034\300\324?\020!\256\234\2753\342?\032\263\231\0016\371\320?0x\177Y-r\313\2777\247P\345\315\304\327?C:\331Y6k\235\277\232-\223\300j\325\325?\t\267\306\261?\032\342?\2551*\241\242\307\322?\227TL)\330\024\313??\227\241\330\247\357\317?\025\276c\0353\225\342?n\371d\237\251\322\270\277\267Ya\237\245\020\323?\345n\204\003)\312\307?\226=\222],\266\250\277u\236\343i\032\220\300\277.@6$I\253\324\277\355\242C;\002\323\323\277\274\233\300\327\204r\305?#\223!\001\202=\325\277\t=\223\344V\224\306?\332\246\035\243\341\271\322?R\344q\232\003\331\236\277\277%B\033g\360\323\277&\331\314\034\360\313\254?D;~\332n\243\317?l]\254\240P\354\325?\220\177\311:\332@\334?\310\352\373\025\327\235\344?\003#\336#c\001\234\277C\256\324\263 \024\320?\263\352\030\374\242\351\321\277\264M\330\033\010\213\316?\177\202\356?\360@\322??G\232.z]\321?\231h\021\003\275m\246\277#\233/\037\336\255\277?d\330\325\242\r\031\323\277\266h\277\275\204\255\327?e\r\254\035\244\253\333?\204\031K?~B\321?ki\207\"Q\246\330?\205\322\325%\374\265\312?J\3254\367\251\215\272\277N&M\007\333\035\312?\230u\030\366(\032\317?\360-\223~N\203\343?\'C\237\331\277\374\260\277\233\030\365\275D\204\321?\305A:#\347\320\304?7\341^\231\267\352\341?|Bv\336\306f\262?\226e>\326B\377\310?Z\325\222\216r\360\340?}\325\343!\0006\340?\213&\'E\361K\273?3\323\305\2772\343\276?\307\377\025\340X\243\327?\223\017\315~\3258\332?r]c]\375T\307?h\022\253\3654\026\325?\270\177<&\030\357\316\277\267T\255\236\366H\334?\272\275\007\\\025\260\271?\023\325\370\330\237<\312?p^Z\334\230\201\322\277\247\002\223\300\213c\322\277\300\267\341^6\215\317?\246\020e\373\322\323\320?\246P\253\"\273V\223\2777\320t]\225\227\307\277\035\005\004Ju\307\314?\345j\236\002\344\364\321?\007_5\"Z\243\314?(\001\234\244\032r\303?{\310J\202&8\340?n>d\200\372\005\315\277\254\324\303\002%&\315?A\327[V\243\317\317\277;Ws\004\2312\303?w\313a9:\025\302?\276\217\335\344;!\320?\376\264r\253\367\206\267\277\t6lc\005\"\265?\271oR$\241%\304?\364\025(R/2\220\277K\\\246\252\371?\316?\"B\320\217\216\304\277?\235\344\375npX\325?\3654X\037\254\022\320\277\303\341\375\237`\022\327?\236_\224\240\277\020\321\277p\225H\036_\255\315\277W\310\001`\341\311\327?\3055\343\331\212\"\326?5?a\375]\247\323?\272I\014\002+\307\330?\"hP]\216\221\323?L\301\\\203\245\227\337?\273\020\'\007\036%\310?\227\252\264\3055>\270?\312\2172\301\364\346\330\277\304\017)a\001\247\340?\371l\333\377\031\010\327?\341\373\321&=B\324?WT\314Zmr\325?b\262#\233\314t\324\277j\244\204\344\215a\330?g ;\024\252@\277?0)>>!;\312?\227\322\310!\301X\317?\243\205x\342A\314\334?\271\016\037\"\177:\323?\302$\246U>\025\325\277\272\213\315\032\376K\315?\241\025sk-\'\320\277\0068\265\032\257\014\331\277\276\t\263@#\'\274\277\210\021_y\322\272\303?\316.\204A>\r\342?\355\277)\007\016\303\341?\004-M\337\2453\321?\322~Z\373\361\215\342?\251[\207\264\327\314\313\277\301\325K\235\221\322\305\277\022@\275[Q1\261\277\335L;\353\t\001\314\277\256I3\355\3155\263??\013\225\301I\201\315?\206\004)\004\264\245\277?\323>\244\177L\342\260\277\037\232\334\234\010\352\321?\033|\'\207\313\001\301?t\215i\202\265%\252?\244\350\334H4\\\331?\302=\350<\327\365\320?\025\345\322\370\205\327\325?\215\304x\213\217h\270?8\331i\030\374\005\276\277I>\300\244B\206\274\277mU8\240\252\344\251?wZ\310mE,\343?\307\277K\200\314\224\312?XB-\274\201\370\342\277_\333\323\274\200j\326?|\214\250?\261\204\322\277vV\250\301v\250\322?\311\001\036\305\367M\336?\326P\310\240\243\355\270?o\027\026\263\220F\266?\215\276\335\355\325\242\344?\255\2058Z\376\021\311?i\237\330T\'\261\304?\2162\013\202\001\343\321?\315Am\247\357-\300?\233\352\207\340\321\351\326\277G\367\275\227\014\021\325?\342\000\014a\273\317\215\277\016\321\021\216\223\241\277??\221\'I\327\214\340?\337\333x\240\343\335\324\277\225\246Zn\335\213\267?\275\032\2404\324\250\332?\230\306\212u\005\266\333\277b\312\227\202\373\002\340?i\345\271\031\311\371\333?\360Y\317\367\360\270\312?\256\203\270\257Y\347e?R\351P\033\017\025\335?\311\031q\236=\031\323\277\265l\316=\373\374\323\277\3478\226\373\r\250\323\277N\334C%\"\372\325?\0173\013\037\327\247\321?\353\225\252\233(\025\311?\265|\217\300@\014\333?!\302\205]\220\004\315\277\005*\014_\231\366\340?!=\342\343UN\325?\002\277\241K\223\255\335?>\264\352\316n\010\322?\347\006\032\236$~\313?U\2514\275\037R\326?\005\024,\006\3665\274?\373\026\347\271\317;\324\277\025]\223E\3142\307?\323\360\363\000\222@\316?\2153\033\236=\233\322?\241\036p\227\334,\310?d@Q4j\231\320?\216\002\206\335^/\327?\376\347Y\336\217\332\342?\327EvJ\2541\321?\207}0`19\277?\274\371W\240\'/\301?0E\034_9\n\334?\351\007\032\330\317\207\320?u\267\004C\312M\324?\020!~c\247\326\253?\341\006\276\232\352\246\324?Q\223K\251l\324\310?\021\021i\341\3238\341?\304\244\256kj\217\333?|\274\312\271\230\217\311?l\360\031\344\211\273\320?\007\225]\325\376s\323?\3213(`\\\246\335?z\356\024\335@\"\321?\2675\330\212\354\271\321\277\177%\343Z\345\360\310?e\333q\334\214\307\325?\026*\346\275\275m\335?\375TO\305\021T\324?\007\014\222>\255b\324?x\227\356\"\n5\334?K\262\253\034\234\000\325?_\001u\230i\332\313?\253\361-\007\325a\314?\210\366NX$\036\304?\213\205\245\252\236\206\304\277\220\200\336\017\320a\200\277w\273\177\250\013\343\256?c\020\263\362&\032\323?\375\330$?\342\227\326?\331#77d\013\272\277\t\375\n\241\234K\323?i\301\315\332T:\326?\231\365\275\341\231\253\276\277\317\301\361\204w\334\332?>\364\223 \022\264\336?\312\317\272\004\257/\316?7\354k\033N\262\332?M{R?\322\324\307\277\246N8\242\030,\332?\236\213\361\'K)\267?\242\201\263\357\345\231\315?\252\342|\240\313\212\321\277>\032\230&\266\314\305?\022tj\035\013\200\325?\240@\361\306\366\030\301?\200\247\177\377\2348\341?\355\266\217\005\032&\315?\210\365\343\202u\224\323?\344\360\017|\210\235\307?\257\260d\267d\217\261?\013\257\207\243i\330\307\277\'$%\177(\377\331?\200h\203\237z\234\323?\312\001\026T\257\266\275?\r\017H_\224\242\331?\023\307\r\001\270@\322?A\225\303\274\001\305\332?H\014\n\234\317-\322\277\272\030^\244\253\017\327?`\\\005\214\211\250\337?\324p\035%\247\335\305\277\342\r\243\377i\223\305?s\224\254X6\322\300\277\235H\017\307\3437\253\277Wh\265\372\311\034\300?\264\321s\352N\240\304?\200\311\327\257\205j\304?j>\235\341\274\356\324\277\022[0\247\2726\344?\365\365[\277\2116\306?%\177(\177\224\244\323\277\026c\344Uk\033\312?h<\266\n\007g\324\277R\226\245\306\031\375\313\277\223\321u\237\353\224\342?\0350z4\366\241\276?\361\243T\241\005\221\332?\362\013m\010\247h\315?\007z\311{\254K\301\277\333\035J\233G\321\333\2778\005\"Y\372/\302?\025\263V\233\234-\313?7\370g\2537\017\325\277\255\353\243\225s\020\306?\377Y5\000\002s\262?d\220\273\010S\024\340?&\377\325\333M\215\326?ah\330\234AK\307?\212\317[D-\260\326?~_z\000-\213\270?\314\204\272\243Z\037\323?g\214\305%}\320\341?\211\376\032Z\256H\325?\204\301\2200g\021\340?\036\276\361Z\256#\326\277\234\347_\375e\230\303?\016\342\271\255\343.\326?kK\333\307#\033\302?u0\254,\033\347\323?\224\201\250\240G\261\317\277Q\202\243\211\034G\323\277\256\327\262\204\316N\324?V\210`\177\206\265\326?l^\223=[*\327?\361\332\204\377\235\202\247\277\t\214\026\0345\221\310?!\346q\234\004\204\332?\261\202\245\333\216\000\321?c~\260\204\234\024\334?\204\260\340\237\316\354\305?\243\tN\\\022\220\325\2779\207!(m`\324\277,\335v\004\344\t\320?\242\203\211\232C-\320\277\017\345\355\003\356K\244?\201a3\237\367o\271?\307\374\324_LF\327?\032\336I\227@B\316\277BD\244\205O\343\306?A+\017V\214\010\302?\032\334\367$\207:\333?\010\366\251t\301*\327?\036\375\355\272\320\177\326?\207\363We2\236\324?\355\"\226\336H\252\321?\007\326/\340~\243\316?\274\242J\203\221M\325\277X\327\221\270\001\376\301?\274\330(\251\033\301\312?\276\306&\340t^\330\277\347\222G\303kO\327\277\226\223\263$\376\360\322?\n\201\236\376\232\t\332?\322\271.>\375N\320?>\355\317\311{j\275?C\\\265B\303(\301?\222\022P\033\264[\314\277\350\360\224\376\363n\323?H\374i\'sA\310?\177\003\213\252\374\276\315?\205U\304\002\302\273\337?TC4\035\256\223\321?\334Sj\335\243\312\322?\252\366e@(\025\340?8<R\267\222\241\262?\336\0264FNS\314?\323\r\271\276\264\315\312?>\275\347\372\035\216\335?Bb\365&\n\035\257?e\373\261\305E \302?\327\r\004\226\226\360\315?\323\217~\342\235O\320?]\036c\325\275\241\266\277\206\321b\337\0045\343?\320\222\215(i\325\274?\231xQ\005\355\337\325?\0310/]\024\177\315\277\342\267|\177\336/\321?W\004 j\262\261\302?\231\201\312\370\367\231\305\277\315\262\345d\373\363\272\277g\235\361}q)\326\277\037\014\341=\254\\\336?$]u\0259\341\314?\007G$e\346\335\320? \234\252\326\035&\341?,\254e|\251\351\324?\343Ai^\304-\322?\006Z\252\240\334\225\330\277\310vc\346\247\335\310\277\217\205\215W\305\300\323?\377\3751\306\352\003\305?_\277y\324\014g\271\277T\362\034WD\311\307?\321\r\250\222\\Y\315?RI\235\200&\202\324\277\354o\"]\340p\324?\361\014\277@\265f\326\277s\247l?\266\370\340?\354=\263)\371\006\202\277\305\217\224\241\350\211\315?2\207\213y\251\032\310?\001\265\244\3458\236\250?J,c\")\022\314\277P&f\244{)\304?\244Bm\002\251`\320?\305\020)\233\2540\324?\367\nf\247z\r\301\277<\207Sb\256w\305?\373\232\037^[\010\341?YS\223\277\377\177\303?(Yw\301\032\306\272\277k\023\243\276\227\010\327\277\233NW\034sC\340?\313\315\201/\2263\332?\\\273\214\031\343\356\210?\367\020Ca\006\231\324?\317(D]\367\230\265\277T\330V\375[\023\316?\371=c\277$\036\271?\312\"EK\273$\261?\207\265Y>\220\221\255?I\216\350\\Y;\325\277\234\275\330 8\023\323?\346\014A\345\312f\330?\231}`\277\016\271\335?\242\017\361j\024\355\323\277\361\324D\033W\016\314\277\336?\263w\210w\310?\2027\244Q\201\023\323?\316\'\341\370\220f\341?E(:\273J1\326?q\020\000^\227H\325?\3337\265;\275u\324\277\333y\321\r\003L\300\277;g\260N:6\321?=\352T\236\345\336\321?\255\3325!\255\261\334?F\031\232\200\231\316\301?\230\034\024 L\002\333?\323\033I\335)\270\322?\370\336\337\240\275\372\240?\377$\224w;\346w?~\336\371\352O\207\310?\227A\020{\374\271\332?^C\323\206\201\266\305?\360\344\354\000\374\221\310?\327[5\225fo\272?G\'\253\037$\326\262?\016\343$\203\222\270\335?\201\217\207\337\311\376\337\277\016\261nz\037`\264\277\221\342-\241\314\320\267\277\213\245\'\260)%\260?\0137l\235\260\253\262?\005\344dE\201\374\310\277G\240,B\322\003\340?\254)\034\203F\327\327?\346Ig\232\217o\304\277\306v\316\201\253\335\327?\276\003\362\333\306\225\334?\367\037\231\016\235\236\340?-\224\230\3342$\256?b\201T/d\032\324?\3744\223\024\375F\341?\326\302\217\336.\303\327?\242\257\244\005\375?\312?\363wJb\244\262\321\277\376\355\364{I\200\321?\0107\235\215*\375\267?s\366\250\241\010\007\260\277)\021\372\374\244\230\300?I\354$l\211&\322?~a\t\326\376\357\306?\222i#\215\300\016\323?\337J\372\244\250m\321\277X\rWA\353e\265\277\3742Z?\344\312\314?\355\347=c\231\335\315\277\352\016Z\366\301\205\310?kZ\020g\321}\303\277\222\033\352\034\250\370\317\277p\3224(\232\207\310?\307EZ\317\265\324\332?BV\\\301\333\250\326?\265\324(\301n\332\325\277\272\022?\316M\376\264?\266\003d\236K\'\313?:\315#\373\367\313\320?B_z\373sQ\327?\261#a!k\264\321\277\310\341\335\333>\265\322\277\236\255(\312J8\266\277\314\377\365\0337\306\327\277:15Sk+\320?\314=\013\337N\244\334?\243\264\365\333\360\236\314?\276\351+\202\336\037\320?\352e\014Z\345\025\312?\310\r;c\312M\324?\001\223+\'gI\317?\203\265{\003\335(\304?\340\214P\"x\262\321?\0031\236{\356\210\337?\346\026\004\240\233\247\341?:\260^=\325>\305?\035\223\305\375GF\341?6\353\347\250\376\334\342?\340!\326,\341\232\321?\033t\266>\264\250\322\277\347w\365\205\353,\326?b\235l\373\005X\310?\322M(e\316\212\324?\r\335\326\341b\250f\277\360\270\362\243+b\321?\204]\332\221f\003\245?\\\263\360Po\241\323?\350qs\205\322r\333?\374\257\255~\360J\316?\354p\360\\J\243\320?\243{\020\341\343\274\331?\372\357\301k\227\266\334?Y\354\304\037$\017\316?\364F\367\275\227\314\325\277 \372A\237\300\"\327\277~\027:\237\317:\276?\200\346%_\006\354\270?\247\3158\rQ\205\325?\216\343\013\203\307q\307?\233Y\t\345\226y\333?\204\010\371\037\347\235\271?\362\266-%&\003\336?\221\030\363)\266\270\327?H\272,GD\010\271?c\233\320\3731\363\321?s\365c\223\374\210\330?\214Hw\204\221f\320?\npr\246\246\260\264?\364\240fi#.\317?_j\235\033G\352\316\277.7\030\352\260B\326?6\023\253\275\212\267\242\277\210-\373}\030\004\307\277mjE@*\252\341?\300cOm6w\240?\006  %\227{\222\277M\364;E\365\363\303\277T\203\274`h\234\327?98\246a\327z\321\277\320\021T\350\027\000\315?\365\3613\242r[\340?0{\300\3319\017\262?8\210s`{\036\323?\030\306\'\256t\210\323?\202\224\022aG\214\315?\336\360/@\252z\267\277\334g\225\231\322\372\247?"
      }
    }
  }
}
node {
  name: "normalize_element/component_6"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\215\211\256\272\3678\235?\313\235\333|\n\035\336?u\027\315o=/\340?\367\n\003}\277\244\323?\314d\223WBR\330\277\365\024\224\375Nn\315?\313\014]\201\317l\335?.\302\373G2\355\305\277\261\236\336\265\031\341\306\277\316\017\216\037K\033\321\277K\206o\243\371\212\326?\242\243\013\240\316\313\336?\235\366\352\234\314c\243\277\014eUB\177\372\324\277\364\357\247\204/e\326?\303ai\340G\025\340?c7\001\300\220\331\264?\320\256\010\037\306{\326?J\213#\244\250\022\336?\234\202/^\211\306\226?\025\013\360\233\312{\320?\346\324\306\277l\216\304?\267Z\355\202=\375\335?\251`\236\337A}\323?B\232N>\177\322\331?\007p\304\244\t\345\325?\351\325\000\245\241\206\342?\306\371\376zC\351\321?\326u\003`\227<\341?,\314\214\310\301\266\322?\302#\340\306\034\272\311?\333\025<}\353 \332?6\014\325\2038E\326?\307\303\326\307\236\030\312?\300~\343\306\210\237\332?\237\002`<\203\006\351?\202{\267\334\r\340\313?l/X`~\035\325?\003G\237\342z\014\337?\320Sp\272]\026\272\277_\367\014\227\013\313\335?K\003?\252a?\340?SG\277d\200\227\317?=\310\035\374\345\217\334?+\332^\003\t\'\337?\016\365\273\2605[\266?s\255\254#\375\354\334?\334\202c\236\256Q\343?\354\033\363\225\233C\340?\362\330*\034\234\243\336?\373\371\337\337\332\350\306?\320S\323\344\030\277\341?\253g\265~\002\001\320\277\306<\206\"8\211\321?\302\201\024e\004\016\335?\240\326<`\201\234\321\2775\360\214~\200*\244\277[\223_ \267Hr\277\343\343\023\262\363\366\340?\"\207-\342\340\367\307?[\367\250\"\211\234\304\277:m\327\225\340\236\303?v\0056B\232L\330?t\270\2614K]\241\277\341e\3008<-\316?\321\022\226>\225O\313?\356\364{I\000\212\277?\316-\031l\217\303\340?\025\354\371y\327\311\316?\351\331SB\025\326\220\277\237 \261\335=\200\336?\326\302\217\336.\003\331?1\324\274>\316\317\332?\322\027c\334\344\"\325?<\337\2118!\035\305\277\334\350J\241\177D\347?\3566\3327\030f\313?\n\245\355g\312\261\317? \331\267\356Ac\340?5@\253\304#\016\305\277\316\350``\312\276\342?:\303\341\300<H\256?\026\212\317\370\0312\340?$\026){\350N\332?\232r*\276F7\331?S\345\336p\335\234\263\277U\3703\274Y\003\332?1 b [\230\325\277\277\007T\244g\037\327?\342\001\310}i\331\320?\222`&a\021i\340?\355\002\322\274\353\005\327?\220\354[\367\240\261\321\277\004\224D\376\262^\320\277b\010J\033XX\320\277\324_\320\276\311!\315?4$\264\006ks\275\277~\303D\203\024<\346?\210.EE\336\352\335?\227\300\326:\253\344\300\277.x,\021\0038\325\277\202}*]\260J\336?\025\2005\275z\013\340?\212\266V\300\254l\243\277@\034\177\375k\324\306?\256u5\273\346\374\326?\277\243\337!9\227\322?-\207\314K\264\232\336?n\030\303\244\021\226\327\277\273\355z\035\374\272\253?\305\2452\336\271d\321?\023r\236\344 ~\210?\356,r6\272V\313?^\345\340\004l\250\315?\35135C\211\232\335?|\366uC\307\014\323?z\0309\217\263~\267\277\304\221I>]:\334?\326.T\233\213\201\325?\324\022\247j\355C\313?I\3535^6\221\330\277v\t=Q\310\004\323?C\027\273\032,^\322?@\345\261\311\216\313\315?f\326sN\303\"\230\277\025]\356\376>\004\323?\303\244\317yS\262\317?\010\275\'\244o\261\326?-\376&|\005U\242\277\007\303\353\300ZQ\343?\351\204m\027\334\007\301\277\271m\337\243\376z\303\277\020O\300\300\275|\333?\267.N\337\337^\333?\210\037\316\211^B\310\277dCP\230\244\360\304?\362Y\340#I-\306?\372\033@\001\014\362\336?\320\177\315A\351\256\333?\032\276\350\237\236F\322\277=~\322\375Z\346\316?\337\252F\n\300\232\323?K!o=3v\345?\\\254\352\335\006R\331?\372J{\336\350\376\340?>y7\232L\252\311?e\210\010\244i\365\326?\230$\340!\326,\312\277\r`\241A\320\362\326?\374}\326g\224\317\312?\277\252U\240?\271i?b8\317\277\372\013\322?.\244\027C\246m\233\277\334\305\352E\243\361\340?\020[\233B\276\266\304?~\2455\376+H\340?\366Z\267\336\302|\260\277\360\021\265]6t\303?\212\021x\026s\006\341?\230\005\352\377\342\272\323?\276~\220~^\345\270?M\272\220\273\306\366\335?,\377\214\230\372\365\264?\331\316\030b\314\310\321?\310\271\250q\3127\321?\224\243\000Q0c\323?\253T\365\227\202Z\345?\267\ra\004\246v\337?\320\3221\301RX\275?^l\265\342v\303\337?V\264\234\370(+\262?\215:B\037\217\215\323?y \262H\023/\340?\254\027\350\177^\235\321?\025\201\373K\234\246\320?$\326=\rs\335\330?\021~\024;;\025\326?1\230\277B\346J\335?\204\277\231w \333\311\277W\365,\347\326\024\304\277\373\357\332\0108\302\317\277\243\235\211\237\265Q\331?\3707\366YV{\231?\014\341=\254\334\260\326?~\005\006\234\347\200\307\277\323d\255>\252#\340??\244c\367\262\247\303? \214\nb\301\331\342?\020E\232\33313\207\277)Z\230\t\257\362\315\277\341\003\"ak8\340?F\274+q\323\325\330?{\003\037\3051y\260?|f\341\234%\211\241?\235IJc|\344\221\277\344/\312\277\330\363\317?\314\235\364\031\253\250\321?\363\277d\374^\267\253\277\201P\3468\0324\272\277 \205%\375AM\306\277\3027\236\346\034\360\232?ABZ\204\336r\331?\031\372v\376,\027\260?\036\202O\0309\260\334?N\315\212M\320K\340?$\217\361r\"\013\322?+W\323P\376\211\340?\267\353\3067\353>\314?\236u\360\300\276\245\330?\330N\020L\240N\254\277X\230tJ\366\276\326??~\342\004\216\022`?\310\334k\367a\363\310?H$\300\237\320\241\340?\334\023\240}\027|\325?\\4\t\203\327\323\341?!/\367\013nR\270\277s@\371XM\031\312\277\001nq\350\210W\345?\350\260\261\001\307\224\325?\200\n\r\345\300\202\304\277\247\004\006A.\216\343?,\354/\3345\370\274\277\2432\254\177c\221\306?\265)&\210\035\272\317\277Jl\312W\372\267\242?q\232_\000\252\007w?\310OW5\020\344\300\277\324\337\001T\'V\332?\2323pz\366`\316\277\353\rav\373\036\214?o\241\n\003\277\333\334?\354\335\274\304\232B\330?\214\247S[@!\204?\356]\305\332\306|\330?\353\225\r\306\343}\330?4\034C\276S\232\306?\031)J\370\224\322\332\277R\350\3047wh\264\277 \3652\345\236\t\334?\200\377\030\000\313\306\334?[aU\030\266A\335?\263\017\r\346\nJ\323?N\2532\235\347Y\321?\266\020\344\240\204\231\322?\310\352\373\025\327\235\324?\005\262\256<\016\244\331?\377\273\323\327\322\'\300?\\c\206|\206f\330?\337>a?zy\301?\020L\177@\261\337\303\277\372YU\304#P\311\277V\376\010\005\235\367\335?\rg#|\224\366\335?j\3504E_\305\333?\237\307(\317\274\034\347?-\302\301\234\250\276\321?8\244Q\201\223m\323\277>\241\256 \223\255\334?h\232,\305\300\200\324?\373\372\255\337D\033\341?x\355\024\243\225\030\223?\253 \'\310\337(\247\2773\035\225\366a\230\323\277Up\221\336\344u\275?\272\367O\273\210\004\336?\342\273b\200#\005\307?\323\002\254<\036\206\265\277\341\365\221B\366\r\333?D\224\006\351\357\306\202?\252R\253\226\021j\262?\353\022\037\351\0358\302?m\037\023\245\224B\303?*U\242\354-\345\272\277\353\017\336h\021\233\310\277\340\365x\245U\302\267\277XiZ{\002\325\325?O\201\316\317\3151\202\277F\033p+\367\341\246?\213\235:\240\266W\321?\277\340\211\017\242\353\340?n\322~\265\264\344\317\277\270\236\327\216\230\017\332?\004\201\337\320\245I\325?o\321\326|\355}\257\277\252@\261>\263>\353?mT\247\003Y\217\337?N\312j\333\254Q\327?\354\232\332c3\221\322?Vgs\244L\215\321?%$D\214\346\347W\277R\3662#\336\'g\277pO\343 \031\231\334?\340\022\302\233\034\333\326?^\231;#\337_\334?3\032\267\240\020\344\337?\353l\n\\\005\216\322?\311J\335\337\352*\354?\351\242\031r\t\023\270\277\301R]\300\313,\340?\226\021\315\362+\014\332?v|I\235_\030\324?\"\267\364\242U\261\315?\221\260\206\303\2062\212\277ZF\'\241\255\260\272?_\313\320\035i5\345?\334\244\232@\256`\330?\217;\276 \226\213\342?\006\306\023\244\306B\323?{K\367B\032\370\323?W\310\001`\341\311\327\277\016LM\006pH\261\277\343\246\'\250\270\334\310\277*0q\237\255g\275\277]\370\342\007\276\324\276\277\324\363\013\002mc\322?T~\306C\347\316\322?\371==\370\201\022\310?\337\005\000}\021#\241?\335\370\250\371\tk\310?nz\202\212\313\355\313?\343\307\024\203\362\004\265\277u\232\273L\003\365\325?\002\354H\232\344l\330?\220$\224\000-D\305\277\323\316\376zd\367\324?=\030\263P+\177\204\277\003\201\347A\356\340\306?Vo\201\302\250}\327?\227\304\274;\360y\320?\215qr}\'\377\321\277\035\022J\241$\013\260\277\252\255\001\337\247\t\312?\353g\034\260\314\327\271\2774\205\255]\003\360\337?w\370\306k\271\016\342?\254`\017~\306\253\263?\334\327`e]q\241\277\232\370\027\377F\324\324?z\365\371A\300\316\304?K\3652\304\220\240\325?C\266\301\303\223a\325?\300\276J\374Y\305\334?|K\224\030_\017\304?~\374)~!\036\334?\252\313\020d\220}\333?z\306\276d\343\201\340?\034\236\271\342=\242\341?H\250:`.\024\305\277F\007$a\337N\300?k\272\236\350\272\260\341?\016\205\317\326\301A\331?wl\035\177\026\211\300\277@\212\266:k}\304\277\237u\215\226\003\275\322?\010d\002\300\251\366\332?f\300\366\037\333\352\327?&A\217\203\330:\326?\336\255M\337B\t\273?\322W-<q1\277?6~<O\227`\344?\223`\375\341\337N\300\277Z\2408\3337\322\321?p\320^}<t\311\277>Mw\350\005i\324?\206Z\323\274\343\024\340?\264\270\265;Z\013\335?\314R\374)\237/\336?\254\226\256?\r\210\321?\256F\270\3017\352\321?6\270\320<P\014\224\277\306/\037\275\237\242\302?\rz%\177\346\342\316?\377\262\367\271\014\305\300\277l\250\336;\346\023\336?1[WqO<\340?\305Ue\337\025\001\322?\030\365A}h\262\327?\3130I\300C\254\307?\353\003$\365\371\003\323?\000r\004\241\2432\330?\273\202\310}\006o\336?p\003\241iGy\260\277v\230\202w\352\370\311?=\247\356\004\332!\334?\240I\213\310\352\265\305?\307|\202\274\005/\310?\234\014\330\037r\304\320?\210\263l\367\274\254\322?\222\302\224\377\313\340\254\277\010;\305\252A\030\326\277\\\3665\334\221;\321?\247\361\003>\334\241\347?_\212\037!\322\210\301?\363\016d\373\230\250\335?_\023\210\215h\361\311\277\r\005\307\300\225\307\311?\n\036\266_\004.\316\277\212z\257\304}\220\213\277~\214\224>\305FE\277\266\343\237|\356\302\337?\252\034\305\377>_\322? \036\221\010\360\n\307?\374P\253\340\236\004\270\277\227\321\341\204\266\332\327?\031\277\266\237\010\271\337?\211\001\032\276\350\237\326?\256}H\222\374\225\215\277\346\264D\272\341\357\314\277\310\347\270\300\271\201>?\n\305\261\211\'\026\333?\313\262q\016\350\226\321?O\177\254\226*\307\340?\245\025|&=\004\304?\340\254\230|y\"\261\277\226\001-~\317\037\331?\331\2534\316Kj\263\277\277\322\202\342\2125\246?\0006\244z\000E\305?iQ\237\344\016[\324?\320\022\236\257\335f\267?L\360vR\231A\240\277\235\270\034\257@\364\272\277\303\221Q\257\245\021\326?\\\326\324\344\357\177\313\277D\256\016_\252\302\321?\344p\234\312X\243\340\277%\002\325?\210\344\265\277\247\313\244~\305w\324?\213c\260$q=\277\277\024\td~\207E\324?\n\210\244q\003\231\331?\235\316\200@\210`\306\277}F\\\337\013\274\216?k\214\316\340\214m\263?M\033\304\275\350\241\326?\261\201|\"\262\274\331?\327\177\204\376\225\327\307?\321\036q\300\225I\335?\023\325|\021DH\271\2771#\274=\010\341\357?\t\"\203\303\250\367\321?\"\305!\227\017s\273\277\257\027\226\201\373\350\263\277\277\215\336\272\254\023\334?ai\"d\007\362\325?\207\223\311\343H\353\300\277\346s\351\275\003\314\241\277\327V\344\276r\320\323?\027FYC\322\274\335?\034E\326\032J\355\321?\270\001Df\323v\344?\317(\261\371%\323\224\277\320\320\201\335\227\320\327?\274\006\032\2772\347\331?$\334\277\r\214\027\310\277v\035\005\343;\214\324?\221\241\276\300\007\n\330?\301\244\337[\344\340\331?1\332,\\+\341\256\277\004\006\203J\340\377\317?y\270\364\232\344h\302\277\303\371\016]\324\027\310?\204\213\313\247})\325\277\342\254\210\232\350s\302\277\005\023$[\002\325\333?CR\321y\t\245\315\277\363\224&\274<Q\235\277v\353N\332\3103\314\277\242}\254\340\267!\321?\230\034\322\003z<\324?\333\317\030\234wR\325?&Wo\334{\033\332?\205\315\245]\361\371\302?@h\342\302&\227\330?\320\217\320\340\000D\326?\205\254\023<*c\323?\001\003\030\001\333\002\340?\344-\231[\010\317\324\277,\253<\303\314%\327?\252`\267|\342H\323?K\356\207\n\233\"\276?\257\004\224~\251|\341?\262\330\303\352\321L\275?\256W\344\031,\203\312?\363\370\305\276\307\r\340?9\343\221\376\262\t\201?\230IyR\313\373\334?\212d\033\372\037G\314?\231\327\251\243\367N\240?\327\304\300B\377g\272\277bh\306\271\205bv\277)\3305\020\201\231\340?\227Ml}\022Q\251?\353B\305\233\251\316\321?\216\206\000\236\274\241\335?\306yj\273*\314\320?\242\363ut\267\306\344?\305\262\364\374\304\\\317\277\343\\y\177r\n\337\277\201\3344lJh\322?\227iE\345pw\333?\324\221\2168\205\021\274\277\235?T\267\006x\315\2777eU!q\321\245\277O@\023a\303\323\325?\200\350r\030\006\013\312?\302\022\264n(!\326?\r\266\307\301[V\300\277+\004(\374\0102\332?\2567\336\333\374\230\320\277\001\305\002>\303\304\324?\341\363\036\302Sc\335?\n\274\264]x\020\324?\\\202\000\327\035\244\277\277\025\010\226~\035\223\325?b\363qm\250\030\347?\"-\337D>\371\345?|D\257\263\337\342\250\2776\033\320w\\\271\346?\331\321\223\215b\224\321?\030\347[^:_\241?\215\374\321\242\004\036\313?\006\212/E\177\211\330?2|<\333@M\322\277\235\220)a\236\374\323?\356/\324\304\257\326\333??^\376\371l\323\331?\221%\367d\2236\307\277\223d%\377\366i\326?\372\233q\226i\346\310?\2016 \3371>\323?#\251}!\201R\326?\037\034`\244\037\246\323?\333a<\030\353z\315\277\217y\323\343\255\251\267?UE~\036\037\204\310\277ix\314\243\217\267\244?KL\202\375\370\307\327?IYT\376\224\256\314?\344j\277\020\315\027\347?\304\374\344A\335t\321?|KR\374\214I\303?\252\3441=@{\300\277\n\201\236\376\232\t\332?\207\2679[av\301\277\2525\244\274\034\227\302?\016\352\317<\210v\326?u\216\001\331\353\335\326?\240/\244`\031]\322\277C%\307\000\375|\325?#B\005\202^\212\221?~T\303~Ol\324?\014\202\032\000\242\207\353?s\364\266\241{\271\312\277\315l\241u\236\302\326?;XZ\241\243\320\341?:\212\275a\354\016\320?\026`\001G`~\223\277-\315\255\020Vc\324?\251K)\\M\346\327?*L\245\300~_\312\277\033Q\261\234J\'\312\277\203\372T\035\213\320\341?\177\t&H\266\304\340?c\004;\233\341\310\305?\303\320,\001\337\n\334?\034\t\362\273\0024\253\277\200\212\2313\221\010\321?\306\004\014\375\331\260\241\277%\036\365|r\271\332?\350\035\300\205\351\271\313?\204\264k\347\240\360\310?\242MHJ\376P\314?\255\376c|\363\366\341?\tL\n\240\326\374\351?\205\025]\315\360U\323?\3136\211\244\212\340\323?\205\0070\3316\224\300\277\200\217\345P\313~\201\277\023bp\305\254\264\242\277\324{\256\337\3410\327?K\370\020\032\342T\300\277\2675u`1Q\316?\002\220$R\344Z\341?c\271B\253\325O\261?\016\223\030 \253=\245\277T\024\267#\377\000\327?\336\"?\001ej\250\277t8\302\273\277.\321?^*x\002H\212\325?\"\317\303C\3670\323?W\0055?\250\322\243\2773\264\215\201m\253\310?o\200\231\357\340\'\341?\331\004\275\334\314\215\324?\035\331\246\302\351n\340?FNW^\217\025\312\277\026\202\301\332\275\301\320?\250v#\177r\314\326?g\331Q\244\024W\306?\3214\017\375fd\324?\021\221yhH*\302?7,W\211\303c\315?!\013M\351\313\030\312?\014U\224\2779+\306?\030za\276\376\234\342\277.i\326clr\340?\330\267\264\226\331R\271\277+\'-\236r\363\334?\002\321^@\331\333\261?JC\317^d\237\311?\205\007\254\240\222\010\337?\373\224\204\300\241\002\340?:9\t\306=\355\310?\202\374\256\000\215o\272\277\204\210\314CC\322\321?;\000\342\256^E\320?z\240>\227\343t\302?\\n\325\032\357s\331?\370<\271\2052\375\307?\357&\317\'\270\371\310\277\356\241\361\002\364\224\311?\nG\261X\232\306\272\2776\226,\376!C\300\277\227$\t\241\007g\325?\035\312q#<\014\331?\370\224\326\276\004\227\243?n\270 ?A\200\266?_\362y\244E\246\310?vM\212\207\336\177\313?x\324w\002\212&\307\277o\2126\343\016}r\277\377\336\267kS\206\340?eE\036\322\271\354\341?\326\223T\001R\266\324?;+\026}\r\332\314?\216\007\370\301;\361\323?\355\017\224\333\366\375\321\277,\304\033\200\252\335\300\277\320Vo\036\230m\336?Im=\236\361\230\332?\230\262\302\343\221n\330?\251y\371c{\251\326?xt\310r\267\020\340?\277\221i\002\177W\302\277ME\360\340\243\265\342?\271\t\316K\213\033\265?\005\021o\276\215$\322\277\264\276\222\365\345\226\340?\000\210`\301\242G\334?\"\235\313\036\262\022\304\277/R\305\340\243v\334?\300\023i\321\361\007\330?+5{\240\025\030\321\277\357\277[AO\332\251?\'c!\337J\033\271?\233\325\361N\364\257\310?Ov\010#\303\030\213\277\035(\350\335\365e\336?\236\000*\037\371\270\251\277\017\370\262\243\'[\336?\013\270B\263F\230\340?\216\354)\275_\232\324?\203\321\366\3719O\325\277\0373\253\322q\020\320?\320:\221\375\177\336\326?\342\370\251C\3210\324?\020\026\035\342\202\240\325?}t\236<\"b\225?\363V\237\243<\020\324?\353\035n\207\206\305\330?_\"\203\201\214\005\341?1\241YD\332\347\330?\334\367\330\370t\276\231?d\312\207\240j4\332?\366T\230\010e\253\316?\355\253\274.\r\215\320?\211y\373\030\030\236\327?\375\177\222\276\355b\252?4\"\331\242S\367\253?\343\274\244\326\240T\306\277MN\212\342\227\362\311?\266\270\214\274(\321\311?\254\tXa\351\362\327?\206`\224!@\346\234?e4\362y\305S\331\277\352\370y\235\036\005\340?\013sd\340\336\007\253?\2349\240|\254\246\301?G\221R\\\227\222\304\277\327\223\320\310\255j\301\277\347\256\321\344\365o\227?C\t+\374\266\263\300?Ul\253\335\237\240\327\277\260\331\333wV\234\324?\032\200\262\316\235\005\322?\242\016\206\225ec\340?D\257\263\337\342:\325\277\232\227\344\374$)\305?}\217~$\272\241\332\277w\221\327\275\364\372\311?\241\355=\001\271\351\307?\272\276\017\007\t\321\310?\201\264\377\001\326*\270\277\226\220\264\300\303\371\342?Ql`\006\276}\347?\203\r\231<\257\202\340?,\244W^M9\320\277G\352\034\207\352{\313\277\373z\031 ,\276\261\277\361\244\340\204\235}\341?\003\277\374\004\006\277\321?j\3736H\261q\312?,\372A\240\345Gx\277\2661v\302K\260\333?\331:\233\002W\301\324?\355\256\375\256\031*\260?\322u<\301Y%\324?\302\014\327\264\234\225\325?\177PGb\252\342\243?\367,\276Wc?\324?\005vo$T\231\321?KJ\315`\204\027\326?\325Uh\275k\022\322\277.\035s\236\261\357\322?\250\201\356\3446\216\323\277\206\216\200~\235c\324?\211W@>t\003\311\277\236\3244{\3421\336?\206kZ\316J\377\241?\020\302\355\032>s\344?\210\307v\245\002z\257\277\245\371\337!\367\272\333?\010\220\343\177\331\032\341?O\327\352\335\345\303\310?\036`9\204\"D\321?\361;\227\363\326\212\331\277t6O;\035\304\324?b\2042\205\265N\305\277*2\000u\177\314\260?\360\r\317\\\361\036\272?\"H\214;1m\335\277df\023\036<,\304\277YR\356>\307\207\340?\010(\005\304\301q\321?\2450\020\200\217,\243\277\222\230\373?\342\262\341?\233\331\266APb\331?"
      }
    }
  }
}
node {
  name: "normalize_element/component_7"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\001\320\366\"\271\000\306?J@L\302\205<\354\277\323jH\334c\351\330?\350U\370\216u\314\262\277_hdF.\356\340?\\3\"\346\314U\300\277>\204c\340\201\004C\277{\207n\0053\367\203?}\354\347z\306\261\226?59\306_\244a\354?\r\306\210D\241\345\347\277\022H.\244h\212\350\277!ES,m\'\355\277\022\351\310\333[\033\336?\361\212;9\236j\350\277r$#\251}!\211?\236\204\251\230\020\224\304?R\327\230\337\202\017\333\277c\241\316\303\246!\304?\352\224G7\302\342\344?\223\337\242\223\245\026\341?\005Mg\001\274\000\252\277\254\257K\340\030:\347\277\002W\276\326\301\233\177?\236\002G\237\342z\322\277\272\313\023B\346N\327\277\203,\260l\213\027\352\277~Fu|\254G\315\277&3\203\235\007\234\352\277j\252\214\036v\341\244\277\265\320\000\244W\377\312\277\346<c_\262\021\353\277\203Dv\300\336\315f?s3\360d\266\262\230\277\333N\235?Tw\351\277\017\272\204Co\361\343?\"\256\367v\246+\302\277\014k\232\337\177\027\271\277\353LF:\250\251\344\277\017\352\307\313?\037\352?\304\236\321\261\336C\350\277\251lYx~\\Y\277\320\307)\370u\371\275\277 \345qbY\332\347\277\211F\356\036\335^\211?\370\301\236\033?9\324?\tq\304\336\264\016\347\277}\370\307\265\200T\307\277\232\321\217\206S&\350\277a82\352\265\364\343\277\000\324\303\206]J\351\277=\374\312\275\237\036\306\277\334\367\003y\321\262\352?}\332\227\"\257\035\343?;\032E\336\213\222\264\277\241wS_\320!\273?\240vS%%\030\356?\202\230|\2320m\307?\255\215S\242\\\202\226\277\326\255\202>\257}\251\277\363\361Z\301\314\347<?rZ\205\007\254\240\240\277\034\341\376m`|\346\277\201\323\365#\311\034\312?C\355G\"\345;\251\277\023\311\227\035\320<\232?;\271\317\277\227\301\357?\002\334@B\023\257z\277\353\366\243\362\300\321\346\277j\326\000Bw\313\351?,\230\235\3525\242\346\277\007\325x|\212\002\224\277\265\256\013\036*\326\347\277\274\342\261\270b\363\273\277\031\022\026f\2709q\2779\035\257\335\311)\332\277\'\246fjm\365\302?\243\224\357\235\301\224\347\277\034\352\271}=|\353?N6*\337Og\251?\r\307\363\031P\357\351\277J\r\310\271\250\361\357?@\3067o\367\315\345\277\231\302\336\037J\017\332?\366jxa\010\314\345\277h(I2\006\261\356?D1\273\037\236\202\325?\311\010\240\377\273\221\242?\354\300{?\034\001\355\277\034\324]]>\307\352\277;\014Z\006\244\026\276?\220\004\320\336\317\337\353\277\035\024\336/\260\230\347?\327Y%?\177-\261?\2763w\200iI\341?n\254\274\313\342Q\263\277\267\362\350\377\202\310\265?\310\'\"\313\233&\240?\213\030v\030\223~\302\277\'fb_W\270\357?\177SqFA\256\260?\342\310\250\327\322H\340?\\|\300\362\326\257\353?~\202rx\224\214\305?\263\204\020\353\350\223\352\277\000\223\361{\335\332\320\277\343\335\221\261\332\374\353\277\017p\224\376V\031\274\277\335\004B_8_\337?\335<\233v\255\224\311?&\tx\2105\013\344?\007\247O\274\024\350\312?\000\304]\275\212l\351\277\206R\033\237@\r\266\277\000\033\020!\256\034\353\277\352\356\327\3606g\247?\215\007!Am\253\270?q\253b\"\214\274\305\277;\326\224}\272\356\324?8\337\241\213\372\342\226?q\263p@\350l\342?j\212\005`1Z\243?(8\006\256<\322\353?\026\3510-\222\000Z?p\314x|\367\036\311?\024\326|K\357Q\352\277j\300lw\031B\215?\264G=~N\245\346\277~\023\257W\375\366\346?tN\005?\036\370\331\277\246\240x!_z\343?h\346n|\222\240\357?P]\257\237\264\246\320?/\026e\272\000I\310?\262$H\276ur\306?\n\357Yt>~\272\277\371\3000\216\001A\177?\301\'\255*\301\003\255\277\333Y\354\335\274\304\305\277\322\355\333\377\266=\346?\241X</\364\014\244\277e\275\275\020\027%\354\277\033\262\313\001\314\306\320?\0103\267\214\345\347\351\277\301s\020\360{\006\262\277;s\254\336#\323\355\277}\013F\200.\365\351\277\t\225n\001Wh\342?\205.\227CA\337\355\2775\261e\236\001\372\341?\t\021\025O\342X\354\277\335\206\007\203!!\347\277\212w\200\'-\\\340?^.\240\037_%\353\2772q\253 \006Z\343?R\223\t\215\232\216\254\277\3444\300\334Y\201\245?\267-gB\325\240\357?\267\271\262\275vf\244\277K:\014\336>\310\306\277\360\212\340\177+\331\357?}\247\023\032\322r\343\277\275\246I!w\356\356\277v\271\220`\r\304\310\277\2063\246\375bx\341\277\3413\n0\311T\275\277\300\3348sY\026\324\277I\301\021\254\3034\240\277d\344\227>N1{\277#\247\n\241\336\307\353?1\352\377\301,\331\315?\304\330|;\rA\337?p\035\210\321\030R\311\277\332fSCU\253\304\277\376\306\350\312\261\006\314\277\373x\350\273[\231\351\277\016\256o\026\345\010\356?%\315a\357\254z\276\277\216\303\252\213%\366\345?F\253\244_l+\357\277\256\247-\340+[\265?H)2\204\255c\355?J\231\365\336\357\202\314?V9\376U\221\033\302\2777\'@^Y\263\353?8\373\034\202W\t\350\277c\3676`\004K\245\277\213k\2354\344\n\263\277 \251\215\003\022A\306?\031X\350\377,\250\350?\313\364q\213\376r\203?T\265\223w\304\327\333?\251\036a\377\022\304\340?{\377\325\2311\373\357?\363eX{\216>\356\277\266\201;P\247\374\356?6\325(^D\337\312\277\014ZH\300\350\322\352?\001\005\315\235Os\353?Z2\277\201fc\263?\360\302sB*\375\357?\347\324c\225\261%\267\277<\2168\307-$\304?\010\026\217\244\007\362\336?\300\007mA\010+\256\277\004\247\004\3452E\332\277\215eU\337T\377\344\277\3725Hw\306-\355?{X^\250\262^\315\277\371\220\307>\216\007\307?3\346\307\302\204\317\336?v;\230\240\310\013\310?A\355\236\331\001\031\224\277B\347\230\240D\323\347\2771s\211<\254d\324\277\217UJ\317\364\222\352?ERz\302\354G\215?r%\361\250\347S\357?O\251\267\253\374\327\347?\004\352(bl\374\352\277\375o\200\364\250S\261?\325\216fU\031\200\306?l\271m\276\225\265\350?\227\2122\300\252\177\357?\261\316\010\241I\343\352?Fa\325(=\266\304?\253j\223\324S5\345?\014rY}\\\270\357?\3342;\346\227\234\340\2770\315| \334\321\330?\345n\204\003)\312\307?8\353\235\033\344\277\325\277\"\3071\355\366\264\350\277\335mj\342\025o\301\277\205\324H\246\236\240\353\277j<\350DH\376\263?\363\266\237z\016\246\231\277\377CU\247^\322\345?Q\356\251bK\253\350?\314\034\273\331YS\304\277m\211\277\232\301g\322\2776\212\223\230\363\316\301\277\254U\273&\2445\236?{4ri>\337\313\277e\036\226Y\306~\233?\236\266\263\240\021\033\255\277\342\021G\344\334\"\310\277\217\230\217Z\027\355\314?\003\204\305\227?\225\355\277\221e\177\250M\377\301?\021/\364-\030\001\351?\300a\273\336\252)\351?\246\027\214|$\306\317\277*\204\274\273!\317\206?r\370IZ\226\324\354\277\355SD<\310!\346?\035\261\004\274Fw\256\277t\374a\225\034\301\353?\005\363\355\343\274\215\230\277\355\231%\001jj\266?y\341s\314\036\r\350\277\344E\211\n\223\261\305? ^\370=\3010\304?\330\201sF\224v\356?a\317\215\237|\260\306?\235\017\203\204\036\355\230?<\356\245:.4\341?\335\213yg\376\342\357?4 \255\367<{\301\277\375\002\223~o\021\304?\027\355\226\211\307\352\357?\260\030\032\364J\376\356?\303Y[\302\353D\305\277\251\366\351x\314\300\342?\235\345\230}5?\222?\2359\034D\010\333\321?\245\276M\373\275\177\321\277,\251\013_\374@\340?\026\333\244\242\261v\357\277t\025F\013\264a\217\277\257\222\362\007\301\262\233?\354G/\017>\271\345?\017\000f\010\021:\355\277\337\036\235\035\035\325\347\277\013\222\302\345F\313\313?\236lV\277\312\310\340?\2051u\231\222\223\270\277\231#uL\'c\347\277[\317\311\270\315G\226?\206-\013`\2512\301\277\340,F\3312\313\304?\030\347\261^\363\207\344?\214\316C\267\250\240\354?\252\'w\310b\325\300\277\375\265\006\000\330\312\320?\235^\316\021\236\265\350\277\326\324h(\244\253\340?\254o\246\"\n/z\277\001\212p\027\212\t\303?\354PMI\326\341\347\277W\257\246\333\247\035\306\277\000\203\356\334\305E\341?\355F\376\344\030^\336?N\251\277\034E\357\303?%~\377\305\267 \311\277\263b4\002\\\366\347?^\250\262\336^\350\346\277\222\315v\001\006\024\352?\256\233R^+\201\347\277\334\032\307\376h\316\351\277\255\331\273 \321\355\251?\027\245\337\031\310\016\353?\207\r`\333\354Y\353?O\205.\227C\001\357?\360\303AB\224\357\350?d\243\377\'w\206\260\2774\032TvU{\323\277\223t(\236\016_\341?\235\032\036\261\314\221\357\277`G\322$g\327\354?f\030\370\003~\212\253\277\355\371\365\236%\003\351?\304\265\332\303^\350\326?\035O\323\200\244\274\353\277\240\261\345K^S\260?g ;\024\252@\337?k\026?\370\026\367\277?\216\231\237vSe\346?gV\344Gdn\202\277\316\343V_b\316\270\277Vk\233\301ch\267?okf\210\276V\346?\255t-\020\363[\352\277\343\361\376\211\333\362\354\277W&\374R?o\350\2777\006S\203\037\013\302\277RU\221\237\307\347\357?v\272\034D\245\360\335?M-\235\007^\312\314?l!\310A\t\223\357?-YW\375\370\250\345\277%\350\222\036Dz\347\277\005\201:\212\030\333\343\277\233K\375\376\305\232\357\277\215p\346\231\217R\226\277CS\033A\317\253\346?|\245\262|\3530\221?\271\267\256\332-p\325? \271\220\242)v\352?\031))\352\253\257\303\277\233\211\216\2119\255\270\277\317]\357W1\367\227?\227\267\270\000\023<\214\277~\247n\323DD\242?\306Fj\353\361\014\337?\204\000\317\254[\263\346\277p\035\210\321\030R\300\277m\022\356[\316\241\334?j\232\034\343/\322\357?\035M`\000\002\322\310?%~ \324\240\303\323\277\361(Ib?G\244?*\032k\177g[\350\277-\025\247\234\'\205\276?G]\204\214\364`\266\277\322\307\235N\211V\242\277\362mM\374Ic\334?\241_\000\206\212\026\353?\265\354\377\322Xq\341?\327\033\316_\225\t\342?\360P\261\275X\220\312?\230tk\004\250J\312\277\r\246\013\370\317\257\224\277\002\335\321\336dd\354?T\302\016\301C\341\274\277)\314\275\270;\010\301\277\273\355\347\271*\265\356?\364>DY\256-\353\277Z{\247\033\213\032\314\277\006\031\250\\F\211\250\277\345/K@\356P\265\277Qia\242\203&\354?0\010\223\177\271\330\321?\242C\340H\240\301\341?\304\217>\241/\241\245\277,\000|\246M\213\356?\264\333\272\335\303\014\245?\277\245R\242\333\341\356\277t\345\232\237n\342\347\277\266\321\245$\220\367\352?\365\371\244\352\211\364\314?\211;\203+E\227\313\277\376\234a\356\203\301\257\277\231\250\224\215\275\215\354\277\030l4\312D[\354?9\336\262}\247m\355?}\010\005\000\"X\357?\350\2722\240\305/\350?\336\377lP\240\364\303?]t\354\177\004\356\314?,/$ Y\322\253?\220\363\243\206\333\306\350\277\277W\276xP\032\314?M\2105l\306/\276?\242\246L \333\350\313\277\034=\341\231\216\010\315?\327\335<\325!7\327?\264-\024\372\252\346\352?\005\253E\237\352+\357?TW>\313\363\340\312?\212\200a\376\254\'\275?MP\375b:\235\331?\251EL\242\301\232\325\277\351\007\032\330\317\207\320\2774\030]\275\016%\351?\026[\3267\017+\312\277h\250\233\325L\310\350?\2235ML\325E\273?\316uu\"\034\216\357?q;\023\036]\272\305\277\327\247V>O,\305?y \221:*\314\312?v\247;O<g\300?\377\211\333\262\215\t\356?\035\027\233w\030j\213\277?[b\300\355d\260\277).}\236\365\337\347?\241L\243\311\305X\352?\177\325,\370\266^\204?*\351\347\241D\270\206?\212T\275\241\225\240\300\277\365W]\301\025\324\234\277@\343\035;\003\276\353?vYe\t\3379\316?\305\2220\333gx\320?\034\023\030\241\216\375\342?\304\020\2246\260p\346\277jS\252\201<t\263?\016\010\235\245\236d\306\277\003\253n\036\034\306\351?\0364D\340\013=\266\277\033d\365\273n\031\305\277\274\207\370E\021k\234?f\204\267\007!\340\351?c\327Q0\276\003\344\277\377\310:=k\216\301\277\204\300%[\270\307\355?[\305\013\267\266O\313?\246\326\235\034u\334\254\277\363\210\033\001&\032\350\277\255#\232\202-]\275\277\245\265/\301%W\324?>\236+\204\264\312\305?\224\037\247\236\273\263\355\277f\"\266\005\225\302\340?\321\317(\242\205\331b\277Q\253\236\202\262\237\337?\332\370]\"(\250\355?9{\312\336\0202\303?nb\222\333@\313\264?\035\264.\240\335\342\341?\031\024\027\221r\301\347?\227Ak4o\213\266?\272\305\364k\210}\262?W\005\315[3\001\321?I3\222\024\303\233\271?\372!\035\273\227=\211?>\232\003g\235/\307?\303\336\037J\017\036\301?+\343:!\317I\352\277\352\242S\035\223A\303\277\331\301VC\301\020\300\277o\n\320[\341\202\347\277n\003-\0234\334\343?U\t`\024N\034\347\2773`\332\201\204\222\352\277\320a\276\274\000\373\336?F>\320\206\323\264\262\277D0\016.\035\363\327?\236\322=\302\233\233\354\277\323Y\271Y\264\347\267\277\033\374\026\000W\260\343?\014x\231a\243\314\352\277\315i\036\331\277_\305?\000\000\000\000\000\000\000\000/k\244\235\201\256\353\277\220\n)`\267\377\357?\2256\'\277\335C\220?\374\242\014n\3165\244\277\270\265}v]\313\307?\257|\354\347z\306\227\277\351\224\354}O\021\356\2778\005\"Y\372/\302\277\340z\271\364\324\317\340?\323\334\na5\366\353\277\357\367\257\237\n\'\265?\277\272K^td\320?\037\036\025A\224V\350?\236\240\357\234\235t\235?\363\\:A\366U\350?\355\377\261J\310\013\306\277\356v\2754E\200\336?Gs\246\001j\207\347?U\221\300\325\360#\357?i3\220_&g\351?}\023\226\272\\\253\265\277\216|\230\234^R\232\277*\016VR\335\022\335?\217\361r\"\013\302\353?\253\2340@&\302\335?N\322\3741\255M\353?q4\354\234\013\210\343\277+\257KCC5\353\277`\017\273)\304\247\300\277\313q]\347\225\241\252?7?\2237\237\276\312\277b{\322.K\340\330?<\026s\301-\340\262?\254\375\373^\323\033\267?\240\243\033\202_\032\340\277\213\035\350\374o\200\243\277\267C\005\177\246\373\302?\323\233\3669\343 \354\277*c2\013\243\317\353\2778$\377\335LV\331?Q\256\337\002\277<\343\277\257\362_{\301\202\306?\260\t\202*\3422\302\277\'\2507\\\021 \245?t\014\310^\357~\351\277\316\027{/\276h\312\277\327\001\306\351\332\r\340?\223W\347\030\220\375\355?\206\263\225v\356f\310\277\343d,\344[\351\342?\341R\337C\323#\305?,\350\203\206z\321\231?4(?N=w\305?`_%\376\254\202\355\277\327\021,\263\255\013\340?J\321\210\241\356&\346?<\225\374\035\304\315\355\277\007\322\305\246\225B\222\277\"\332OEx\033\230?\340\241I\336\020\025\314\2771o\323t}\354\204\277\236\302\276[(\262\335?\350z\354x\335\354\340?\201\264Z\273H\274\351\277\362\251\255\"\355\320\351?\260@\rB\355\365\340?\337O\215\227n\022\306?o4\333p\263S\356?\342h\3309\027P\340?\254\230!\300\257\322\352?\004O\306\235w\350\355?\"\233\365sT\177\265\277\235\315\262@\036.\340?\326@N\363\351\014\303?\356\220I\343\243\007\240\277>\326B\177W:\314\277d@rBS\234\341?\005\316\010%\202\'\351?\216{\014\271\306%\300?\337\317[\002\021\276\346\277gj\310.\007\360\353?s\037\312aA\253\331?\362\211\206\326\324\303\352?p \352_\0162\350\277\202\267\264\330\365$\312?i\242\225\234\217\302\330?Z\270\356\3368\006\321\277\345\254\231\306@\350\263\277~\232y\303\224\200\230\277z\237\364\317\035\016\323\277<\311\014\n9\245\300?\371\256R\213\322/\342?\274Q\003\204\021&\201?\206Z\221\240\021\217\353??\356tJ\264\"\303?&\337lsc\372\354\277\242\025\020Ar~\351\277@\362s\350\231\203\300?k\207\032\340\335e\341?T\262\265!s\243\347\277\202\201\020^\365\337\301?\032\234\322\013\210Z\307?=mC{\253\244\353\277\373\'4 \255w\313?$\241\210\240\305m\354\277\365;^\222\024\"\356?\n;{\035\'\273\324?\030\211}\300\013\364\303?\235\035\200?\302\321\316\277X\356\273\330j\305\260\277\022\035]\000u\236\347\277:\020\'jH\340\307?\223wi\036\033\034\351?\273P\313\237\007(\277\277\254m/\016\323c\345\277\243\266&@\301\203\306\277\223\250T\337\262p\253\277\277\020r\336\377G\302\277\252\037\345qbY\341\277\314.\'\207\240\201\210\277\362q\26753\204\357?W\r_\2623}\276?\342x\374\346\027\210\240\277`\355\263\300\332\365\215\277D\2655\340\373t\332\277^\037\214\216\232\245\343?>7]\344\330\331\315\277h\245\0309n\245\263\277\2503Z\273\253&\302?\354&B4\004\221\354\277:X\203 \325j\262?\203\256\226\236]\374\301\277\362k\230_\325\362\356?,)Q\330@\030\236?\374>\363\244\022\277\327\277\247[Uz\226\265\311\277\367a\030\013\236\235\352?Hxs\237\271Z\357?5\315\231\277\322\221\251?\365Q\241\025s\353\351?\177\366ea6^\353\277F\322\217\002\033b\347\277+%x\001\376\002\341?8~\260\245\252}\310?\024~\004Y\252f\357?\210\206 b\336\376\340?m\273\\\006\2244\260?\247\244\271\333\026\341\306?d}\320\241v9\245\277\303\361\356[\274>\234\277)\224d\241\306\322\324?\273\353\215\326(V\274\277Nk\211KD\256\340?S(f\030\322<\345?\'Bv \343x\336?6}\321y\350\226\305?tK\304\276\021\033\355?\020a6\340w|\311\277\326\243W\240i\313\301\277\261\233\000`\310,\350\277\233~\036\335\347|\326?\377\203$\300\244\211\264\277\375>\322\226)\234\352\277\\(\323GdH\276?\216\262~31]\353?p\201_~\002\343\350\277\257\215\030@o_\243?d\254\333E=\251\354?C\177W\272qA\270\277\267E\231\r2\211\340?C\372\365\\\t\321\304?\013\251.\"\202\330\357?\266dggWu\214\277w2\325\037\2434\342?\351Z\244\036\334\034\353\277\325\\M\"\353\276\310?~\364\2705\n\305\265?\345\2343\375m\252\320\277\275\244\030\275\246I\337?\250\334L\236\025E\334?\371H\255\244\323\202\335?Q\032b\243I\365\327?\307\233\241]*[\352\277\001\231\347\322\t\262\336?nC\030\201\251\215\340?\375\377\356\323\247\013\351\277sf\273B\037,\315?\331\021=\337\005@\352\277\257\343\350\277Az\355\277\200\266\366\272\034\341\300?(\023\022\304\3241\355?-\241\263\263\205s\270\277\034\n\300\273l\246\220?\370\263\314\340\367\010\330?\354\350\217\233\247\333\306?\357m\300\010\226z\301?@S+#`:\261?\261\203a\370<\n\223?\356Z\347\204u\010\353\277\013\350l\236v:\342\277\006\321\377\027t\347\355\277\320\232\037\177iQ\333?K\022:\236\205\263\353?\r\341\332\201!H\311?\003\231\370\376a&\336?sz\346\376M\034\347?\275\344\240\000ar\350?\222PD\320\342\326\304?\2613\246\334T\017\277\277\300\356\021\275\316~\336?\227O=o\266\373\253\277S\315\254\245\200\264\356?\010c\033#\237x\255\277c\371\312\356\217\030\245?#\2764\301G\217\357?*h\244\357\177\321\354?\343^\354\377\024\365\351\277\235\247S\201\007\304\347?\337\224\250\315\356\277\341?F\321\003\037\203\225\352?|\347a\262\002\215\262\277\213\027M_\266\272\345?\301V\227\300\236\220\256\277\315\360\372\'\023\322\342?$\331\033c\304\021\311?B\342\303\221\254\350\346?g\300\264\003\t\345\321?\021O\331]^\010\311\277\255\271\212bEO\357?Z\315\0008r\264\306?s\346h\237\330\024\324\277\217I#\277\256\301\235?\035WN;/\'\224\277\264\322\234\243+d\330?}\236y\030\336\325\317\277\371\337\204!\366\262\302?\316\337\306^\326\341\300\277h\257>\036\372\256\345\277JaU\362\356\036\205?`\356\327\300\375P\230?|G\215\t1\027\336?F\035g\344=\330\352?\366\372\220@N[\260\277\003\016\231\331\204\007\316?\270\252\r\312\013\033\227\277\222\001E\321\250\345\342?-wf\202\341\234\350\277\266\244a\000\372\340\353?\266\000\341\001mD\334?\267\372\240\035&0\344\277\014\374M\315\212M\357?\242\262\202[N\364\325\277\226J\221\337O\013\340?z\205\252=\221\014\347\277\r,u\000,A\255?\'\240\211\260\341\251\351\277\233&C\300\347\250\320?JU\335\232\251M\232?\222\031\024rJe\342?Jsu\021\360\265\315?\255\363\247A\\/\243\277\024.yv\330H\305?\217\352\215\275\2135\350\277\267&@\301\203\356\340\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_8"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\217\023\354\340\3346\312?\315\304\363\240@\242\264?\261s\252\347j\314\311?U\367\310\346\252y\260?\341\302\354+0\340\261\277\313\377\334~\226:\265?\206ID:4\023\270?\346q{\366\032\212\262?\307\233Z\210\236,\230?\226z\210\331\332\341\230?\276\232\304\237/]\237?\240q\303\241\316\313~\277R*#&\217D\227? dc\242d\031\244\277\276\022i\227F~\300?\366~\037\345\222p\252?\026\036nfx\\\304\277\322\266\355\275\3601\261?h\336y\373\326\373\327?Z\312\246\032\305\013\313\277!l\314y3[S?\322j\321\315\301\335`?O\375\254\307\267\326\314?\247hOC\000\342u?\272m\031O\210\251\263?\201\212\020B3\224\247?<\002\217\332\212\036\306?8\n9\204d\340\242\277\r\321t\270N\212\300?\225\023\212\000\351\023\265?\026\271B\200U\363\233?m\233\332\000\t\026\203?\203Dv\300\336\315f\277!\004\222\337\203\030z\277Y>\206\037\200\372\247\277\240\374\376ISo\303\277\256\r\240\036\245\322c\277q\005\220\261E\230\262?nf\231\352n\303\320?\270\347\\\376\001\336\227?HI\264\2118B\316?\251lYx~\\Y\277\360\331\000\215Nm\266?n;\2478\222\364\267?;\344$\234/Y\225\277\323\264\264\350\327\265\315?\026 #\003\355\314\241?\337\377\246\373)\243\325?z\035P\272\035/\317?\314\257j9e\250\317?J\3332\277\036\274\275\277\366\213\247X\024z\300?`\350\251\277rE\230?X\200\027\377<\342\237?\224\354C\244\307k\303?\027No\322vD\224?8\364y9\252\242\263?\200\033\224\366\'\355\310?`Q\322BP\325\227?\353\262\225 \356\255\236?\275k\226\354T\320\266?\255V?\231\363J\221?\026\241\\C>\"\302?\324\324\262\265\276H\307?\244\310\367\030\356T\245\277\2325\t\302;\027\250?\205X\356\346X\307\223\277\210\367+\203\273\312\226?O\272\241\347\036+\262?qR=>\306\001\301?\000\000\000\000\000\000\000\000\007\325x|\212\002\224\277\032%\371[L\375\307?\246\230\360<\322\217\247?v\025s\214;\020\262?\022>\010\277\334@\313?\207\201\327\3742\367\253\277\333\022\204\356<8\202?\214wk\214\342\304\213\277\253\325\323\036a^\264?\275@b\036\246\273\276?\201v\352>\276\014\265\277\037q\341\243r\221\322?T\360F\254\346\265\270?`\235:\301\304@\307?e\032\304<h\314\254\277\257$\232\274\330\346\324?C\373\273\353*\254\276\277]\375\335\335\370J\245?\236\256\n\256\233M\215?N\002;\001\304\222\264?\350\2751\004\000\307\232\277o\200\"\341>\034\270\2773\330y\300\341\252\260?\266`\334\037\205q\253?\302\275(\375a\244\217?\365\223\234\331\317\336\305?7\202\304\336\332u\261?}Y\373\267\242\377\300?\321\242A\201\254\344\260?\307\343\256\315\342\237\203\277\356\330!a\214\206\271?\352\001\230\327\266\315\235?1Ap\t~\243\304?e\023\211\327/\267\237\277\265\277\324Kc\346\263?\324\2673\250\002\"W?x\322\227\345\270A\223?2\332W\334\207U\312\277\221ffEX\375\310?\267\270\313 l\350\242\277mc\036\277\330\367\315?d\371\215\213w;\213\277\032Z\332Aa.>\277]rtF\250\332\215?\207$\006\303\261\025\303?A\230_\366\2003\307?Y\322\335\267R6\301?[\315Q\177q4\221\277\265la\241\314\302\237?\312m\373\036\365\327\256\277\315\330\247N\315\006\273?\317&\217\300\202\250\264?\216\315G\177SK\227\2773\354\007\247\313\003\314?HmT:g*U\277\001u\227D\265\001j?H\'\025\004\304a\242?,\362\237\371\222I\236?\353\206\361\303\326&\315?\'8P;Wo\315?\033\021Jgy\201\244\277\223\233U]\217\033\326?\360\210\303\377A\027\267?\201\342l\337H\305\261?q\323v~\027\327\232\277\200so\023(A\217\277\247\331\326+9\342\211?\355\221\264\270R\021\303?\232&\004\\\244\021\257\277\361e\351\3354\212\262?\271\214Y\376\225\370\260?\363-\377c\031I\320?\"\240FJH^\302?\310\264\277~K\252\271?\352`\346\003N+\241?4\202\215\353\337\365\300?%\353Of\254\313\267\277Z\247\200jrg\303?\302\242\321\006(Y\221\277\334\024Mo\230\313\232\277\264\200\340\\\211a\262?C\274\"\266\303x\314\277pN\272g<\225\304?\344\2023\370\373\305\271\2775\251\2629\030\373t\277\356V\032!\321\276\307?\274e\177\207?\026\260\277\247<\213\375$\000h?\266\007u\037\355pq?S\233\223rR\363\240\277\3047^\313ud\303?\235\224i?P\261p?\306Gr\226\345\255\305?e\356\311\337\227\334\240\277 \300\032N6q|\277\203.D\373\026%\304?9\264\242\257\033\024\213\277\332W\266\3002\367\252\277L\nV\222A\331@\277\023\016{\251\361\265\306?\257\3616\302\344>\232?\213\026\003\230\360S\301?c\013b\0343\273\255?\'\324,\000(\247\257?8\024\374>5\301\306?\346\001\3218y6\222\2774\345\371\302\032\235\300?\206\234JH\234\374\221?\361-]\036:\237c?\205g\370\005\2525\255?\014f#B\351,\227\277\246\244\034\006\322I\315?(\356\333\275\232\213\261?X\246\234\205\366\027\201\277\005\334\303\303SF\246?\n\2053\270\340\036\237?\362\233\374\365\216C\250?t*\225\307\005\255\313?\215\3559\331\233R\260\277\r2\242\334\221\004q\277\302x\274\177\342\366\325?*\260\235{Q\263\276\277+\271/\014\375\270\250\277\235IJc|\344\221\277\265a=\203\300\251\243?\247 `)\242\221\270?\037f/\333N[\270?&\353&\347z\221\261?1\371\227\213\225$\266?\3027\236\346\034\360\232?\257n\345\272c\220\237?;H\231\036^!\314?nJ\273\311V4\305?\n\306V\n`N\215?\332%\303T\247\301\240\277Rr\373\243w\303\334?|h\233\362S\342\265\27755\236B\215F\316?.\344y\277\275\252\274?$\352\204\036\321\007\245?Lg\253\273G\360\313?\306\313\303 1<]\277\364\366\214\351\256\021\317?\216\3676?\366a\262?\000\000\000\000\000\000\000\000y\001\233\0307Z\300?\361\007,N\357\301\275?\231\227h5\311\264\303\277\013\332\273q\030\355\265?\235~\026l\237e\273?,RY\373\330p\325?\345\211s\026\356C\233?t\037\215\376(\316\254\277\007\350B\325}:\243\277l\t\267\204\225m\313??tA}\313\\\321?>\'\234a\223\312\243\277\224\205\320\275^L\303?1\006\362\306+\013\224?\021\374\024l\310\344\302?\345\370\333}\022H\315?\320\323\200A\322\247\303?d2\250xTc\305?\350v\243M\335\256\246?\250*~\235\345C\306?\002xd\334o\025\247?6\242\203G~\361\307\277\324\020\260\261\246\r\302?W\215o9\250\016\273?A\351\321u]\317\307?\375v\206g\021\243\276?\352\177\363\301\266n\265?\000\000\000\000\000\000\000\000\351R\257\235 \030\302?Q0\373&ag\223?\357&\256\031\317V\276?\377\273\323\327\322\'\260\277j\000\251,\216\363\271?0\025\331\326h\234\304?\246i\340\337Qw\226?\276\232M\221\215Q\254\277>\270\226$*\257\304?\'\322\017\200>\345\200\277\217\356\260!\351\347\264?\334\303p\302\374Ms?\314$n>Cr\243?\202o\375h\366H\250\277\363\017\256\302^\017\266?\002\217\366\337M.\261?\332\374d1V@\317?\346\320\236\242Us\313?\'L\367\276\341\323\307?8\2565JMq\262?J\306\234-A\302\207\277B+\007\345Cq\324?/\261\246p\014\032\263\2775\373\0359\273}z\277`\372\320\341w\325w?]\312\022\000\220\321\311?\356\315tQ\"\371\212\277\025\231e\301W\203\250\277<\016(@\271\022\240\277\320\355%\215\321:\261?\007\317\347PD\216\261?Y?\354;u\033\307?xW\274\337\010U\245\277\242\357MW\240+\315\277\330\346\357s\266_\261?\213\235:\240\266W\261?WO\200=3|\255\277+;\222\005+\322\264\2779.\035R\220\310\263?\220u\006\200\t`\260?\367\243\362\300\021n\302?f\231\217\265\320\337\262?\207\261@L\2460\201?\037M\365d\376\321\300?c\311fX\326G\266?\030x\356=\\r\245?u\221cg\341\035\302?\242\272\322\225|\252\275?\260\312\246\330\250\271\236?e?\237\211/a\210?\034f\344\003m8\310?\347I9b\244L\242?\004j\246\205\017H\225??\312\004\323\233\027\266\277\001\336#\027sB\273?\2739\2468X\311\313?@O\240\333\215\266\307?\004\314D]\340\374\220?|v\363fj\230u\277\373\026\010\310\270\336\311?Ib\327c\023z\230\277\024\205\000Z\237\344\205\277\260J\022\031\220\034\302?\"\254\313\313\217/\215?V\335\033*c\317\267?z\037\276\201\006\361\261?\336W\3044\374<\267\277a\360JA\240\373\242?\323\254\224\347\277\334\230\2776U{\001\213\266\274?fN\336\232P\225\222?u7$\365k\331\200?/\257\226\032%\330\235\277L~=\277%\211\226\277\314gg; \265\223\277\236\310\274#\235`\247\277\337J<\301z3\263?\334\265k\337/\250\253?O\360Eb\037p\310?^C\364\224j\331\241?\266_\215\237\005\"\271??C\303XbB\223?\003\034\010\352\020\017\307?\344xO/B\302\303\277\365\3556\005\270t\220?\205\367,:\037?\311?h\\\347\310\222\205t\277D\266^\231\330\370\270?\030\305J\203\335\333\245\277G5\274\276\256\335\240?\311\214\032\300\031\004\315?a\003}}\010\305\324?\253\216\301/\232:\250?\355l\237\300\001\316\320?\312B\246B]\240\323?\314G\364`\302\320\260\277\014\261\372#\014\203\301?\007\3110^[\216\261?\035x1\244\365\375\306?\234N\323\343\316\267\271?\211p\335\336\177u\242\277,\334MK\007F\253?\321\252\330\220f\311\251\277 \003\036\275\206E\325?|\350i]\366-\261?5ms!^\360\241\277\205\203\224\n\360\376\220?(\032\326\032k{\310?\345\316\257ZW\324\265?\316\247r\000\033\025\255?f\311\356\222\320G\201\277\211\352\255\201\255\022\306?:=\255\252\260\374\301?\272[\304=\267L\257\277\341[\036\214T\357\261\277.\350\234#\033]\322?O\275\003v\024\353\304?\242\342\2138\225\363\274?tb\254\302\250\234\225?Z\003\347\316D\277\265??\346\306\236\204l\275?h\037\320>\3736\231?\307\026\335\325\006\002\305?^\241\315y\337[\301?\213\216\303\3446\257\242\277t\264\373l\034ex\277\010\265\031\206\023\301\313?\240EB\235\352w\240\277\312zvht\341\235?F\300\036\234\032+\254?g\373\251T\375\010\241?\231}\242\333\340~\301?\337\272j\267\300\222\225?\031\211\376@!Q\263?\302\021X\304\246Q\211\277\200v\217\205K;\300?\270\200\017\337;\312\253?\3368\335=6\205\236?\314\343Y\027\361|\310?\024\352LN\253\360\262\277\341\273(\325\231\326\260\27710\341\206\316!\271?\317@4\014\202;\246?p\345\323\0001K\300?9\375\340I\371\263y?pX\277>\337;\265?\361X\277\333\264\000\307\277\214\321=b)\317\244?M\211\342]G?\320?\353cpZ\021\261\266\2778[\326\203\235\360\241\277hk \374\324\010o\277\277D\207\203.(\232\277x\200\311\273ZV\241\277\245\007p@le\306?\341\037\235W\310\036\303?\327\372\345=\025\n\264\277\367 \336\034\251\034\250?\326\255}\205\365\224\315?\020m\324\376_Y\274?\222?\374\"\277\203\244?\265\265t\273M\256\322\2770\205\244\242\363\222\310?\000%x\"\014,\272?@\274\317m\231>\270?\244a\245@n\330\314?\342\332\327!\001\032\272\277zhH\252)(\302?1\275\263,Nk\235?\007\2777Cv\311l\277-\237\274\372>=\250?\231\355\216\265T\030\302?\370\2270\334\261\277\265?\331\273\026_z\234\302?\204\341TR\304u\265\277*\032\255\2339\301\242?~\345\377]\270\026\320?\362\371\325\332\003F\311?\265\300?!\022p\274?O\223\370`B\032\266\277Zf\317m\333Z\277?\022\232\333\277\335R\253?\022\375V\302E\264\301\2773\354\203n\'\370\251?\2701f\340\272A\300?9~\2504bf\274?\231\236\212\375`>\254?\222:CiVS\275?\177\306s ep\210\277\213\273\007\t\315\005\314?\t\354 ez\370\303?\306\375\017\374\3442\226?\2021*\302\260p\306?RA\352\033=#\222\277\212\354\234\311\2531\303?\3074\347\2415\215\263?\r\256\024]r7\302?Z\023\037`,Z\254?\277\226\265\037\271\315\272?\202b\330\0370(\277?\3410\250\241\323\224\310?\030\000.\361\025\027\254?\367\3678$\314\354\223\277\366\035\211\270\265\334\306?\222\346\023\242\021\246\262?\351}\004z\270\317\310?\231_|\272\202\271\222?O\331]^\210.\325?\206\003Bg\251\'\275?\017|\353G\263G\274?\255\374\203_\"\222\256?\021\244\224\010;b\246?`Y\035\304\304\242\222?\367\3205\300\202|d\277\243Y\227\"\022\350\303?u\003G\372\233m\302?\313%\244!\"\266\231\277#)\257\266\336F\301?\336Z\271&\303B\232?\'\366\2570m\315\252\277D\243\277\300A\265\321?4RJc\017H\304\277\270:\257\232\257\336\233?\364\005\302\210\\t\310?8\346\n)\036\233\263?\356\303\024\301\014\201\236?g\354A\304\252\232\240?\220\253G\320N\274\245?{\322\221u\233\344\300?\226\034=\237}<\303\277\204\353z7P?\306?P\255\322\236\021\363\242?\022(\225\002h\032\230?z\256J}\264\223\264?\302\025\005?\207\300p?\006\257\201\240\350)\262?\254\'A\037/\033\210\277v\372A]\244\320\304\277/\024\355\200\244\265\272?\260\252\240\232y\017\314?\027\265\301\252\366\300\260?\325\205\016p\367(\304?U\202\344\245kBk\277\314\301\340X\037(\263?-a\2477\'\037\250?8\031\260?\344\210\312?\262\310\007!F&\221?\005\333\014`_%\204?\035X+f\306\323\270\277\3663H\003p\032\302\277\030\274\236\236-\326\253?{\034@\236\341\366\262?\331!\214\014c\354\213\277Yo\377\212/\354\216?j\2627[6?i?\367\346\232v\357\260\305\277\"@yd\033\324\230?,\240\253\010\222R\303?\217H\350\"\026\025\246?!\250}\347\325\010\300?\025\243t\nn\373\300?@\334BH\367\"\237?9\355$\200m\215|\277B(\214\271\255%\267?Z8/\237\303\264\251?\271\276\223?\255\334\254?\353\253\200\202X$\250\277\300`\251\301C7\244?\021\203+f\245\305\232?^\222\024\242\215m\245?\2713\270Rt\311\302?Mq\231\366tEv\277\207\302l\244\232\311_?\021qR\0340\335\311?\276\303\314\302\307\365\312?;h]@\273\205\310?\246\353O\003\202\020\267?\355E\264\035Sw\307?\353UH\037\021X\262?\336\303\210\361X;\233?\264\352W`\346@\225?\035\217\370\231\243\334\303?\261\363\205|\017\030\251?\020\226-i\367q\275?\252SP\027J\242\264?=!\"\322\302\247\270?\225\243\204@\265\030`?\305\372\260%~\241\210?v\002\365\301\215\357\241\277\325\240j\037\353\334\242?\377\036a\275\366q\330\277\353\2170\014Xr\312?jU\212\236\rY\256?\276\212\347\307\272\023\316?\207\317k&\276^\242?\207yo\001j\'|\277\t\031e\211\020O\274\277\3771&]0A\256?9\373\337\036?\254\235?\340\252\343\337\004\262\262?~\277\366\236Z\025\251?\360\267\250\334e;\267?\235\327\335\336c \260\277\376Af_`\363\215?\267\261~\330w\352\270?\357\362\271\202\211\031\253\277\020\010\346{UM\235?\2542:\275\336\277\312?LD \340\016\251\233\277\357,\254\341C\005\245\277\342\266\353\342\214\032\241\277xjh\342\241\030\216\277z\236\005\302\312x\222\277\377l\317\037\337M\277\277\353\3562\252\251\270\301?->h\3523o\262?U\317\223|6<\316?\256\257\001S\376\234\257?\347\334P\245$\363\201\277\216+&\035\2026\260?\215X\223\300IG\320?J3\314\277LJ\263\277\267\016\314\331T@\273?\207\220N\270\262\237\273?9O\334=\376#k?B7$\203\026q\305?\314\367\204\323\037\355\274?\261\376\215E\354v\260\277\302m\235\032\220\006\225?R\023\220\375\213\343y\277>L-!@\002\274?\203\366\326\377\272L\272\277Ex\305\235\034O\322?\360t\235\374\314\017\254?4)\000$\245i\257?n\227GH\356z\316?b~\031\002p?G?\314N]\376\345\210\276?\205\340D6\210=\300?\351\350\r?\214\014v\277Y\320\305\360\"]\320?\237\371\203\036\275\343\320?\343<\367y\347\253\302?B\372]@~\"\212\277\nH\373\037`-\314?\'\027c`\035\307\242?\356\370\233>\356\343P?\326z\371|\030J\272?@\353+Y_n\306?\223\276\333\177\016:\223?\260\270V\200\221\305\246\277\243\362\310\2026\367\267?\337=\233\260X\036\313\277\373jp^\201\310|\277\"\253\024h\233\016\233?\320.\370\227Q\352\274?\327\320\354\013\377!\211?\367\342\201\204\005P\232?\021-\315;\273m\224\277*\3360 g\331\261?\226\375\2230\365)N?!\036\204\336\355\n\254\277\266\277/\005\3267\321\277\034\227A\032\355o\237\277\265\304g>)\013\305?\274X\030\"\247/\305?4\373\331\033\276\375\303\277\205\330J\374\022p\243\277bs\020\2374\007\212?9\327\254\n?~\304\277*\216O=\334R\240?\230\313\035h\313Z\302?\214\255Q#\265\317\246?W\351\356:\033\362\233\277\313\263t\000\"\317\202?\266bz \204\020\270?C\324T\201 \341\263?_\246\271\333\315\301o?\357y\366C\t\006\322?(\202\223\310\231\001\301?\326qs_\013\320\256?\315\231C\0136\231d?Nx\317\242\363\361\276?Iw\000Y\302\271\314\277h;lCA\200\306?\237p\331\225Tux\277\2173\371!\020\332|\277>\300\244B\206\237\272?\317\362\237\342\366S\313?G\2435\030\200\314\222\277\272\227)\035\024\343\252\277G\2617\214\335\231\264?\270\001\237\037F\010\262\277M\022\222\237i\226\240\277Bt\255b\226\342\275\277\272b-\333\332\004\263?F\254\356&2\322\306\277t\021\370&\372:X?\271\200y\303\333U\242?\246K\0300\365\261\277?|\337K#^\005\310?nM>f5\227\271?>\351\261\036\330\240\234\277\020\245(]\033\246\225\277\323x3\264Ke\300?\262\232\244\265F]\213?\244\214U\326x\341\305?\240J\264\201\307y\274?c\216P\371\370\000\273?h\316\331\206z\217\245\277\006\330&\231\305Y\253?\216\302\273}\322`\315?\301\367\243Mz\204\260\277U\352\013\201Y*\236?1.\013\334p\216\310\277>\232\207\237A\273\300?\355QM\203\201\353\304?h\244R\252LJ\304\277Nv\330\351\254;\301?\352\335\023|\267\237\212?\371\200\024\302PjK?U\206P)\237\263\302?%\321\344\3056g\315?\304\2738\376\377\220\253?:\266a\276\003\326\274?\373\n\0148\317\001\302\277Zp\026aPG\265?\000\233b\304\364\263\324?\202\034s\"\352\323\305?\006\356\304\325\226\364\306?\264\314\001\006r\236\307?P\253\362\201@\016\236?im\340/\342\022\261?g\321R\261\345 \216?dZ\233\306\366Z\321?\265C\r\360\356\022\314?\t\240{\203\355\257\312?\257\312\307\346\221\334\263?w\\\3404u\005\240?P\367/\200X\205\242\277\0346\035C\370\376\300?\345\216,\320Vt\213?e4\362y\305S\331\277\244&\217\341\220\221\262?G0\335=\243!\316?:\306\272]\324\223\255\277G\375\021`:\250\256?\367\262\272\303\220\026\241?\220x\242\271\210N\313?\253\356\306\277%\271\252\277\270S\235\202\272\220\333\277\273=\2149\235\236\302?%\300\372\211\024\024\262\277\206\307-\317K\021}?o\217\277caP\230\277\240\211_\232\352\025\213\277\237B\307qT,\277\277\237V\241\346\203\034\216?(b\021\303\016cz\277;\202\036\341\351\322\247\277\030\354\247{tU\263?\341\203S\366\310\254\264\277\362\217c\220`O\252?\034\026\034\276\202\275\204\2771M*}\225\272\330\277$\303\2364\334\231\263?o[B\333\275\036\300?\310\202\333=\355n\322\277\354\267\300/?\201\247?Emv\377\263\301\260\277\237\010^\004\3704\312?\251\331\207\345d\234\315?cY\216bIQ\246?\3527\336\340\265\222\244\277\221rb\325AZ\300?\231\004w\271\353\031\303?/\237\223{\r\203\313?S\0220\277u\363\246?&\010\221\353*\315\267?\361\206n\325\371\340\263?\320\204V\302;B\207\277\233\334\326\263s\334\260\277_\220\231\260\242\253\275\277\000\023o\237\200\346\224?\321\332\021\247\303\245\225?%\027\214\337N\001\245?\n\373n\241\310\346\306\277TC\035\2018B\222?\241\252\327g\255\354\274?\256gc\200\237\314\300?etz\275\177\234\333?\277\323\350\376\177\326\321?\220kC\3058\177\225\277\022\223\337\276\350\324\257\277\207\266k[\367\003\264?m\002\251\240\344\206\273?\020\207\370\311I\017\273\277\305\375\313\336\347\262\305?\200\364\340\375\327\n\205\277T&\251\n\0255\270?\036)g\227\213\322w?\230\336.\226J\301x?\374\315\274\003\331>\303?\245vu}\325\200\322?\252\207\344;c%\323?"
      }
    }
  }
}
node {
  name: "normalize_element/component_9"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\010@-\035\253H\244\277\314\23566}\356\303\277\017\277\325\031c\320\313?\202\354\227}\216\367\225\277\250\267\222_7S\324?TU\252<h\223\321\277\034\r}\003\325w\323?G\016\307\251\214\265\307?\203\204\315\245]q\313?\356\272\320\277\321\314\344?\364N\252\"\201+\324\277nF\325\310\021\337\314\277\222\332\233J\314T\316\277\022\351\310\333[\033\336?}-\2360\027\'\346\277X\027\277BI\265\337?%y\256\357\303A\273\277So\025\335\335\367\321\277\326\334vF\000\334\247\277\267\263\257<HO\332?\3130\356\006\321Z\334?\000<\036\n\321g\317\277\221\033\217c5\'\346\277\002W\276\326\301\233\177?\216\017\212\030<m\316\277\236\322\177\336mA\322\277\177\233I\304)\255\327\2771\306\253\237C\210\277\277\314\207\024\301\007\310\310\2773I4\232\277\266\262\277[\302\220\213 \204\240?9?I\252\204a\312\277\376\'\177\367\216\032\221\277.\277\035\362\3408\317\277\022\371\r\227E\366\311\277\255\r\326~\271\266\277\277\277\307\313`\255V\304\277z51>{\027\231\277\232\210\310\372\027\222\334\277hY\367\217\205\250\344?n\233\363\235\251\001\345\277\302@\306\222(j\336?\023\310;sNm\206\277\277\243\337!9\027\344\277\036\272\311=\227\210\327?\211\222\230\271#\020\233?\275\365H \261\337\321\277X\236\325<&V\326?s\212\351\235e\321\342\277\362?\236\002\005\303\341\277ro~\303D\203\346\277\324\255*=\313Z\323\277\037\017\"\276\270\271\344?\037L\'e\224\337\332?_In$;|\331?D\\k\265\250K\313?c\276\223\201\311\016\350?S8\272\376\350\221\220\277\316\251d\000\250b\340?\222{\364e\355\337\314\277\273L\250;\252\365\310?\351\241S\343\3477\317\277\217\013\275\264\227#\340\277\255\202\241\3318\014\225?\340\013\233\032\313\350\300?Q\314\213]\354\207\316\277\251\324\025\001\210\032\300\277\260\202\214>\356\364\336?\331=\036\2375d\345\277#\233P-\307P\345?\216\311\342\376#S\322\277\356~\330|\243\360\201?\254!\314H\030a\344\277+tV\362N\221\215\277\353\303z\243V\030\313?\254\227:#\245t\336\277\343{\363\331\tH\304?4\200\267@\202B\344\277YI3/\352\007\270\277\212\335F\034\025,\307?\005\351\030F0\304\324\277\333\346!\256\367v\262\277\354\312\374\335\032|\341\277\231\302\336\037J\017\332?O:6\2477\210\343\277]\316w\200\277I\256\277V%\316\340\250B\233?\253\343\337\0042\375\321?\241\"\373\336\2560\311\277\336g\350\341\3744\347\277\344A\202\373dy\336?4\246y*T\365\312\277\300\201\177\000\010n\346?\226L\302C \260\321?j_H\240$\221\326?\343Ql\375\333\002\320\277\033\305j\332b\n\304?\001 \233\242+\352\320?\3358\020/\333\220\271\277l\2015\265\t\203\273\277AV\001\010iW\325?\277\371\303\205\362t\337?S\265\274\366\365\221\311\277d\003+\177\245\220\237\277=\253X>\303\202\346\277\033B\344\340\021\226\264\277<\236\330;\212\220\312\277\220Lf@\346\230\335?\264\027v\275\331K\345?.\330n\004\247\023h\277Y\362\035\241\013\217\333?\272\232#\310\224Q\233?\241\021*@-\351\346\277\224.\375KR\231\315\277Q\221\032E\234o\306\277\240\272^?i\215\321\277)h(($\235\306?\373\000D\304D\270\254?;\326\224}\272\356\324?\325%\241\374\366X\320\277vj\323}\245\330\324?j\212\005`1Z\243?T\003\254\331\363J\314\277U\267@\243\360\260\277?\262X\021\325^\273q?\324T+ \250\253\273\277\371f\3357\245Y\306\277P\003\243\036\344m\322\277\333u%\270Ge\345?\025n\277\235\300K\327\2779\270S\276\220\003\341?B\361\000\242\242\342\272\277)\035\3327_;\232\277\017\274\367\303\021\034\323?-H+\245\004\320\315?\371|\234\202_W\320\277\201\3315\010\020\221\311\277\224\026\313\200\365p\337?\217\221G\313\334\327\316\277\362\013\n\336\353\177\343?`\347C\243}\244\312\277\300\271\0324O\211\347\277\246\224[\203\214:\332?\035\250\370dj7\347\277\253\304\002\200\337\226\336?\244`[y\250q\311\277\332{L\377\355\315\343\277\324\215f\033n\366\334?\231\341\324A=\001\324\277\ra\210\336\3320\334?n\370\274f\342\353\315\277!\013\250\242>\312\344\277\357\017)@\363=\325?\216\010B\211\001X\300\277g\204\022\301\223q\332?&(4\377\236\216\334?5g\330\203\244\252\300?\216\240\301>\353.\254\277\334\322\254d\256)\334?\235D\010\270\265\277\242?5\257\217\363\243\206\264\277}s$<F\036\307\277Hn\013\236[\013\322\277\252f\326R@\332\344\277\206{~{K\367\330\277f\346U\337\361T\304?\034u[\277\354\340\322\277\204vV$\211\322\336?u\3254\326\233\244\310\277b\360\366A\022M\262\277\r[\371\374\336\214|?\310\371\223\337?\251\332?\375\332\372\351?k\332?\242\327\222\232\345\316v?\207\201\232\231\032\032\225\277\213\301\303\264on\347\277\324bS[\250\004\312\277\333\366^\370\230\372\316\277K\322-\"\'\237\340?\316\220\205C\312j\323\277M\343\315\320.\025\323?\245\n\014z\353\323\266\277\377\177i?\274(\240?r\334\255UP\013\306?\255\207P!.K\347?\203\371\nV\305\351\315\277\225X!\376\304\265\321\2771\013\253\200\224;\324?\351K\346\215\320%\201?\266g\226\004\250\251\344?\020v\355\177>Y\325?\240\371\275\311FR\303?@\301\244|1)\332?\330\230\235f\375=\300??\216(\345\234u\324\277\250\003\0273\333x\266\277\375\374\333\213\206\221\210\277\275\010\215?\325\361\344?\360\324+~\266\302\346?\001\266\017\273\347\'\310?\251h06By\276\277Qj/\242\355\030\301\277\267q\332?\216g\247\277b]&\324\035U\331?\306\246\225B 7\340?\342\3434\300\334\331\322\277\324)\217n\204E\323?\312\306%\274t\373\241?\331\314\245\341)\236\331?~\313\030\366\346\375\301?\025z\263\274a\021\333?\341x\200\037\274\023\241?\270\276\274\276\336\026\316\277^\310v\000\274\354\343\277`\322sf\026|\305\277\377\306\205\240\366\035\304\277\234<\033\250B\362\301?1n\264-\024\372\271\277w\270\350\'F\335\231\277^r\222\234\002\217\346\277\013ML\366S\214\303?\337\317\235\036\343#\321?\373\036\232\036\271Z\345?\333\261\350\010\246;\311\277\304\361\327\277F-\346?\300\356\233\323Q\273[\277 u\"^*x\330?\201\256\277\035\2176\305\277\314\303\266\003}{\330\277\222%R\036\006\210\325?\031\233\007\304\254\226\224\277e\201\341\"\030\003\334?\332\r\221\211J\031\345\277\266\000#\036?\n\324\277\236\3215\027\250\332\312\277\323H\256\017\251q\277?\016D\334\275Xo\322\277*\265\315C\\o\343?\223,q.\017#\345?\230J\344\'z\205\331?w\244U\210\242\233\313\277\324\0030\257m\233\334?\254U\273&\2445\236?\355\\\336=\274>\307\277,,\343\237L\265\254\277Q0\373&ag\223\277\255\242`B\334\007\327\277\347\246\005\343k\305\242?\350T\256\307\257e\316\277F\347\302i=S\261\277S\345 \215\257\342\345?\363F\336 \367@\344?\tu\354\373\313I\333?)\336\361\273#\302\337?\3042G\240\013\264\314\277\250\214\301\273C\'\303\277FH\236!\\\205|?\361:,\036(a\345?\371\344z>w@\266\277\325\246\332<H.\241\277Y\334\301\200\014z\344\277\216%\341\177\201\331\200?\032\205\352\007\361X\230?\360\333\224\033\332:\306\277\350\361\377\323\242x\270\277\366\265\r\'Y\034\260\277\271]`=\213\261\327?2\010\300\000A\007\274\277:wyB\310\\\336?}r&\003\306N\242\277\311\026m\201I\231\200?\201\253\300\271T_\304\277L\247\330E\217\347\300\2773\323\305\2772\343\336?VAo\236\250\364\312?/VP(v\372\302?}\334\247x\226\377\313\277\207?y\016\033\233\325?\331`\341$\315\237\327\277t\025F\013\264a\217\277Tk\304@\225\242\337?\200\0165\002\330\235\341?H\3215Y\304,\306\277\031^\203\235\346\215\312\277\026\270\212\367;\212^?\337,\353\037\300\371\312\277:\302P$\353\262\333?\215\213Y\345\370\027\345\277\206\322\356\302\234\301\270\277\367\2278M\372\326\264?\262R\326\251\321/\240\277\372\325w\331\n5\341?\266\335\200\246\220\361\312\277b\016\243\234?\330\323\277\365B\350=!}\324?>\017\244A\300\320\323\277\310\333B>\205\257\334?\303\226&\276=\374\343?Q\213\332`U{\310?]\307\023\234U\372\343\277\307o\300\235\3726\333?\243\003\365\332*\220\334?q.\223\033$H\327?\275\371k\204\016R\223\277*\265e`\347\035\277\277\325\224d\035\216\256\272\277\006\r\242Z\351\032\345\277[\264\337^\3026\265\277\302*\203\017\312 \345\277\033P\312\377?)\331\277\2246\217\242R\025\320?\"\272N\300\002\332\345?\325\005\274\314\260\321\346?)\370\032@\307`\346?U\370\361\237\207=\345?V\230\337\345\371>\252\277k\364\007V\027\350\311\277\026\222\202]\003\321\320?\306\275\032\034\374/\312\277:$1\030\216-\310\277mLs\036Z\323x\277\357\301\316\301\361\004\345?\371\245\331\227\307\365\324?(\211\333W\324\026\314\277\355NN\037G\024\311?P\254\360\272\300\035\333?\344\343\250\026\360\266\260\277&^TA\373\'\340?*\003\256\373,n\222?\244g@\336\'\036\257\2778.%\303\330\337\320\277fc\251\036\376\324\333?\275Q+L\337k\346\277,\307\032\344\344\364\320\2774M\226b`@\344\277\236\207\345_cH\270\277\327\371\376\240\n\214\254\277\n\327\304~&\255\303?\r\306\205\3251\215C\277\321\022\032w9\333\272\277\342\005\021\251i\227\343\277\240g7#\030\301\326\277=,\324\232\346\235\340\277B\325\340d\270\315\330\277k\260x\003/\347\333?\322\022u0\254\254\337?\304\301R\033\244y\336?\232A\276|\231E\324?\037\032q\\!\207\344?\377o6g\216v\302\277`5\236!\177\335\335?\312/\346[\335\271\246\277\003_Mu3i\275?l*\007\212\212~\307?H\2307\301\026?\330?\230\222\233\227y!\343\2779\244(\002b\263\315\277\010\215\005*\210&\330?\343\205\031\277\225\021\262\277\255B\344\243\256}\211\277\372\271\200\033R\332\334\277#\371J %v\304?3\345;\337\354\342\313\277\032\366\377\232A\266\320?\3157G\302c\344\223\277\236P>\363(\313\333?\224\275\245\234/\366\332?fF\242D\tB\320\277\223\275k\361\245\307\251?h\362\203\251\034\311\335?\007|\346\373\225\r\246?\321\201\335\227\3200\301\277x?\362\367 \276\316\277!Nqf\005\320\345?v\252|\317H\004\333?H%L\203h\316\335?\273ll]\007\332\310\277bf\237\307(\317\307\277e\340\343\300i\311\306\277\006\031\250\\F\211\250\277\314\335\235kN\024\325\277\346k\236<\217\376\312\277\275:dV1\215\302?\254\"\365\001\365$\333?=\001^\260e\303\332?\001\\=\345\240\235\254\277\211n\346%9\277\316\277\306\373\222\t\317\266\312\277d\371\302}G\001\315\277\376T\252~\204\005\345?L\377\222T\246\230\320?\241u\"\373\377\274\305\277N\276\362\203g\000\250\277\307I\037\302\021\307\346\277\315\314H\224(A\244\277\035|\233\335\336\276\346?\363\305\203\322\274\210\272\277\310\036%\237\354@\344?\007\332\255\375N\247\240\277\204\035n\243\333\364\241?\246\250\206?\273j\330?\205s\323\207\252o\313\277$\205\177\377P\252\227\277\022\376\240\211\013\233\304?\362uz\336D\346f\2777\207\214\303p\340\333?u\370s#\217\024\323?\322\303\320\352\344L\345?\305o\320\177\213\245\312\277\344\3725a\024g\241?\354vI\3361c\331?\026\337\253\261\337\356\324?\320y2\244/\251\312\277rg\313^[\344\262\277v_\204\337<K\343?\363\303\214\031vR\304\277\036\270V\275\364\235\344?&\275\230\373\036\324\272\277\010\327\263R\3168\266\277\374\344y\207\023L\222?\347\027\312.\275\242\306?\233\366\336).\330\245?\221|%\220\022\273\304?\026\320U\004I\351\266\277\017\220y.\235 \255?\2675\330\212\354\271\321\277\0229\330\366\321\304\341?\223\020\3667\262\374\345?9\324 !\022\022y\277@\270+\211&\257\302?\212T\275\241\225\240\300\277\231\326\246\261\275\026\313\277@\261_\301G\356\346?\275 6\031\324\005\214?\343\312\243\333\216\311K\277\000\201\0302h\262\336?\270\3278Q\001\246\343\277.@6$I\253\334?\266\210\305\373\263W\335?\000\347b_\364\r\345?(K\010\261\216\276\334\277%\337t\344\253Q\320\277\240]thG`\303?\215V @\247|\345?\232\346_\303\272\216\336\277\243\304%E\257xf\277\247\211g\236\226^\350?\2622\354\300\321?\241?\314fH\364\266\302\241?=AI\036\3334\346\277q\323Up.\264\245?\247L\336\276\026M\323?\315w\377>4\n\243\277\305+\336\002\350\373\320\277\024t\377\201\007\300\335?k-\'\374\255\370\305?\t\\\313\"\034\214\332?\026\276\337\344\216\351\313\277\375\017U\235z\211\326?\264\3550\375}\214\303?\211\377\246=Fu\333?UN{J\316\t\344?&\331\362\343\222W\301\277\225U\"\232\212\236\316?\314\274d\002\317\324\247\277\342\204t>]\331\327?\'\2445\006\235\220\316?\035\331\350\336\273\264\245?\234}\016\301\253D\321?\253\201A-a\010\350\277\304ep\357u\255\305\277\211}\002(F\226\314?\351\244\255\000\225\300\341\2771\352\377\301,Y\335?S{\256B\014\254\341\277^\271Aa\016\312\343\277\310<v@\247\332\332?\202\330\302\301\030p\335?t\253\020$)\310\331?EO\343A\'B\307\277\317\240*q\340\177\206\277\237\352N\177\017\201\334?\333\361O>wa\257\277\352\247jH\375q\212?\032\245K\377\222\324\316\277R\226\245\306\031\375\313\277\303c\201\247w\216\311\277\317\373\275\034\217\274\330?\t\330\312(\357\023\212\277o\263\272B<\033A\277\3774\377\371\307\214\314\277hs\336\367VA\312\277\261\250\004\233\245*\260?\234\212\022\374\210\302\333?N!\200i\213\312\313\277\301?\235\331K&\304?\321\364\206\271\254\333\314?\3271\021\343\363\222\305\277\233C\255\304\227d\310??P\023\"\205\027\346?k\"k\301\026\261\243?\307\335Z\005\265H\332?Pf\213\275z\t\344?$V-\206\376K\265\277\r\236\021\276Zb\344?\261\263tG\367Z\223?\360o+\030\360\r\315\277\\\336\301\364bM\331?\253U?_H\341\346?t\221)\274W\357\332?\332\363\353=Kf\346? \2637!B\226\316\277=\371.\204 \260\311\277I\371\317\356\036\r\214?=\367\232\365\224\342\305?|Oz\031\244d\302\277\365g``-\251\323?\311\213\216\334\201\027\323?\3525f\247Y\377\307?k\373\221\001$\303\324\277\213\035\350\374o\200\243\277\364~\314\234h6\242\277\352\330\030\246|)\317\277\241\327#\375\213\332\312\277\233aY\037\305o\334?\253\356\354\206\310\004\343\277\240\026\305\243;e\326?\301\354T\257\021\367\327?,\037\223\326)\240\310?Y\210\016\201#A\347\277\265\n5\037\344\260\277\277\3702\223\240\246\363\333?\t\334\333\251\220]\263\277\340\\\204\250I\220\222?Ksm\240\247^\320?\226\245\267\356\317\ry\277q\252\326>\364\017\305?&\266l\301\023\371\220\277\024^\243a\010k\311\277\322]+\004\346\237\331?8\001<X\265Z\305\277\320Q\273\035\351\245\312\277\232\177O\007\r\330\315\277\2336\004C-8\301?\237$\331\372T[\306\277\005k\234MG\000\264?\236\241\321\200\356I\324?\210\224nd\201\243\335?K\360\341\355\234\001\346\277\232\305\366 %\322\346?\257\346B\335\356\202\333?g$\347ieg~\277\037\342\264\032\361\350\307\277=\332\264)\211\262\305\277\r\016\243\336[\352\344?\354\221\233\033\262\205\312\277\210\004[>\365\274\335?\030\020\020\202D\211\331?w\305\204\177\256\t\247\277\207PcJ=n\260\2772*_\206\265g\331?\310\216t\243\033\343\323?Z\343\"\255\347\032\345?\003*\332$X\377\320?\274\255\364\332ll\343\277?5\301\344\0045\323\277s\037\312aA\253\331? \017\3300\236\234\345?\247\363\227\314g\257\324\277\233\347F`\305\014\225?\320E\205\342u\332\327?\200\001\316\234?\267\321\277\"\255\214\241\367!\320\277\334>7v\201\371\316\277\313\004Ocs<\305\277\244\242V=\005E\341?\364\355\217\275\377\213\312?\027+`\276\231\361\230?\350\n\000\237is\345?\310\206\331\377\314\235~\277\317\340k\337\016\032\316\277>P\270h\022\306\345\277\263O\327E\227X\304?~9\263]\241\217\333?\201\300\271u\355\301\343\277\211$\240\340g\376\254\277\210\275\307\316\030<\215\277\0000\307\300t\271\312\277\025`q\233\035g\252?\364\366)\277\363\250\311\277w\001\352^\013\240\260\277\346/\343\\y\377\317?/\030\256\337k\307r\277\271[i\204D\373\274\277K\347\344\301\355\273\335?\027\360t\337\030\337\345\277\266\2740\241\233 \337?\033\344\3444\372\307\344?\306\206E\300\365ep\277\371\211\240\275<\325\343\277Vf\347\300\264\240\301\277\0268\343xa\022~\277\277\020r\336\377G\302\277 \273\003#\314\000\322\277\202\030K\005\3238\317\277\226\325\215\332q\201\302\277a\245\311_6\016\243\2776\305g\333\376\317\333? \346X\377cx\266?\320\277U\205\2437\327\277,\2136\205\235;\332?f\365/\305,\346\305\277\031\202-\300\210G\333?\031\035\220\204}\373\331?\201\\\342\310\003\221\314\277\214\226,\274\005\361\274?\203\256\226\236]\374\301\277\240>\331\377\306?\271\277\221\225\241\"5\n\311\277L\246\nF%u\320\277\221\372\006\375\000xh?5\373n\200\272\035\345?D\351\342\241\265\303\304?\263i\235\237\177\016\303?\367\035h\252\314\271\345?:E?\001\261x\311\277=\372\025!+\016\343\277^\027\270\033\310\243\327?\340^\200\032J/\250\277q\375\201\223\351\247\265\277\177\255C\034\210x\331?\230\034\024 L\002\313?\220\202L\327\270\243\200?\334\374\032\244;c\334?\303{\263r\324v\333?\203ze\244\377a\276?\235\212Q`\314Y\264?3\273\223\364\325\372\333?\321O\202H\320\251\340?\326h\203]^\212\322?\313o,\203\305|\330?\2304%\335\277G\260\277\320\322\364]:{\323\277\276\230V\330F\033\317\277/~d\204\001\225\344\277(6\325Il\255\313?\304\3136\344]\375\335?\321\3749\036\226:\321\277\365J\233\242\n\334\322?\346\372\317~\312O\271\27771\250_\267\242\345\277\177w\341\275Y9\307?sbQ\t6K\307\277\361\035\021`L\213\276\277d\327\254\3510\025\326?\'\204\222\362(\317\243?\223\202U\222\310\200\271\277\323\226\347\177\301G\323?\363\204N\235\201p\326?M\013$I\214\365\310\277\377\251SF\245\326\224\277\032\262\r\036\236L\335?\006\002\317\203\334\301\334?E\376p\302J&\333?\374YE\342\222\341\344?\223\221\355[1\314\326?U\030[\010rP\254?;\303\365\244#k\324\277\356\305\335Ah\024\322?\270\017/>\2732\333?\016\343f\237d~\346\277w\237\241\207\363\323\200\277\036\345\273\357s\227\343\277>%\204\232c\361\313\277N\315\'#\025c\255\277q\3648\331\364\n\227\277(/\270:\216\214\202\277Gi>\000\0148\337\277\027J&\247v\006\323?\361\202\336\324mt\215\2779\206\266R\276V\266\277\311\351\353\371\232\345\311?\310f`G\220\210\316\277\237\372Q\036\'\026\350\277\224\240d\027\261t\341\277\353\336\314\340\326z\316\277\375\034\325\237\263;\277?\316\221\360\030y\264\276\277\364\371\320\330*\207^?v\210\177\330\322\243\330?F\363[\317kG\335?u\277\022a&>\345?\323/\237\244{K<\277\022\212)h\305\375\301\277Y\357\201g\214\240\304?\227O=o\266\373\253\277X\347\367\201\324\273\304\277B\330\276\272\t\302\336?\247\246,\\\271\013\310??\376\363\260\'\354\277\277<\217@r!\205\347?H\360\022\336\026\323\346\277WR\022\005?\031\237\277\360\366b \266\021\332?\347\365\3147G\202\345?\311\025\244:\231\217\335?\037\033\232\025\376\312\302\277\320n\200\333\013\263\333?\354%\225B\203A\316?\004\036\326#&\213\315?7\026\271L\362\310\343?\273\026F\335{v\336?\361\211\320c\357\240\301\277\007/>(\317\214s?$\025|\211g\277\230?CO\363#\270\360\324\277\324\326FDJ\026\315\277\007\036\306A\225\334\344?\010\331\005\305\207\200\325?\264\354\244\031\346_\244\277\332\006DAV\333\250\277I\0108\177q{\212?\363\233x\275\352\267\337\277\371\004(\304^S\242?\030\234=\247\213\332\307?\2157C\273T\366\327?[]N\t\210\311\345??\373\020\242\034\317\265?\027M\004\375\307z\322?:\220X\377\245T\334?\244\362\341\037\327\202\331?\243?\023\345\373w\311\2770\337\260#\304K\346?\036<ME\256\004\325?)\226[Z\r\211\320?\302\222\243\347\263\217\305?\311J@\n\246\263\316\277\227\336\345\277\223\230\333?F\232\323\300\352\303\343\277>\341\025Vd\323\305?|\253\277o\215\331\345\277\233&C\300\347\250\320?\024\302\027\3446\263\305?p\216!\235\r\373\323?\'\366\022[(\366\325?*\007\212\212\376q\310?\342\263\177\342#\t\226\277+S\'\373Bc\340\277sG\203\004Z\364\325\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_10"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "V\221\222\235\005A~?\332J\371Z\341\247\253?\346_G\3632P\236?Rs\335\207\310X\211?\341\302\354+0\340\261\277\343Z\304\342\375\331\301?\244\363+\347\234i\311\277\325\325.\000\345\034q?N<-`~\376\262?+\017\230\250Z\342\301\277\330\270a\210Z\242\224\2771\377y\376\332\030\247?\322\205e\'\024\006\217\277\2255\301\242\350\242\273\277\220\355\245\276f\230\302\277>\014\347\371W\177\316\277\346o\347g\217\274\331?\273t\1774\035\263\214\277\363\310@\032%\032\311\277\343\0236,\333\301\247?K\204\001\334\020\t}\277\240C\320Am\025u\277S\3727\237\2429\274\277\367\203\354\202\342C\254?d\343\316@\275\375\275\277wL\274\207t\r\265\277\272\245\n\203\210\215\251\277\375L\275n\021\030\266?\356\2525\004/I\246?-9\223\333\233\204\237\277\303\005f\2460\306\270?R\021\370\332k\365\230?K\360\026\340l\207\242?\314\275\336\002\253\030\212?\021N\217\226\230\241\261?>#S6\223\214\305?\375\340\327\243\313\366\261\277\346\'\005x3\354\221?#\231\274\236;\203\302\277B\260.\227\"\263\310\277[[\333\210\345\236\302\277152]\302\000\305\277.\367\217\246\366\371\222\277\205\356\263F\024E\304\277\374\206O[\237I\301\277\343\235\256\264\255\342\264\277\217\r\351_\256\037\236\277j;\236}\202\027\324\277\010[G\260\314\266\263?K\036\330\274mP\245?\307\264\272\305\221\301\307\277\313(;\242\347\273\262?\r&\330\030(kS\277\315\271\317\2024\211\241\277\230\014\256VyD\303\277\333\207\037\020\2460\250\277\262\341\237\010\230/\300\277\366\217\263 \374\332\263?r\264W\335\362\252\307\277\33098\236\360\216\246\277\374\"\333\330p\201\261\277\\\002\026\027L\236\204?!\221t\325U\344\261\277\201\332\177\317\325w\270?<\352;\001E\223\273?/\226p\210\273\361\225\277r\251\240[\025\314\213?#\262Y?G\365\305\277\222)\342\036\222\364\266\277?\004\037CC\037}\277\276\255\366\333\227f\250?\345\261\202\271\277u\227?\250rQb\024Z\235\277lH\372\271C\270\233?\362\312\300\304\311D\200\277H%:\240\254\345\240\277\353\000\203\002\301\254\246\277\t3\320)\206\263\240\277\370{\265\345T\031\231\277\240\023\361\277]B\230\277\206t\352]\313J\240\277\25744SV\242W\277e9vA^\276\254?\026E3B\204\'\246\277\236\222\265~\3412\256\277\314\264#\363\315\330u\27727\204\317{\010\317\277\325\361\261\036k\204\274?gz\r\352\360J\225\277\"\310\234\302\245>\305\277\310d\355\306\355\335\314\277a\220\376\333\210\316\244?j\202\311\t\352\306\245?\326\354(\236\0301\252?Gjy\234\244$\240?\241\266\323\367\226\311\302\277\255\200)\240\334x\262\277\034RV\035\203_\274\277\343\316\350r\372fQ\277\300\260>\026\211\246\267\277[\215\025\312\374\202\251\277\331\262\337\207Ah\267\277\357\241\n\240\224\240\262\2776\224\332\213h;\306?\272L\352W|;\304\277{ii\362\275T\267\277{xR\003&\240\220?91\332\231\370Y\306\277\251\320\314\325\207\334\261?0e\013\001\363\242\204?FH\252\335\031\347{\277\372\355\353\3009#\226?\260\2312&\263\260\304\277\3052\n=\363V\223?`\205\027!\225\222\226?I\264h*Y\210\255?\256\230\370@~\370\303\277\271\212\244a!\010\226?\210\351\2149\031f\277\277,BQ\243\007s\242\277\004\022\034\260\016\364\266\277e\375\357S\030\005\204?\243b\367x|\326\264\277c\037\336\037a\253\205?\203#\330\342Y\225k\277\367\244\257\002\345\277\177?\346ef\311\220!\245\277\r@\242\006\245Ah\277\253z\342\001\261\341\257?-\306e\201\033\316\307?\324\307A\336\262\020\247\277\033\021Jgy\201\244\277\224(\244\312j\031\317\277\254\333\250g\244R\300\277\025.7Z\006\203\265\277\224\324<Y\307w\237?\032\205\311\371\0076\267\277\222\305&\307\327}\306\277m\370\250\202\373H\241?Co\274\376\316=\255?Sz\"_t?\306?\271\030$\371!\241\301\277`\315\277eg\264\304\277o}\334\247x\226\262\277\204\300%[\270\207\314\277\235s\032_\200hr?\232\300\005\275]M\253?\323\000\367\237\251\025\302?\353\213\347\340W\264\303\277L\222K\001\000\367}?2Y\237\034L]\244?\306\334\"!\253\n\200?\371\212\013\223\353\236\274?{3\353>`\033\230\277P5z5@i\224?Se\255\333\177\350\277\277\354\375\200\346\367\246\301\277?\343\004\236br\226\277\356\336z\342s\206\302\277\201\340\316\336I\246\255?\203\007\227\340\245\363@\277R2M\231\032\357\232?\021\033\001\034H\005\242?\364\275\235|.\336\211?9d\304;\000fn\277\331\337\002\236\356\033\313?2\264\266\000\237e\273\277\217#kGP\000\304\277\307\222\033@\035a\231\277\225\026\366\000R\245\226\277\212\250\354h\332M\303?]U\nB\370\236\247\277\212\230m\002g\204\313\277c\013b\0343\273\255?z\r\352\360Jq\264?\305\2626\031\227\242\303\277\346\001\3218y6\222\277\202\007\376\236\365|\301\277\t\003\ti\021z\257\277\240\272\342w\r\331\264\277\234\020!Kr\002\267\277k\017\030w\305\204\217?9/g\031V\257\266?3J\372(\341\221\303\277n\0355\211\356\027\301\277\201\022\017\376?;i?6\'\'\301\270\247\223?\2102\257~\307\313\313\277\211\034U_\3630\226\277\215\3559\331\233R\260\277\237\213\351\266\002\022\306\277e\370\364}\335\016\307\277t\022\204\n\222g\264?\007$@\321e\377\226?\364\335\207e.\316\230?\300\372\177\242\240~\255\277\374\246{`q\177\245?\361YK\277L\255\266\277\364\274\341_\200T\275\277?\300%\303\233|\252?R\202z\n\353\214\265\277\370a,\357\204@\211\277B\246T@\334\000\242? \304\230k\006\365\203\2772\371\260(60\310\277\263l\275\021\243\010\231\277\225\351<\317D}\316\277x\210R\305\014I`\277\217ND\\\214\003\321\277\376\344\253\301Tc\232\277\320\337[\303\322\341\247\277\362\213@,\003\035\211?2\003t\343\006\021\247?\233\021\006\347Q\306\227\277\224,C\366#@\217?\006\207+(\213I\221\277N+\340\371\240\302\277\277\236\273U\276\004\372\304\2770cm\000\364\003\266?\226`\355\377N\240\303\277q\232\357\364\013\365b\277q\222\203e\256\004\300\277\037\237\322\271\211w\301\277\217\'#Y\311\010=\277\370\227m?\312\234\250\277\344\200\014\006\2372\217?\264\252\312crO\326\277\300C\024=7\007\236\277O\323\343\316\267\313\265\277\345\233\216|5r\311\277\021\374\024l\310\344\302?\304\363\214\\\273]\315\2772\306\202 \022N\265\277o\221(r\220)\271?\002\017P\206\230\376]\277\202\335\270\336\231\375\273\277r\002\233\277~\222\253?\241\202GD\306]\300?\257q!\202\266D\261?\374\022\226\035\207\346\310\277\341\232\267\301\273\"\303\277<\020\233\300[\275\312\277\210\231\217\001_%\221?\002\371G\034\010\202\242?\335\227u\367\347?\267\277Q0\373&ag\223\277\336\235)2B\221\277\2776\336\256{Q\331\231?\337]C}\206\310\221\277\t\335g\215(\212\271?V\357\366\275\"Hq?\347A0\375\001\305\263\277\330\304\033\374q\271\313\277\216\203\277\035\260D\322\277z\353\025y\006\313\224\277\334\303p\302\374Ms?n\330\370D\205\207\260?b\017\222\252\222m\263\2778./5L\261~?p\274\313\335\230\262\210?(\"3\177\233\261\247\277\004\035=_\2534}?\351\253\026\236\270\230\263?8\2565JMq\262\277\275\031r\302=\374\254?\330\210\273\325\316\213\310\277\234\274\264 \025x\211?\\wN\016\372-\247\277<^q\006\271j\304\277\352L\225\200|/\224\277\352I\221c\210\357\251?\254\314\027\241?\200z?\263\272\315\002\212\344\245\277\257\205\315\276\372\021\262\277\3654\300\002!$\241\277X:@\254\016\353\270?\006\034\322@\335T\277?\357]\331\276\255\337\274?,NR\354\2528\262\277\227\227\243\227\266W\221?\314\034\375\365+\031\303\277\357!7|8l\245\277XG\341\2740\200\261?*w\004\017\212\350\212?Y\036\377`;s\314?\252e\3066\004\"\263\277L\031\366\203\323\345\306\277\364\035x\214]h\265\2777\232\364_\355\315c?^\252\210\211\274\033\302?h\'\336\\W\247\310?\242\272\322\225|\252\275?:w\273^\232\"\261\277\005\242\253\235\366\316\303?\271}Em\321\270\320\277\270\234Mr\200\223\203?a\255\024\341\252\333\236\277\031\'\370\205\333\312\310\277\270W2<\000&\234?@\316a\342\202x\243\277\276\257\200\370\257b\321\277a\033\366\035\361\233\241\277\334\332d\202Q\261\255?\202Mc\234;\321\214?V\362\327\202\343\324d\277QIB\307\263p\226\277\223\274&\343\231I\245\277\000\264\004\036\272\316\236\277\002\252s\235*\005\241\277\313L\345\304\211u\237\277\255\331\273 \321\355\251\277\264<0\374\267}\312\277|\336\246\242%M\262\277\031\262\025\217\346#\266\277]\370\342\007\276\324\276\277u7$\365k\331\200?h\266\247\273\035\247\262?\026y~\376\247\225x?\201\362(\251\324k\205\277\"\340,\377\003\247\240\277\372\265Ab\305\355\233?FJ\362\335_\235\250\277\312l\024\202\352Y\326\277\276\253\033x\200\352\223?R\365\310rTf\241\2778\034\264\\\330\310\243\277\036\334\235\265\333.\274?\001S\304\361\225\243\200\277\365\3556\005\270t\220?\317\212\240\030\366\207\306\277h\\\347\310\222\205t\277\246\335\236\326#\303\273\277J\337Z\3345\327\301\277^f\330(\3537\245\277\2602,\334x\313\241\277\236\310\233\025\264=\276\277\311}\345 l\241\264\277\021\243JAu{\277?EC\207?\021+\263?I}\323\240\332s\220\277\324L\010;\347h6?[\337\023-q\313\271?\261\354\034\337\353_\206?\024n>\035\253n{?\353\357\235\177XB\273\277jbL\275\030\021\246?\263\242\274E\026\037\304\277/\257\022\342\200\014\327\277\371\\\226D0\355\265?T\262\340\241\317\027\232\277\313\316\252\350rw\302\277\030\362c\'\027>\307\277u|\031dI\273\240\277\033\024\004@r:c\277+\"\007H\333\310\232\277x\254h_\270\364\267\277~\032\241\346~c\224?\272[\304=\267L\257\277\202Z7\236\002r\235?\000\301\345\000d\031`\277\325\370\371\255\245\231\261?0\373\216D\334Z\266\277B\306\252\240\345\342{?\261\225\247\336\340,\261\277h_\360\236@.\254\277\232>\277\030_\356\311\2771QR\232\254\325\262\277.\336\362\005\353\007\317\277$\342\260\253\376E~\277\250Af\241|\305\240\277\007|\346\373\225\r\226?\202\343\346\337$\211\246\277\0032*_\206\265\270\277\350\265\346\202\213\371\252\277\373\304\teD\026\311\277A\251\254\\^o\305\277\332V\263\316\370\276\250\277zKb\336\035\370\241\2776\247[\305\2054`\277\377\\v\200\016\020\263\277=\366\016\022\3755\304?\022\304\026\016\306\200\265\277\035\311\272\277G\353\240?\'\333\237\017\2770\245?oC\020\020a6\277\277\025x\202X\221,\300\277\250\210\304\036\211\200\241\277h0x^K\304\271\2777\363%\000q\352\234?Izg\240qb\264\277\264\003K\001\253\233\307?\007\220\312\3428\317\224\277\307\345\347\242\373\033\251\277\002\237\335)6\311\311\277\271aF>\320\206\276?\203\230\327S\243>\260\277\"\224\357\000\354/\217\277-AK\371>\214\204?\377\227\r`\001\264\272?\233\264\302W\350A\277?\\\220\353\256\005 \270\277\331\356\221\032\t^l?2\316\0310\3142\267?R\212\310\372\3162i?\370\252\021\321\032I\271?%\212\332G\270\332\262\277\307u\000\202A+\332\277\031\035\220\204}\273\314\277\203\326G\320-\256\266\277\235\354\217\305pT\300?\345T[\177\205+\274\277\275\r\336\025\311p\302\277\357cX\0078k\255\277\007\2777Cv\311l\277\2670E\230&\225\313\277\335\254fB8\013\224?\2172\003\021\271K\271\277.P\326\230\245W\306?\236\250(;VY\206\277L\211\037\301_\\\254?\320\022\236\257\335f\247\277=\225}\236\331\212\262?\024\257\330}\314\251\236?\231E\213\340=\017\242?!d\315\206\004\245\247\277\217\372N@\321D\266?\211\1773\214\026\373\275\2774i2g\246I\301\277\336U5_*\330\260\277w\312z\234/\027\257\2772\263U\235c\255\242?\022\201\321\202\243\246\300\277\0207\257\003J\267\274\277t\224\346\003\300\200w?\177\213\312]\266c\307?3\374\322\233\204\344\246\277\035p\300[\336\244\300\277\261\353\213B\232\312\253?#\356\271e\352\"\313\277t\270\240\277\323\222e?\214\210\377\307K/\267\277\354\257\354\274l\277\266\277\004\317Z]\220%\260\277\2776\023\272\350\267\260\277\373\257s\323f\234\272\277\030\000.\361\025\027\254?\303^\247\337%;\276\277\216\031\321\013\261\331\263?\222\346\023\242\021\246\242\277eZ\325q\200\211\276\277\034hx\222\370\005\273?\271\330Y\231\225\022\306\277!\275\023y\263\202\311?_\217$i\200\320w?9b->\005\300\255\277aP95\266(\216?MG\306\213\001\351\247\277\236\372\204\017\314\241\212\277\266\344\247\'\342c\327\277\273\274\340\243c\246\251\277\013\020\025\203\370\342a\277\034\246\307\000\232R\234\277\375\037A\240\034\315u?\030\271D\201\200\255\243\277_\211==\201s\256?\375\244\332\247\3431\272\277e/P\\\322t\243?\'xuTVO\263?\337\227e\025W\021\277\277\341fm*\275|\300\2778\302e\2775J\252?\206rw\335(\240\227?K F\204V\222\250\277Q\261\270\237VH\214\277\335\316\337\000\n\340\267\277\254b,\376\257m\227?\003\302\325\241\235J\241\277,\266IEc\355\312\277\273\271\370\333\236 \231\277p\253\237\205\244\031\230\277\013\261<@\336H\243?\214L\251\023\034\323}?\003f\327 @D\254?\262\330\303\352\321L\275?\325\361\261\036k\204\263\277\325\000J\350\323\317\252\277_\030<\216\027\271\265\277\371}\244-S8\317\277-a\2477\'\037\250?\231\327\251\243\367N\240?\335$H\235g\211\303?\005\333\014`_%\204?\023\024Xc}\301\277?\363\016\246\027kn\266?\030\n\342\200\271\275\224\277\035}\243\210\322\377\256\277\356\366[f\321n\230\277\265\221%R\036\006\256\277\267~v\227\366\023\307\277\r\272\357\336r\361\264\277\177\306\236\240\301d\256?,\205\274\365\314X\231\277\217H\350\"\026\025\246?D\021\367\375@^\304\277\000\375B\270\227n\261?@\334BH\367\"\237?\037\325\236Ew\330a?\310KP&\342\353\300\277\3153@\2635l\275\277\345\025\241;5U\265\277\037\377\232\346\374\230\300\277\334\313\343T^7t?k\014Q\275\351!h?\343\323\037>\t\234\255?\313\004\022\000[\337\274\277\026\036s\0372E\206?\r\221p\2558\315\235?\336\177\032\255Y\035\316\277\237\362\340\325\017\275\304\277\302\342\r\274\234\212\307\277\221\024\354\032\210\300\250\277\242p\250\245\332#\255?d.\374\"\231\274\264? \332\001\266\007J\223?q\353\250It\277\273\277\034\225\274\266\216\\\304\277\260j9e\250\351\302\277$KA\022Q\247\317\277\223_~(J\242\204\277^\\\262C_\356\241\277\203\276x/\214.\236?L.\\\334\232\002\240\277\346\224\326\230=\364\230\277\310\256=~2p\257?\232\343\337\336j\332\272?}\342\240\207QE\226\277csE\221\004\315\216\277\")T\375k\365\251?@\377w#w\001\240\277\312L{\340\351\351\235?2\235)\266z5\304?\333\335\301W\215\210\262\277\201\3302\026\326X\201\277\356!\007C\"\017\253?\376\335\362\001Wsq?\370\030\327\2701O\234?i\340Y\030\250\340\232\277\177\261\214G\210v\226\277\220\330QI[d\260\277\357\362\271\202\211\031\253\277\027\035\373\037\201\273\265\277\003qw\006\250\321\235?n?\210\200\035\341\177\277\367VfBz\'\222?R\374\243e`\301\230\277\315\263\355\017\357\224\231\277ba\353\306y\007\303\277\315\212\030\336\373\007\220\277\t7\3278\264+\300?\254i\346\342\322\245y?f\241\276\341\025s\324\277\311\355\362\010\311]\227\277)\204\243\036\201C\304\277n\376\035Y\022\003\227\277\214u\374\237\324:t\277\234\313|#\224\240\241\277\370\350\344w`!\274\277\367v*d\327\213\260\277i\221\3625\371\235\206?\006\035c\335.\352\301?wS\302\372\334\\\300\277K\352\343%(\023\205\277\366@\337\241\036^\246\277h\'\271\272\331\343i?Q\357\375\233\204\303\256\277I\216K\207\024$\304\277N]\032;\270\246\322\277\035\005c\340\233\017|?]\203B-\233s\241\277P\217n>\225\336e?b~\031\002p?G?e\300\376\220#B\305\277W\375\370\350`?\302\277\333^\361%k\014f?mNS;+\270\237\277X\262\351\\\337\364\225?\016-\025\310\252\020\313?\253?\222\367Il\221?\236\230\2228m\276\301?P.\376\330ZVG\277^\245A%<\016\204\277\347)\342\334u\"\247\277\234\220R\340\3176\264?\'y\236\r3\023\244\277\257g\2769\022\236\302\277\267Vb;k\371\261\277>\000\261\276\344\363\277\277\0355\354\030\323\243\300\277H\331\350\275\255K\300?\277,\212\252\241\005\270\277\226\350M\301\361g\260\277\367\342\201\204\005P\232?\006\230\340q\335\326\250\277\r\312\260a\270\000\240\277?s\260\340y\007\264?4\333\264\031\360@h\277\250\247\321\334\361\203\334?\004\025\372\005`(\302\277\357\177\323\375\224\021\275\277Q%\261A\262B\264\277\024\257\323\304\022A\254?\360p\335\302*Fl?\204,\352\027\025\006\306\277\224\350\331j\336\212\266\277*\216O=\334R\240?\360\314\333C\210L\245\277\204\035\013y \214\201?\024\020#\034d\246\221\277C\375\214\335\316V\242\277\231\370\223\017\302\236M\277C\324T\201 \341\263?\250\007\273\027N\210\261\277\236\225Y)\2518\325\277Ry\"%\311\265\265\277\372^d~E\351\245\277\315\231C\0136\231d?\272:#\361\302;p\277\310\317\210\312m\230\273?\3053)\204\\I\243?\237p\331\225Tux\277\2173\371!\020\332|\277\244(\206\232\327\307\253\277\200l\246\003\330\316\252?\377M\336\266\245D\302\277Nz\337\370\332\263\300\277\361W\301\24241\221\277\034OW\271H\010\302?\2447g\203\026\322]\277\245\020w\336\216\274\244?\"\206\314~\245?\246\277,\366U\301\301A\262\277t\021\370&\372:X?,\373\t\302p\211\317?\274,\036\305\326\277\221\277\314\251\317\233\253b\256\277(\0358\251`;\262\277\"X\321\366\032H\302\277\003\341\313\303\220<\220?\0160\261\001*\377\310\277\220g\033\250!\344\245\277\"\224R+\247\230\271\277l\315\000^9W\227\277\0239\261\301\352Zw?\254J\t^\200\277|?\006\330&\231\305Y\253?\224CQ\301]\315\222\277z^\265(o$\205\277U\352\013\201Y*\236?\205g\247\276\252\265\247?%{B~O\217\261\277\020\312^cU\014\312?\304\257\232\337\027\264\277\277\006\220\353\360!r\321\277q/\342\233\243\027\243\277\361\255\274\242c \315\277\366(}\235\253\030\310\277%\321\344\3056g\315\277\277\332\266\307\211\261\207\277\0170o\345W9\263?\237\372\315\345\202\n\271?\230\002\251\177\326\035\305\277\363;,X\323\n\303\277\217\253OA\227\323\264\277\257L\021C\037\352\267\277\273\240\327\002\357\242\260?\314Y\327\034\253\212\226\277\2742\373~bK\251?\t\303\035\373\233\010\330\277\250C\033>\361u\320\277.\350\t\300I\027\246?A\031\333R\244N\274?\363/\337\200\352\255\240?F\314\342\201\245\023\211?g\010\tIMX\304\277=\335\222\177\332\346\276\277\345\216,\320Vt\213?\000\355`\'i<\300?\013\023\374%\230 \255\277\177=\304\336BY\233?!\247T.\371D\261?\016\230\321\331\023n\233?\225X\264a\226;\256\277/\034\373\236\000\246\251?\007l9]7!\214\277\224r1\345\307\210\275?\336a\352\031\210\206\265\277\371\n\303a\030\231\226?\226\330\214>\254X\305\277h\251\345\234\022\357\303\277\216@\027h\322\001\246\277R\250\263\002_\253\250\277B\363\265>\027S\303\277(\271\022$\347bj?\000\000\000\000\000\000\000\000\222\177\366\273a\357n\277\356P\301\237\351\276\304\277\377,\211\370\366\312\222?\211\004\266\367g\016\301\277\3132\202\225\\(\271?G\352\034\207\352{\313\277\2139\245\017\237l\271?GvB;\351u\267\277\036\220\332}\364q\210\277\217M\336?\227\"y?\007\227\337\200\316X\227?/\263\344\376\336\376\261?\274\244\227<\221lu\277P\277\260\241@D\321?A\335Y\036\030~\301\277Z\314E@\351rh?\n0\306\345\223\354\\?S\0220\277u\363\246?\231\357d`\262+\244\277\2246n\224i\362\242\277\034\260q\036\312\247\307\277\203\"\314\243\321\323\246\277\232\204\335@\031\224\205\277\017\2236v\005\262\305?\366\3051\324Y\024\271\277n\356\330\235(\350\301\277V\260\007?\343U\255?\177\001\367\033qq\300?\315Z\247\035@\267\262\277\320V\271b\223t}\277\241\335|~s\032\320\277Z\311\330\032[Y\324\277\032\343#_\222\225\270\277\035\272,hR\361\300\277\2234E\241\341\244\270\277\035\351\257?\340\364w\277\2112+F#@\303\277T\3115B\225S\252?\037p\023\244\010_\325\277\310\361\236^\204\204\265\277\357E\261e\304\310\220\277\230\336.\226J\301x?\225u\346\273\347\002\315?\032\207<z\252\340\241?\323\210\3646\221\364\264\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_11"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "u@\211\004\2200\221?\026\002\322a2\323\321?2@?\337X\010\331\277\242%\321\303\267M\314?\022\023\324\360-\254\320\277|\242\004`\260\331\303?\235\217B\304\223\376\265\277{\207n\0053\367\223\277\352S\330V\375[\310\277\000*\207\334-\305\314\277p\025Y\245\323\276\321?R\335p\340T\362\272?\336\241\264y\024\025\304?H)t\240\177i\330\277*\337\330X.@\320?\374\336\350[\315\327\275\277\222\301u\270b\356\232\277\376\242Ca\311\265\253?*\336\005\240\n\345\241?s\337\346d\024\221\304\277\260\237Q\374\020\202\303\277G.j\275\000\367\321?.\334\301\241\032\243\333?\270\270|\332\227\"\304?\366\235\272M\023\021\324?\335O[]-{\320?\316\031Q\332\033\374\335?;\250\'\240GT\340?\251\t\r\212\007\020\316?EB!#\034\n\321?wQ\221\226\014x\301?\231\244\343~H>\272?\376\204q?\371\036\331?\217\242s#\321\360\315?\2123L\216\267l\262?N}b\225\271\226\300?\372\203\036\275#\333\334?\303\2161=\202\027\311?\307\226\355\\{S\320?,\000:\212{E\306\277\361VL[\022\026\323?\363s\"E\215\327\300\277D%\340\235\235\010\314?\346H\200\375\204q\347?\233\305\315\241\363\267\302\277h\347\331QA\352\305?\265\356\017)@\363\314?\375\177b\205\327\005\271\277\026a\324\377\203\231\333?=Wc\"\010D\330?\205\204A\374pN\327?\256\240\006_\332\350\346?\243\rvy)\253\324\277\260\021\261V\'\306\306\277>\205\216\343\250X\302\277\243\211\177\361oD\264?\301y\355\251\007\022\301\277\350\177.$\244\221\234\277l\034V],1\304\277\230\\{U\035(\315?\363\361Z\301\314\347<?<\235\320\220\226o\322?(\314 \343\366p\340?\224bOT\231\326\260\277\211\215`\200\320\274\277\277\265\246X\271@\027\270?\305\327l\037\321\210\275?\351\003\355\001\377\003\271\277.j\275\000w0\321?\302\307ybJ\342\322\2779\326 \'\247Q\306?\233%\\#\335\252\310?G\370(m\273\032\316?\231E\315\374\017\325\310?\377\361\271n\2452\272\277\350\206\246\354\364C\352?c\244\254\031\370U\313\277\3740)\333\023\346\333?\234\004 \002\317<\275?`\321\245f\254\211\262\277#\270\364\334\000{\334?\351\306h\3338{\271?\330\035\377\303e\356\330?\026\303\325\001\020\367\275\277!V$\313\356n\306?`\240\030\027\026\365\267?Ii\025\201\332\275\262\277Z\364N\005\334\363\310\277\306\375\242_\266x\273?!\2551\350\204\320\326?\371\272\261Ew\265\302\277o.\233\214l\337\271?\031SU\rg#\322\277\n\\\216\277\003\357\255\277<\006\032\"]\242\326\277gR\371\215e\260\304?\200\375\rc\235\355\254?\214w\221S\205P\320\277`T\224CrO\323?t?+Y\343\246\300?5\302\r\276Q\'\317\277Xbu\026\203(\301\277\366\370s\300d\331\320?\022\"\215\310\177\232\261?\024m\226\344\343\207\316?\246\007\252\353\365\023\335?\242\263\016?\346 \300?\310\277\307G(\t\272\277\323\266\253\241\036\354\323\277\366\2169  \227\254\277\215\313\341(\263 \302\277\000\377\367T\014_\264\277x\270\035\032\026\243\324?f\336\005\245\303\036\312?R~\020\321\001\254\275?\010\221\312\034\344\230\331?\000\000\000\000\000\000\000\000!\236x\0203\342\276?\004{#%\003\341\311\2773\214\273A\264V\271?\271\316\226\336\304\261\322\277\\\311\027\177\236\260\267?\203\334E\230\242\334\322?o\001Wh\326\010\274\277\335t.9\254x\242\277sK\253!q\217\253\277\303\244\317yS\262\317?(I\327L\276\331\303?\367\037x\000\264{\337\277\215;J\312\202n\344?\225\201M\236\265\tn?\004%\334\226\216Z\267?\215\360\271\275\353\006\252\277p\234o\237\260\037\300\277\252\370\032\335\234e\320\277^\"j\344\353\031\324?%\372\010>\376\271\314?t\300\"}b6\302\277\355\221\264\270R\021\303?\331\213\323\326\251n\307\277\360\341*\000\332\027\252??!\226(\326\204\324?\"\362\310\345`\262\271\277\246p\261`\352\000\313?dGx\265\273\213\271\2777Z\212\273\254O\271?\371\215e\260\230\007\340?\326Q\027!#\275\313\277\3503\240\336\214\032\323?\216\024>\031\3534\304\277\026\274*H\032y\310?\372\365}\027:\237\311?.\244\027C\246m\233\277T\307*\245g\372\301?\005+\230B1\303\303\277\030y8\005\"\331\301\277\270l\276[j\316\271?\203\334@\337\350\363\263?\222\200,\237@\263\301\277\271_\025\332\377!\300?\334\262\tQ:h\262?\013E\272\237S\020\277?\213\225\352e\210\241\317?\001\025L\004\303\034\327?\303(\010\036\337^\313?\3311C\0355\252\270\277E\346\272\276I\322\352?\022\202\033Ji\r\302\277m\351\013\000\331\024\316?\037\221c\251\375\357\271?\r[\371\374\336\214|?=\230\271e,?\303\277\036i\364\223\377\003\271\277\033\320\230j\342\364\303?\365N\201\243Oq\304?6\032#\206\333\251\313?\226\227x\027Z\343\311?\331\3122a\207\263\351?4\335\004B_8\320\277\025\205#i\263A\305?/\002\235(\215A\302\277\310 \034X3\327\271?{&\330\330U\343\223\277\374\2323BB\013\226\277\223\021\202\033Ji\311\277\013n\265\230\351(\322?\0237\372\332+\332\327?\221EX\\52\303\277\331x\362\341@\345\240\277\220-\361\236\010\204\267\277\326\213\302\252Qz\275\277\374\303\032W\361\200\263?\305C\316\261r\036\267\277)\276-\232\306\335\270\277\237\007\322 `\210\315?e\313,!\243,\307?]w\251\307l\177\305?\222\025\rc\034\355\313\277\262\252\261\306\321\003\262\277\200\337T\336m\342\266\277\023C\027y\376Y\302?\004\236\305\234\261\271\350?\212\023yA-\316\234?\307nU\310K\355\306\277\304Y\327\211G\271\301\277\336v_\235|]\324?\326\375\r!\201\033\240?\016\215a-\302=\267?\341e\353\270\230\241\222?\n\205.\377&\266\242\277l\336\202\266\346\330\302\277\n\200\022\033\003\035\251\277\272|\024C\254\335\307?`\217\354\276!\\\336?\244\331D\177\313\220\344?.\376\266\'Hl\313?\241Vf\204\226\371\271?}\2028\315\n^\276?\352\362A* \310\301?8\026o\277\327\253\321?\220\227=\"\to\254?_[\201\031:\023\302\277\337\267\255oX\001\267\277\010u\221BY\370\311?b\314\247\330\342d\314\277\005\376\263\220\307\246\211?\360\274\032\301B\275\310\2775\036\021\370h\226\304?\227\364A\340\222m\322?<I>\237\226Y\310\27724\246y*T\262\277Q\242q\035\355\374\224\277\325p6\302G\311\340?y.\034\240\345\215\276?\220\221\344\240!o\301?\026\001\256a\017\270\250?\366\214\216\365\036\370\311?-\274\201\270aJ\320\277\242\353gV[\326\330\277h\373_\307\342\253\275\277\277%B\033g\360\303?\020\361j\024\355\205\272\277\341\232\267\301\273\242\300?\345\373\332\341L_\345?\336P\000\336e\263\322?7U\326\272\375\207\317?c\250y}\234\237\332?\307f\344\1774\024\263?(6\264;\203\212\323?\3472\344\301\336\020\237?\237S\363\311HE\315\277\261\265k\000>\221\302\277\007\211\376\032Z\256\265\277\035t\350x\365\277\304\277\r\237\235\241\362\016\324?\255=`\334\025\023\307?\315W\311\307\356\002\307?3\027\270<\326\014\317\277\363\2240.\260\242\326?N\205\221\301\376\251\303?0n\376\272.W\340?@\220\264\002\340+\257\277\037K\335\235\316\370\265\277\330\006\264\225\023D\303?\222\254\216\337\205\364\277\277S\356\272\216\243\377\262?0\250\004\376\317\345\300\277\357<\361\234- \270?\203\231B)RH\277\277\027\010\031\000^*|\277\352I\221c\210\357\251?}\277\003\311\\\225\312?\'\303\257`4\216\327?\364\355\217\275\377\213\320\277\235\345\230}5?\222?\274m<^\234\206\253\277\370\234\005\353I\252\351?\213\305o\n+\025\234\277\214Sc\370>\213\333?&\315Y~dc\314?\0079\326bCy\300\277\3648g\237\"\242\325\277(\236\263\005\204V\306?Q\243-:\233\206\261?y\230V@*\220\263\277\233`\017X\377\010\316?SV\231J\273(\306\2776\312\372\315\304t\317?\354\232\332c3\221\342?Y\214\364\201hV\275?\226\223\215][\245\252\277D\357;#\235C\334\277J\231\324\320\006`\317?\326\263\326\006\335\224\327?\243\333\236b\315\257\300\277@\300{\303Te\313?\337&\222\236\330\371\302\277\353>\031F\356\'\307\277[\207.\236\375%\244?5\365\025\377\322\275\337?isZ\277\262\265\260\277v|I\235_\030\304\277\262>/&GK\330\277\256\226H]\303\360\225?\254r\241\362\257e\332?\221p\2558\315\351\273?*d[\304\177S\302?\252\024T\267\'\006\273?\002\377\306d\222\r\304?\240\004\221\240Sk\321?\204\241H\326e!\274\277\215\025\014\031U\'\310\277ju\213#\203\232\320\277\037\277T\277\024\026\320\2771W\016FO>\266\277\3119\220y\r\017\310?\000\351\366\355\177[\346?\035E\020\306\323\033\315\277\300v\264\232C\214\300?\234\256\202s\241M\317?]q\355\033\312\226\303?2\372\033\376\344\271\313\277\316\212\236\242\221\2747?U{\"\231\037I\301?\361_\2032K\n\277\2776\344\3415\226M\303\277c\230U\320\233\'\263?\361\357\371\202\222\331\311\277\204\313t\371 \225\303?\002\274\005\022\024?\335?|<>k\310\211\314?\264\016\031\037\376K\275\2779lS#\221\211\325?6\236|8P\371\313?\027S\237\232\201\000\340?JT\271\232\206\362\320?rm\243_-\007\272?\316\317\356?\033\201\254\277\357\325\243}g\014\231?}0\235\224Q~\272?\253$O\345\366\303\306?\025s1\202\235m\340?\336\010\346C\253.\325?\0042C\374&\001\337?1g\360\326}p\301\2775R!\344\335\r\300\2775\255=\201\352\376\300\277\005\270j\350\260\214\324\2773\313\267\241\326\362\303\277\247\020<|\241\331\332?\233\211\216\2119\255\270\277\356H\314\036.\332\322?\027\367\233`j\221\305?\211\033\006\337s\341\213\277\367\253\204\027\022j\302\277hL\024c\221\r\325?\024S\320\212\373\321\262?\332&\313\377\232\342\313\2776U{\001\213\266\275?\362\027\217_3Q\270\277\024\212\235\276\330:\353?\306\335\026\350\267\010\224?E\353\260\333\312\277\270?{\345\223x\355\220\272\277\260h\204\3103\371\313?\234\2045B\3756\271\277c\224\312\210\311#\306\277\205O\204\036{\207\327?\255\323{<\212\371\221\277\250gj\247 \236\305\277\030\262x\271\241\214\264\277\366\267\302\303\315\014\333?\271\241\316\201\212O\321?\271`_\241\305\310\321\277I\241\250C\331\241\302\277m\223\'\234\037w\243\277\301Qv#\301\216\315?\025Cj\301(\024\270?\354\253\304\237U$\337?0\021o\235\177\273\322?\256 Y\002!\000\333?Q\262\346\021\355t\321?\353\206\313\3743\033\242?L\241\332}\0329\277\277\240<\207\215\r8\305\277\273SK\204W\\\300?\214y\251\032\265)\304?5n\234\332:\264\303?-\230\370\243\2503\274?\031\263>H\303\347\311\277\222\361\336\007\326\247\301\277c\226\342O\371|\341?\263&\026\370\212n\340?\244\010_N\277z\330?\036\3564\343~Q\311?\375S\005\376Km\323\277\265\224E\304A\000\265?&\261\336\207\007\275\311\277\021\346\260\332\200\370f?\204\035n\243\333\364\241?\'N\315i?\347\270\277\330p&\340\266\272\261?O\263\274\202\237\376\262\277\0200\251\220\341g\260?\310\0143\270\326,\301?\374\324\343\204*1\307\277\301*\315\234\344\375\251\27797\032~?N\314\277d\317\236\313\324$\312?\020\376\311\010=\325\262\277\330n/\'p\204\302\277\023$\031\346\302P\276\277\003\215\343\321\327\275\351?\250pF\305\346@\325?\331\nXz\206\323\304\277\226 #\240\302\021\323?\3259\355\306\016l\305\277\001\276_\365\025^\301?\375\261{\270\005\307\271?\244\272\210\010bM\312?\333K\231\"`w\252\277\342\306\322,u5\301\277Z\375K1\213y\241\277\335\201\225\236D_\266?z\356\024\335@\"\321?s\013\237\245\022;\312?\t\016y\025c*\330\277#\212E\343\273\332\303\277\266\212Y\212?\345\307?@\270+\211&\257\302?\275\245Av\203\215\345?\263\014P\236\242\330\351?=\351+\345\010[\311\2771\035!\240N;\301\277M\001\376c\000,\260\277T\303\002\210P_\306\277d\321\317/\245\211\320?\010J~\202\223\206\306\277\325~\204\304\352M\263\277_\033\236\034\ry\321\277h\312N?\250\013\336?\235\2753\332\252$\321?\r\030E\213Ch\262?-!@\002V\371\304\277=H.\203Z!\310?IS\024\032N:\310?U\256\246\241\374\023\271\277$@4\220\272\337\271\277\234\256\376:\375\301\304?\311D\000&_?\315?\323.\307\247\327\230\300?\376\223\246\336\246\201\254\277\334]o\264F\261\250?\255\025L\200\212\370\324?\317CT~\2455\304\277\375\267N\000\036\201\210\277\372\016~\342\000\372\301\277i\367\365\215\371J\320?K\017\371\035yV\263\277N\243\301T\320@\277?S\365\341\017\365q\302\277\313CK\303\225\230\345\277\260\214\262#z>\305\277\271][\204\321\310\231\277\314\274d\002\317\324\247\277{\326Vh\367\026\306\277\276\201\013\252\364\260\265\277u\206[\236\004\277\262\277\343kts\226~\341\277\361p\361\246\021\351\321?]nQ\342J\010\347?\313\272\010\036\242{\261?\301\317n\343\005G\313?\027\347V\245\200v\312\277\303x\223\000\261|\321?\345\265\320\235y\\\345?<\013)\334~\273\302\277\320\016\355\240h\327\266\277\266P\215\362\'\205\331\277SKJ\254R\233\262?#%\207\231\307+\320?\033\023A \300\267\312\277\312\0249e\352\205\263?m\253^ 6\310\262\277\373\360E\336\346K\312?\244\303\246B\372\365\314?\376Qi\376w\310\321?\301\035\311a\007\200\266\277\003\327O\336K\n\310?\257\320\273<\223\271\246\277\371\227\254\243\r\364\321?jU\307\001&\266\277?\030\266\301\344\241J\314?<\303P^\226\274\273\277?!pa3y\274?)\020\217\'\366\016\304\277\020\267\032D1\232\323\277\301_\304%ds\314?\340\371J\302\263t\215\277/\"@<\001\003\326\277\262\227u\030\366(\300?Po%\277n&\312\277\367\324\342:ck\304\277\334nz\376Q\247\300?\334\324@\3639w\315\277\246\nF%u\202\310?\254\265I\250\215(\313?\352\024\365\223{\313\303\277$\352h\311\241\315\314\277\2718\t)h\250\301\277\376\275o\327\246\214\304\277\022\344\373=\014\210\323?\025\210d\351\277\336\265?\374\237\252\337\330\365\267?\326Lu\0030^\212\277l^\223=[*\327?Rb:!2t\323\277I\275#:6H\300\277\304\212\205\347\306p|\277(\236\016\277\366\247\341?\347\000\177\000k8\323?\364~\314\234h6\242\277\201\201\326\262k\261\331?\251\014A\340\021\255\277?\014 \276D\243\330\313\277\247=\004\331\333{\310?\353\223\365\376\263$\303\277\301\006\237A\2368\263\277\204\261\033<g\231\206?\215\212\213\345\216\345\312?&\037\026\305\006\246\330?\252\335\206\203J\375\301\277[=\355\021\346M\270?\3353\001u\271w\300?\325\'\363n\260`\266\277\210\267M?H\031\252?D\307\030\234\344\356\257?C\377\210O\317\365\230?a\253\343|\332v\273?Z\357y\366C\t\302\277:3M\032\233\004\272?\017\331YWy\300\274?%;6\002\361:\323?BK\r#s\033\270?\225\322\330\003R\007\342?\322\271.>\375N\320?\202/u%<\000\303\277Y\347\020\037uG\304\277@u \251\215\003\315?\006\270\203\205Q\030\276\277e\300\335\202:\237\301\277\221\001\352\0276\024\240\277(\320H\000\016\214\312?\356\266Ex\377H\310?\203\030\350\332\027\020\320\277o\275\001\301wv\313?\003A\t\376z/\274\277<1\353\305PN\302\2775\372I[rZl?\221R;\211)\215\313?%\2604N\025\034\216\277\267\333h\337`\030\321\277\244U\312\276m^\324\277\303\311\332\3770\244\257?\350\255.e\3501\334?\025\316\311\346\005\263\326?.\245\323_T\367\300\2778\376\237\0366\354\312\277\237\235\302\000x\372\303?y\356\230\025\345-\300\277\345\373V\251\250\023\272\277\242\2522! >\322?\272\210J~\037)\320?\024\324l\365\007\020\312?F\205\240Y\310\322\350?\022\363Q\353\242\215\307\2778\366T\235\301\036\245\277^\351\204\351\336\267\315?\006\tz=\322?\316\277\0060\002\266\305-\262?\320\200\366\372\3052\311?\202UX\035\367\265\324?<\372\224\240\025\321\230?\322DmU\361J\303\277[/\300\035,\014\337?\362g\262^\220\035\300\277PK\016\000\236\262\245\277\010\247\211g\236\226\272?\\\200F\201\357J\245\277Y\250j\277\013\024\275?K\265\313\216\277z\276?\0173\352\020\356\204\315\277<&\0236\212L\217\2776A/7s\243\333?\241\231\314\035\242v\300\277\3764\346\\\'A\320?\315,\225\371?\356\305\277<-\344\266\"V\306\277t\265W\027\236\264\300?\r\251\036@\361)\321?s\247*#\344r\334?\325\244%\240\323\275\306?\217\210\214\273\377\227\331?(\214\230\237<(\323?\020\211\255f\276\177\303?@1\025\217IN\275?\313\315\201/\2263\332?\252\010\334_\3424\305\277\016\331a\310\301W\310?\324\204\212\375\247\023\274?\252L\316\334\205^\303\277r\013\247\026[\322\332?\376\372[\341\341\346\270\277 \177\345\030\373X\307\277\232I\307\341;M\263?\362/\233c\355\255\267?\254h\275)\366a\341?)\244g@\336\247\267?\035/\017_G\030\316?\035ACb/R\303?cS[\250\004\335\274?\000*\013\025\322\320\320\277>\304P\230A\306\261\277d\0139\235\001\201\244?\373_\t\377}!\314\277gAI\375\314\013\300?E\322\023;\277\315\335?3\250\262\377lq\254\277\211\003\001\336\275}h?\246\004\260@u%\265?\'[\023\301\356*\302\277m\273\\\006\2244\300\277\343\017\227\000\"\033\244\277\374AvA\361\241\303\277\004\001\021f\003~\307\277\237\374\255\002T\357\225?\333)g9\032Q\325?IN`\031\237r\300\277f\254\r\200~\000\307\277\273|\353\303z#\323\277sL\222\276{\r\310\277\033\300\225\313\312\037\272?,\373\t\302p\211\337?\361\264\241\007\343L\240?-\245\374\336\205\261\336?\375l\344\272)%\320\277=\032\332B\210\022\273\277H{r\003\364q\330?~\222\003\302\303\276\255\277-v\204\236\220G\275?\224\237\371A\002\253\324?wX\307B\213\244\255\277\317X\352\017\203\257\306?\367\037\231\016\235\236\340?\224,\016\004Tz\321\277\201\261\276\201\311\r\303?\361\364JY\2068\273?9\211n\341l\177\262\277\252\n\262\n@\310\301\2779b\353!3\372\265?<\241\024\003\335\304\247?\357\235$\237OK\305\277b\275\356\000\221\366\270\277\224\300(9\016Y\302\277|\323\364\331\001\327\276\277\262\273\202eSK\272\277\010\237Z;Y\203\262\277\377\001{\361\352A\321?\'\237\036\3332`\332\277\337)\354\273\205\"\271\277\317F\225\376\261\322\320?\204hu\276\024(\242\277\030\254\233\377\025\201\335?\212K\341\203\317=\320?A\322\303\252#B\211?`N\371\245\270\211\264?h5,_\372\213\300?+=\211\276q\250\355?\\\276`\375\300Q\307\277|\261\335 \306\242c?\376\244\024Sm`\277?L\331\257\\\353\342\301\277WL\031\366\203\323\265?e\022\232\311\334\241\321?\035\3322\246\201\233\316?x;\210\2767]\313?UB\003\363\210\270\252\277\220\245I\010\332\r\303?\215\212\213\345\216\345\266\277\346V)\271\232\247\263\277:\301\006]%\214\325\277\340\262T(\034\213\302\277\302;\320u\247\\\260\277\375\321\242\004\036\024\332?:$R&w\320\261\277\005\"z\010\231\032\323?\317\243=\271\001\372\305?T=\357\177\2556\267\277\206\353jU\277\220\271?\253\232{\243\261Q\302?\365\373Y\207\376\344\322\277\344%\305\3505M\312?\2007\230\336\342\007\250?.niV2W\302\277\376\016E\201>\021\313\277\277\273t\027Q\250\306\277*\025a~\377\312\262?\262\370\013E\323<\300\277\344}\0030\361\211\271\277\345`\025\363\234\302\240?`/^=8\251\320\277\232s\225\223\365@\302\277\215|^\361\324\343\344?\374\275\332r\252\214\263?\261\010\264*x\300\257\277$SO0\255\227\336?\226WS\376ZC\322?m\241u\236\302\233\332\277\002\213\221_\0366\277\277\320S\323\344\030\377\312?\024\370\346\336\223\354|?\200.T\335\247\323\310?/H\237\373\027\255\355?h\314E\370\356A\303?\246(/\343\272\352`?\177\032R\240\252\235\311\277\'[\321\244\034e\303\277s\365c\223\374\210\330?\361y\213\250\005\006\310\277O\014\342fe9\301\277\262M\246\341\306\363\301\277S\2455\037:1\303?\356\003\363\004\200r\320\277\255\224\320#g\335\324\277\0339^\303\004\034\244?\261\243K\341<\372\271\277\nx\200\304\002!\314?\003,M\245\372i\331\277X\203A\343\323m\335?\242\322\210\231}\036\243\277*\303\033F\377\323\316?\257x\013\240\357Y\300\277\331\0060]o8\324\277\n\004K\277\216\t\325\277\227Q\217\341o\203\240?\n\205\0108\204\252\306\277\033\273(\240\247\006\260\277Xx4a=&\340?\374\034\037-\316X\345?"
      }
    }
  }
}
node {
  name: "normalize_element/component_12"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\340\275@\234\311\357\327?\366\256\244\2115d\303?}\210\025\207\226i\306?4F-\305<\310\275?\342\007B\r:|\265\277{poe&\244\307?\330Y\200\370\361~\260\277\346q{\366\032\212\262?\354_\243\366lg\260?\213\375\266>\344\341\250\277\350\200\345\207\230\262\226?\350\275\265<\244R\261?\352y7\026\024\006\257\277\353\324\t&\006\232\264\277\361\274\204\245\342H\227?\314\241\373(\331 \302\277T<\r\234\\!\267?!1j\214\020\375\270?!w\021\246(\027\313?\202\0039\254\231J\273\277K\204\001\334\020\t}\277\374&\342\347\236\371\262?c\3618\230\217\234\273?\022\356\n\207\"\000\237?0}Th\305\334\216\277\2266\262\261f\362j\277@Z\357y\366\303\302?\375L\275n\021\030\266?\271Za\331P\332\307?\242\023|\262\346\360\260?N\343j\246s,\316?\250>\317 \267\277\257?lW\256\330\333=\263?\346\375\025\270\220\325\226?`w\272\363\304s\244?x6S=s\270\250?\365\034\337~\303\273\215?\211\366\210\003\256L\267?\302\337\016Xb3\301?2I\270\322cB\264\277\203J\340\377\\\356\273?\275\021\345$\367\350\276\277\223L\3633\232\001\302?\360\256>\024\210{}\277\\\361\303\367\264y\300\277\2657\370\302d\252\331?\231~\177\006x+\223?\023\350\033\352\332\213\262?\255\202\336<Q\351\310?\010\240\346\036\361\257\304?\273\270\215\006\360\026\301\277\316f\037u\205\210\320?`\350\251\277rE\230?\345>\324\336)\342\217\277,\260b\031d\220\210\277\027No\322vD\224?0\350\262\010-:\205\277\\O[\300W\366\326?\025\301b\201m\314\274\277\303n\022b\262\341\265?C`\010\3406\270\216?V\252\331=XJ\262?\026\206\351\367\324\034\272?\033\303R\0233\261\326?\t\317e\031\313\274\237\277N*;yh\n\300?\346\327\341x\326\037\231?\3304\010\326\345R\275\277\262m\334X\014\373\232?\261A\262\302%\256\263?\213\030\2704eD\260?\266\372Ed\263~\250\277\001\34615\3172\276?\r\362\202\241qU\272?>\317\256a\327\r\245?\022>\010\277\334@\313?\305\317\373\326\271/\230\277\333\022\204\356<8\202?\200\367\310\305\234\220\270?)\334<\037\257Q\252?\243\311\244\no$\307?\201v\352>\276\014\265\277\265m\326\350\356\235\311?\336nec\007\220\251?7\212\017`O\303\270?\032\035-Z\302R\300\277\003\367\321\343\326(\261?\223X\261;F9e?\370Z\017\340\246\237\266?\277\323\350\376\177\326\253\277\350F\036\251:\273\276\277z\3255 cj\232?\373\344\322?[\343\250\277\200\003A\035\342a\273?\266`\334\037\205q\253?\226>\232\010 Wh?\033\305j\332b\n\304?T:\362e\275\357k\277\373\251\226\031\333\220\311?\215\314\315~w\007\253\277\240\002\305gi\251\221?.\010g#W\362p?z@\023@\265j\272?d{F\205^}\321?\334^!_\201i\263\277\275^\263\277`\365\225?q\274ml\227\262\243?\n\315\340\265l)\300\277\374\235\365Bd\005\273\277\346~^#\017e\324?\321\223\353\323\025_\215\277\220\362Y\277\025\340\330?%\242\203!\267\316\260\277Z\210>\2729\336\202?tD|/\327\005\263?\333\013\324{\215Q\322?\335\370f\3357%\305?$\323\241\323\363\356\322?\035\221\020a\323\265\302\277Q\025\360\276l3\264?\347\225\241\340\030\270\272\277\220\000\250\301\270\304\302?\202\307\032\242\310\342\260?\352\331\203{+3\261\2776\211\346\246r\377\330?\325\313\025\374;}\246?\323\231\372\307\342\001\232?\006S\033<\026R\256?\3553\3026=\203\247?\346\362\325DUB\325?q[\031\\\214\344\273?s\036\343\3046\255\304\277yy\266\036\360\006\272?\013\244\233/\274\263\244\277\013\211(\344R\256\266?\345ja\237\313\227\244?r\327\032c\212\346w\277(\240G\224\017\244\275\277>\307\252\265\356\356\301?\246\371\370\276\227F\222\277WL\370\347\232\260\307?b\326\213\241\234hw\277*\264\244\212\177+\253?\035\367\030r\215K\262?{\244^C\262x\270\277\352`\346\003N+\241?\233\010\234\036t\006\277?\273^\036[du\216\277\301\343\231\2374\267\274?\302\242\321\006(Y\221\277\0231_=r\224\267\277@\241\"w\246\n\260?\014q\n\375\334h\256\277l\206\310\247\317\247\305?x\242\252]\241|\246\277xC\032\0258\331\274\2773\227\247\265a\373\303?2|~\367\022S\265\277\373cn\177\255\231\273\277\357\374&=\241\221\300?\2325%\027k\321\260\277\346n\235\240\311U\304?\3349\244\203\273\324\241\277\314\310j\004,\003\277?8\367\\H\265\277\227\277\260\353Q\227\020\034\304?\201\227\0316\312\372\310?\216\342\177\237/\305\300\277<]\0061\nay\277\267\375~sw\204\273?\215\031\227`\'+\322?$\255\257\260\013\377\204\277\2652\206\336\207(\263\277q\335\336\177uf\306?\025\201\373K\234\246\320?\341\223\370#\337\201\251?\346\001\3218y6\222\2774\345\371\302\032\235\300?\005\315|A\352\372\232\277\235\251\306\001\252n\275\277X\354\001\203<l\247?\310 \034X3\327\271?\225\315$\003\243?\331?]\027\237~\'\230\245\277R\240h\201\352]\265\277\302\233\332\276\354\303\275?\372\360\352$t\372\270?\274\242\245<\004\037\302\277\276\315,S\335m\330?\221\262\345_B:\263\277Nu\022[\213`\277\277!Q\221\330(\312\310?g\202\346\025}u\211\277+\271/\014\375\270\250\2771\333F\352\332j\263\277^\234\031y0\224\270?{Y\311}ah\314?\276K\360 R\340\232?\200|l?\327\306\235\277\027\207mj$2\306?\030\262\333\343\\\365\254\277\200\275>JWv\270?\367\331\022\003n\'\325?\271\007[\313\350p\273?o\224\013\201\233F\276\277\200b\253\236\250y\255\277OW\373dZ\325\301?3\366\312a\234d\246\2774hdg<\327h?\364g\303\212\350\021\246?Cn\312\201\014\320f\2778K,\235\3152\327?\351\035v\370\316\334\253?R\021\341>\366#\305?\266\023\241\350\354\252\307?\341\377\267\'\202\027\274?\227\ndU\010\324\261?\377k\355;\2168o\277\321\031 \352\241*\242?Q\204\256&J\240c\277\206K;\363zI\270?\253\265\315\3401\264\300?\361Ss\276z\n\261\277\n\334\025U\032\214\265\277\370\227m?\312\234\250\277\253\t?\304H\347\325?\313\037_\204!Y\253\277\360\350wH\316\025\302\277\004\310G\300%V\252?A\364 \024\306\334\246\277\373\206\323\223CU\323?3\205\'$4\252\225\277\325\030\276\317\002\376\265?S\261\316\204h\245\306?\352p\201\277\360.\265?\366\225\007\351)r\271?)\357>\"\001\376\300?\347\315\372\367\215m\266\277\370N\222\317\247e\277?ik\351v\233\334\260\277\276\225\272\236\307\254\301?\220\316+d\317\032\261\277\306@\2151f\001\276?e\204\345?\014\303\273?\207\266\020\242\204\262\273?\000\000\000\000\000\000\000\000\211\326\006\376\".\271?\234,Z%\375b\243\277\375\351\365\335c\037\274?87\\\232\021\224\320?\212Q\017\205Z\311\212?\347A0\375\001\305\263\277x\\\330\303,\356\245\277\276\333\335\177;;\307\277k\205D5\200\222\301?_\324\315I\030\233\303?u\004\347\301\032\275\272?R\257\264\274\r\222\257\277q\257\314[u\035\307?F\304\336\325\274t\302?\260\000\246\014\034\320\303?s\354\352\237\361N\327?.\316\265\273ID\325?8\2565JMq\302\277\243`\005y\357\010\234?C\223\243\204\211T\307?\215\320\210\377_h\234\277\357\332\020\251\212%\254\277\237\331\"\'\033\250\301\277\301P\352?)b\327?\250\211U\273\332\025\236?\254-\206\274/x\257\277Y\333`\035\321\201\224\277pZ\225\351<\317\240?\'\262\215z\263\306\227?\331A\302\203\2503\326?ai\241\343\361T\251?\252\263\234|a\317\260\277d?\322z\324l\231\277A\233\177h\244\255\265?\365Uf\010\317\235\306\277+;\222\005+\322\264\277\240\000\304<\257\241\272?\027\247\020~\230\363\265?\311k-\345\337\233\322?\330C^\203|X\315?lO\034\202\333A\301\277m\036\335\301\265\376\251?\023U\t`\024\316\303?\205\2747\351*\233\312?NVV\344!\335\322?3)\226?\005\336\271?X\rxO\324\210\273?\005\242\253\235\366\316\303?\312\351*^\336|\271\277}\252\022~\014\312\270?2\340e\364N\006Q\277\275\354\256\036\275\202\312\277\305&*\0029\264\271?z\306[:(\331\301?\377[\250\200\244\035\246\277\276j\247\336\001;\202\277|v\363fj\230u\277\304\273ua\030\256\327?\301\";F\344\201\257?\304z\243V\230\276\277?G\354i@\352\232\267?\002\025\247\2755n\301?\375s\352-\2224\260?z\037\276\201\006\361\261?\261r\242<w\253\264\277\016LM\006pH\261\277\006\347\351\342\212\031\246\277\\\230\304\332\221J\212?\304d+\341i/\252\277\264p\037\332C\322\241?\316\351Y\340\220\345s?\027>\227\263\273c\200\2778sf\300\373\330\253\277\236\310\274#\235`\247\277\017\342V\203(F\267?\306b6)N\263\201?\370fapI\345\252\277\240l\251\007\365\302\264?\257(\343\347\330\244\275?I\351vONO\204\277\201\274\r 2\333\323?c\013 \000a\365\270\277\322\200\3224Na\206\277\035\202\364^\306\336\315??j\377B\020\231\222\277N\032\325\257\225L\221\277\356M>\003\013\334\256\277\365F\316>fR\260\277I\006\353\305q\334\301?\266o\346>\326_\313?\273\205\234a\344\021\226\277I\026I\036\374\002\343?p\241\341\203\215\241\325?\367Z\257mz\345\265\277Ar|\376\305\375\267?\322\217\322\341+\376\256?xy\235\201O\373\272?yp\361\234\237u\220?\006\023^\006\214C\303\277\t\"\305\337z=\260?c\213\356j\003\301\302\277<\032\306^\241o\214\277|\350i]\366-\261?\243\210Q\177\331\027z\277\304\010\002\340\2574\267\277U\t?\006e\371\301?\355\223_\343S0\253?\226\204\2700\332\374\242?+\"\007H\333\310\232\277\341\326\366\331u-\266?:=\255\252\260\374\301?&Y\301N5\243\262\277\036\271\240\204\272\304\232\277.\350\234#\033]\322?\325\370\371\255\245\231\261?\253\034 \271\261\260\262?\031~G\277Cr\251?\177un=\267\216\260?\r\000\260\225+\227\311?b|=\004\372\351\303\277\202E\253~\230\311\256?\226\360!4\304\251\263?\356\034j\336\350\230\210?8UW;\023e\230\277\222}\353\0364\026\327?\257\206T\351\330U\201\277QUx\002\'\374v?[\300\"\3047B\232?\275\\\233\3700\234\276\277\351\257\241\345\212\234\241\277\323v~\027\327t\236?iS\330\271\'\027\267?\237\3361\341<A\244?\221Tt^B\211\270?HI\325\227!\345\300?J\340 kW2\266? \317\323%\210_\326?W\246]!\263\200s\277\267\247\026\327\031[\305\277\006\230\\99K\261?\3422\331\005\244\371\301?;\355\235\217:S\263??D\342\237\3134\242?\242\366\002\203\t{\231?\251\010`\230\206@\301?\261c+\201\367\002\272?M\211\342]G?\320?\307\220\255x4\037\301\277\0031\277\211\327\253\256?Y+\226\377\3516\241\277\351.\230\336O\244\247\277\361RO\276W\257\231\277\250)U\344\010\300\325?}\307\327;/W\317?\005\024,\006\3665\274\277\200v\362\257\006\244\261?\245`2\372v7\317?.\377^`\017S\261?\201\365,\306\310\253\313?Y\265\265\317t@\320\277E[V\340\262\252\262\277\221\316?H\266\275\232\277\263\230\226`\212U\264\277\311|\027!\002/\327?\377\337\277\026G\'\300\277\016\n14*\262\206\277\002\260p@zk}?z\002\233R\342c\247?\340\254\230|y\"\261\277\232\210mA\245@\324?\0049\327\031\247m\220?\222\3076\035\277\177\324?u\351\326\240l \270\277)\203\027;\351\226\274?\320\022\236\257\335f\267?\361\346\272:\021N\327?:\022\334\006\275\320\300?\235\002^;X\314\230?a\\`E\374y\301?\223\303\217\200\275\001\274?\372\264\0167u\330\311\277\024\275c\343\207k\242\277\236\274\002\260\205I\270?7\002\257\236\254\373\262?f\260\024\217\254x\274?\222:CiVS\275?\033\032\211\257\372L\266\277R\n_\0042\340\331?\236y\030\336\325@\320?\024\036\331\001|\\\232\277\342#g\003\3369\253?t(\321\377c\002\237?W\340\rd\233&\251\277\206\326SC\3149\244?7L\270\200e\337\243?\033d\365\273n\031\265?\035L\365*SH\266?\350\244,\200\177\003\250?$w;o!\227\261?\022\247\254\t\026\305\305?k\234R\000\272\237\272\277\325)\207\375;\356\326?\236\340|\231\021\246\222?\354F\006Vau\265?\034hx\222\370\005\273?E\032\252\234\325\206\272?\321\010\221g\362\250\320?@\276c\374$\014\272?-n\033~\242/\177\277\021\244\224\010;b\246?\326Q\354\240\306H\222\277F0\001\004\033\363\222?\357\321U\231\255\345\265\277\320\316\355N\014\003\275?\206\256\220.@\037\204\277\251\273x`|\250\266?8W \274n\370\260?\'\366\2570m\315\252\277p\2540\"\366.\325?V\310\205\230\205U\306\277\270:\257\232\257\336\233?u\336k\255\324\330\325?\317\177\264\244H\343\304?\351wd#E\241\227\277\370\321\333e\340\374\261?\266\367g\016b\312\264?\263#z\276\013\200\265?\2324W\027\001_\271\277\035\\\327\273\201\372\256?\316\245\2568y\352\201?\346\267,\202\246\365t\277\'\356\030!\263\350\270\277[\3220\000}\360\204\277b\345\310\261\222\342\265?5\250hrR\024\262?\322\270\344v7h\272\277y\323%\312{(\306?3\223\342\302\005I\330?\23700D\261\211\300?\325\205\016p\367(\304?w\264\305\303\350\252\216\277\233\233\343\232\n\n\300\277\272\010\235!f\300\271?9G\231\344\262\027\327?\253\311\261\307\324\365\237\277\207\"\332\027\233\031\235\27764m\030h\353\303?\364\261\324\335\351\214\233\277\030\274\236\236-\326\253?/\225\223]$E\256?\356\366[f\321n\230\277/\ta\177#K\276?\372\222\273?F\217\257\277\350 \340\367\0144\301\277\245\t%\335\340\325\302?\023\343\210\367\024\347\263?\217H\350\"\026\025\246?\313\215\262\026P\274{\277\035\215\253\340\243=\275?\027\205\227\277\306\236\260?\206\324\345{\343\367\224?H\357\327A~f\241\277\340\325\216\274U\322\243\277\337\016\261\032{\221\221\277a\234\307z\315\037\265\277\323\314j\354\330)\265?\236\205\235_\035\222\262?\032\336\254\301\373*\277?\220\006\001C\240D\275?\"_t?\310.\304?\343\247\275\375\303\332\245?\231\371\217\376\367\335\261\277\237\362\340\325\017\275\304?pb\250\300R(\212?Z\306~\375\255\360\276?\261\265)\344kK\325?d.\374\"\231\274\264?\312g\201\217$\265\264?X\244k!&\263\256\277\\1\n\037\235\374\243?H2\355\223\212c\264\277\250\n\231m\237<\273\277\246\020#\337\000\016\262?\215\212\213\345\216\345\252?\320}9\263]\241\265?L\323\261\224v\264\203\277\177h\277\335m1\177?@\355\001\004\275\001\306?\017\216\202uVj\312\277p\320^}<\264\322?\221\3708z\314\245\226?\030v{\275\271G\324?\017\224>!\371\322\260?\377\3665\305\365\205\226?\315Oy\215\300\314\263?\024B\007]\302\241\241?\217\347\257g:\001\261?\324\267\023\277>G\265?\364\342\202;iD\262?tq#~(\305\260?\206s\233\335K\373\251\277\376Af_`\363}?dt\316\274\rK\246?\357\362\271\202\211\031\253\277\004Q\343\035a\312\255\277\373}\030\204f\225\326?*I\270?\000q\207?3\371\013\342\250\001\310?R\374\243e`\301\230\277\010\222\275\276\313\016r\277 \335\276\375o[\301\277\016\31638B\355\301\277 \356M\200\037\235\320?hT\367\000\221\t\244?a\304i\201p\027\231\277\037\342A\240\343\375u?\003k\213!\357\013\254\277\262{*[\257\337\203?\350\\\376\001\336\233\304?\217\341\363\273\227\230\257\277\255g\335F\320\206\220\277\320\355lb]\351\243?)\246\361\\\366#\233?W\001c\"J \324?\265\006O\036\237[\235\277\022\303\314F\000\232\225\277\302m\235\032\220\006\225?]\235$\334\262\343\211?P_d<)\027\253?\030\2306\230]b\311\277\364\035W~tE\247?o\345}\000xb\227?Vd\007\244\343\273\227?\027\335r\334\306\262\325?q\221v\001\001\373\260\277R\261\326\365\260\274\230?<\372\224\240\025\321\270?\351\350\r?\214\014v\277\177\336\361y\007p\305?\253\233\244\\\216\225\324?\216\247\212N;!\321?\357\005\2400\254\013\231?\342\032#\002\243\205\330?,\346\352>5\233\246?i\\0\237In\266?\344\213\005\244NW\253?/\213&\243\014\315\324?\354\242\307s\246\236\266?1G\250||\000\301\277\335e\037a\241\241\250?\232\003\251\271\201\247\320\277\006\343\226E\027\212\261\277\233E\336(hI\274?)\340\350tjx\234?\240\343;\342\244\361\244?\367\342\201\204\005P\232?\260\3664\276o\267M\277?~\377~\342\024\253?\006\352*c\2276\251?\312\036><\215\254\260\27783O\255\004kQ\277YRj\006#\274\300\277\236\374H\327mL\301?\321^; \"\030\271?DG\027@\235\227\261\277@YY$\353E\234\277\321\003\037\203\025\247\271\277\234\264\231\330\266\007\306\277\200\200\224\\\356a\227?\017\343\177<\005\n\301?\322K1\254\207\324\275?\024\020#\034d\246\221\277(W\307\335_\276\253?\266bz \204\020\270?&\333ed5\002\320?\331\356\014\275?\212\240\277\037\207hD\316\232\202?\2306\230]b\362\274?x\275\260\014\334G\227?u\317\250c\017\231\244?\365\301\317\013\271J\264?\221+\365,\010\345\261\277.&O\274w\022\320?\'c&\230\004\204\233\277Bt\000\336R\0257?\032\327\205@\2528\265?_\313\320\035i\225\330?\000\335\237\244#\255\300\277\215\245\037?\341\215\303\277\3621\246\000\033\207\246?A9\300\202\352\325\263?\033\252\246G\372\204\221\277\211\217}\000\272~\256\277C\256\324\263 \224\217?\r\337%\345\254W\310\277\231\335DA\261\224\265?4\250\r\271\337\302\311?f|\251\351\304/\266?U\376\357g\374\353\273?\332E}\004\221T\223?z\376Q\'\342\245\300\277\206\233\245\307c\304\255\277dH*`\366C\271?\261\234J\'\216\023\300?c3\307\277\275\325\252?\263\200d\225-\355\276?Z{#\343\346\216\275?h\316\331\206z\217\245\277U\001\013!f}\245?\217\220? \3516\322?\026\206\315\242\245b\240\277\214\266\021\354Kx\271?ym>\307\252\265\267\277&\235P\241\035\344\301?\227\275S\236\314\001\323?$\335\205\234\255\362\312\277\021\n\276\'\336\032\271\277q\265%\335\\\035\220\277Vw9\340K\305\272\277.\277\035\362\3408\222\277\304\340\355\203$\232\243?\304\2738\376\377\220\253?\0075\2157C;\311?\276(\273E\322\001\222\277R\250\327\177\267\246k?\036\033\036N\242V\275?\261\242\212\013\325\007\270?w\025R~R\355\302?\310\007=\233U_\325?\205\302\327?\236I\244?A\243\317\242\322c\301?,\367<^\314\277\320\277H6\013?.-\221?!\336!b\326\215\325?\270->\303\243f\325?1\006\367\177\345s\305?Sq\360@\365\363\275?\331\247N\315\006\025\263\277\262\211\243\335\256\270\210?y\331\261<\0104\230\277\246H\031\314\272\332\305\277S\361V\310\"\356\300?\272k\t\371\240g\322?\014\247\343i\255\363\211?\030\211\323\300\304\\\243?M\306\010\023\014\010\225\277\2313\323\244\261\t\324?\322\202$\247\007\351\227\277G\214\340w\272\220\313\277F$\351\036\002\\\300?\266\377\274\001Ji\257\2774{\250\206`I\304\277\314\016\320\001rW\261\277\362e\2613\326\025k\277\257;\243\316X\013\261\277\337\215\344vXv\243\277Jf\004:\344}\220\277;\202\036\341\351\322\227\277)zx\200;\021\253?\361\211m94\270\307\277^f\032E\275}\307?\362Ve\370\262a\274\277M\023\266\237\214q\311\277Mkug]\013\221\277o[B\333\275\036\300?\232\223\274\337\r\316\321\277\033\255\027\001\035\177\277?S\250K\037\352\331\242\2779\342\332\232\276\350\326?\305\310\324Uh\275\306?\252\237\324\352\355\307\272?\355\256\375\256\031*\260?\202\301\211v\202\356\214\277h7\341\373n<\320?u\357\331!\233w\325?\010\201\004\341\344`\271?\312\024\217e\243n\233?l\310\337\300[U\233?\237{jP\217\310\260\277\233\334\326\263s\334\260\277\232\204\335@\031\224\265\277\310H\017\246\325N\270?\263C\374\303\226\036\205?c~\260\204\234\224\266\277i\253l\001\234<\265\277\177\001\367\033qq\300?\3561w~h\036\246?\347s\254Z\353\356\267?\254<\036\206\230C\277?\341\020!\343\216\215\227?\354FW\235`\365\255\277\300\203U\253e!\310\277\030\214\351\300t\205\233?m\002\251\240\344\206\273?\273{\302\n\236\337\276\277\217OQ\3009\315\265?\200\364\340\375\327\n\205\277\260\375\314o\204\204\205?\"\302H\372w\'\234\277\230\336.\226J\301x?N\\\361\201\333\342\321?\237\033?\371`\276\311?\210p\304A\337i\306?"
      }
    }
  }
}
node {
  name: "normalize_element/component_13"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "xb\377\301\263\000f?\033\332\235A\205\233\323\277)\261\214\211\244H\305\277\264\257<HO\221\334?\t\016\27315\360\263?O\014$\2037\277\323\277Dq\001G\206\305\305?X\017\014\336_\326\325?\304s\235\343/o\327?\202\300\363 wp\323?uM\222\370&\027\310\277\247?\332\2039\017\330\277\352\300\203\260dX\331\277\0348\261\321\203\314\312?_\365\374@$\211\324\277Z\202\214\200\nG\321?\213|,\267\223\014\301\277#zcR\215\250\335\277\236.y\246\021\337\225?\274/>7\372\271\306?3\323j\006\300\021\313?\246\221\\\037Rc\331\277\341\371\373{\337\256\324\277\220`O\340B\003\336?7G\220\340\203\344g\277\225]\252~\027I\202\277\224\\\017pRb\336\277\305I\212]\025\007\333?8\322\276^\006\210\325\277\376\226\245B\341X\332?\'\211\200\236a\205\332?\264.\240\335B\323\326\277h\237}\233\264\337\327?~\212\343\300\253e\331\277rx\030\3058\240\327\277\312\325\331\332\014\001\304?47\0314x\210\272?\342\274I\035.\003\335?\227\223\016\336p\202\311\277\226\201\271\314\237\245\325?\t\223\230V\371\324\324\277\022-\036\203\272\355\314?E\324\206\273ax\332?]C\272\351\340*\304\277\260;\233]\020t\303?Y\311\001\232\214\323\302?\275\206\205\377\031J\302\277E\001\r\374\311\224\310?Q\252u\311\325\033\316\277\261\251Nbk\021\312\277(\337d\002\033#\325\2775\2079{F\246\333\277J\351>\245\357Z\322?\201\000\000\235\325D\304?\365A;L\240-\311?\314<=\337\344\361\327?\350{6@\243\323\331?S8\272\376\350\221\220\277\262]\251\200\336\310\316?\\b]\303\251\"\326\277\033\340z\373\020\'\327?\377\271\303\201\353\245\331\277\315\272\363\202W\344\321\27736]\027\312\376\203?r\\:\244 \221\316?\nF\312\273\217H\331\277n\242u\330me\313?\263\032\236\240E]\320?\007\235J\345q\201\330\277\246\315\376a\307V\323?@\010TA=d\326\277\371\241o^\336\224\340?\301X\337\300\344\006\323\277\365\3613\242r\233\336?x\355\024\243\225\230\327?qp\216\337\200\273\330\277\374Vg\214A\355\246?\363\251\010\334_\342\317\277\200\302\217 K\325\311?\010\031m\372Xf\326?\035v\000@%\231\332\277\234\244\371cZ[\321?Q]\nY\'x\314\277|3\377\"G>\317?IH\244m\374\t\324\277!\361\300:m\021\321?\362\271,\211`\332\227\277(\317ac\003N\335?\027\257\303\342\201\222\330\277\020v\212U\203\260\325\277I\244\351\303\345>\317?\350\367\375\233\027g\330\277Q\016\013Z\355\206\325?\343w\211\240 g\334?T)\201\202\2078A\277R\237?\310\r\232\325\277\306\217\255>\211\025\324?^\002\023_\275\357\213?-\300\014\0004N\335?\245-\215\343\260\311\312?\200\223\226_@\256\340?\022\233\227\334\213\034\322?L\213\0333`\373\263?\",\007\323`\265z?_\031\351\177\230\210\326\277\350\377\260\000\001\306\326?o-\223\341x>\327\277\366,\245\272\302\263\320?\371\240g\263\352\363\324?\366\2169  \227\254\277B\241T\261\347!\314?\311\345\206ykm\221?w\352>\276\214{\327\277\225k#\001\027\"\323\277M\016D\273\257\257\326\277\266k\000>\221\312\333\277w\030\254\233\377\225\325?\270r\233\025\366Y\343?l\020A0\242H\303?\225}\231 \321a\333\277\177~\010?\253\253\247?\343\303.\202\255\357\323?\305AQ\277\\\242\246\277\306\224\376\024}t\320?,\360}\300\357\036\231?0,=\242[\022\323\277N\205\323\335\320\257\330\277\330\360\323<pc\332\277\036/I\n\321\306\323?\025n\277\235\300K\327\277\001\234\244\032r\303\326?{a\031\270\217\236\315?\215\360\271\275\353\006\252\277om\372\026J\344\306?cnJ\273\311\226\322?W\000\327>\262s\331\277\025\270\310\177yo\326\277IG\234\302\010\351\314?\005\314\360]R\216\320\277\367\316\005\201\327\037\323?6\027\250ZE^\322\277\241\225\305\016t~\326\277\000\306u\204\272e\314?\001\017\363\202\333\234\326\277\260=\263$@\315\320?\006\263\021\241tV\330\277\206Tr\312\263\375\315\277\233\275\\Y\334^\315?\0062\226DQ{\321\277\227E8\230\023U\311?\177\337;A\315V\330\277\342-%\005\365\261\325\277c\276rs\340\213\320?\261\377\370\032\233\300\320\2779XIuK\274\310?[5\031\237\023\014\314?\271-\333\230\350\275\321?\2639\326\336\n\025\322?\006\236Z\001\256\371\313?m\265^>\037\206\333?7\237\337\234\266k\320?\305\332)g9\232\317\277)fR}\306\211\323\277\331\316\030b\314\310\321\277X$\0367\231D\300\277_sX+$\252\333?\\ \275\270\277@\307\277V\266\017y\313U\315?\346\247\202\233\3267\330\277\357 \321_C\213\321?^\265\261`\202\035\224\277/\365\230\355\257\303\311?_/\250\312R\306\315?IB*\336+\'\334?\340\317\266\273\203\257\334?P\016n\204\250/\331\277\033\36227\235l\304?\203\264\357\037E|\305?By\037Gs\344\310?Q\017U!\263\355\332\277#Q&=%\n\333?\220%\377\325\333M\312?\243\306\010\321\3575\255?\334\342\361\037\230\304\312?\201\026\\\275\324Y\327?\326\255\236\223\336\267\326\277\313\347&{\225\006\333\277\213\333\252\034AG\300?\337%1;\235\301\235?\r\037K\376\253\267\325?niw@\300\367\301?\223]\243\3042&\307?*\260\235{Q\263\316?\34463]\374k\320?So\323\300\0132\330\277J\365\370\030\007\362\305?\333\377\235@\032\006\334?\212!\367|\346O\325?I\223\234]\010\303\332?\333\260\\%\016O\323?w]*\374:l\311?N;\343\230\270\027\313?\357\027\312\301 t\222\277\2458\375\217\002\372\305?\315\377P\325\251\227\320?\'2\\\345U\022\235?\013\216\232\310/0\314?!\322\312\030z\237\327?1GM\303\t/\324?\260rG\203\004Z\262?\000\356\211\340E\000\313?\013\322;\376\323Y\246?^\227\206\206jo\332\277\356\3631\202:\243\314\277T\274\035#\321r\331?\027\324\267\314\351\262\301?\236\251!\273\034\300\324?\234\371\0279\362\335\306?\222\311N\344\356\030\315?\003}\277$\327\305\325\277 tul\251\250\324?\333\356q\350%\255\272?\255\272\263\033\"S\327?\217\016z\374\3774\305?F9\240\276\310x\325?\366\222\267=\360\032\224?\267\370\251d\337\231\304?\231\231>\340&\310\305?[r&\2677\211\320\277\222%R\036\006\210\325?\355 \244\336\273\034\252\277\3509;|F \323?\230\203f\370\313\376\316\277\214\365\354=\205q\330\277\007\316:_\303\276\330\277\265\277\026h5,\313?q\007EN\272\210\334\277\352\330Z\302N/\322?\025\037~\202\264\024\325?\356\211\"bR\025\315?c^G\034\262\001\327\277\320E\205\342u\032\320?\020\376\013%\017\033\324?\0269\237\225\017\234\323?\214\251\252\206\263\021\331?j\356\021\377\3520\342?\232{H\370\336\337\317\277\002\256T\345\265\261\321?\210E\261\201\031\370\330\277\3019\300\037\300\032\246\277\200t\271\332\355\247\325?\203\001\337\310\227+\324?\313a\234dP\322\320?\226\312\241f\304\\\317?\327f\245A\270\237\331\277\n\317\014a\203%\273?\374\032I\202p\205\334?B\351\013!\347\375\323?\363\2240.\260\242\326?\313\217K^\225\262\323?\306s2H,o\316\277F\353\343\203P\365j\277K\334\002\300\263h\242?\366\336kJ\252\235\277?\220\244\203y\270\262\315\277\"\016\225#\275\330\242?V\013\r@z\365\303?\365\360\351\332\2544\314?\noj\373\262\217\320?\"\023\213@>\346\220\277\222*@\312>\376\316?7\362\'\307\360\032\307?\327\243.!8\221\262?2*>x\314D\310?\233\257/e\"]\330?\274)\2746\341\177\304?}\334\247x\226\377\273?E>\371\005\005\357\320?\211\3724Yis\315\277N\235G\305\377\035\332?\216\374\250#\323c\320?kZR\203\243\303\314?QE\226q\370\311\324\2771\265B\3446\222\326\277\026\270\212\367;\212^?b\374\321\303\022\007\252?\271?\315\177\3761\313?\373y2\203!@\323\277\0259\206\370n\220\277?\3627\353\235\033\244\335?\262R\326\251\321/\240\277f\031\240<E\361\314?]\266\177`\354\217\264?\377\304\320\003\202-\331\277\375\265\006\000\330\312\320?\t\217\323c\235\242\333\277\036\330u\230\304\223\313?T\250\217<\347Y\323?\215\375\033j\312\204\320?l\'\306\t~a\313\277\365\314\375\23385\317?<\373gY9\254\312?\2768\230\035GK\250?\202Mc\234;\321\234?y\212E\241\237\010\275?\301@)\275\343R\314?\021\004#\212$\325\326\277\373j\232\271\270\364\317?\241n\271]\334\304\326\277\033P\312\377?)\331\277\242\036\252Bf[\332?\3055\343\331\212\"\326?P)\300\301(\022\326?\246\220u\202G%\325?i\335i\337\232C\327?L\301\\\203\245\227\337?zQ\273_\005\370\305?31\341\300y\253\310?\353+\233{@\207\325\277r\330\340\361\253A\266?\371l\333\377\031\010\327?)my\376\027\374\324?\371\245\331\227\307\365\324?\373\341\316\"gc\331\277\024>\235#\331@\327?\325iQ]\310\274\311?\356\013\364A\371xu\277\226;\267\371\024:\314?\243\205x\342A\314\334?7@\335\376d%\320?\234/\233\245\t\200\335\277f\277\315f\376\346\310?o\347\014\326I\307\325\277\325\344\255\343\215\206\331\277\211\357\243\236.\240\312\277(\252+]\311\247\273?\203\034\316\333\\\245\316?\200\2374~(k\276?\357\325\243}g\014\231?K\207V@\004\311\320?\220\346<!C\340\323\277\363\025\213|\352\232\321\277\310\237\003&\313$\310\277\250\363\362\205\332\000\327\277}\334\310\206\177\242\313??\013\225\301I\201\315?}\334\247x\226\177\315?;%\217\303:7\246?|\233\233\302\214\341\324?IH\305{\345\254\272?b]\344\267K\217\316?B\306\355\341\3340\327?\260{\206\313\205\245\321?^\344\022\005\0026\325?\220RC\372q$\304?:\t\337\332\rK\320\277\226B\336zfl\321\277\274\207\322~n\337\276?\275\030o\320\003D\321?]v\234c\277u\244\277\260,\342\205\276E\350\277/\233)B$\"\325?\227\245\204\375*\002\330\277\335n\223\233\3622\327?\311\001\036\305\367M\336?\263\316\235\005F\203\315?\216Y8A\202\177\307?e\365\365\031\243\267\261\277\352\332\213&\037\324\307?\375\371tD\327h\312?\363/Q\326\322P\253?\300(Z\034BS\275?h\373\241\343\264q\334\277G\367\275\227\014\021\325?\032\032.\366\207{\313?\325\"\242\230\274\201\326?\2615\327@%t\302?\373\306|\345\346\300\326\2773\210\230\335V$\257?\275L\373\203\324\257\327?Wj\315\301\371\225\341\277\\\235\013?\022\330\262?\325\310\225\027\354\310\310?\020\325J\327\002\261\314?@\202f\000=\307\310?v\302\256\232\245l\315?B\246)\300\177\214\332\277<U\327\004\305M\327\277$#N\304\256\357\326\277N\334C%\"\372\325?\372\350y\334\\!\332?<q\020\337O.\305??\234\321\240\262+\327?\342?8\372\363H\324\277\036\351F7F[\314?`\237\255Ag\253\324?\214TR\006\222\240\317?kI\005\035\306G\324?L\004\351\343S`\202\2775\203t\210\352s\263?.\016\272\306_A\305?\010\215\242\377\314}\327\277\030j\010\037._\242\277\312E\347\302i\275\310?\373\356\322]D!\337?\273:2\034\360\365\306?\201|d\316\216/\320?\255N\316P\334\361\324?\321y\215]\242z\272?\344\3725a\024g\241?\255\301\230\200\241\277\303?KU\2407\221p\305?\010\n\366>\331\275\311?\244v\330\247\220\351\315?\n\367\312\274U\327\322?\177\253LcA\202\275?\224\325\031\204^$\325?\265N\243c\343\316\247\277;\221\273c\014\307\321?C%\t\035\317\302\334?\252\306\\c\341\265\303?\247\371\276\312\356AP?^W@_\202l\320?\244\242\230Y\327*\314?z\356\024\335@\"\321?\005\203\0205v.\330\277T\002A\004EA\323?\0252\333>y\222\326?i\032\024\315\003X\332?\223\037L\345H\302\322?\\*%\272\035\320\314?~\017\311V\270\341\303?\2665}\321yh\327?A\3548\275\014x\245\277\302\204U\345\020\253\242\277{^}~\0200\312?@\034\177\375k\024\322\277=G\344\273\224:\317?0\206\315[\320V\322?c\020\263\362&\032\323?c\'\003\3322\355\202\277\2631e\226\363{\317\277\345\333\026\300\357\272\322?\210\010(\242\231\006\327?\236\377G;\250#\321\277\235?\267\341\301\200\340?\264\275\' 7\315\335?\251;\034K\302\377\206?7\354k\033N\262\332?\255\007\202\266\213\037\325\277:\217\314\033\016h\334?\314(\226[Z\r\310?\213_P]\373-\212\277\376\372\327\250=[\331\277\315,\370#\373V\315?\371$\301e_C\324?\231\000\262\306\217g\311?\211\336wF:\207\273?\257\2427\303\252\r\323?\301\354T\257\021\367\320?\345\303\242\330\300\214\312?\327}\021~\363\254\304?\211\036\337{\013m\322\277\024\365z\336*\033\331?1\311\257\2747\310\256\277\317\006\313\236%\304\277?\r\017H_\224\242\331?\323\224\312\377\327\305\260?\301\330\214\035\236/\331?4\373U\343\031\362\330\277\320\026\306\314\364\001\321?0\006 \377\026\356\342?\236\335\316|\326N\320\277\334r\242\033i\302\307?v\007\251\302<7\321\277\005\370\321\035\202\262\277\277b\252O(\3722\312?\337\206\275\365\006\204\320?\323X\322\274\251\351\311?\224t\346\201<\271\327\277\233\347F`\305\014\341?\365\365[\277\2116\306?\030\036\342\274\2139\315\277\330\266\036A\316T\222\277u \353\251\325\327\331\277\t\r\016@\264 \327\277\307\271s\177\372q\264?\321\244^\001\226\246\313?:r\007^\353\332\330?o\263\272B<\033A\277\377\t\252\0350\325\320\277\3334\266\327\202^\331\277)]\372\227\2442\323?\031\260\303\034-\034\316?\366}8H\210r\327\277\n43\216\354\245\323?\243\301u\336)\021\265?\265\255\301Vd\317\270?\222YA\374\221\334\325?\203?\221a\364`\322?\250\227\316=\332.\333?nX\215\004\236\244\305?\376s\342\274I\235\326?$\364m\240Dt\310?\376K\255R\325\337\325?\204\301\2200g\021\340?\376\267P\001I{\330\2777G\210\270Z#\313?\316Y\227\001\004\377\326?\2071\n\376\216\223\312?\354\310GA\246\353\326?\373\354\035\301\317\260\330\277\241\nE\333\255<\327\277\225f\3638\014f\330?|\322\313 %S\325?\331\016\343\301XW\333?\316%\250#x*\251?\302\304\274\032\342\020\320?D\224\243\2764^\326?O\366\"\034\253\373\301?\356$\"\374\213 \331?\220X\203\336\270\030\250\277\362lEQV\302\326\2773h\317\002@W\331\277\224HG\336\336\032\322?\225g=\000\322\314\322\277\217\256N\245\321\252\301?\270\016\243Z#\206\321?\201=\313\230\'\374\325?\223d%\377\366i\326\277#\272\251yu+\314?&\233aY\037E\313?\026\321#\004\263[\322?\371\342\305\241\002\320\337?\2311\242@\341d\300?\273\022\036\300d[\264?9\300\006#zB\322?C\377\210O\317\365\230?p1\222\177^\037\331\277\223f\177\342\370\210\307?C\342:\240Nt\275?\276\306&\340t^\330\277\224w\202\273\273\347\332\277\031\313\364K\304[\320?\301\200\363\034p\341\322?\200\342\327zL\305\313?c\317\277\331\275G\272?\324\021\372xlt\313?\241W\217=s}\324\277k<\"\360\321\254\330?\376\000\367~\233\254\313?\277\210<\235\271\364\220?\305\336\223\240\"{\274?t\360&\241\357\314\260?\332\\\322\244V\220\324?\300\315\301\267\331\355\300?\253\230\306\006=a\315?\177\347\213{\373\014\312?\307\022Cc\007D\225\277\360\255\376\2765f\332?c34\\\354\017\321?\032~\261\243\343\375\245?\363%L\377/\352\321?\251\036\037\343@\276\323?\237h\211[&?\313\277\374\037\300\037\007\360\213\277\203FU\270\212j\312?\231xQ\005\355\337\325?@.79\370\231\303\277\334z\t\362\014J\207?{fI\200\232\332\312?W.m\233VH\317\277\272\037\2463\346\344\321\277\341/\301\004\311\226\330\277\256\266\244\233\253\203\323?\275\344\177\362w\357\321?\t\014\202\\\034t\274?\304\016[a\2274\336?ba-\343KM\324?\230\004=\016b\353\267?\330\203I\361\361\211\331\277\177\234\027\304\223\337\323\277P\324gA\007\341\320?\273\216\345\033\331.\312?\205\276\211[\344\242\315\2772\342`A*]\267\277\353I\310\237\242Er?\270^.=\365\343\326\277\263\336\373]\320)\263?\n?\243:>\326\327\277\347\267\\\273\274R\312?Z\020\210\337f\324\263?\003\322\306]\3716\221?2\207\213y\251\032\310?\004\203\030\246\276\305\314?K,\337\351\204\006\325\277Ckn\032\025\227\313?\304\372\263\335\014P\324?\356i\034$#k\327?\360:v\253B\336\321\277\221C\'\370d\315\301?f\374\230bP\036\336?\313\032P\312\377?\275?,\023]\233\266\024\307\277\266\316\246\300U \332\277=\347vH\224\352\313?.\204\244hH\211\315?6\300\324\3508+\313?Q\020\341\004K\332\320?t\372Q?5\377\312\277`/^=8i\311?\205\232\230c\266\272\247?\321\003\037\203\025\247\311? %\372\245\023\303\306?\305\030\334\377\225\317\325\277\331Iu\350\221\222\317?\371\003q`j\362\324?\036\032\026\243\2565\320?\304G\037N\273s\330\277\270;\316\341\030Q\325\277o\214\225\177\312D\326?\361\312?D\264\247\323?\277e\251P8\026\270?i\301r!\342\250\323?G\204N!\272\024\327?\014,\364\177\026d\326\277YV\324?\014\235\315\277\242K0\203\316w\316?\252\200\350:n\247\226\277\"\335tpU\376\321?\265\363\242\033\006\230\305?\262Q\316\376\335N\330?\221<\216!+\270\242?Z\300_\'P\037\314?Z\300>\031g\374\310?7,6{\332\300\316?\231\370\376a\246\310\336?\314\375\376b\360\217\314?\325\252Dv1\017\316?\232\243\236p<\300\253?\376U\262)x\006\301?\362\177\201\3771\235\317?n \023\337?\354\341\277\352\205\216_p4\315\277\021\324\337\001T\'\315\277&\036\367}\235s\242?\240[\340\331\273\222\316?\352\246v\201\360s\267\277G\240,B\322\003\340?\240D\225\253i\250\320?\324C4\272\203X\322\277\235[2\330\036\007\326?Z_\311\372r\013\276?$rM\303\350`\331?\006\311m\301sk\242?\360rK\212\023\210\273?\332{\247\270`\337\314?\332\3567=\234>\334?\265\333\221^\222R\304?\265k\347\240\360~\327\277\233\030\366\342i\014z?\337\233\256@WO\311?e\251\263b\321\327\320?\027-\274\242\306\312\311?\025\333I\351>%\333?\243\246e\275{t\311?\"o\332\010\233l\221?i\000-e2\377\332\277X\rWA\353e\265\277I\216l\225\375\306\315?\372fY\377\000N\326\277\3079\204\006o\003\233\277\322\205\375C\237t\321\277\231\006\217\200\033\263\326\277 \212\307\0325,\234\277ax\333;Y\240\321?\375n\323\002(\304\327?A\232\261h:\273\342\277F\306rdH\302\300?|\261\335 \306\242c?\204@\371~\024\274\221\277j\334\335\373\002\227\325?\037&e{\302\314\327\277 \334\225D\223\027\331\277;p\020\245\244$\321\2770\301\241\236\333\027\333\277\031\225P\321\303\226\245?\222\003\331_4\263\312?\217f{\340\242\024\243\277\276\351+\202\336\037\320?\032\345\323BM\235\301?\216\000\023]\274\304\326?Q\341\027}V\260\201?\273E\375\201\264w\300?\266\305\353\260x\240\261?\361\373/\276\005%\334?\"\310 \373I\312\304?Q\234\253\377\326\202\321?1t\323\003r\313\336?l\017\326Z\363\276\315?\220\364\016\\\212P\326?a\231+ANq\330\277\231\003\261*\312\276\316?b\235l\373\005X\310?\241\214L\033iD\325?A+\356G\243\345\313?s\373\037?\237q\300?m\233w\326M-\314?\347*\006\335\230}\270?xO\026\245!6\331?\031^\203\235\346\215\322?\243\325\240\232X\201\315?\241Cd\201D\315\324?\002E,b\330a\325?\245j\232\373\324F\241?D\321,\236\264\317\333\277\300\241C\"e\362\336\277\005\3142z$\224\322?)0\360\036\230\212\305?\267\t{\003a\341\336?\335\244\033\301\303=\225\277\210t.{\310\312\335?\t\267)\334\372\002\251\277dn\010\237\367\220\333?\304I\365\370\030\007\327?\250\2619\336OS\303?k\215\265}\227\253\326?s\365c\223\374\210\330?\022\326k\037\227\335\323?qD1X\365\342\312?|\233\037\3730\255\306?>6\217\344n\347\324\277.7\030\352\260B\326?\356m#3Qc\252?l\236]\235\347x\312?\260\300_\3453M\265?HR\327|\212S\227?\232H@\267]\211\264?\301\377w\300L\306\317\277\222\356!\300m\226\324?\200q_\275@?\326\277E\361Ky\204\205\306?^\335o\274T\317\331?_\361g\207\3363\235?/?\303\335Q\212\324?!5\222\251\'\230\327?\342\263\177\342#\t\226\277\367\323VW\313\276\300\277\231\365\377\375kq\243?"
      }
    }
  }
}
node {
  name: "normalize_element/component_14"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\377(\342[\365\014\255?J~\316!\314\224\242?\261s\252\347j\314\311?a\216N\370\315Ft\277\331\357\000\204L\210\254\277l\017i\276\304\004\233?\3660I\2375\303\316?<\370L\240\317\032\246?\307\233Z\210\236,\230?\341\323{\256\337\341\270?\276\232\304\237/]\237?R\335p\340T\362\252\277\211\207\244\324-T\265? dc\242d\031\244\277\205\306<\300\315\301\302?J\025\336HM\371\315?f\324\337\2777\225\325\277\217\264\3104\242\315\242?\215\323\020U\3703\335?\211\005\000\277-\265\323\277!l\314y3[S?\362\007\342\300\324d\241\277\301U\\$\006\244\321?\367\203\354\202\342C\254?\3779/\302\322H\304?\222\243\364\335\221\327\260?@Z\357y\366\303\302?\005Y\257\037\353t\273\277\034\002\354H\232\344\264?}\242\212\231\177\037\222?\225\313\007\203\271}\256\277Z\265\\\027-)\213\277\016\357b/N[\257\277\201?L\037\322\030j?^I\321N\366d\263\277\250\303\n\267|$\305\277\261Uu\233\337L\206\277S^\230=\352^\242?\001\224\226\374\025\323\323?\345\312E!ns\267?\031\235\342\'\304\222\321?W\351\356:\033r\300?\236\024\377\332n@\221?\247z\215\270[m\302?hs \024)\007\263?\246\013\327\301\306\227\216?\032\306\010\241\266\037\256?\242 _\337\332\213\342?\242O\232\274\267\330\320?\254\275\231\342\273\036\323?\014\320\360E\377\364\277\277\354\240\010e\276\334\223\277\222\302\224\377\313\340\250?\345\361\337|\035J\256?\252\267\006\266J0\324?\346\302\215\003\313\353\224\277\222\240\256\244\313\321\306?\245\250\nx_\266\245?\335w\261\325\212[\304?\211\265\261?t4\225?\320`- \257e\257?\\\002\026\027L\236\204?\017pR\342\204\323\303?)\375\376y\214\205\224?\321+\003\246\212\344\226?\351\305\002\277C\332\207\277\260\314\374\336\366ae?+\013p\213CG\307?O\272\241\347\036+\262?Z\260\236\244\n\220\312?\276\255\366\333\227f\230\277\356\257?\005\227\371\242?\350D\212\032\257\355\314?\350\326\202\026\306\241\200?>\317\256a\327\r\245?\020\330jI&\253\302?\225\215\030\207D\353\265\277\220|-\001[R\260\277{\311\265W\325\201\277\277/\215\035\\S\203\245?._\217p\367\305\261?oe\000\335\324\226\252\277b\257EE{\300\327?\243\021\"\317\344Q\302?\307\333\245h@\230\315?\263\021_X\304\321\231?\345p9\240\235z\341?\"\243E\256\202\265\267\277\366?\274\306 Ke?W\242[\313>q\207\277SL\265\201\001\245\322?\322\253s\237+0\241\277\232n\002\241/\034\277\277\230\263\312\216\205\317\227?\352\262\360\"\200\325Y\277\226>\232\010 Wh?\267\362\350\377\202\310\265?\336\336\271 \360z\306?\347\035\356\275\324\334\260?\356Y|\257\306~\270?X\341\364\000\246\244\242\277Y\375\256[F\342\307?\\e$}\205\305\253\277\200E]\357\'\370\262?P\264\214\2034+\257\277R\254\246-\246\200\267?\324\2673\250\002\"W?\234\307\335\367\332\371\304?^\002\001|\001\307\322\277\347\200,]$a\262?V\236a\346\022y\256\277\036\273\030\276\026\330\266?\210\220q\307\306|\237\277/\213\223?;\207\250?@\357eY2\362\236\277\367I<@\372\235\264?\330\267\027\301\224\273\265?\276\220\311:\000\010\206\277-\242yB\247\316\271?bg\337\034{\344}\277\004f\360\275\340O\247\277\331\002\r\371\021\006\230?e\246\366\032iF\226?\220\352d>Z{\246?\027\237\300Cj=\261?\361\260~\243\205\032\235\277\020&\244\271>A\200\277\213m1\303o\330\224?\251f\030o\022 \264?\020\223p!\217\340\264?u\261\304^\203Y\324?|\301~\272GW\253?\204\037\244\300e\202\341?\264\177\226\225\303z\311?\231\264S\272\216M\221\277\256Y\277}C\377\253\277\236ns?\264J\246\277=\2615\370N\016\302?\355\221\264\270R\021\303?\217\025\200oh\004\265\277\003\312\t\207\234\306\243?\246\236\201h\030\004\237?\17760\301\302,\335?\"\240FJH^\302?q\014\032]R\363\322?\352`\346\003N+\241?\233\010\234\036t\006\277?\332\345[\037\326\233\301\277U\223\330\234 =\277?\324\241O\273\312\240\231\277_,\360;\244\035\250?s\225\216<\207g\253?\355\225\201\034\367\032\327\277\375\205\375\"\221K\274?:\340_\251\323&\304\277:\372\021\037\3259\272?\334\233ciu\254\274??\343\004\236br\226\277G\031\3659\014 \300?\207\244\210\237\016J\251\277\203\007\227\340\245\363@\277m\230\231\200\374x\273?\301\206\366\235\236\370\255?&+\257*5\332\313?e\356\311\337\227\334\240\277 \300\032N6q|\277\362G\254 a\363\264?2\006R9X\305\272?\320\312~\\i\271\257\277G\315\262\202:@\266\277h\177\271yW\373\270?\017\3214\235\247~\257?\230;L^\021z\325?(4g\202\203\353\201\277\3419\306\333k\275\247\277<\372\333u\241\177\315?\241jO$\363#\235\277T\3607\201\271{\250?\005\315|A\352\372\252?\271\030\037@h8\270?\213\242\\b\271\241A?]\370\301\371\324\261\273\277\204c\226=\tl\263?;x\036\303\000\225\304?\302\363\265\333\354\027\261?r;\231W,\200t\277\305\2225\224!a\200?\266\360\243\267\313@\316?\205whA\360D\257?\361\322\362\250\235\006\245\277\033tS\024\371?\275?,\362\353\207\330\340\327?8\320\t\302\221\027\316\277\247j\205`\212\257\242\277\327\3068|[{\255?\265a=\203\300\251\243\277\315\256\355\200\372\265\236\277$\0367\231D\377\304?D\016\031\250\357)\302?L\030\247\003T\226\241?;\342e\215G\227\211?\203\320\2542th\254\277\006\217\004T\027t\262?\326x\341\265\350p\313?\005\2359\271\031\315\302?\352\206\032C\010\341\255?\217\373\3731R\224\346?\006\304^\007RR\262\277\220)\243\272N]\333?\350\357kE\027\253\311?\014i\340\211Q\276\265?\3134\026$\350\365\262?:\214\276\214\246\326\206\277\035p~?\014_\322?\001A\360`\332#\245\277\341\377\267\'\202\027\274\277\227\ndU\010\324\261?\206E\332\000K2\273?\275B\027\273\032,\312\277\205\231\266\177e%\271?\n\2409g\033\352\255?\010\032\330\317\007\360\340?\256\330\374K\224\265\270?\323\004\250\256\036%\202?n\021R\337\304\234x\277\r\027=\340OG\264?v8W \274.\341?\243\t\213\277*m\242?\273D\263\272\356\020\310?\324\326\374\377N\217{?\203\302\252\276\026\233\230?o\241\n\003\277\333\334?iF\324~J\031\305?\222$\010W@!\304?\035B\317E\307\376w?\372\342\336>\243\333\320?\024\333\0018\255\204T?Q\206\252\230J?\315\277\324\020\260\261\246\r\302?\360\266\034\371\315\016\321?S\237Xe\256%\272?\237s\226\335\274\006\323?|\237&\n_%\261?\226M\220C\212\"\267\277\245?\\\273\262\340\231?\000\000\000\000\000\000\000\000sv:\251\222u\300?\000\000\000\000\000\000\000\000E-\017\312\342\233\265?\212\rv\300\376\266\243?U>\231\271\237\327\250?\211\303\377A\027\031\241\277LqU\331w\305\326?N\033@\205DV\307?M1\007AG\253\232?F\257\'6\366W\301\277\262\310O\033\367\034_\277R\257\264\274\r\222\257\277\330\322\374a\346c\254\277A\264\276\227\256\237\227?\362]J]2\016\321?/EE\336j\204\263?L>\321\320\232z\260?\3258a\343v\277\304?\360\213KU\332\342\256\277U\374\276\003,\007\332?A\253\037\335\000\032\277\277\3106\340[\247}\212?\315~\325x\206\374\304?\031_\247\235\ti\250?vU\332\301\014\266\263\277\254\314\027\241?\200z?\263\272\315\002\212\344\245\277\377\034\315.k\244\265?\253~r\002=N\255?\362\303\224\212\276i\243?\306/\376\256\266\377\263\277>\206}\361\373\355\327\277\321Q7\345D\032\300?\227\227\243\227\266W\221?l\330\306\nDp\264?)Ib?G\210\257\277-\363\322$\343\336\251?*w\004\017\212\350\212?\231\330\370#w\236\247?\330\276\253\336\024h\253\277\337\262\226D\356\320\304?HV\227\266,\035\303?\034\322\243\007\020\316\223?3\036\264=\313\n\245\277TW\006!\225l\223?\305\265\261D-n\306?08\355\243\377W\250\277\000\000\000\000\000\000\000\000\017m\370\304\327j\331?\020\250\020%\340+\200\277i\0359\370\340\272\234?M\276v\274\013\214\250?N\2706\330\304\227\266?T\323`\340\332\005\320?B\177\374\000\377/\331?\250\254\205\335\240\213\245?c\013A\016J\230\225\277\212!\212\340\267\325\253?&\331\212\000\036\206\266\277\326\245\353.\365\230\274\277\361-(\343J\003\303?\242@\002\363N\r\263\277\375s\352-\2224\260?$\313\242\340\304\270\256?\261r\242<w\253\264\277\031\030\273u\345P\276?\310\376\235\340\247\031v\277\023\227\251j\376o\307?b\222>k\206m\263?\236\004\265f\313\274t\277/\257\226\032%\330\235\277L~=\277%\211\226\277\220:\210=\267G\220?2\245\03676\032\256\277\372\265Ab\305\355\233?pI\212\2371Y\274?^\033Cc\232\347\327?%\203\001\237\366\017n\277\232\206{A\0303\247?v\340\336-w\003\254?\021\374\322O\366\236\251?\303\225X\276\323\t\313\277\326=\rs\335\357\261?D*\326\272\036\226\260?\001g\255\221\362\315\225?\377N(~k\253\311?\211\006\371>\364[\252\277\246P\3140\244y\273?[\271\223_q\376\321?5x\302\277\306}\331?\257\217\370\\@D\255?\224\324\360\312\201`\252\277f\271\317\236\2118\321?I}\323\240\332s\220\277\2552thhn\302?y`[\232\266\332\273?\313\022\337\201\350\346\315?|K\224\030_\017\304?\276\227\353\002\230\021\264?Wu\257\3033\311\211?p\253I\205\3530\261?\005\270j\350\260\214\344?\031\300B\203\240\345\300?W\217\342\271J\271\253\277\206JL\345\'\264\277?^\035\370\377\016\230\262?Jt}\274\343V\260?,\031\341\234\372\010\250?\204\362\035\200\375\245\233?\207\361\303\326\246\220\313?a+\221\331\223\237\267?\260@\3543\004S\251\277\341[\036\214T\357\261\277@\257.]w)\312?\024t\275e5\372\312?\020\272\276\356\370\037\260?\000\275U\000\330\254~\277 g\365ip\266\230?3\232d\375\311\214\225\277\030f\272:t8\313?4\337\271\336\323(\321?W\036I\356U\320\265?!u\\\t\264\246\247\277\313\r\017,\ne\210?\355}\354&\337\t\260?|u]\021_\232\254\277\005\363\362\234v\366\242?\033>\320\247\341\235\272?\256\230t\010\332l\306?\007{\023Cr\262\323?5\303C\2410\353\213\277\374\226\013%+p\230?\322j\314\024\010u\260\277u\276\n\2662]\241?|\367Rn^y\205\277*`c\340~\225\247\277\035\311\272\277G\353\240?@\215\265\236\245T\302\277\035\331\307\320\322\221\255?_\350S\277\271\\\255?\340g\255\177\017\022\231\277\230\036\003hJ\241\270?6\000\365H~\"Q\277\203l\233\332\000\211\303?\230]\203\000\021\t\325\277a\221\231\352M5\242\277\256CwA+\315\306?\307\220\255x4\037\301\277t\3535=((\302\277\023KF\245Cm\242?\310\275\022\253\263\030\220?x\200\311\273ZV\241\277\264%,\243\361A\247?\376\324\025\277k\310\264?\n\365\202\274\017!\237\277\202\314T\334Fp\222?\350\211B&t\362\313?\206\232\031\344\313\227\271?h\305\261\332n\025\223\277P\374\030s\327\022\322\277\315u\\\205{\302\332?dh+\345k\005\314?g\006\267\326\223\320\300?\246uDS\260\245\266?\235z\213$\315a\253\277u1\027\002\312p\322?\002\260p@zk}?\376\301\270\002\247\312\263\277\373I\255\336~L\300?\017\255\265\372a\271j\277w\360\331[F\301\300?\023+\306\377\217\2746\277\2148\266\001L\327\225\277*\032\255\2339\301\242?_K\341\244\335f\327?\344\002\247\251+\300\257?m\035^\010 R\260?\231\272m\3272\266\300\277\032YKd\223\272\252?\001\234\305([f\263?\rv?~\241\215\270\277\355\035^\245\365\226\301?\236\274\002\260\205I\270?7\002\257\236\254\373\262?\222\255\230\324\303%M\277\304\331^\037^V\253?\027\021\365\035$\215\243?\304\234\271\352\256\252\252?\333\316)\216$\275\255?*&\251+#\036\264?\374\212Vj\315A\316?\010\204\306\341\006[\245\277\235\326mP\373-\325?\223l\330c\340\010\302?T\327-D\177\217\320?#\177\216a\336{\260?\316\327\023\372\354\302\261?\326E\300\327\306\216\307?-\372\371\2454Q\315?\243\304%E\257xf\277\001\324\036@\320\033\252?\201\364\207E\220s\246?\311b\000\200\032\371\253?\010\360\016\327\007\345\311?w\205\321\273\227L\242?\026\032\343\036\246X\341?\231\251gF\341\250\200\277@\276c\374$\014\272?\246\272\200\227\0316\274?\021\244\224\010;b\246?M\255kr\000\026\250?\236\372\204\017\314\241\212\2772\177;?{\344\326?~\237\334|D\310\267?\261qXu\261\304\240\277#)\257\266\336F\301?fH\277\304\362\303\231\277\'\366\2570m\315\252\277\037\234\262Gf\375\310?\342\257\352(\3363\301\277\270:\257\232\257\336\233?\202%pN\231Y\260?\323\346\242\233\251\202\204\277\242\n.?8\353\210?\267Y\013\237\354\347\230\277\206rw\335(\240\227?{\322\221u\233\344\300?D{H:\373\261\310\277\356\\\030\351Em\313?\316\245\2568y\352\201?Y\205\315\000\027d\256?\337\206\275\365\006\204\320?$\205\354\233\177\344\243\277\004LU\344T\216\224?,x\336\201\222\346\246\277\204\230\021\377,m\314\277\247\032y\375\2424\242?\272\327j\213B\375\266?&\341\245H|\366\201?\331\242\334\350)\223\275?9\343\221\376\262\t\201?\226\275[\017\025\231\321?=\254\344![\257|?4\236J\376\016b\263?\312\323$>\230\220\260?\306~\363;}\237\250?\035X+f\306\323\270\277f!\256Z\241a\320\277Y\034)\266\335_\240?\263\377$\002\304UG\277x\3568\243\270s\241\277\372\0279\362\3359\274\277f\010b\001\225\357\222\277\357\203=7~r\303\277\022?\333w\000\034\235\277\2258]\334g\221\316?\274r \230a\253\253?!\250}\347\325\010\300?\201,\372\371\245\264\305?\003\260\"\037\313\355\212?\037\325\236Ew\330a?\212H$<g,\315?\360|Pa\266.\300?\2322\303\210u\221\301?\000\000\000\000\000\000\000\000#\346s\235/\276\226?!#BQ\020\244\211\277^\222\024\242\215m\245?\353\207\236\265W\366\264?p%a\375\244|\243\277\257\341\r\\*\336\243\277\036\031\212\277\026\t\331?\0277\274\300\257\010\275?\211J<\003\227E\324?\r\320\t\343\237\000\213?\242p\250\245\332#\255?d.\374\"\231\274\264?&\341G\327z\366\210\277\n\010\333\277\032\266\261?2\346K\373(\233\314?rGIY\320\305\305?\251i8\3415\032\325?\217\353o\241\334\312\251?\311\017\263\234&a\257?\224\3156\346^(\232\277*\370\233\300\334=\241?\300\226\364\203\374d\247\277\347\033\246\275\216&\211\277\301NV\261\235T\341\277\245G\273 \016Q\273?\253\232\275\277\203\227\251?\236\265\272 K\264\274?p\010(\240O\274x?\245\231c\203\311\260\251\277:3\013\376\310\276\306\277\2778\002\002\347\326\245?[\241a\224\024\026\224?\340\252\343\337\004\262\262?Bf\241|\305C\233?\005k\234MG\000\264?\235\327\335\336c \260\277\177\261\214G\210v\226?z\306\235V\372\236\266?\240\201?\231\322<\236\277J\374\376\213oA\277?o\374\247 \341\251\260?\2444\376\361\034\231\254\277\010Y\026L\374Q\311\277\0326<P\266gw\277xjh\342\241\030\216\277\307\010n\305zz\271?\375\265\345\361\356\247\261\277\361\263\025$K \236?->h\3523o\262?\037\321\014\373\240\233\335?cp f\'j\263?\\\242,\334\357\331\256?\246\257W\300S\264\265?\370\367|A\311\354\324?U5%\177NF\272\277$\251\032\367\305)\317?~\237\273n[\245\306?|{\246B\364\027r\277\357\243\374\237!\356\243?\243A\310\201p\250\321?\016A\376g\007;\263\277I\330\033\343h\241|\277h\'\271\272\331\343i?\2354hCY\323\302?\322\242F:fM\250?\026\357\215B\016\241\336?o\345}\000xb\227?<\201v\250\"\354\273?\2162\013\202\001c\275?f\235\226\304\376W\261?Z\344Kf\304\236\300?\033n\270v?\372\242?\351\350\r?\214\014v\277^\227\n\277\016{\322?\220 \307\234\210z\304?\214\247\365\351>!\241?c\255\324\305\003P\234\277\227<}\2106\225\264?\220E\351\276\333=\226?#6\222\343\322!\263\277\021\231\311\242v\340\301?~\313d\204,\025\232?&\037\232\375\252\361\262\277\223c\200~\276\261\261?\341\232\267\301\273\242\265?>\000\261\276\344\363\277\277\364\247\t\262\320\224\236?\033_\251\2364#\246?\310\244T\374\276\003\300?WN\020\257\312\t\247\277\367\342\201\204\005P\232?\006\230\340q\335\326\250\277?~\377~\342\024\253?\203q\320[\305\255\205?V^.~\354P~?\326d\266\371\271\000\307\277\242\373N\240Cq\267?\322\206G\013e\033\273?\001\240\355Er\201\311?\243?\260\272@\017\320\277\205\330J\374\022p\243\277=\234\237fq\024\300?\344\336\231\\\316\235\271\277\026\036,J\246\226\251?7\254%\364e/\272?\331\024\237m\373?\247\277\352f+\241N\210g?~{\256!\376\202\227\277x\334\tY\212\242\265?^\336wgHp\240\277\244\341s\253\020$\251?\024\004\217o\357\032\337?\017R\246\207WH\260?k\235\331*\230c\273?\014\252k\277E\277\211\277Nx\317\242\363\361\276?G\273<c\200@\330\277\nC\257\002&\267\251?\354\330\364\337\004X\242?\022\243\226\317\272\222\215\277\307\362\256z\300<\252?\200l\246\003\330\316\252?\310\3632\355\017R\276?\000\370\320\323\272\354\261?G\2617\214\335\231\264?\030\316\024\276\347\325\303\277b\223\2102LT\254\277\004\006\305f\262\305\300\277\304l\0238#\224\277?\320Vo\036\230m\276\277\237\277\032\261`,\262\277\225\340\005\370\013\311\261\277\256\366,\337e\314\300?#\262Y?Gu\311?_\210\254\240/\336\304?u\323\245\000\312?\266?.\260]\027\213QQ?X\254\266\242\232\200\205?\017\252\375k\263\220\263\277\321U\374\327\240L\313?T\217\302b\305\212\253?\035\367\217\200/W\263?h\316\331\206z\217\245\277Cx\356\034N\211\223?o\360\307\345&\007\273?S\322`\246/|\253\277\346pR=>\306\244\277w2\325\037\2434\322\277\353vQOz:\261?\271\325\275_\026$\246?\363\361\236=v\233\264\277\225b\211\377\"\005\326?@;\267;1\014\251?\253I{y\275\330\222?\271)/C-\327\323?~\334#@\362\363\332?\210\034\256\027;\310\246?&$A\324W9\203\277Q(\362\301\276_\321\277Zp\026aPG\265?eg\372\272F*\337?\202\034s\"\352\323\305?\017\351\\\366\220\225\301?\262\336\rA\214\022\247?f\351\221\246D\211\223?\2742\373~bK\251?.\305\227\201\261\333\312?\"\275M$=1\340?\n\272\336\262\032}\261?4\"\331\242S\367\253?\363/\337\200\352\255\240?\314\232\033}\023\335{\277\337Nd\336\221N\256\277\246\211\014\345#-\307?\3440[\\*\t\246?\2261O\370\266*\343\277\n\tb\352\370y\221\277I\204\302w\315q\302?\373\nob\212j\303\277PK9\200\372&\262?\227\336\345\277\223X\266?\262\235\020\266\257n\270?\267\340r\340\310H\262\277\221vH\326\206\357\343\277\030\202\303\333\350;\244?\t\335 \270\234\333\230\277\345\346e^XH\311?\314\016\320\001rW\261\277\221n#\034\265\355\240\277\237B\307qT,\277\277[0e\236d\304\226?\207-\037D\220U\257?~PYEf\313\253\277_\311]\235\306\352\300?\230\330\216?\327\022\250?\355*\014\340\031\254\264\277W\274&\336\340\017\272?\010\370\177\037\037\336\341\277R\256:\2741N\245?\235\336\377\246\373\251\304?k\244\235\201.-\321\277\017\204\'\236\372\332\251\277\\\312\376\033\251.\252\277\251\371\350\334\006\030\262?\305\310\324Uh\275\306?\032\031\031!\222\332\221\277\3527\336\340\265\222\244\277bYz~bn\320?Z\314E@\351rh?.\315$\037\370n\263?_\276\016\377]]\233?$x\to\213\t\274?\361\206n\325\371\340\263?-(\353\273Kw\246\277\203\"\314\243\321\323\246\277\317r\321wT\210\301\277\232\204\010\301u\210\255?\376\267\256rJ;\207\277\246\331\227\307\365\312\305?\227nT\237\222\020\322\277\343ev\253!P\231\277\266\323\030\2452\342\310?\253\027l\270\002i\302?\345\201#\334\277\r\346?\231M\231\376\231\277\334?\001\223\235|O\354\220?\206h\235\206\342m\260?\241\266\221\333\304\003\243?\225|pg\364\335\256?38\306%\371W\301\277\032\3117>\007T\321?\275\207\251\377<\245\271\277\000\333\207\335\363\323\302?Z\365w\276\270\267\251?\3365\360\274\267\226\246?2\220\312\301*\346\251?\236\031q\277K\202\327?]\3016\342\311\256\327?"
      }
    }
  }
}
node {
  name: "normalize_element/component_15"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "|\305d\273\214\254\240\277\007\344@\177\t+\255?;Ar\235\014\257\337?nR\321X\373;\267\277_hdF.\356\340?\\3\"\346\314U\300\277\377\244\353\323;&\330?8\313%\210\314\362\235?\033\243Y\377\005\207\240?\240\210E\014;\214\355?)w\341\377u\013\331\277\000\000\000\000\000\000\000\000N\320\325?P\272\221\277\nd\331@x\374\336?;EX\236Q\244\356\277\020s\356\033\004\002\345?\272\270\021?\224\"\262\277\2025\224\373\231Q\261\277\"\374\315\274\003\331\271\277\022K\312\335\347\230\343?]\373\002z\341\016\345?\005Mg\001\274\000\252\277\211*W\323P\276\356\277\316\300+\366U\301\303\277\224\272\tc\260G\334\277\303\300\255\232kA\336\277\340\211\223\332\017\241\273\277ig\342gm\344\320\277\372\202\372\274\000\000\232?t\230\343\240z\'\255\277\177\340d\372\251\032\302\277\216~\231\307\030Z\222\277\352\223\334a\023\231\303\277\321\254\360W\226\"\246\277\2500P\300\3305|?\377\027\370\037\3239\317\277\277\307\313`\255V\304\277\014k\232\337\177\027\271\277\203-]^\014\'\344\277\n\356\254\202\275N\354?\023\241\256A\241V\354\277>\302z\355\343r\345?\277\223?\255\334\352\264\277X^M\371kM\356\277?\014c\301\263s\341?\302I=<\351\323b?\307\031\232\035o\223\331\277}\206&?\230J\335?H;\352\2779I\353\277FW\2165\310\211\352\277\002U\222+\253\037\357\277!\371n\346\234G\231\277\000\266\264\001u\026\355?\213@\355\236\331\201\345?OY\260\001\317\305\340?\214\250\363\"\277\360\243?6\272\326 \304|\357?\350\177.$\244\221\234\277\235\367Z+5V\347?\007\314\t\373\362\331\263\277V\'\203}\0353\243?rZ\205\007\254\240\240\2775c\321tv\362\343\277\033hn \2054\210\277\022ph\307\226\260\221\277\327\254\n?\376\363\252\277\346:\360\336\017G\323\277\270S\235\202\272P\345?\201}\021\300\017?\352\277\027\2645\307^\024\355?\346\204\236\007VY\302\277\347\200\260\225\310l\306\277\213o\346_\344\010\354\277\274\342\261\270b\363\273\277\3316\030,\315\224\217?\252\354\375>\312%\320\277\275\251\006i\337?\310?`P\256B-:\355\277\n\262mj\003\244\317\277jTa\3450\225\237?\257\r.\200\235Y\257\277OJ\326\033\2244\317\277\210\007\336\332\323\037\352\277=)\223\032\332\200\341?}\"O\222\256\031\352\277p\256\345\276j\037\313\277\226]+\377,&\266?\352`\026=d\210\251?\0361@\303\027\375\256?.\214\364\242v\377\357\277\372{)<h\366\343?\310\003\241\336\013\321r?\237W<\365H\303\357?\327Y%?\177-\261?\370\r]\232l\r\343?>\354\205\002\266\203\266\277R\222\316\360\001\342\213?\034RV\035\203_\334?\004z<\210\370b\320\277\331\232k\240\022:\316\277\373\372\301\303+~\252?\ti\317]\371I\345?h\251\345\234\022\357\320\277d\003+\177\245\220\237\277\213\"Z\341L\342\356\277u\004O\245\217\216\323\277\000\000\000\000\000\000\000\000\365\367Rx\320\354\342?,}*\237\314\034\356?.\330n\004\247\023h\277\213}4b\207\315\343?\305 \224\0359\327b\277\312\342Y\335Es\356\277\272\325>\340+\001\273\277\346a\333\201\276\035\245?\352\356\327\3606g\227?\370\014\212\341Hr\240?q\003>?\214\020\321\277\000\2631e\2263\332?\361V\310\"n\312\253\277q\263p@\350l\342?\254\035\007V\274.\300\277\000*\250\352\026h\312\277sW#y\266`\230?\273O#g@A\220\277\224\225\323\\v\241\262?uq\237E\204\271\264?\177\025\277\255\344\370\267\277\305\241\n\301\242I\356?\234\243\257\234\2244\311\277\031\375\r\177\362<\345?\232\307\253\275\231b\317\277\271\r\337\314,e\200?\036F\020\000\177\345\325?\355\233\177\344k\211\301?\341!6\237\r\325\247\277\371\3000\216\001A\177?9\034\310@\277K\346?,\217\342\332X\242\304\277\220\255\333^\332\t\353?\354S+\237\'\226\257\277\303\226&\276=\374\357\2775\022\231\240#E\342?\227\220\017z6\253\357\277\\\370\013\207\357N\344?\352`\346\003N+\241?\352h\013\276\037M\356\277\224#S\364vz\343?2z\207>\314\034\322\277\313\014\237\235\241\322\344?\342\200\257K\001\'{\277\241\244\033\274\n\204\353\277\253B\342\242\203\303\325?+f\177\376M\270\250?\023\311\241\217C\316\343?\246\345Q;\r\242\343?d\246\233a\366\364\233?\375I\235\374\355\235\320\277\020\304\036\177\016\230\343?\262\233[\031;~\304\277\215c\240B\340\216\311\277)\267iC0\324\244\277\352\340\252\374|%\306\277\301J\221\276A\342\356\277G\321^\330\365\246\343\277\264\276\365\037\241\377\263\277_\267\347}\014k\302\277\323\365D\327\205\337\345?\253t&V\016y\210?\037j6\352|S\320\277\3060\205\331\224\303\224?\230\376\200b\277\302\343??\177\353\324\246\273\340?\332fSCU\253\304\277x\\\267\265C\313\302\277\250\005\212\263}#\357\277l\316\342A\212l\320\277#\365\"\003\016[\314\277<\210:\377\2705\350?\363A* H\271\263\277\014pI\'uv\262?6\010\255f!\252\315\277{&\330\330U\343\223\277\347\310l\276\2011\271?w\235\262?\365\264\357?\2161)\236\260M\244\277\n\2053\270\340\036\237\277\354\305\253\007\'}\333?\310\353.A\'3\227\277\261\233\000`\310\354\353?\354\016\357Z\276\205\336?\311\227\023^\311(\273?\310z\315\037\221\376\341?wJ\273\\\272\005\233\277\350\311\353w\027^\300\277\034\213\371\373\275\373\311\277\017\375\250\300\250\250\301\277\332\360\252\275>\251\354?.6R[\217g\355?oD9\311=\372\244?\034i>!\032a\315\277\304T\341l\306\253\274\277\267q\332?\216g\247\277#C3\364\3646\343?0\235\265_g\270\346?e2\342#\336\221\337\277\350\304y\223:\334\325?n\331c\0324\221\313\277\313\200X\333\271U\334?\371\220\307>\216\007\307?\251\205\222\311\251\235\343?R\016$\367\215\022\200\277A\355\236\331\001\031\224\277;\251/K;5\356\2771s\211<\254d\324\277\351\252\355\344\333\024\321\277my$\337\036\344r?\344\026\220I\210\352\316\277\n\201\\\342\310\003\305\277\301f\312\230\314\002\357\277\036A\001F]\214\223?\205\334\230\340\314V\330?opuB\340o\354?\365\367\316?,a\321\277\027\017\255\035\336\226\356?\264x\327\367\346\331\236\277\266\230\206~\371\346\341?T\246\034\274D/\313\277\033\270\250\273W\022\332\277\365\024\0306\363\371\310?\247\326\201\307E\"\237\277n\204\311}@:\340?~$\333\257\361\217\357\277\353]\027\331)\261\302\277\254\000r\321\257\376\212?\323H\256\017\251q\277?\027\207\264?\260\340\263\277\251adnc\230\352?\377\\4d<\312\354?n\037MP\0361\340?g\014\013\237\301g\242\277\252\007q\2123k\343?R|\223\336\353/\243\277%\020e^\375\216\311\277,,\343\237L\265\254\277\320\205\252\373t\372\300\277\342tq\237E\204\322\277\017R>\244\342v\252\277\000\000\000\000\000\000\000\000\226\275:\001,v\264\277\231:<B\325A\355?};.O\214Q\354?\006F^\326\304B\340?\332r.\305U%\345?u\273,`\341(\260?\031\250\316\233q\367\320\277U\242\r<\316\037\300\277\025[\234\214\205|\356?\010/,E\023\244\320\277\307\210\341v\252t\254\277\010\034*B\301\327\356\277,\267B\305)T\216\277\262\3714\376\257\000\243\277/\202\214\241\030\260\311\277\tE\270\236(\326\237?s\247\317iq\241\301\277\271\224N\177Q}\342?\233\216!|\377Q\320\2774\242\2647\370\002\344?\013\333hc\231<\247\277\200z\371\2764\034\306\277\260,f\276b\021\315\277L\247\330E\217\347\300\277\256|\032 f\311\345?\002T\013\001\315\333\235??J\025Z\020\251\260?}\334\247x\226\377\313\277h\022\253\3654\026\325?j\303\274\"S\331\331\277\350\"\014\243#0\251\277\206|\206&?\030\345?\306d\232~\303\203\351?l\325\t\303\333\336\244?F\177\276\346\202\036\223\277\322\222,\377\330&\234\277\220\355\245\276f\230\316\277\203\265\275\037\257n\342?\340JU^\033\037\355\277\t\307\013m)\265\235\277\307\327\340u\344\345\271\277\226\223\215][\245\252\277\214\237\306\275\371\315\350?\346\307\302\204\217\320\321\277\3228q\305\007n\262\277\375\265\006\000\330\312\320?\017*P\017\372g\267\277H\025j\3629\334\344?J>\033^\265\267\353?\242\235\262\036\347K\260?\003A\200\014\035\373\356\277\356 \033\355]\350\341?\311` cI\024\345?\243i\232\301)\275\343?\355&:\303\273\371\243\277%~\377\305\267 \311\277\232/\304$;\272\320\277\354U\277-\263\243\353\277<cg#:x\316\277\323\365\247\001A\310\353\277F\201x<\261\367\316\277\032\365\006\033{O\237?\203V\273\201]\010\356?\033\244}\377(\342\357?\276U\215\024\200u\357?\307\324]\331\005C\354?\234z\017]q\355\263\2773*\374[\372\276\326\277\004{eA\325f\324?S!\322\372Q\220d\277\001\302\207\022-\371\321\277f\030\370\003~\212\253\277(\010\303%l\244\354?\267\334\r`\231\020\321?\226p<-\254\014\210?\277o7\03191\224?\223\240\t^>\303\343?\344\343\250\026\360\266\260\277\321\232\366\37777\350?\'\353\201\240\355\342\305\277n\205Ua\330\006\301\277\221\230O?p\341\243?o\231x\254\276\337\344?\274\230$\236\005\004\356\277\343Oz\375N5\251\277\210m\346\353\215\265\356\277 \177\345\030\373\330\315\277>\tK\300\330\020\317\277\000\2631e\226\363\271?\301\247\241\\\006\333\223\277R\2619 l%\322\277;m\215\010\306A\352\277\363\025\213|\352\232\321\277\217\363H\315h\365\347\277\335L;\353\t\001\314\277%,C\177\025\336\343?CS\033A\317\253\346?\r\027\271\247\253\273\345?\330\272\324\010\375\214\340?!:\004\216\004Z\353?\347n\327KS\004\300\277[\344\246\0377\360\344?PW\024\002\373`\270\277\331)f]\024_\177?\207I\026\002Ip\232?1\263\021\200f\355\342?\243\325\177\214o^\353\277I>\300\244B\206\274\277P\350P\341c\213\343?\370\373I\245mv\320\277]v\234c\277u\244\277Z`4\320!\025\227?\274\243\202g\233K\236?\256\3257\334\002\343k\277\"]d\351\340\354\273?\371R\032_\353\272\272\277\333\010z^\340h\342?\341?\202\207\016\346\343?\201\307\\\276\232h\322\277\265\372\\\000)\320\244?\323\325\302\321\372\300\345?\203\036\256\370-\n`?\241\250d\347\nB\307\277QUx\002\'\374\206?\300}x\361\331\225\356?!\243M\037\313\014\342?\371\366\256A_\272\340?^\354b?0l\321\277\220/*t!\000w?\301<\277\203\372q\311\277\n\231\320\311\3671\264\277\234\n(<\267\274\246\277\375\271\252\344JZ\322\277o\255@>2g\262?\221\023\303a\253\374\342?\017N\3721\234!\343?\273\305\262O\2667\304\277\0302\240\334\213o\233\277\344\374@\376A@\210\277J\313\205 \300O\246\2779\360j\2713\323\354?[L\326\"N\231v\277\370\207oYl\260\307\277\307\307\376\344\2653\317\277\215\271\010\337=\270\356\277\026\003\332\014&4\320\277\325\312\204_\352\247\357?\346&\007?\263\034\315\277\243I\030\274\236\036\354?\201\246\007\000\354\256\246\277@\013Y\203V\354\177?g\303P=\210\323\341?\202\314T\334Fp\222\277\252\013\272\2653\351\250\277D\335(.\236\254\270?W|\277\250\017j\316\277\0250\313\350\221P\344?z\213\352!\330@\322?\263RRq-$\355?\013\230\237\237\322V\317\277\004D\303\215T\022s?\221\000\177B\207j\343?\207\354r\000\263q\335?\001%\221\277\254w\321\277W\325h\305y0\311\277C$\236G \371\352?\256@\035$~$\313\277WMc\275Iz\353?\342@\006\372];\265\277t\2375\242(\216\321\277\354\375\302\002\312\354\300\277\252\306\\c\341\265\303?\223\242|\336\340M\203\277.[\365\375\367\207\253?\355\311\r\320\307\306\306\277\027\341\300\300\200\031\234\277;\363zI\306\336\273\277M\270\374,;)\345?@y\212\342v\204\355?\014m\010\247hY\305\277*\351\347\241D\270\206?f\260\024\217\254x\274\277\235\001\242\036\252B\303\277\016Hg\005+\363\356?\301\227\333 \007\343s\277P5\003\'\236]\221?\376z\t>\233\357\346?\024\300\336\016\036w\353\277FX\371\nwS\343?\361\30685\206o\342?\"\'\002\213\262m\354?\034\302B\367\366\270\350\277:]\026\023\233\217\310\277\264\023j\365\361\252\204?\032\255Y\035\357D\354?\010\221\0149\266\236\343\277\377\310:=k\216\301\277S\022\310\333\000\"\357?\000\000\000\000\000\000\000\000W5s\016\277\027\263\277\357R\013\241Z\017\356\277\374f\2139B\345\270\277\324>%\000b\177\330?\315w\377>4\n\243\277\221\252\346l\023\204\211\277 \241\301\001\210V\345?;\376,\022\352T\233?\254\347\377\260\000\201\343?\336+F\237\207\001\324\277n\352\260\200\021\215\323?\373\203\365=\362 \257?\305\002_\321\255\327\343?\326\204\376S\2730\357?\204\251\366\201\225W\241\277eN~($\333\255?\305\355\310?\320\335\262\277\252o\221b\035\332\342?\245\370\031\223\325\337\246?\"\243\202\021\233\222\217\277\343`U\016DNc\277W!\212nb\355\357\277\352\242S\035\223A\303\277DVc{\300K\235\277k\336\'\375sG\350\277\336)\221\002\023Q\346?KG\357\n3\343\347\277)@\363\275\257\377\357\277\250\271\005\340\331\235\343?\366]\021\374o%\344?\206\265\214/5\235\333?U\230J\201\375\276\260?\327\223\257\272\304G\302\277\200r\004>y\227\345?\r\262\372]\267\014\300?\330\203w\340\275\326v\277\006\250/\237:\303\245\277B\267\023\374\241_\200?\343\236tC\317\275\322\277\024D8\301\222f\340?Q\267\273 \205_\264\277_T\350B\000\376\226\277~\263\203\000\317,\260\277\352\237T\271Xj\240?\336\322\305\001O5\264? \232yrMA\343?\317c\035Y\274\002\220\277e\256gc\200\237\252\277`8:[\376\013\321?|t4X\202V\322\277\236\240\357\234\235t\235?\242\263\016?\346\240\357?%8\232\310q\314\303\277%\233\006\240\254\263\343?\364\32449\306\237\351?\264^g\236\267\214\313\277\no(\337\340I\352?\330N\357=\267\253\303\277(\366\017\243\231\207\246\277\313\322\024\"\\x\341?v\034\232\r\215\002\357?P\3749\201\300\225\343?@H\036\241\311\262\356?d=\206\346\371\225g?\345+\306\300m 8?\236\247\215,\221\362\260\277\373\002u(\025\035\237?+\222\206\205 \250\310\277}\221u\335\0008\341?F\250\245\3731\224\321?rl\252\337f\240\255?\212In\003-\323\345\277\266\3453\013z\220\265\277\364~\314\234h6\242\277Ip\222\002\345\230\223\277\316\350\213\340&s\227?\021W\214\302Gg\333?<\376f\275s\343\352\277\377K\245\341\214H\340?\202\000\327\035\244\212\332?\'\2507\\\021 \245?4^_\220\231\360\357\277\265WY\272\006\246\310\277>\275\010\t\007q\344?\222\007\001}K\316\321\277\236\346\313\250\205\324\306\277\003\036\377\242W\205\327?wE\327\"\365\340\224\277D\307\030\234\344\356\257?\200#\252\205\314t\233\277\301\215H\237L_\250?$\205\r\252hG\343?36\360z\233D\323\277\240\333Fa\351\014\214?[\241a\224\024\026\224?\241L\037\221!\215\213?\252\230\214[\2632\325\2771o\323t}\354\204\277\221\226o\"\237\234\340?\317F\225\376\261\022\346?\214\323s\177\263\234\356\277\355$\307B\031O\356?\017\331\233sK\206\343?\221\001\352\0276\024\240\277/\003\010\376;K\317\277\375\001\007\233\327\344\316\277\312\322\230Z\000\344\354?\201\222\247Q\355x\316\277\026s\306\346\231M\344?\321\232z8\334\342\341?ui\r\357\203=\255\277\207PcJ=n\260\277+dSS7<\336?\304\024\233E\336(\341?4\310\023\367\016\255\356?\3633\232\001\323\016\270?H\333[>P\266\355\277t`9B\006r\330\277\211\323\244o-\256\341?z\003\212`5\371\354?\271\000\321\037\334\025\336\277J\251e\0326\222\220\277x\274$)D\033\337?W.m\233VH\317\277\315\262\345d\373\363\272\277\367.W\237\250\365\245\277mf_?\345\024\331\2775\332`\227\227\262\350?4+\035\244\216\353\322?\202\2165\247\273\200\272\277\307\311\263\201*d\355?\331\336\033\001\344\235\236\277\3472\000\027\016\313\205?\367}\223\001\373\343\355\277\276\001^M;\210\265?\017\037\"\177z=\344?I\223ZA6\375\355\277+\014\374n\333s\261\277PK\016\000\236\262\245\277-%\211-V7\217\277CO\363#\270pt?I\232\247\211*;\202?\027_\233*k\335\317\277&\351\365\202\252\254\330?\216Fa\276\214\307\242\277\325r\353^\274\331\313\277\367\300\330\214\035\036\344?I\325\331=7\274\355\277\266\367\251*4\020\346?l\223\016\377~\013\355?O\270\262\237 \214\266\277{\\e\267\340\326\352\277}\016\207\000;\022\304\277\004?\303\376_\263\302\277\305\275\205\267\377\257\277\277\0246M\351\252\212\322\277\373\337[\242\304\370\244\277\376H\021\031Vq\316\277a\245\311_6\016\243\277\213E\035g\344=\343?\032i\244\003dx\246\2774\017\303\273\032(\335\277\311\262y\1770.\343?>7]\344\330\331\315\277\242\336B\r\2255\344?]7c\240\204\374\341?\014\360&\275D\374\240\277\345C\336\337\221\222\237\277\212\252%>\363I\304\277\331\371m>d@\321\277,)Q\330@\030\236?\247\336i\036\377\206\270\277\365\212\237\255 Y\277\277\231\241L\376\2028\355?W\346\020\345\311\275\313?\316\353d}\276\276\224?\'\307SE\247\235\354?\241i\230\300\376\002\211?0\200\360\241D\013\354\277\232\230.\304\352\217\336?\032t\235\241\023\235\256\277\037G\265\200\267\335\306\277\016\017\006C\302\\\343?m\273\\\006\2244\240?\343\017\227\000\"\033\244\277{E\340\335\004^\343?|\205`\260vo\343?M\301\371X\352\356\261?\374\234\314\211\207A\323\277g\327\030\317\373\032\344?`\237\357]9\021\347?\013k\031_j\272\337?a\023>\000NT\342?\372\337\337\332h\004\314\277\204\276E>\347\"\233?\000\300\230\312.Z\312\277E\017|\014V\\\357\2773\007\265\235\2767\330?\304\223\202\023v\266\344?\377\215$\336\215G\331\277~\247,\267r\376\262?\n7\021\344=\032\321\277ia\005\256\341\330\356\277T#\233{\255#\223?\217fv\'\351\253\322\277\022%)\002\377\310\325\277c\216/\353\017^\342?u\362k\351\246\324\206?&\340\031e\344\311\316\277[-\311d\345U\267?=\2160V\345L\340?\214\0169\227\221c\213?\377\251SF\245\326\224\277\2669\204\340\247\300\344?\234\261\036\255 \374\340?\335H\362\277\t\003\344?\026\r!\000\233\240\353?\322e\275Z\346\233\337?\214|$FK\365\267?\234\267\230<\361\336\265\277n\\\265!\265?\340?\222\364\037\210\342\304\342?\322\321`\tZ\267\356\277\2374\305\375\366^\204?\317u\216\277\274\231\352\277\216I\310\005<p\223\277\354\033\327@lI\250\277\245\334\032d\324-\315\277\311y\275\003U\006\264\277\205\233)\000\010\320\304\277\022)\223;\350\351\331?sDG=\007@\244\277\036m=\277\377\301\262\277\356l\365\300\2726\213?1_\034d\253.\261\277\326\010\263\277\242\361\357\277qJ\212\331\334\242\347\277j\226\311E\274B\235?\2052\277`X\372\307?\300\2315\004\t\202\322\277l\031,y\225\345\206\277V\340\032\216\235\246\336?\246\017]P\337\262\345?\251\356W\"\314$\354?\014\221\037f9M\234\277\2613\246\334T\017\277\277\212\025=\t\317x\316?\270\016\345v\365K\302\277\335\212/\2408|\321\277,$\005\273\006\342\343?\201\234\213\032\247|\263\277\023_\263}D#\322\277\212\362\273\237\t\303\357?\354\337PS&\320\355\277>\256\262[p\253\261\277\001\237\304\214\225\375\342?:\311V\227S\302\354?\025\250\305\340a\272\344?\250W\251$\333\216\322\277\340\005\276`?\335\342?4\244\243\177\366!\327?\267\004d\330\366\260\254?\202\331\220\301\202\342\352?@\032\312`\367\203\345?\362\301|\303\216\220\306\277\235\013\310\0036\014\311\2771^\322\234\345G\230\277\241\030Q\301~[\271\277O\002\274\201\331\357\263?\224+\202 \274\255\355?V\343\266\307\034\225\336?}\236y\030\336\325\317\277i\361\367\305\204\034\244\277\034\335\326PI!\275\277f\037\267\241Z\353\351\2773&\222\"\021\236\300\277\245\273\341\372Tn\212?q\025\325l/s\342?o\201F\341a7\356?\203\321GA9\317\205?\247\215M\237\333S\304?\351\005D-r\364\343?\013\034\032`0\251\342?\\\263\200E\321\216j\277\374\215v\334\360{\356?\321\215U\357\025\302\341?\366Oh@Z/\322?\364h\354C\305\325\314?\\\332\374\001\007[\330\277\020\265\351\337`U\346?%?\342W\254\241\354\277\312\241\013\013j\317\223?\362\266-%&\303\354\277\274Q\361\240U\275\321?\317\031\315\241wp\260\277N\213\260\227\\\273\342?\037#\311AC\336\312?\263\371\345\267\333:\213?K\343\301]\220\t\247\277\000\332\240@\351u\351\277\204w\003\026\n\242\342\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_16"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\350v\006x\230\027\302?G\031\263\035:\232\332\277\317\327\217\301H\367\337\277\200\341K\227\264X\341\277\327\241\232\222\254C\340?\263EoD9\211\332\277\362\277K_\276+\303\277h\351m\340\314\367\334?\302*\244\035\263\303\332?ZG\270=\377\205\340?\014\255o\3349\377\335\277\362\210\300G\263\350\333\2774LL\233\232\231\334\277\213\277\222P\237I\344?B\210u\364\t\352\315\277\220.\025\237+_\323\277\360\354<;*\310\307\277\212w\200\'-\\\340\277*\336\005\240\n\345\241?+\326x\002\304\021\341\277\361f\313\301\205\237\336\277\2534s\222\367;\331\277\376\255\317bJ\240\326\277\202\215\353\337\365\371\342\277\351\026\364\275\n\031\333\277\330z\216\341\024\312\337\277j\251\027\327S\006\336\277O\313\315?\023D\350\277\200\341\t{\342\022\333\277\2761F\034\231\344\335\277\243!\343Q*a\335\277h\227\3126\313\300\335\277\210_V\315\030\013\344\277\221D/\243X\356\333\277kn}?\322s\334\277\205\305\362\370\007[\335\277\266\361\253b\277\341\334\277:\357\030\201%\025\341\277D\305\271\377(\347\276\277\354:L\342I\236\326?C\251\336\226\237\006\316\277)\336\361\273#\302\331\277P\325N\336\021\237\336\277[\\F^\224h\334\277n\301R]\300\313\322\277-=\036#n\210\307?\300\036\270oZ\225\334\277\023\350\033\352\332\213\262\277\235\177`3eL\327\277L}j\006\002.\322\277y\301\022\325|\021\267\277\204\265\326\274O\272\347\277U\005Y\005 d\335?%\215v\2017\211\341\277\301\252\335#Y\217\332\277\277\206\\\200\350\357\340?\020\203\361\272\033W\331?\256<P\300\331\332\271?\347Dq}\016\242\334\277/\252^\341\321\304\325\277X\206\202c\340\312\337?p\216!\235\r\373\331\277?\371\242\3323\215\324\277\357\0326\302\211\205\304?\356\t\022\333\335\003\340\277\302\233\034\333\276\211\330\277\276\203\2378\200~\332\277\005O\204\201\245\302\333\277\342a\261\270\305\235\304\277\235\211\300\303zD\320?\210.EE\336j\331\277\014>\315\311\213\214\344\277k\261_\2409%\321\277\265*\323y\236\211\342\277\350\345E`\213a\334?\323\n\035\2055_\344\277\253\310\317\343\203\240\334\277\255tN\036\334\276\316\277\364/\213\201\\\377\327\277\'U6\007c\037\335?x\311j\200\363>\340\277\254\037\233\344G<\333\277\2722$\376\223\005\324\277k\206\257\n/\234\335\277\021\332\274\273\3372\316\277,i \361\206\017\333\277fw7\005\350m\320?:\004\320 \354q\322?()n\344\323\306\335\277\002%\354x\037\t\316\277\264\251\200\234\254(\323\277\013m\214\337\014\245\336\277!\316\036\303\276\270\320?\002\336]\302\374\320\340?\342\037\266\364h\252\342?\325\200\367D\215\370\326\277\016q\007EN\372\337?\362\261\273@I\341\345\277\233U\237\253\255\230\342\277\034\036\251[\311P\321\2775\302\r\276Q\'\337?\354I\005\272\233\214\340\277.\261\360\375&7\330\277\'s\301S\247\207\274?nQEuc\017\310\277V6b\034\022m\340\277\324 \026{y\313\335\277g6~\227\010\n\327\277\243T%>5\346\326?\203S\3769\365\026\301?\026=\350\300\017\232\340\277\217p9\342\271\214\306?b\360\223\027Wd\313\277\\l\377o\221 \335\277\307W\257\340\206\261\334\277{\032\213\001m\006\333\2774E\343\375v!\337?\242\362\n\237\010\235\350\277\374\016\217\016Yn\336\277\025\272\\\016\005\375\330\277\017\376\217]\263\346\340?\241\024k\3009\306\330\277A\3572h\215\346\332\277\023kL\343rW\332\277\202\361\343\232\310m\311?\334/<\202]\005\335\277\303Ow\3711A\340\277h\267\361\202\343\215\332\277\037\302S#O\255\323?\225\364\213m\255\312\350\277\222\337\354 \300S\343?;\261\301\241;\261\330\277XaL]\246d\302?T\253L\204O\253\333\277r!\250}\347\325\336?#\317\036\375i\002\335\277\0251\364\241nT\335\277\372\332\216\004ue\330\277\371I\326]\260\206\324\277\251\031\357\0326\302\307?`J\023\245s4\330\277Bx\027\234\177C\321\277\000\306u\204\272e\334\277\224\026\313\200\365\360\320\277\277\323d\306\333J\330\277\341\307\177\036\366\204\334\277\177u\013\023\374\245\326\277R\003\223<S\277\270?~;&\336C:\306\277\003\032\266wW\007\335\277=U2\2767\337\334\277\206\001l\274K\224\316\277\270\315\361]\214\371\337\277!\0347%\356k\326\277\201\213_\302\262c\340\277/\250\353`/:\340\277\007v\241^\225\260\336? \204\3335|\346\334\277%\244\342\275r\326\340\277\205\024\260\333o\306\337\277+\320\366\001\253\327\333\277\002\t/f\360\034\322\277\245b\010\245\324\212\342\277@\277\255\303\3522\332\277\336\206b<\2242\342\277\027 <\240\215\270\341\277/\201\000\276\200\303\346\2779\325Z\230\205v\327\277\026\243\256\265\367)\333\277N\024|.\256L\332\277\356\016\306\333\214\313\237?\336\320\357V\361!\335\2773\312+\276>\206\323\2770??\245\255~\336\277\215g\310_\367\251\336\277\307\256aD\252\001\322\277\033}qN\221h\332\277\014!\347\375\177\034\344\277%\272>\336q+\330?\335\263\215\303\211\375\327\277|\324_\257\260`\341?\251\320H\235\343\220\330\277\027sc\274\336d\310?K^\370\034\263G\320\277\214\034\032\375\005N\330?\250)\023\3106:\333\277\211\275i]\027\274\337\277\007\232\317\271\333\365\325\277y\252\205\212Xa\306?\317\265\026\003w\342\323?%\025\327B\332\320\321\277\'\237\036\3332\340\306?\237\rm\276\031\316\334\277W\343S\235a\254\320\277\370\326\321\202a\212\337\277\027jE\202F\274\326\277V\347 \001\006\266\336\277\307,{\022\330\034\321?\201}\021\300\017\177\331?\263r\365\204\241\345\334?\267\367_\235\031\363\327\277\2008Y\264J\272\343\277\366Au\367)\334\303?2t\252\204@\321\332\2777ZH\237\332\211\330\277\320)\310\317F\256\340\277\371#\271\272k\"\304\277\255\367<\373\241\204\335\277\313\270\353\235\270\271\301\277\225\317\331\237\027\260\332?\335\206I\237\363\246\335\277\024\010\032\267\301\236\312?\346\037\236\241\217\344\331\277\325\276\220@I\242\324\277\277Pv\351\025\005\344\277\343l:\002\270\331\330\277\001\371\022*8|\340?\236\273U\276\004\372\304\277\351\033\342iC\017\336\277\237z\275^\016y\323\277\241\027I\026\213\272\337?\252\230\357\205n\033\315\277~\235\345\303\375\021\330?\250\236\263\242Y\233\334\277.\253\023D\233+\327?`\310\352V\317\311\307?v8W \274.\341?\313}\027[\255\370\327\277\224\377$\2310\365\322\277\r\217\334\036\255\037\343?`{5\242%\037l?\215= u\340A\306\277\321\'\013\302\211&\320\277\005}\361^\030\235\321?\217=\030\004\230*\334\277g<|_}\270\303\277.\300%\235\324\331\332\277\302m\310\232\354\272\321?\350\025\313\004.U\330?\256G\341z\024n\327\277e\356\316\230QE\311\277\301\023a`\2510\324\277\341x\200\037\274\023\337\277\261\360?CI\322\344\277/?\303\335Q\n\333\277\310\352\373\025\327\235\344\277]\344\371ga*\341\277\303\246\245$\261E\334\277\267\330\345B\202\265\333\277\006\314*\t\334\374\251?W\322ia?\331\321?\242\351.\201B\232\323?\252\257\370\227\356\277\323\277\277Q\341\276\304\216\312\277R\231b\016\202\216\337\277c\327\264Zy\354\326\277\"?\321+T\355\341\277!\351p\000?\033\332?QA\217b\312\361\351\277\237\303c\334`j\333\277\253\233\244\\\216\325\324\277\314\026 <\240\215\305?Y\225T\330\322D\306?\226\222i]8J\321\277e\250i\233\013q\330\277\226\335@?[ \265?\333\265\316\t\353P\340\2772S\234\233\035\206\325\277\007n\356\371\253\221\321\277\224\'\030\347\322l\302?vm\322\341\337o\335\277\220E?\277\224&\335\277\377}c[Hx\333\277\350\224\025\375\200\213\321?\023\235e\026\241X\340?9\004\267\203K&\312?#\304\317^\001U\346\277$&\352\375-\036\340\277f\rA\202\240k\320\277\23427\337\210.\334\277\024\360\204\301\251\215\332\2779u/AW,\322?)w\341\377uK\335\277\251N\346\243\265\267\330\277c\341[\300\032S\263?\263)\323?\363\377\320\277\264\"j\242\317\307\335\277\030\226?\337\026,\306\277]+\353H?+\340\277\005e\340\241\244\267\340\277%$D\214\346\347W\277;\304\242\226\244:\312?\251\256\021\373\343\301\330\277u\253\214\353\204<\337\277 =\352T\236\345\325\277(x\257\377\337\375\334\277\270\361\335\234\000\271\337\2776\364\005\343\226\205\346\277+\310*\000!\355\336?V\302M%\207x\323\277\n\361i\312%\300\314\277\362\207Ur\004\337\340\277\367\207V\274\313\244\331\277\235\265\343\237|n\306?nA\245\000\007#\332\277\207i\204#\355\253\327\277\211\335\353b\242\332\313\277k\255\273\273\306U\331\277\326DU\002\030\005\314\277[\014y_\360$\340\277W\315sD\276K\332?\302CA\276\276\265\325?\274\031\034\302\204\323\327?**n\036\177\020\334?1\324\376Z\240U\327?\004\353\2237\033\006\342\277\177\357\200\374\266\261\346\2776\356\007\033\"\027\336\277\r.%\344\346\310\334\277\307\317\014\003\022$\334\277\370\0376\344\341\265\327\277\022\345\240\276D@\321?/D\271\372\322W\261\277\267\264\032\022\367X\334\277 \343\233\267\373f\335?=\'\275o|m\337\277\003\034\010\352\020\017\307?I\327\n\242\007a\340\277\025/\201!\314\311\343\277F\274L\177\274\370\322\277U\225\t\001\361\341\344?P\246\023\0015\322\327?\210\376\277\240;\367\302\277\310e\324c\370[\334\277I,\214\241Z\014\325\277\236\310\233\025\264=\276\2774\331`]\354(\326\277\1775b\301X:\253?\266].\003J\232\301?L\206\210@\232V\334\277\356\205U\376\255K\316\277J\375\'EL\005\333\277UIK\202\303\r\327\2771.\260\"\376|\341\277\202S\304\216kh\331\277F\006^\322\275\263\346\277\316.\204A>\r\327\277<\032\306^\241o\214\277\005\235\265\200u\301\320?#\222\225\035\352P\333\277\264\375\361\177\303\033\334\277$\273\261$iL\324\277\002\332\261lA\312\334?s\332\256+\301=\334?\335\336\342\237!u\335\277\212\302\323\320\253\246\316\277H\373\037`\255\332\324\277\002\302\177\241\344\341\343\277ul\251(\003\254\333\277@\257.]w)\312?oe\211\3162\313\346\277\366\004OBeS\336?\227i\342\272\265\216\332\277\351\305?\"\\W\340?M\231\243\340\214\316\337\277y\177\366\0027{\322\277\344<sAC\240\331\277,\020\034\033\252\367\325\277\315\013\250\036\006F\336\277m\201NR\252\016\341\277\010\265\031\206\023\301\313?#\277~\210\r\026\333\277\2739\2468X\311\331\277\253ij\033w\261\325?\266\372\207\200\205\204\332\277E\256\345\337x\210\332\277\240t;^\365\276\330\277g\370\313\376\253\324\331\277\031\216\3473\240^\335\2771\033\256\037\254\220\332\277\216\307o~\201(\342\277\236\265\374<\035\372\326\277\330\252\362w\316\232\313?m\343pb\037\317\337\277\354\245)\002\234\036\340\277\305\252\244\302\226&\325\277wS%%\230\005\333\277\247\351\365\037\200\261\325\277d;\204\226\032\306\332\277\237\206\230\340\0163\321?\020+\324\201I}\305?>-7\377L\220\336\277\275\036\351_\324f\332\277t\320\210F5t\305\277\207\020_?\'\261\340\2776\256\177\327gN\327?k\312>]\027]\335\277\301\021\254\3034\200\316?6\001\206\345\317\267\275?\034\3127x\262\335\304?-,\321\274\220\314\322\277Z\331>\344-\327\331\277O\263\274\202\237\376\242\277\330\033\214C\303\203\336?4!\367\276\002\002\344\277>\200^\033\236\234\335\277\373\260DB@\347r?\251\256\317\336\021\374\323?\226\356\tm\224\320\320\277W\365,\347\326\224\301?W\310\001`\341\t\326\277\010g\340\025\373\252\272\277\332\177S\016\034\206\346\277U\026\205]\024\375\332\277\2365\r\304\221\013\326?\207l ]l\332\305\277\217\301\253a\226(\323?\2748\226\034\034\221\262?_?H?\257\262\336\277\263c~\311!=\340\277\251\300E\376\313\373\335?\327\'\210\323\254\340\277?]\225\227>lP\334?\227\333b#\265u\333\277\212E\241\237\210i\341?2\367\230a\006\327\327\277\242\254\245\241\302H\341?\215\302\344\374\003\333\327?^h*\233\244\277\327\2777\351l\267\023\033\340?\245\223\266\002T\302\343\277$H\245\330\321x\344\277\374{|\204\222\260\325?}3{\352\2422\271?\357\227\211\001\226\205\255\2774\312D[\337\321\341\277\303\030G\233\231\317\313\277)\264\254\373\307\002\334\277kI\005\035\306\307\322\277\225\013:\306\272\335\321?\217\363H\315hu\343\277\357\\s\242\270\376\326\2775\024\014!\306o\336?\303\230\231>\340&\326?\373\322\364<,\022\324\277\261\346\327A\353\"\343\277e}\271\005\001\350\330?i\242S\200\275\374\303?HI8\302\334M\336\277\210\226e\035\310Y\315\277\031\242\361\341\345+\340\277\314\255\265\234\360w\326\277M\221\300B\215\022\253?i\022\345\240\276\304\335\277\033)\000kz5\341\277G8\322\276^\306\334?\212X\'\333~\301\335\277\236\311\345\334yd\334\277R>\346\376H\343\267\277W\204\223\033\342+\334?\351\316\270\025g\361\340\277\264\317\235?\361\254\344?I\345X\244\252\005\331\277\014\036K\304\000\356\332?5\301\303\366\213@\307?cf\372\200\233`\323\277m]\305=\361\367\333?e K\366:\357\311?>\000\261\276\344\263\340?N\3138\333\026D\321\277{\340\276iU&\344\277I\331\"i7\272\343\277\210\302\302\244S2\323\277hr\265>z\375\323\277\177>>\337\036]\321\277{\374{|\204\222\332\277\313\323\373\276f\226\336\277\034\216\266C&\315\327\277X\205\366\177H\276\344?%t\331\340+\027\333\277\302@\306\222(j\344\277\352:\267}M^\326\277?\200V\252U\005\332\277\1771\247@p\331\234?\263\215G\302!H\331\277<qR\373!t\332\277\240\331\032\266\322\020\330\277\241D\360d\334y\312\277\304\014\350\340\364\311\333\277pP\014\332\365\034\302?uu\307b\233\224\327?\214By\274\0348\336\277\362\365k\241\032e\357\277\205\014\242\275\023\026\335\277\223\006\361`\017\026\333\277\345\306_ )\276\354\277\366a\275Q+\314\340\277;\347e\034<v\331\277\t\366%<\035\037\333?>Q\341!\357\311\337?\005\242i\201$\t\337\277\373\372\255\337D\233\327\277\\H4?\006D\315?U\272`\025\024\253\305\277\001\354q\031\026\'\317?\372x\317\036\273\315\341\277!\302dO\247a\333\277\372\315\212\311\227\247\314\277\275\355\370\345\202\351\325?F\021\255p&A\341\277\265O\307c\006\352\333?\377It}\274\243\336\277Zp\324D~\201\335\277!\307\367Am\006\335\2771\314l\004\240\331\336?\023/\252\240\375#\347\277\354\243\266\201\371s\340\277\223\316v;\261\275\341\277\276s\377\303#\022\336?=G\344\273\224z\346\277\220\241c\007\225\270\332\277\315D\t\341n\034\300?z\005\273\304\005\036\333\277\217{FdP\224\334\277\024\201\301\240\022\330\345?\210\322A\013\307\373\270\277\241\023\337\334\241\331\304\277\367\'\310:\3421\300\277\253\272\242\357\311\036\340?\303\222\376\240&a\317\277\234\260q\273\237\354\334\277\262Ku}\366\216\337\277\231\321U\333\3117\336\277\255\244\025\337Px\342\277\313\362\032`\213\202\333\277\364P\272xh\355\317?\303\224q!\311\213\336?\340o\213dU%\312?\013\3065\374v+\336\277t)\t\344m\000\336\277\352u0\007\346\215\334\277\316p\301!m\306\333\277_\315C\236\013\200\336\277\004\010z\003\'6\335?\013i\350\372\231U\345\277\256e2\034\317\247\337?\204\336\362\303\316\265\323\277\014\200\247\177\377\234\340\277\021\325)\311\031\216\312\277\351\005#\037\211Q\330?\347\240\225\305\016\364\326\277\263+\251\352P\023\303?$\\\n@\212W\332\277\261o\202\312S\261\326\2777\346\216a\302\346\324?\022J\004O\306\235\332\2770\273\006\001\"\022\333\277-\214>0\221\234\326\277\025xaJ\250\t\267?\275\304\232\3021(\341\277\255<7#9O\300\277\202l@!\216w\344?HK\253B\177x\330?\224\364\325\372\307\247\345\277\277\371\005\242\304:\324\277\341_\004\215\231D\335\277\016\311\1777\223\245\335\277\221\264\300\303Y6\321?n\354#\001\264\367\335\277\307\033\262\344\236l\272?\371\311\346\344$\230\327\277\325Q\037\222k\224\340\277q)[\342\320t\333\277\231\336Y\026\247\265\333\277\376\325\343\276\325\232\344\277\346c\322:\005T\344\277R\337KDln\315?\306\255\335\321Z,\341\277\256=\334\243q\007\325?\343\006\225\033\271,\312?)\250\217]\365\202\335\277\364\302\276\031\014`\315\277()\362\034xR\332?P\027\316\332\022\336\337\277\260\007\254\177\204\237\323\277W\240\253\347\203\351\310?ah\025\000Z(\262?\277\241*\205\304f\335\277\266\260\331W?2\311?\220\261$\212\332G\334\277D\344p\275\330A\332\277L\t5\001\216\026\321\277\326\200\224\032\322\017\305?\305\366\244]\226\000\333\277\374\311s\330\330\200\335\277\330\223\351eNv\312\277\351\371.\000\350\313\333\277/\221\003]\230\030\333?\305\377\374B\270\227\336\277\246\367\350h\260\004\324\277\313,B\261\025\264\332\2770\204\234\367\377q\340\277\226\370\222|\333B\332\277\247\366u\"\271c\334\277\232\377>\200\230\306\333\277\325\304L\354\353\n\334\277$\303\340P\256_\337?2\033\t\331\036\242\340\277\340+\272\365\232\036\337?A\203\250V\272\026\307\2777E\221\377\023m\340\277\262q\263.$\226\337\277\250\202Y\272\345\227\314\277\246\355_Yi\222\342\277I)\t\005|\351\332\277b\000\372\340)\342\336?\356\234\177\036\027\223\341\277\303\222\376\240&!\334\277\203\217\034D\306\276\331\277\002\323\016$\224#\327\2777c\240\204\374 \327\277i(\244\353x\202\324?v[\267{\230A\327?\352\263\003\256+f\335?7\222\333a\331m\323?\226\363{QqR\334\277H\017\2158\256\220\321\277\007\031\022A\346\024\340\277\313\260\335\177\\I\303?\341\213@\006<z\336\277mT\351\037+\025\340\277ve\274R;(\340?\301p\360}X\014\304?3\205s\262y\201\340\277\344\004\267\377\022\002\341\277\232\313O\242\0142\331\277\211,-~\256\221\350\277\323t,\245\035m\341\277\265x\251\277\373\266\317?DU\247^\022\302\337?\217\217q \177\004\343\277\262\361`\213\335\276\331\277\205\346\337\323A\203\344\277:-.D=\263\322\2771\332\231\370Y\233\323\277\326\331w\342\305\304\337?\242\003\232!\270\276\334\277\372\333\267\275Q\251\337\277n\222\325c\021\371\345?\303\364\275\206\340\270\331\2775~\002\244\r\362\323\277E\321\352\201\342\311\335?\267\377\022\002\003\022\324\277\332Z\272\335&\267\351\277S\213\322\357\014d\344?^a\003\032S\315\302?\232\307\253\275\231\242\331\27750\352A\336\376\333\277\037\002\036\203\333{\336\277}\243\353\374\272\327\331\277\000\243\262\376\"*\274?\250\3150\234\010\256\331\277\350D\3146\201\263\320\277\034P\241\200\016o\336\277\337\253\261\337n\344\340?ym\200\343|\373\261\277\001\263\214\036\t\305\313?xd(\376Z\244\336\277!\003yv\371\326\337\277\315\373\244\177\3560\335\277\227\n\"96\016\315\277\276f\271lt\316\306?\005\330\313\337R\210\331\277\n\266\031\300\276\312\332\277\273\240\327\002\357\242\260?\034mf>1\274\331\277\022\027\200F\351\322\333\277 \300\267#{\210\302?v\276\206}\216\321\260?\266\243\325\034b\264\306?!PG\021c\343\277?#R\313\275]\002\334?\336\200\307\236\332l\331\277\321\210%\'\013F\310\277\317_2\237\275\304\321\277\204\330\231B\347\365\335\277\313\202\313[\\\200\320\277\304\330:\037;{\325\277\243&\023\0325\035\304?\013\033\257\212\201\277\337\277\311R\322`\246/\326?/\254v\250\001\336\324?L\254\347\377\260\200\305?\330\273?\336\253V\333\277\322\201\3664q\274\320\277VE<\002M>\336\277* H9\363\006\336\277\020\315\372\234\324\372\330\277\200\346{_\277T\337?s{\356\251A=\332\277\300\341O\236\303\246\343?\221z\221\001\207\355\315\277\207\302F\335\367=\334\277)iQ\341\000a\340\277\376\016E\201>\021\313?\373\r\311\1777\323\341\277\022\037\216dEC\323\2776[\026\237D\274\336\277J;\332\335\250:\331\277\217\215\376\237\334\231\343?m\227\221\325\010X\312?\344aF\035\302\035\335\277\210M\277\237u\250\341\277\336\227\257\242q\356\334\277\232\360\246\266/\373\310?B+I\001\026\267\336\277H]c~\013\276\341\277\004\256\310;\311N\325\277\213J\023\204e\313\304\277\023\237\371\244,\346\337\277#\t\014\243j\005\302?\030n\nu\242\256\341\277\021d\220\375$%\341\277\1770\360\334{\270\337\277?\324\350\233U\033\335?\257\375l\375W\312\342\277@:\216\202T\210\321?\362r}\304T\237\343\277\342\375\237`R\376\332?\361\036\261\'\313Z\335\277\340!\326,\341Z\340\277Y\006\213y\014E\334\277\321\346\335\375\226e\322?\351\350\237}8\n\333\277W\217\003\3103\\\301\277-\214>0\221\034\331?\216\3444<\244\365\337\277\354\\\007\275\355x\344?\376q\220J\220\025\314\277\010^\251>\302v\336?\010\273\223\025\344c\300\277\032\3117>\007T\321?bhur\206b\344?R\245\034\202\231%\341?\230\016\204\001\327\327\345\277\265j|\313Au\340\277\257\r\221\252X\302\233?\320\232\335b\227\013\330\277\2003\010\336V\233\261?"
      }
    }
  }
}
node {
  name: "normalize_element/component_17"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "5\317t#\352\315\333\277\"P?\240\032\314\302\277\246v+\360\272#\322?\002\234\331\014B\t\213?\007V\335<8\314\304?x\177\274W\255L\322\277\227R\270\232L\007\325?p\325\320a\031v\266?\240\277\022@\030\025\301?\275\266\351\225\323\032\310\277:j\226\025\324\001\307\277\256\304\260\201|\"\306\277\316+\030A\325{\231\277\0348\261\321\203\314\312?T,\206\304\240\300\235\277\265\366\241\177@\357\310?\322\0038 \2662\332\277\224iU\307\001\246\305\277X\013\242\244v5\334\2772\357H\'\330\240\306\277 \211\352\357\235\177\270?W\370e\366\232\032\307\277\360\254\332\276\022\013\275\277\303\335\325\202I\267\240?\365\3332;\346\027\325\277\021\013)\375\214$\311\277\000.\257\371D\340\307\277TP\264\037\347\205\266\277!\376\'\240\005x\301\277t\230\343\240z\'\255\277s\241\362\257\345\225\314?\251\020\321\340\235\231\304\277\352\223\334a\023\231\303\277~\201\254\351r1\274\277n\360\256H\206{\303\277N}b\225\271\226\300?\230\303\254\037\264\201\306\277N\3047!h]\237?V\3170R{S\260\277\317\261\315\327v\244\312\277\r\225r\003\255\334\254?\350V\276\035\227\'\312?\316\331\247\210x\220\245?\236\206^5\205\004\302\277\033\362\256\376\370\340\323?\333:\223\221\016\352\340\277,\\\177\340dz\311\277J\373\223\266\3007\315?\223m\224\200\216\022\204\277\200\031B\204n\345\244\277\377\267\253\272\273\214\270\277=\374\312\275\237\036\306\277\201@\336\340H\366\262\277\001}\215\352\225\256\300?V\033\020\337\221J\332?\331\344\341\036\372\327\210?\332\031\307\304\275\344\320\277\"=\240\307\203\010\334\277\334zU\200R!\321?\367t\226\325K>\317\277 \212Z~\006\362\276?\225\311\272\311\271\336\303\277\nH\240f\355\333\302\277=o\266\373MO\332\277I\200\225\241\374m\261?dO\351\375\322$\321\277\244\306\000`\247\036\307\277\335\303\322~s\230\303?\215\324\3628II\234?\n\260\270\315\2163\262\277\263J#E\350\220\317\277\371-:Yj\275\257\277\331\316\367S\343\245\270?u\250\350@\275\266\245?\274/\367an\013\270?Um7\3017M\327\277\201\340\371^\246\232\305?\347\257\237\344_\342\237\277K&y>\233\006\244\277\254\327\200J\215\267\270?\252\260\000C\342\340\320\277\230}\211>@s\307\277\220\322\300\035\025\360\256\277\214k[\030\022\305\312?\337\224\250\315\356\177\263?\341s\016;\337\321\320\277iR\257\000KS\334\277\366\245L\244\023\r\306?\323hQ#\0353\304\277\326\260\356>\030\217\236\277N=w\'D\345\315?\234\372\376\325\374[\303\277K\277m;\2478\274\277L\330#yS6\253?3\344\226^\264\352\320?\r,O9\211\265\271\2770}sB\361LF\277\345\017\304\201\251\311\301?\017\331O\345\005\357\207?\2435\355\377o.\324\277\326\325p\323\227\214\267?j\237\361\361\307\274\271?b\016H\343\314\206\321\277\177\217U\245\210\247\336\277\264\330\346\371\345)\215?C\3368J\332d\277\277\204K\307\234g\354\303\277h\307p\351VW\317?\201\025\240\240&\220\252?T\273p1P\343\327\2773Y\360cK\335\247?\273\017\335?X~\331\277\263\233\232}~\025\242\277/_\311\033\201t\302\277caF\200\354X\310\277\'3\275H\221\312\313\277\004\007\363\330Hr\220?CU\344\301*\237\266?\222XR\356>\307\301?\325%\241\374\366X\320\277\005\210\345C\016\031\303?\334\307]\306E\234\313?\324\370\001\037\356\260\325\277\t\312\206\230\277\000\212?Lc\203\2360\225\331\277~\2640\362O\374\275\277T\217\260\177\t\242\273\277\233\'ly\304\354\307\277\253z\342\001\261\341\237?Zd;\337O\215\316\277\273\222\211\000L>\303\277\024\342x\333\330\256\322\277\020\374\271\262U\023\335\277\251\254\\^oQ\301?\332\224\024 V\364\251??{\351~2\354\274\277\222\211\245\222K-\266\277(d\010|U\031\320?\\\315\327\270@\372\317\277\363W\247N01\266\277\024\324K\347\036\355\320\277\312\340(yu\216\201?\246\224[\203\214:\332?\364\332\360\344h\310\301?\254\242\344z\200\223\307?\3710\030\257\273q\276\277jH5\0341\333\223\277\321\265\314u\\\205\300?\267\267:\204\032\323\303\277n,\2136\205\235\263?\261\305\006\274\340\224\214\277\262Zh\000\322+\267?\302\002N\245U\343\241\277\216\010B\211\001X\300\277\320\265/\240\027\356\244\277\372\203\334\240Q\025\321?I\242\343\337q\316\211?\323\333<a\313#\304\277=\321\267\375\331\354\321?ooL\211\003l\302?\001\277g\240\t\377\303\277\2029\335&\232\017\310\277\244\005|?\264\335\244\277G\344\375\260\214\252\262\277\2358\261nY\021\264\277\342\266X\177\273T\277?G\323\217<\306K\325\277k\027\r\370\200i\316?\235\275\320\257\357\273\264\277\342\236\n_/\262\242?\003\352Q\341\2356\336\277\032Y\3509\330Q\277? 9%bB\263\333?\371\377\006\'\201\321\301?t\346&\203\006\017\311?R\310\272e\263\235a\277\213\221_\036\266\035\316\277\266\202\350A(\014\326\277\233GhE\200E\223?7\355\212b\267\244\244?0B\200%\272[\303?\014f#B\351,\227\277\373\374\234\'C\372\334\277w\020\\a\321_\332?\223\021\202\033Ji\311\277\244\354F\202\035\275\310\277?\244c\367\262\247\303\277W\343\021\201\217\306\341?(\355\262\004\276G\331\277\313\370\265\375DH\312\277\333\ta\373\352&\324?\225\277\224\344-\325\327\277O\216\024\'}u\231?\217h\356`E\277\254?\263oYK\"w\234\277\2562*\333M\021\305\277\217\324\357\200\272\032\312?\227\230\200\302M\204\307\277\235\225\335aM\304\313\277\306>\342\006e\342\206\277Q&\177A\034u\320\277Y\214x\272\014b\311\277#\311AC\336\366\331\277\315\034\263h\021<\302?Z\016\364P\333\006\320?\344V\265b\207\312\321\277\330\206\345*q\370\340?\236\366\323\000W\022\267\277q\014\226$\256g\316?\260rG\203\004Z\262?m\205\372\247e\265\300?\006\005\357\365\377;\330\277\355{7\212j\031\302\277B\261x^\350\031\242\277\301\351\270u\222\010\254\277\207\304^\244\'\227\277\277G_Z7Rt\274?@\213\000\0021$\327\277na,\277K*\260?^:*Z`_\232\277\036A\001F]\214\223?\207J\351\272l\313\321?BC\275\350De\315\277-\363-\336U0\320\277\360\n\320\370\266G\300\277\263\367\332\032\256!\331\277\245S\323\005\'h\316\277j\3562\r\324\363\325\277p\264\343\206\337M\314\277e\324\010?i\217\253?\304\266\301`i\246\333\277\037\360\247c!<\332?\363\002.\300%\235\257\277\252Y\261\tz\271\307\277\301\251Q@\301\342\310\277\342\225\177\210h\317\267?{5\233\"\033#\316\277\374\265\260\377\036\342\233?\251\"h\016A\274\243\277\245\256\010@\324\344\332?\013E\020\240\014y\265\277\351\2470\235s\203\323?O{\204y\023\354\304?\t\212\037c\356Z\267\277\003\265\367-c\330\266\277\203m@[9A\310\277\376\273\272:2\234\331\277\347\246\005\343k\305\242?\210E\261\201\031\370\310\277l\340XaDl\335\277\022\020^~Q\311\272\277\365o\260\232[_\305\277\357\324\320\304C\361\333?\205\223\331\305\331\231\307?\245\202\016\343\003\365\307\277\354(\205{\220^\217?\017\2137\203\326\373\247?\351b\025g\363\325\235\277\307~\273\221\036+\301\277\357=\226\035f\330\300?\026\266,\200\245\312\242\2770\320Zv-F\331\277\340\177\216\003m\372\330\277P\274\261=\006\255\332\277;t\264\211\0274\313\277\306\t]\323\315\217\335\277Y\0340\271\341X_?\200\'\322\242\343\217\321\277t\026I\375\355\031\320?\375\344\336\262\371\356\332\277\r\2226<Z(\271\277\307x\234\273\300\331\307\277m\037\023\245\224B\263\277\024\271\267\215\314D\270?\313\261\'G\"\260\276?\213\340\177+\331\261\325\277}\334\247x\226\377\273\277\000\253\273c\3051\242\277\r\300\'RqN\267\277\021]\321_H\204\240\277\263\335\322\244\363e\307?\365\332-\377a\317~?\275(\247a\353^\274\277\n\302O\3731\326\306\277\275\202]\342\002/\332\277\230\227\r|V\343\257\277m]\305=\361w\327?\377k\326\237\030\347\250?tab\373\342\265\300\277\0210_\003\307\n\305?\374\220u@+\323\334\277a\036\312\001\317~\273?\270Q\256:\2741\321\277\001\006Y\201\347\177\313\277<\242\000Y\241\253\313?op\267^\262u\314\277\333/e\001\217\177\267?\271\362@\001gk\266?\327\036\322|\211\t\241?uX\232\301\003\366\231\277$G:\003#/\322?\367%4\254V\344\266?\355F\376\344\030^\316?\217_\354{\334\220\332\277\236\027\177\277\276\364\247\277jt\3361\002K\263?\255\2368%\305l\301?\236\326\310\tn\377\243?\341X\037(\032\030\265?p\225H\036_\255\315\277\320.[\302\014S\303?\265\374\237G\265\235\314\277\020B\274\205\340~\301\277\036\304k\352~F\305\277y\036`\326Y\347\311\277\351v@#\"F\231\277g\244\265\324\007\263\271\277\n\266\031\300\276J\303?\263A\320\030\200\"\207\277f\241[\267Z\212\313\277\350_\334W/\320\262?F\302\255q\354\217\301\277?<\350eV\347\217?\000!\355\3329(\307\277\341\351\206\207\3376\235?^\320)e\245\213\300?\213\215\365\344\314<\333\277p\306\027\212\307\207\301\2779\007(=n \240?\255\222\237\277\226\370\276\277\230\"\257\275\005H\304\2770dT\235\376\201\264\277\262}\005\277\306[\261\277bGg\211c\227\241\277V\303\227\354L_\227\277\232\263\333\272\335\303\306\277q\210]\200\"\273\303\277k\301A1h\027\343\277\240V\217\003\310\263\333\277^\013\376\247\260\014\305\277\353\200\271P\330\311\263?2\025\250\346\356\312\304\277\301(\030\000p\215\305\277\266\307\301[\3263\301\277\226\221\037\226r\343\315?\217\237t\277\226\231\311?\321\366\032H8\251\306?\232A\276|\231E\324?3\212\'\263(\211\262\277\036\0202\332\364\261\270\277o/\304EI#\320?\024\234\362\317\251\267\274\277\315\251\3508Ln\262?\302\300\265\013\264\330\277?\244Q`\205\204\275\300?\231\375\037\377\203J\255\277\314]\215\344\331\202\324\277t\310r\267\220l\302?\262\227\361\337Q\035\316\277\346\002\227\307\232\221\330\277%~ \324\240\303\323\277\350\356\264\341\"\212\256?\032\370\2647\266\246\303\277\177un=\267\216\300?\247s\013~\227)\240?0@h^\212\202\314?\216Y8A\202\177\307?\251\351iv\223\316\341\277\337W@\374W\261\237?\366E\000?\374_\271?\204\001\225;}\216\327\277[\203\357\344p9\244\277\225\307GI\027\264\307\277oD\275\001\342\005\302\277h\341x_\021\323\326?[#\243\177Y\214\311?X\024\300\336\016\336\320\277\360[!j\252\300\310\277\177\220\237lNN\270\277O\244\207\343\361\233\240\277\324_\320\276\311\241\270\277l\240\320\035\212#\321\277\362N\025\276\204\253\326\277\227\034\271f\3310\250?\003ft\366\204\333\322?5P\317q$\206\305\277J\202\r\333X\201\315\277-\267Q\360V\216\275\277\315\311\254Z\251\322\300\277h\245ZU@k\310\2779t\243]\277?\274?3\202\375?\235\336\273\277Q\347@\305\'S\313\277\210\323\017\0131n\255\277}P\032\341\"4\260\277A\264\373\372\306|\302\277\367w2\017\313,\275\277\304\363\255j\244\000\275\277\356L\364;E\265\333\277%\233\304\203\332-\335\277\317\377\243\035\324Q\310?\361\217)\345\326 \302\277\207\205\275\375w\214\327\277\020Y\225^JF\240?5\310\352w\335\262\315?o\020k\371\232H\205\277\300\036/~\374\240\247?D\326\236\202\221Q\311\277\300\317\270p \244\331\277\203\300\014\276\027\374\331\277\212\200a\376\254\'\275?\327b\277@sJ\306?W\366U\240\263\330\322\277b\317\321\274y0\211?\345fU\327\3436\311\277\276\370\201/u%\240?\265\330\222\372W{\302\277Y 0\305\013\030\335\277\220fM\250\267q\300\277{\037\227L\037GM\277#\252v\241G\371\234?9\325\030|\263\360\331\277\305I\355\207\320\357\244\277G\354,\335\321\275\271\277\317\215#\265\324j\265\277\2675\330\212\354\271\321\277\305I\241\371\212\330\231?\323\252\320\037\0362\312\277\240\345\263\033\001\005\262\277\360\370\325\240X<\242?\212T\275\241\225\240\300\277~%\210\241r_\325\277\232\206\270\2440\220\314\277j\303\274\"S\231\333\277\016\312\352\014B\257\335\277d\300a\273\336\252\271?\004\247\004\3452E\225\277$\315\304\031h\243\340?\0039Q\340\327\247\324?A\223\314\003\273\016\271\277\221p\020c\210\222\335\277C\224H\005\302\014\322\277\r\030E\213Ch\262?\246\221\001f\337\221\306\277\010\237Z;Y\203\273\277zXf\031\373\365\262?\341\002\226}\323\313\323\277\354\272\\i\276o\330\277\263\020\236\202\\\337\220?\2769\003\363\365T\201?\0035\027\340\004\244\256?\204\026L\333Ck\326?\250,\361\035\210\356\334\277V\221\372\200z\222\304\277.\326&\004a]\272?\311\314\344\037\246\222\277?\240@\361\306\366\030\301?\225C\315\210\271A\315\277\032\025\274\021\253y\264?\035.\035A1\336?\277\372\205p/\335\342\261?\262N2\305^ \262\2779@rca%\311\277eN~($\333\255?\262\217\343\301\365,\334\277\232\000h9u\n\306?!z\255\337\247\205\303?\007\210\325a}\252\330\277\314\362\211\375\344v\256?\376\361\252Cx\370\240?\352\242S\035\223A\303\277}\3527\227\013\252\302?\237\324\3454\016l\216\277\356\021F\300\334\177\267?\022t\225\235g\264\245\277\0318\240\245+\330\264\277Y\205\315\000\027d\276?\262\0022*_\206\301?\330\373C\351\301\223\315?G\234\343\026\322e\305\277\222G\337\300\276\177\246\277\275H\025\203\217\332\270?>J\035\313X\300\271\277\035Xm\202\230\231\331\277\037\324f\030N\004\315\277$\3023_-\020\315\277\026X\370\341\2756\327\277$jXB-\274\274?07\236#\200\010\234?\256V7(\253\263\332\277\242p\207\227\361\200\312\277\023&\316\2027A\261\277\336\322\305\001O5\264\277\371\n\302<\363Py?\215W\213\025V&\304\277#\232\013\037\273R\261?\373\025|\344 \262\303?\3271\021\343\363\222\305\277z\362\270\301\263\261\272?VJ*\256\205\264\275\277A\'\245\034\243\247\304?\250\356\302\275\317\304\303?\330\363\322\240\252:\300\277\304\206\372\237\364,\330\277\247P\006\334-\250\301\277\227\251\334SX\372\217\277\365\333\225e\241\000\276\277\033\311\324\023L\353\301?\241\277\257\025]\254\304\277kK\333\307#\033\302?\"\352\025\201w\023\311\277~?\261%\026\276\305\277\327\247\332v\363\267\306\277\034D))\311\035\302?\236|\027B\020\030\245?\327{\311}\255v\247\277\240\225jU\001\255\307?s\247\317iq\241\327?\304\212\205\347\306p|\277k\373\221\001$\303\324\277\\x\034\016d\240\261\277\315j\252\274W\214\332\277\361\327\246\251L\316\300\277\301b`_\343\341\306\277,\335v\004\344\t\320?\365=vYD\373\233\277\351\004~\236P\031\320?@*I\307j-\314?\343\200\017\276-\341\264?\352\247(,+,\264?\000\000\000\000\000\000\000\000vS\021A\261\"\267?\002\203b3\331\242\260\277#\226{\036/\346\311?Sxm\302\377\216\333\277\325e)@\261\341\332\277P\247\237\344\314~\301?\235\247\021e5\376\327\277\345\"!>n\307\301\277\305\313.s\025\346\270?\214\262\316\236*k\177?^\313TV\r!\300\2773\322\241\277\017\210\274\277\342 h\237\243b\246?|\030\357\001\231\241\300\277\267n\326\"\232\'\242\277+\374\327\301\332\373\276?\3563\277~\256\324\272?vB}\005H\270\260?\236\3273\337\034\211\306\277\371\231$\335iG\220?\377\227J\303\031\221\332\277;\266\022x/\020\316\277\326D4\364.b\224?\277\351e-h\316\274\277S\302~\025\001\312\317\277)\377\377\244F\r\317?\270\253\374\327^\260\264\2776aV\203\213\260\333\277\356\220I\343\243\007\240\277\"\331+EU\200\321?3\257\360\03445\255?\222\031\271\270\327\223\266\277\016\n\340\354*2\213\277\033{J\\4U\255\277o\333\224~\004v\321\277\375\364\2375?~\311?\317\213n\030`\372\307\277\275\310/|w=\226\277Q\206h|x\271\331\277\214\270!B3:\307?\266\251O\2542\327\267\277/\346\000$G\270\320\277\241\260\264!9\370\273\277\306!\362\310\345\340\316\277\251\0019\0275\316\305\277\360\005\034\370\007\200\320\277\202\2165\247\273\200\272\277v\023!\032\202\010\302\277\267\3637\200\002\230\331\277\373h\013\344\346\017\251\277\033,\355\353\370\343\215\277<\372\224\240\025\321\230?\026\310\303\255Hm\267?\356\322\036\340]\357\240\277R\377j\037<$\323\277\330\330\200c*\030\332\277\3543\343D&&\302\277D\300\204~d\202\332\277{d\030\034\312\365\302\277\t\330\324\232be\303\277\030\315-!\335\327\314?j\305\263\333\231O\332\277\234\327}l7f\240\277\217\232e\005u\000\320?,\370\n^62\242?\356\252\315 \272w\211?\030h\353\236D\235\301\277:s\325]U\315\270?&\212\322\326o\303\270\277N\027\367YD\230\264\277\0268\343xa\022~\277<\002\367\275\377\357\265\277#\245U\004jw\314\277\037\324\352P\362\217\306\277 \351Wc\236\317\307\277$\212\177\216E\211\335\2778\216\016\3764$\321?`\355\263\300\332\365\215?\217=\265\331\334\301\267\277\340\262T(\034\213\273\277\374X\332\014\344\227\266\277\031\236M\375r\034\320?b\307\363\3273\235\300?\325\221\310\343\016@\252\277\345C\336\337\221\222\257\277\013_\302\025\016\214\261\277\367\261@\303\264\322\273\2770\177\246\332~d\271\277\267\371VV`i\310\277\347\371\025cG@\321?l\r\276\223\303\345\273\277\'}kq\327\334\334\277W{T\323`\340\236?\022\032\271U\255X\301\2777s\202\025+\223\306\2777\027\240\351\374F\263\277r\256\177\334 \210\244\277o\n\216?\017\275\334\277q\375\201\223\351\247\265\277\014\253\035j\200w\264?m\273\\\006\2244\260?0^\230\361[\231\334\277\357\337\037c\254>\321?I\314?<C\237\323?\241\326\222`:E\273?\376\321Xw\0037\250\277\374x\374\237B\374\261?\221[5Fi\272P\277\203<\365\'u\362\274?W\245\241\004\005\367\273?\254jw\177$;\210\277\204\270\325 \212Q\260\277t\332K\001\006\325\323\277\314\337x\317e\220\215\277\000\000\000\000\000\000\000\000\370\001a\n\203\360\314?\352\246v\201\360s\267\277w\374\337]\243\357\246?<\023I\335\226\024\250?\375#\367gK\305\230\277\257\215\030@o_\243?sbQ\t6K\307\277\034\350F\375\232\021\321\277\300\3301d+\036\311?\275\000\230\276\031\255\322\277\330Q\254\205\037=\311\277\332\267\213\027\250\230\315?%\177\322~\333{\276\277|<>k\310\211\320\277\262\273\335\036\306\\\336\277\266\221\035\341\325n\300?\014\014\017P\320\234\340?\216f\033nvZ\277?I\344\222\025\211*\306\277}\222,A\365\370\253?(\310|\376\203!\335\277\266\256\342\236\370{\312\277\326\3435\344\334|\250?\005H\270\271\306\241\221?\031]\205df>\236\277x\357\207#8C\333\277+\244\260\026\225\220\210?R[\023\240\340A\311\277\030\226\375\302D\346\333\277q\3648\331\364\n\227\277\t\326\207\341b\306\256?\356,\223D\243\371\310\277\033F\3466\206%\321?Vs\353\373\221\236\331\277\306+\265\203\266\301\335\277\206\362\267\235\263\216q?\261#a!k\264\321\277w\177;\327\227o|?f\252\232\377\333\325\302\277`Xf`\320\201\243\277\263_5\236!\277\336\277\027B1&\273\241\244\277\362A\021\203\247m\333\277\200\2030\226m\320\254?\224\317\203\237^G\251?\322[\227uZ\222\300\277]\314\205\2002\374\330\277\"T\251\331\003\255\267\277\322M(e\316\212\336\277L7L\336G\010\267\277-\307\361d\263z\311\277\214\tZ\026\206\247\273?\207\203\221RaP\210?1\2273_N\036\312\277l\242C\236,N\305\277\024]8\214Ya\244?\323B\367\034\300q\251\277q2\341\377\335\356\245?P\001\254e\235\267\306\277\031O\014\342f\345\323?*\025a~\377\312\262?\251\2658|5\364\320?\223\201\217\003\247e\333\277\010O\360fp\010\243\277e\325\345i\000<\210\277\232M\025\306\365s\272\277\030N\251}\000s\264\277-\316\362\036b\341\252\277[\004kA\224\224\327\277\200\030:\331zD\305\277\316r\023\224&\316\267\277\347|\210x\261Q\301?)0\360\036\230\212\305?j\005\372\002\202R\310?f\233#D\\m\333\277I\0108\177q{\212?\204\010\371\037\347\235\271?R\330\245C0\331\250?\221\254\354P\207\364\263?\242\205\035)\317z\276?G?T\371\"\312\310\277\000\322/\370\321\374\235?\315f@\203n+\300?\037\r\310\332\266\332\321?t\220\276\346\250\345\302\277:P\361\311\324\356\302\277v\t\271\030$y\306\277\263\024\177\312\347\313\321?\251\241\r\300\006\204\340?\361\262\313\\\2059\335\277cy\374\203\355L\314\277uFkw\325\244\310?\215Sr#lE\253\277\356\246\252\274\\E\204?\224\307u\201\002Wt\277\360\364\316\221*\304\273?#\"\2105\215T\310\277L\335\370\207\353 \272?\371\274\301\233^\367\254\277#{\316\'<2\305?\364\343\314\002/\353\332\277\226\204\026\242\333\374\276\277sG\203\004Z\364\325\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_18"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\36765\204\356\210\234\277\373\2774V\254k\340\277\335\324z\236\303\205\342\277;\303\324\226:\310\345\277\3614\323\234@\201\327?\204\031K?~B\333\277\t\361/\037\234\021\326\277h\351m\340\314\367\334?\323y}{\021L\337?\014]\344\371g\341\337?t@\022\366\355\344\340\277Anu\357\227\005\331\277\262\342\n\336F\271\340\277\323\237\375H\021\331\343?\335\311L\016D;\342\277\310\250|\031\326\036\326\277\272\217\324),D\301?\205\226u\377XH\343\277\306r\246d\224\202\323\277z\302u9\343\003\312\277\230\274C\202\220\t\324\277\225\372\rn\306\304\336\277\333\314\327\033k\265\344\277V\224\\\017p\222\344\277\351\230\230\323\nx\341\277;\310F{\027\312\341\277\372(#.\000M\345\277\025\271\3618Vs\345\277+\307\277*r\343\340\277|\337\215?0\253\345\277_\374#\302u[\340\277T?\312\343\3042\337\277\226Y\204b+\010\351\277\235$\247\300\023\304\335\2771\031;\237\t\346\326\277\010\365\200\273\344f\321\277\312\235\302\337i\261\341\277\"\250\032\275\032`\346\277l\\\377\256\317\\\340\277g\372>\177N?\322?\'A\311.b\351\342\277\243+\205\376\021_\330\277O\004/\002|\032\346\277Ar|\376\305\035\344\277\315\304[\204\2653\323\277n\274s\334\264\017\241\277\222Y\377\337\277\026\340\277h\276Z \007\306\321\277>|\364\341\264\233\341\277\021\215\356 v&\335\277\334\244\232@\256\340\337\277Sx\320\354\272w\354\277\304ep\357u\255\342?\314;VB\332\263\332\277[\216\374f\007\201\340\2775\030\331\204j9\342?\256\321\264\274Y \334?[\223_ \267Hr\277\333A\231\004wy\333\277z\036\232\201\343\325\337\277\232K`)\201\003\336?9\021X\224m{\340\277\301y\212\177L)\343\277\360\035\220\3376.\260?\375\307:\003\300\204\330\277X \325\013\231\006\340\277\376\270\036\001\263\r\340\277\235y\3362L\222\331\277g\363\223\305X\001\342\277\355\211\246\232\366\240\330?p\006\301\333js\333\277\016\025\343\374M\350\345\277fq\367 \241y\340\277\341/\034\276;\310\346\277\350\345E`\213a\334?\326\'\322`\307=\354\277\2761F\034\231\244\332\2770,=\242[R\340\277\333a\372\373\030\265\337\277\326\243\025\204\227\205\334?\025\0179\307\312\271\346\277\205\201\000|d\361\331\277\225\375F}\212\212\337\277\343\264T\234r\036\334\277\266MLr\033h\337\277,i \361\206\017\333\277\343\264u\252[\301\315\277\354#d\336\262\\\342?;q\367A\257b\340\277\207\375\032 \003\337\343\277z\001\325\303\300\210\326\277C3\364\364\266\276\334\277r,\367\033Pc\334?\256s\200\036r\014\343?\255\221\023\334\376\213\340?\375\322\313\275\372w\345\277\215\301\026\375\231\250\330?\237\373\027\255Hq\342\277$\336\360q\\\274\351\277\252o\221b\035Z\335\277\341\224^@\324\002\343?[\321\3468\267\211\333\277\213=\017I\210\215\340\2771Ap\t~\243\304?\347)\037@\216\177\341\277\313Li\375-a\345\277\205\252\342\327Y\276\336\277\234\246l\344\374\205\326\277\223\366P\354\262\251\342?\275}\346Dl\304\220\277\232V\257\307\351\220\327\277a\303\250\253\010%~\277\300-\016\035\361\332\342\277N\336S{\t\374\336\277\331\'\333\033\327\232\336\277\203*\332\301-D\342\277\257I\022\337\344\322\323?G<\331\315\214\276\354\277\231\235f\375=c\322\277\254\016\014b\230z\340\2773\357\243\340Jr\327?_\204\337<\213\024\342\2771\231*\030\225\224\343\277=\240\307\203\210/\335\277\203#\330\342Y\225k\277Sv<^/\352\337\277\004)g\336`\276\342\277@\317\260b\002\010\337\277\350O\033\325\351@\343?\225\364\213m\255\312\350\277\370=$[\341\006\314?o\253\315\275\217|\332\277B\215\214\037t\332\323\277\016\231\331\204\007O\323\277\226\036\260\037 \'\333?\2016\203\t\355f\334\277 \212U\305L\211\336\277\005\323\027\337\243\300\326\277O\354\035E\010U\333\277~\346\213AP\003\335?^a\250`\340{\327\277\375\276\177\363\342\304\343\277\251}\337d\300~\342\277Q[\331\364V\023\342\277\334t\025\234\013m\333\277\335\313\"\271\241N\337\277\226\324d!\225\035\341\277\256\243\005\303\024\300\323?\037\320>\3736\351\340\277\022P\341\010R)\322\277\236\363\256\325y\257\337\277#\320h\304/\351\335\277*\177\255\001\0006\306\277y\2657S|\327\340\277Sh\254?\272?\322\277\205\226\267\033+\316\330\277)\215\177<Gf\323?B\275\021\304\026\216\335\277\222ku\377y\226\332\277\262}m\242;-\342\277\"\362e\273\245\211\334\277h\341\272{\343\230\332\277\225\360BB\255\314\340\277\334\302-\376:\200\342\277\276nK\303tJ\334\277u\023\204D=q\334\277\250}J\000\304\236\356\277\226;\032$\320b\326\277\267\2245\342\260\221\332\277E\342\324\275\004\375\341\277\265\002;\345nc\274?\250\177\275\200f)\327\2777\344\331\304M6\333\277\323\313\336\010A\375\342\277(Z\003\245\262\362\343\2777\344\033\341\037\\\343\277\341\020\344\177v0\337\277\"\327\227\266\311\362\355\277\250\342\347;\317\212\333?RG\350\343\261\321\334\277\333b\310\373\202\247\340?\207m\2132\033d\332\277\013z\3226\274(\260?\010\312+\337L/\326\277\343\254\004bD\350\331?\306\263\272\213\346\267\340\277BT\206\026~\225\340\277\337\305V+n7\335\277\020E\232\33313\207\277\231bP\236`\234\324?\302\340X\037(\232\326\277\022\300j\270\nZ\237\277\034v\204x\311$\313\277%\'\217~f\326\317\277\000\266\264\001u\326\340\277\331\337\002\236\356\033\336\277\232/\3452$\035\345\277\224\274|\343R2\331?*V\r\302\334\356\327?dP\267\375<W\334?\320z\031A:G\341\277U\030\266\301\344\241\352\277\272\324\364\030f\032\221?\266S),\247s\326\277\251K\245#\251\032\331\277\376\014\322\000\234&\340\277\255\341}\260\347\306\336\277Y\021\230\373\242L\337\277\241\3652\202t\316\327\277\304\343G\241\321\302\323?\257\205\315\276\372\221\327\277~\231\302_\240_\253?(\251\002\244\354\343\334\277=\342F\200\211.\343\277W\275\262\301x\334\353\277\276\373\241\241\230\337\337\277\275\323\317a\337J\330?\371G!\301;V\336\277$\351\036\002\334f\330\277\006%q\373\212\232\344\277\240h\005#\202\363\336?\315\025\020 dU\332\277\232-\223\300j\325\325?\216\024\333\356/\314\335\277\373+\\=\304\222\336?f\324c\370\333\340\226?q\232_\000\252\007w?\202O{ck*\331\277\324\222\330\377J8\342\277P\325N\336\021?\340?`{5\242%\037l?\tU\346\275\234\037\333\277i\234<\033\250B\343\277\334q\273~^\004\326?&\016\311^)\312\340\277Y\327O\234/8\327\277\3304\204\235A\307\336\277@*\315\377\016y\343?[]N\t\210I\340?-s\302\235n\315\330\277\242\034\026\264\332\r\341\277\354i\207\277&+\330\277k\034=\300\213\345\344\277\336P\235\263\252J\350\277\243\350\201\217\301\212\346\277\313N\232a\376\245\347\277\021F\375?\230\245\346\277un\342\375\033\250\332\277\331l\366QWH\343\277\326wv\3409g\266?\377\373[\033\2150\335?\242\351.\201B\232\323?\322\2552\256\023\362\332\277B\005\352A\377\014\320\277X\361\374Xw\242\343\277\336\341\033\257\345\272\334\277\302!\310\377\354\240\343\277\370\333\205\203\020\222\337?\325\213\353)\203t\353\277q\177\303~.\376\342\277\232\t\247\201\366\265\343\277\353\013\033\300\377\370q\277L>\321\320\232z\260?\240\350pci\026\333\277\207\233\276d\004P\332\277\306\037\240V,\331\325\277\002\347\326\265\007\353\322\277Q\345j\032\312?\331\277\355R\270X0u\317\277\357\367m\2038\341\250\277\004\r\211\275HO\327\2773,-\300\312\343\336\277\253!P\201\274\354\334\277B\231\302Z\347\245\322?#\207\004c\257=\337?S\246\342\020\273\000\277?\211\320\0106\256\277\345\277P\300<\205\330\360\306\277\316\030j=\021^\340\277\"\010g\"2m\342\277\014\014\017P\320\334\325\277\026\027G\345&\352\334?pdy\262\366\022\340\277\232y\223[jo\334\277\261q\273\237l-\301?m\201\261|e7\335\277&\257\306\300\327#\330\277\201\367e\233\341\'\337\277)\030!~\366\n\345\277\346\022\375\220mO\337\277P\367\205\200\021\356\261?\317\322\035\335k5\336?~\241\221\031\271\270\340\277\263eu\202h\363\334\277\361P-\205\264\304\336\277\356\266f\206\350+\340\277\334\371\331#/F\330\277\2136\307\271M\270\334\277 \243\362eX\373\334?\2035)`\226Q\343\277\322\237\303\235\207j\332\277\247\326\261\000\\\177\330\277\367\207V\274\313\244\331\277~iz\036\026I\225?t\347..\372/\334\2774u\252\276\353\332\336\277\226O\003\304,\r\337\277T]\033\205\177\354\340\277\207\\_\332&\313\333\277\373)Dv\224\271\342\27719\377\300f\312\336?^z\240\272^?\321?\201&\035@\032\251\334?\262\230}\303\351\311\336?1\324\376Z\240U\327?\256\211`w\025m\345\277%\264@\026\375<\347\277t\016\371\302\277c\340\277a\312\331\236\315\350\335\277\254\324\242\364;\003\341\277:\335\344}=\333\337\277\307\215S[\207\366\331?\020\234\216[\'\311\330\277Ej5\177\247d\340\277\275:\307\200\354\265\333?\262\227\361\337Q\235\327\277\036\334\235\265\333.\274?5\377;\344^G\324\277\365\361\320w\267\362\345\277\203\265{\003\335\250\344\277\t\362\375\036\006\204\341?p\350\322dk\"\313?#\226\275:\001,\335\277\234\363:\177fR\340\2776\244\233\016\256\212\342\277g6<{6D\331\277\353Fi\200\034\036\340\277x\236E\335q\004\221\277U\024\320\300\237L\246?.\252ED1\371\334\277\253\221#\276\217z\334\277>\227\004\003c\230\335\277\raF\302\010\253\334\277\\,\373d{\343\343\277\352\231\271\033\237d\320\277\r^\252\210\211\274\337\277\327\013O\371!\000\325\277\340g\032\034>\214\332\277\354|\211\302x\027\340?\033F\244\032\264_\336\277\3074\354Z\357\365\326\277\027[R\377j\237\346\277\352{hz\344j\333?[\372\3411M\"\336?\230\247\020\033n8\327\277N\005?\036\270\322\341\277\342Y\037b\305\241\336\277\025X\000S\006\016\336\277\365\014D\303 \370\332\277\240\333\305\340\323/\236\277\031\335\007A\303\322\351\277\277\353\267\237!\326\331?yb1E\024\356\333\277\256\276W\000\225b\337?\373\3304!s&\351\277w\357\260\242i}\325\277\215\310\301\266\217&\331\277\373\033\027\202\332w\345\277\204\006\007 Z\260\340\277\366}\325\035\315\211\331\277\355}\354&\337\t\260?Ai\342\374\321\340\336\277#W\177\276\014\252\340\277\202\264\030\237v6\335?J~\243\241o\240\325\277\347\221\232\321\352\277\333\277D\300\204~dB\340\277\230\332\326?\035)\341\2776\316\001\335\362\254\341\277\231\020sI\325\266\344\277\3269\006d\257\267\346\277\257,M!\302\245\340\277\232\305\325\022<\317\261?\271mc\334\242\006\322\277\205\246x\236p\335\321\277\273H\241,|\275\342\277:\"|{\031\375\337\277\0250\313\350\221\320\340\277\221\3620@\344\245\334\277n\036\240^\235\241\330?\262\327\375[\260\261\333?\272\324\255C\332\253\343\277,\337\351\204\206\364\344\277\374\236\2424\345\024\343\277\025\324d\204\277x\324\277\271]\036!\271\253\335?m#\226{\036\257\336\277\326\350\223\344\322\333\335?:Y\322\240T:\241?\221\036m\271\206[\310?\326\214o\234\322I\322\277\366\207=\037+\031\335\277RD\n\216`\035\275\277\034\\\337,\312\021\333?W\254\206i\204#\347\277\214J\311\366Jn\312\277\036\276\361Z\256#\323\2771\331\323i8@\320? C\246\000AN\336\277\305\307\345G\025(\276?\230z\006\242a\220\314\277P\273\312\240\373n\323\277\001\235\356\3417\n\354\277\212Q\276=[\t\341\277\'\031\326\340\2771\320?\304\013\"R\323.\324\277\352\004\023\003M\031\326?\014\022\r\030E\213\303?T\304\351$[]\335\277\214\227\270\237\235=\343\277\204\227\205\033\225@\315?\220\216\243 \025R\204?\356\033\251\010\201&\332?IN\005`,\241\330\277<q\224\027\3649\337?\266)\201A\220K\336\277\322q5\262+\255\344?\327\373\215v\334p\331?\006\325\212_F\013\342\277\337\333\231\256\314\200\333?\266FF\377\262X\347\277\233BB\357\350\232\355\277,\035Adp\030\330?\365y\224c\025\343\263\277>3\220\2004\020\240?\020?\377=x\355\331\277\233\023\305\3659H\341\277\201\024+Y\004\265\331\277&\207\364\200\036O\332\277\347\037\330L\031\023\335?\220\331Y\364N\305\346\277\261\366\332\340\002\330\341\277U\316j\303Y8\330?\r\243\203\2427$\332?\021\026\272\267\307\267\342\277K\005\025U\277\322\346\277>\003\013\334\221\234\333?_\t\346\340\2003\254?D\306\376\r5%\346\277\271i;\277\213+\342\277c\302\273\236\340I\341\277\003E\207\033K\363\340\277\270\261vg/\323\304?4Vr\200&\203\342\277w\006W\212.\271\330\277\364\306\007E\014\336\337?\334\207Y\273/_\326\277Jq\237f\222\342\340\277M\016\002\237\335i\322\277\347\343\373^\032\361\326?or*\337T \327\277\027\273}V\231)\346?\271V\326\221~\026\340\277\247\353\252\274\364a\337?\325\214\322\306\2152\223?4RJc\017H\304\277,\314)\236\006\016\340?6;s\213\320:\271?)1\276\036\002=\336?&\275\024\303z\310\342\277\265JU\177)\310\347\277\367|\305\001\221\021\350\277Y5c,.\251\341\277\\Q\316@\372\340\312\2773b\260,\342\205\342\277\0305\312\300\"[\341\277\272\205\360`r@\327\277*\337\330X.@\326\277\031\356\022\213\316\250\345?a\352\235\300*\315\340\277\302@\306\222(j\344\277\335s\211\270s@\312\277\345\332H\300\205\310\340\277EQ\n4\204\325\203?<\343V\234\305f\341\277\277\320\247~s\231\342\2772\334\312\\*@\341\277\333\260\\%\016\217\320\277\"wl_\233\010\340\277\006\035\252\262\272\230\210\277\220\374\332]\024;\336?\306\225\006\300pU\340\277|8\365?\310\313\345\277\337\274\233\033\221\367\307\277\n\300\232^\275\245\340\2777\232m\270\331\351\350\277x\022l\267\270\241\337\277\255P\244\3739E\340\277\271_\323\275-\\\330?\025\016\357\377\004\263\342?\366\030z\376\223\343\342\277\302#;\200\217\313\324\277\212\177\216E\211L\335?_*\221\237\350U\336\277?\225\354;3\277\335?]p\006\177\2778\346\277\257e\215\325A\271\335\277?\233, zs\325\277\264W@\035f\232\333?>\231\332\255\300\353\333\277\227\364\377\303\300g\332?\205\365w\235\252\316\341\277\340`\024\251\325<\340\277o\2655\277\355\013\340\277*!\222\000\271\355\327?\376\371\021\032\034\300\351\277\021\244\030A\337m\335\277\223\316v;\261\275\341\277\236B\256\324\263\240\321?3\247\313bb3\354\277\302~\2319n\302\343\277\351.r\027\255\030\230\277\317\333\267\336_r\341\277\360[c\206|F\340\277\245\211\3229\232\276\342?\374\261b\033e;\333\277j*0\t\274\270\320\277`g\330b\226A\320\277j\371\036\201\201\230\337?D\334\234J\006@\340\277\251\352/\005\265\251\340\277\002\313\031\243\330>\327\277\331\207\'\201\356\'\341\277$\353\025\273\"\235\345\277G\t\302a\336\355\240?\260\033:fn\370\276?q\'\350a.*\340?,T\253m\2228\262?\033\021\214\203KG\340\277\347)\335#\2749\325\277\313\035\354\003\177\256\325\277\026\320\331<\355t\337\277q-\244\r\321\262\337\277\031A\276\337\303\200\336?\236<\217\376U\017\353\277\256e2\034\317\247\337?\257\000*E\300[\321\277 \017;[YE\331\277\275\260\220\024\354\032\340\277VH\371I\265\317\334?\231\343G\302\337\253\325\277\'\245\256\341S\014u?\024\3252\204)k\335\277\3010\252Vp\t\332\277h\365\243\033@\303\335?\246J\020\205\001\221\336\277\307Yd}\373a\324\277T&\353&\347z\270\277\024\312%\002\223#\272?\206_E\241\300\326\344\277\225\261\210\376\\\366\327\277\202\365\311\233\r\003\337?\022\362\007$\335&\334?^1~u\260\331\340\277\027y\376Y\230j\341\277\347\246\3158\r\321\340\277\343?\366\335!C\334\277\264\303\302\275\360\222\330?\242o^\336\024\375\333\277N\347/\231\317^\263?\343\345\247@\177\304\332\2778\211Z\375\205\334\330\277\375O\376\356\035\365\340\277f\307_\275\376\"\336\277\002\310\277\205+\326\353\277\270\375v\002/\355\330\277\360N\374 \344\237\321\277B\327\327\035\377C\345\277\274T\360\004\220\224\335?\360\232>\330\265\377\302?\264$\233\006\240l\340\2773\256\023\362\234\210\344\277rKPh\376\275\320?|\010\354b\201\014\326\277\037sT$\025\374\342\277i\234\227\324\032\224\242\277\222\235L\026\326\021\305?\240N\036\273\260Z\336\277\353\323\236PW\220\267?)\206\365\220:K\340\277\330\361\241<\332U\334\277;%\326\230\306e\327\277?\275\373\336\004\261\271?\310\245\340\337Vp\343\277\327O\275=!\236\324\277/]V\233\336I\337\277\337=\233\260X\036\313\277\326 i\303\243\205\331?\305\377\374B\270\227\336\277G\2617\214\335Y\343\277\177Q\335\267\265\240\341\277\320dZ\366\177\351\342\277\373\005\273a\333\"\337\277X:\037\236%(\341\277\232\377>\200\230\306\333\277\376j\304\202\261\264\334\277}\001b\267t\261\356?\021\302H\324\260\004\330\277\342\316d\203u\261\326?\255\'\004\274\026\276\333\277\231 \023\2761c\314\277\262q\263.$\226\337\277=\335\324\233\254\354\320\277\321\272\374=g\001\325\277\322NQ\036\253\316\335\277\222\007\001}KN\330?E\360\"\300\247\301\346\277\031\016[\345\317X\337\277\306\206\321 \303r\335\2774\233l\250\275m\340\277#\304\317^\001\225\340\277\243\243fYA\235\334?(\204is\367\224\271\277\353\323\277^@\263\327?\245\301\nC&\321\333?Fo\002\035\3677\337\2772Gf`\252\032\342\277\202\000\031:v\320\304\277(\251\232\300w\022\260?[\311\226\376\210\223\340\277\000iI\221\306\262\326\277\244\020\361\244\277\366\336?\nF2\237\004\032\241?\362\231\354\237\247A\330\277\376\252\320\376\017\t\330\277C%\307\000\375|\340\277\251\351iv\223\316\341\277f\222\344\373\332!\326\277)Ri\335i\037\335?9K\301\001\3122\323?\363(\215\177<\307\323\277\202n\263\2410b\336\277\3161\007\336\034p\346\277V\315\275\321\330(\335\277\010\365>\237\022\201\343\277\311\3070\037\367\212\326?\036\314\375@\177\302\323\277\253\013\262D\353\321\334\277\361\366{\275V\275\341?N\364T\342\225?\342\277\"DC\0201/\343\277\300\323}c|V\333?,\302f\3435\355\336\277\332Z\272\335&\267\351\277$^C\025\243\323\341?\344d\032\001\240\200\227?\243\035\334B\374h\334\277\203\322\202\335\321\373\336\277\252\n\262\n@\310\301\277|\013\353\306\273#\342\277\335\265\245\212\271V\310?V\323\3246\356b\317\277\212w\200\'-\\\335\277-\322\304;\300\023\327\277\377\201(N\244j\325?[\205\244\201\345\251\320\277\320:\221\375\177\336\306\277D\230\354\3514\234\342\277U\331\271a\302\005\342\277/\373\022}\200\346\310\277?\312\343\304\262t\343\277^\351\245\367\307\332\310\277\030\1776\315\226G\347\277\221]\016`6\306\343\277\372\336D\314\243\035\216\277\220L\207N\317{\340\277\302\326\021,\263\255\340\277\256w\207-\240\304\251\277~\350\274\245 h\311\277\245\254\327\333\003\000\233?4\"\331\242S\367\253?\275y`\266S)\335?\215\313]\360\016\025\335\277\341\337V0\340\233\341\277d\030\301\020\203\212\342\277I-s>e*\340\277\213\037[}\022\253\307?\r\036da\241y\340\2770\330\r\333\026e\252\277\371#V\220\2609\323\277\341\027\311\344\365\\\337?\272\221&\234\345\313\331?\347\256\321\344\365o\227?\273\363\376\036@/\335\277\315\243M\233\222\250\305?\364\302|\3759\272\350\277|D+{;\327\334\277+Z\014`\302\217\321\277\"\211\240b\203\"\340??=\021\0373K\340\277\300\341O\236\303\246\343?\341\007J~\202S\342\277\207\302F\335\367=\334\2779\315\2473\234W\325\277\345\'\325>\035O\333?~\376Z\342\361\002\327\277s\316W\342dO\332\277\311\336Z?`\222\327\277\237O\354\272\032M\252?8\023\025\242*\303\334?\317\215D\303\275\315\332?\010\243\345\202+\207\304\277\213\241A\257\344\017\351\277\222\306O\200\264\301\340\277h\025&!\313a\252?r\200h\377f\026\347\277\303Q\250]\002\206\342\277x\355V\277g^\302\277f\r\305\272D\267\324\277\000\270H\220\000\244\350\277\336\030\356\233|,\221\277\343f\002\217\271\274\345\277\361p\361\246\021\351\345\277\340\017?\377=X\344\277{`\256\342\340T\332?\355R\033\203\353]\333\277\020;\327 aR\334?\254\315Ze\001n\342\277\3461V\335\033\352\330?\214\273b\302?\327\327\277\314=\207\246\252\330\307\277\250\265\335\302\302\242\332\277\236\265\333.4\327\331?\010s\273\227\373$\341\277\376\320/\276&\363\336\277\314v\215\257\240\335\257\277\355S\002 \366[\337\277\314\275\033f\303\365\337?o[\245\005y\207\341\277G\311\016\236\307p\333?t\220|\312\326\037\336\277\260\345\266\371VV\316?\316>E\304\203\034\334?+n\334b~\356\316?,\244W^My\335\277\330\204\017\200\023\345\342\277\306L&\227\224\365\262?\300\202\352\325\266\227\342\277v1r\273<\302\315\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_19"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\017\302PE\371\233\335\277\363]B\354\351v\276?\221\207\266JM\016\314\277\r\3618\332\253n\303?X\030\307\355<\026\326\277.\026\n\001\216w\232\277EN\231za[\277\277C}\303+\346s\273\277\352S\330V\375[\310\277\324\336\226~x\014\332\277p\025Y\245\323\276\321?\242\243\013\240\316\313\256\2775\304\302Z\306W\320?H)t\240\177i\330\277\237\215\001~2\353\302?\205R\305\236\207$\323\277\036\232\303\377g\236\335\277\232\322\215\277\323\265\213?X\013\242\244v5\334\277Y\241\355=\0019\340\277$^\277\334\376G\323\277\226\307`\346\267?\304?\252p\333)\343\200\315?\002W\276\326\301\233\177?E\334\217 \004\000\274?\002\332\024\227\374\262\317?Fe\036T=\364\330?KZ\216\343\311\346\331? \016LM\006p\274?\227\t\371\177Y\312\272?\236B\256\324\263\240\321?q\377j\375\010\026s?=\243\010\004\225L\311?\276\267\216\026\014\323\307?\263\2530\200g\260\242\2779\365\232\201>\317\326?\270\302\344\333\365\261\317?\353vr]c]\277?\206Cg\200\250\207\272?\310\203%\005\263U\325\277R\263(hj\304\312?G\371\356\373\3345\324\277\334\r\005\340]\266\300?\2572\t\315d\256\343?\"z\010\231\032\327\312\2776\220\221`h\275\336\277G\031\026H\365\302\305?\330E\321\003\037\203\315\277\257\223\033\301\235v\330?\207\355\335\325a;\322?R\234\304\234wN\322?\362\341\202\001\276:\335?\240\356M\035\365\241\334\277\262\361`\213\335\276\326\277mnm]A\005\273\277w\375\233zQy\306\277\307*\245gz\211\325\2778\216\016\3764D\340\277\205\3626\035\236\361\323\277\\y\262co\236\252?\304\255R\337\321}\247\277$b\010\010\377\205\311?A\313%\0330D\331?\310\357\351\301\017\364\340\277n\033\343\0265\020\310\277\327\254\n?\376\363\252\277\277\307c}8\205w?\327\351\366H9N\326\277\232@2\231\001\031\310?\203%h\335PB\330\277\3461\254\335\324\022\240?\272\243\307;\374?\241\277\010\'\036\'\2673\306?\373v3\037\347h\271?\037H\331\200\3328\277\277?\177\220\0334\352\327?\366\247\277$\2667\274\277\341r\'\236\324\223\330?\212\227\213\036\026o\272?\347\262\311\310\366\255\301\277)\255C^\244\n\317?\260$\365uK8\272\277\200x\206>\222q\321?\013M+\350j\351\312\277# \364\246\001\207\305?&ky\212\301\350\305\277\350\345E`\213\341\336\277\341\2264\35316\307\277\265\262\rt\236\305\203\277\206\222\250\233\264>\316?!ezx\205t\321\277+`\276\231\361\346\223?\223\231\301\316\003\216\330\277\233\263\231\236\013>\320\277\327\303\362B\225u\331\277\233\307\243LQ\313\277?O+\\\301\3746\304\277hG\242~\264\013\314\277%\347\006;\254\r\316?#\221\t:R\344\307\277\247H\266\241\377q\326\277\276j\247\336\001{\326\277\027-a\351Sy\303?\025\204<\314\250C\334\277Ys\374\'\352\222\315?\237i\025?\276+\323?\323\301\372?\207\371\242?\322\010pY\t\206\315\277\241\200/}\226\204\321\277@\232\373\365T\030\336\277\327v\311\356\270\227\325\277\322\312\030z\037b\341\277\214\262\310\300K\272\320??\271\267l\276[\313?\301\204g\310\314\223\232\277\251{l\344\035T\312?)h(($\235\306\277\351\032\034\333!\264\307?\314\304\235\240\207\271\326\277\343\347\320|&(j?,\200k\037\3319\332\277\303\310\036\343\202\232\304?k\372\242\363\320-\276?\n\376\216\023\354\340\276\277\\SA\301\234\253\340\2775\006ce\260\271\264\277\315\365\307\305b\345\302?y\231Y2d\310\267?\250\322\242\200\345o\336\277\311\210\362\242\002)\332?\246\027\214|$\306\322\277\353\203\227\246)\376\314\277q\317\014E.v\333\277\3374\340\240{\036\321\277\275H\025\203\217\232\331\277\214z\363\341z\020\321?#\205\221\342\014\023\303?Y32\310]\204\323\277\312>]\027]b}?:\302P$\3532\321\277#4\376TGT\273\277\214\216yW\034\322\317?\"\246\206.\217\322\262\277T\207\344}\177w\311?\241\354Vd\256\353\322\277\'\0340\376l\232\250?\212m\367\027\346)\335?9 S\210\221o\326\277\332\254\270@\233\377\276?\257\347\316\300\206\357\323\277\2663\247&\034U\322?n\325;\375\034\366\313?`\367FB\225\371\323\277\236|\354\301\263#\240?\014w\313a9:\332\277Q\213^\231\371\006\313\2777\373\342\326\315Z\263\277\177\250n\r\360\315\275\277\3265\2758\257\271\314\277ooL\211\003l\302?\301S\310\225z\026\272\277\371\2035Y\231\254\222?nt\306\336(\305\332?\224\024\232\034%\314\324?\014]G$#\312\325?G\006\031\376\\\377\237?\331\024<C@\227\322?\014\204\317\234\026\270\322\277\330\312\327\247\024\"\310?mn\022\244\316\263\274?\307\034\231\201\251\352\337\277o\256\016>\234Y\322\277\213\026\003\230\360S\261\277\236\261\324\037\006_\312?]\216\025\004\250L\322?Y\367\217\205\350\020\301?ER\240\211\217S\300?1\312\330u\024\214\326?\031\207D\353\362w\322\2770\345\215\335O\327\315?.\014\211b\217\\\320\277\273\272\235\\\327X\253?\2008\376\372\327(\342\2773_\261\310\247\256\263\277\030g\004\002:\037\327\277Q`\246\222\246\346\307??vr\341\233\201\316?8\265\243\240*\222\230\277\"m\302Ak\223\336\277\325:\026\200\353/\315\277\344\226\301\336\345\036\305\277\374\221}\353\036\264\332\277\323\314\007\302\035\201\325\277\340\321JJ\017}\305\277b\370\343Q\205\032\324?\025%\257\362\256xV\277`\321\347\202~\317\322?>A\336\202\327t\332\277\235\225\335aM\304\313\277\243*\340}\331f\321\277b\277\243\235\005g\267\277@\310\r\032U!\341?4L\n\177\310S\334\277\013J,\2040\222\323\277\264\232\307\304Zz\322\277\376\274\004\002\370\002\314?CEI\006\210\033\300?\223CY2\246\344\257\277\r\334&\201r\200\302\277\001\215\014Q\tx\270\277\310\031\026\345\312\307\322\277\367\272\373\322\221\022\340\277-~\256\021\034\362\276?u\261\304^\203\331\325?\363\322\003\325\365z\337?.\376\266\'Hl\313?A\253@\353\351<\241?\344\026\220I\210\352\316\2771I\2375\303\266\316?$ \rD\242\022\310?\370\240-\010a\305\301\277\201\341\246P\'\352\276\277\226\275\370\344Y0\320\277\352\370y\235\036%\242?\217\t\306\373P\355\324\277\346\035+!\3559\335\277\027\244tD\031\205\341\277M\024\235<\227o\300\277s{r\342\345\310\301?\200\234\356Dbe\324\277(\371\350?1s\341\277Y\nqzQ\232\241\277\357&\021D\212\277\326?.\214x\333\032\313\301?\254\000r\321\257\376\212?\031T\026\343\316\025\241?r\002\233\277~\222\253?\350\313^\370\271\010\307\277\325\0368_\323 \341\277nM\333;z.\270\277\323kP\207W\212\270?\324\006\314\350\354\t\314\277\341\232\267\301\273\242\300?m\312\323\301\023\335\334?,\236\022\301L\234\263?]*d\036ag\243?\374\003\037b\007\276\314?/\337\270\224\014c\207?(6\264;\203\212\303?4\276\314\003\232\200\331\277\207\306\321$\312\001\326\277\207\230}\344\367\262\321\277\366DSM{\020\263\277\325#\354_\202\350\324\277\344xO/B\302\302?\361\206\321\377\264I\320?\326;\273\000$\350\301?\3250\360\232_\346\325\277\003dd\240\235\231\321?N\205\221\301\376\251\303?\273\277\325\225*\254\326?\224\276s\234\231\350\337\277\246$N\233/\376\337\277uXD\301JM\320\277~\221\nB\375W\321\277\264d\002<q\222\331\277\350\270\277\037#\005\327\277K.\224\206\371v\305\277\noj\373\262\217\320\277\017\264\247\211\343e\335\277vU\332\301\014\266\263\277y>J\277YW\271?t:\332\202\357G\320?\004\377\337\0013\031\321\277\241\324\240`\255w\270\277u\334:I\004t\342\277!\005O!W*\346?|\372\235`\336g\323\277Z\244\303\"\n\326\327?L-\313?Im\272?t\250S\334\300\366\323\277\333\366\003?&)\330\277\336\342ev\253!\270?F\177\276\346\202\036\223\277\217\3764A\026\032\342\277tB\246\204yr\324?\241\235\364:\271\221\307\277$\333\022\034\013H\306??\\I]\370b\333?t$\03385\212\315?\332F\217!\370\006\341\277D\357;#\235C\334\277\377\207\211@\324\001\274?B\253Y\210\212\310\306?\372 \364\001\273y\320\2771\251\346\341 \373\273?\266\302Ow\3711\324\277\345\211\224$\327\346\333\277\204\253\362\363\225\366\306\277w\232q\277\350\027\325?\342\236[\246.\262\310\277\225W:a\272w\325\277\363;\352;\001E\326\277A\027G\304\030\001\336\277\272\214\366\323\332\217\323?\256\302\3019~\003\310?Ga0\342\257\007\305?\024\035M\036\344/\303?\237\363\t\217\354\000\305?\035o\227\242\001!\320?\205\342\226\250A\305\305\277$z\276\013\000\372\327\277\312\375\253\032\306\025\334\277\304\371\345\335\242\235\336\277\210w\353\3020\334\314\277\317\271\241JI\346\264?\300\031\343`\302\352\340?\303A\245\276\352P\313\277\363v\000\233\336\013\305?\201\344\204\246x\236\271?Z\264\245\2638\010\277?\2044\031DZ\331\325\277\2276\034\226\006\376\321\277\276\253\033x\200\352\223?\3360<\274\010O\317\277\003S\325\035\356\327\322\277\362,Z\343\340P\331\277\312\2346\374\321\244\337\277\311,\311\241Hn\242\277\271\016\037\"\177:\323?\377\225S\n\323\332\312?Zxf\233~=\325\277p\364\214\330\202\271\322?o ,|\340\327\320?\025\341&\243\312\360\326?\274\276 3aE\307?\037\360eGO6\301\277\350\333\304\301\214\006\354\277\376\354\r\337>\202\336\277\275\237\"\240%<\263\277\360fO\372)+\302?|\244w\340R\304\335?\344\216\355k\023\335\320?S\376\377I\215\232\331?{V\210\375T\013\320\277\316<\322C\341\261\325\277\211X\314!\014p\323\277tz\275\177\034b\323\277Ax\376\376\336w\323\277\016\267\350\t\360\202\323?\215\242 \333\2466\317\277\323C\237U\207X\267?h\004\033\327\277\353\267?I\346\276\300\237&\265\277\230\234\177`3%\321\277\275\013J\207=#\304?I>\300\244B\206\274\277\006\347\000\177\000\353\323\277!dQ\277\250\260\267\277w\312z\234/\027\334\277\364\266\343\227\013\346\342?\3431E\261\3035\267\277\236u\351\275\272\254n?zj\3348\265\365\310\277\351\344VR8\314\311?\002c\001<7\247\314\277\006\274\253\242h3\322\277e\306\231.\335\207\246\2771gl\236\331d\263\277=\014\255N\316\320\326\277\377\301\321\237G\266\340\277\014\2721\373Dw\323?z\313re\222\211\303?\343\\\273\233D\020\335\277\255\264\326a\226\007\304\277XZ\343\277\202l\320\277SO\017\237\256\315\271?D\016\206D\036\344\220\277\000_\300\201\177\200\326?\364\260\304\301\255T\277?\256 Y\002!\000\333?\324MZ\237\017\"\303? \344\345~\301-\341\277\350\'\203@\272\232\324\277\237\302\225\334\366\367\312\277\035\221\214(/*\242\277\021eGa\031F~\277a\341\003\27760\262?h\220\345\321K\224\266?\010\264\215\242{T\332\277\307X;\304\036^\316\277\261\335=@\367%\334?\230\3756\233\371\033\331?e\271\266\001\351l\323?\001\202\234\244\267G\306?\266\\\211\202\021\342\336\277RJ\347G\354\250\252\277b\311M\2735\274\324\277U]4\" \370\335\277`E_\244\304\354\336\277)\022\237}\335\320\315\277O\336\365\t\010\374\205\277M\312\017\":\000\332\277f\207\327yD\232\300\277b\201\361\004\2511\313?\\\251\251]\3724\335\277\253\264A\375\231\007\325\277m\3048$ZW\334\277\034\320\322\025l#\271\277\304uR\200\244\377\341\277e\205\t@/\036\324\277\263V\274\252\026\205\310\277/>\334@G\314\336?D\362:\207\327\032\322?\007\350c\343f\035\326\277\334N\266\334\364\302\336?n&S\303\206\000\325\277\265\364\r\361\264\241\325\277\362\340\366\035&\216\263\277\037}8\355\316\177\305?\214,xU\220\264\306\277Q\303\022j\341M\342\277\270\001\237\037F\010\320\277\333\343,\2740q\240?\017\220y.\235 \255?\327B&\237r\332\242?\206\027m#\330\227\335\277P\350\222\3755\321\325\277\224\240M{;\243\232?t\373\361\006\264N\232\277\334|\310\000\365+\340?\030\236\362C\000K\330?.6R[\217\347\327\277^A\344>\203\327\342\277\t\321k\375>\215\340\277\362\337\315dI\212\330\277\361`\315\371\020q\301?X\230\225X\337a\300\277\341\272 *\246\265\310\277\3364\"\275M$\331\277\360\305\366\336\010\240\321?l\342\354\357\317\271\270?\370-(\277\315\252T?\340M\226\336\'\334\324\277\307O>\230o\330\263?\266\253\343:\276$\315?\266\206\020_?g\327\277+G\361\277\317\367\341\277\263\020\236\202\\\337\220?\253\322\365\310\017*\274?\010\002d\350\330A\270?\336;jL\210\271\272\277\014\360\223Ys\266\335\277v\030\325\0321P\312?\345\022\242\327\372}\326\277\216\334G,1\350\261\277\256\312\215;\010\256\322\277f7L\227r|\304?B\305a\376DD\323\277M%W?\243e\252\277\036\016\371\004\334\365\324\277WZF\352=\025\347\277\303\3631\243H\014\315\277\257\352\213\010\357@\303\277j+\335\372<\310\336\277\004&&^TA\323\277\321\3314|,\371\275\277C\\\2244\332\305\340\277\356\310\375\263\213N\340\277T\346\244\377\3767\320?\"IZ;\233_\340?\350\304\360\241\334g\273?w\366t\371\377\206\300?\303o\371\376\274\337\324\277\013\273A\027\201o\303?q3\201\307\\\276\341?\201\036Q>\220\376\322\277\213\2061\2166\263\324\277\241\344\304\r\256o\332\277\306uc\254\374S\246\277\324\221L\034\263\313\305?_\001\361_\305\016\326\277\304\206\331\221\013J\240\277\263\177\371\277~#\341\277\023>\313[\304c\251?\270\3108\244#I\245?U\202\344\245kB[\277U\305\320\301e\333\323\277-a\2477\'\037\270?\242\0269\372N\202\340\277Hz\007.E\250\264?<\027FzQ\273\305?8\005\"Y\372/\302?g\035]\276X\214\327\277b\';\204\221a\252?e\256gc\200\237\252\277\273v\222B\223\243\321\277\206\007Iv\327\037\301?\'Y\313\300\250t\255\277\343.g[rA\330\277A\'\245\034\243\247\304?\352\266\341\003}\032\324\277\302\327:\345\2171\321\277\264^g\236\267\214\313\277\025\266\227\033\251\212\332\277\027\336k\\\215Y\253?\22574#\213M\305?+\3034\343\237_\324\277\344O\216\3415X\327\277\243@\372\201\006\266\322\277\021\033M\252\215\034\317\277\003`\331X\313\225\307?Eg\025\r\204*~\277\217\213I\003h)\304?\364\343i\330sB\302\277*\314\326U\334\023\325?5\264d\002<1\325\277\025\207\032\"\3727\321\277T\017\301\006~\263\307\277\261\202\245\333\216\000\321?*P\017\372g\300\302?\002\216\363\355\023\366\336\277\365\235\302\276[\350\324?8Fy\301C38\277\370\205\374\330\311\005\321\277\242\203\211\232C-\320?\356f\200\352\243\374\307\277mM\200\202\007]\315\277)\210\rXj\244\300\277<\031\332\010\335\210\307?\013\023\374%\230 \325?}\213\363\334\347\235\323\277~d\313\326 \352\207\277\000e\276I\364.\305?Z\324\314\377PU\340\277\325e)@\261\341\332\277,\251\\\246\373@\237\277\267\244z\235\232\354\333\277\263\034\021!\350Gg?\244M\274\240\021.\323\277bS\337\340\250\350\317?\310\254\007a\250\242\243?\271\243A\002-z\312?c\274\312\000n\033\250\277\322\206h\031N\276\325?\360\267\250\334e;\267?\243G!\003X\350\322\277\305\310\2229\226\367\323\277d\013{\271\323F\307?F\374\026\337H\007\313\277\000D\362|\243\351\326\277\316q\311\314`g\336\277\235W+\311\360\216\267?\362<\237\236\312\353\324?\250\252\216$ZU\330\277\374\371\031\213d\227\274?\300\236e\314\023>\320\277l\226\313F\347|\334\277\323\346\315\033\006w\334\277\311\220\252\300\245p\265?\237L\314H\367R\304\277\241q\227\263-\271\335\2778\243\203\201)\273\333\277\2030;\264]\333\276\277\260PR\375\326\220\323?\025\316\311\346\005\263\306?\023C\325\\,T\320\277\241\301C\244\350\371\331\277\351\265<\203D\342\314?=\363\356\237\331\333\341\2772\031\022 \330+\317\277\025\206\320Z4Q\324?{\227\234$\247\300\305?\002>G\375X5\305?\006\0147\205:\221\337?\213\264d\300\037\377\342\277\371\017L\342j,\327\277\274Q\003\204\021&\201?\2412Y79W\333\277P\030\224i4\271\326\277\026(s=\033\003\315?!\210=\376\0340\311?S\034\315\262\243H\274\277.\346\204\\\353\003\325\277\260\026\310\201\221v\324?B\341\375\002\213\r\331\277\245mWC=X\340\277i\377\214\235\263\257\246?\203\362\343\324s7\343\277J\244e\213A\263\247?\217\264V\337\271*\226?#_\256\352Q]\312\277\345\026\353\002\373\273\335\277\307PFCcy\323?\r\276\223\303\345\000\317\277H~\314 \241Z\310?\313\320\241\241\271\255\333\2775\315\340\224^@\322\277`\201\236\274~w\313?v:\014\2750\337\305?@1\262d\216\345\323?\215u\305\032\233\016\230?\000\250$\343\377\253\321?\017\322\225\000\343v\320?\335\\Z\337P\220\247?\300-K\200\t\370\244\277\216o\326}S\032\322\277\251\202\027\236\023R\314\277`\355\263\300\332\365\255?\024p\031\201\302\352\231?6\n\244\037h\340\333\277\014\2216\002\257\336\322?\003T\202\017o\347\312\277\\l\377o\221 \324\277\255a\320S.\236\265?\245|R7a\014\265\277\346\014A\345\312f\330?u\244(\007\033\355\234\277\335\014\263\247O8\304?\312\236\353\230F\325\247?C\031\354~\374B\324?\257\324\314\2754\303\327\277\326 \253\337u\353\341\277\330\006\027\300\316\254\266\277a\316\"\312\315\246\327\277\277\336cBj s?\036f\026>\256\317\327?\247\215\217\273\255\331\325\277\210t.{\310\212\335\277\2321\014%\201p\207\277\353\262NKb\177\323\277\341\326\233 \003\\\314\277\254\263s\375/U\341\277%\320?E\376.\315\277 m\261\025\023\237\316\277]\322\244V\220M\260\277\265\350\225\231o\320\317?\2135\236\000qt\324\277\004|\216\372\261\352\307\277\341].\342;q\336\277P!\364\277\236\'\325\277\031\350\332\027\320\013\257?\305>\\\315\225\234\335?\217f{\340\242\024\272\277Rc!\276<2\323?\n\177+~\370^\331\277X2\317c\367\221\320\277\210X\263\204kd\331?1\3511\302\302\246\324\277(\277\034\250\031\363\302?J\"\301uA\324\305?!\222\000\271\355\220\310\277Z_\311\372r\013\276?\261\3238iT\277\314??\206u\200\263V\327\277z\315\202\273y\313\321\277cen\235\003\364\263\277\261\226\366^`|\265\277\3147.%\303\030\333\277\215\356\004!w\026\266\277\262\273\335\036\306\\\336\277\016.\200\235Y\332\326\277\277\253\263\224\013\031\252\277\214\322\214\342\250^\322\277:g\372\333T\223\330\277P\310\214\277\006\347\321\2772Q)\033{\233\340\277V\335<8L\362\310?>\241\256 \223-\334\277\235\216t\304)\214\325\277\237\205\261C\004\265\311?x\357\207#8C\333\277\357\340\355b\026\261\323?\r7}\311\010\240\260?y*u\003\344\317\335\277\3616\324\307\372\010\223?\256\353\233$+\371\304?\241\307\336A\242_\346?[\231\215!BT\314\277\3157\211\3365\352\335\277\020\312\240\177\'\022\333\277\272\014\203\"\253\225\321\277-\375t\321\312\234\250\277\177\025\236\237\373U\317?\3742\275i\237\263\300?!\321\035\'\371O\314?hq)[\342\220\332\277~\311!=\240\307\301?&.\021\271*\232\337\2773\314\236>\341\360\323\277G\351-y\227\346\333\277@P,\277%\243\322\277,\266\213a5\363\337\277\303*\275\272SO\323?\212h\350]\304\020\335\277Ba\253_D6\277?\234\341\207\374\223\365\256?J5\201\\\301:\326\277\323c![\022w\257\277\333\371\305?H#\242\277\317n\251Z=m\326\277^\215\344\331\2021\315?>\256\262[p\253\261\277\013\307\177\303<\222\326\277\313vS\004\027\257\327\277\271\021`\242\213\027\316\2772\365\343\304\221\346\310?\270z\014^\r\263\313\277\t\310\362\t43\340\277\271\353\276\306\242\247\306\277\341\010R)v4\325\277\224\260\343}$~\336\277\025_\243\233\2634\334?3\354\244|\020\033\261\277g\201\321@\207\024\340\277\343a\353cOL\332?\262N\317\232\2437\300?m\241u\236\302\233\332\277\261c+\201\367\202\311\277\320\267\242 \272\330\322?\017\023\005\341\247=\332\277\013,\374\360^{\272?\243g\'A\207R\347?\260!=\347\234\017\217\277\030\007v\200P\254\265\277\275\021\345$\367\250\325\277\342t\263\273\027\312\321\277s\365c\223\374\210\330?\317\257\234s\246?\322\277\n\266\266\225\003\342\320\277k(\030B\214\337\333\277\016#\304b\302\322\226?\305\311\334\000\\\336\332\277f\202\206\243P;\313\277\363\253{\\\002\215\272?\273\354\327\235\356\234\343\277L\231\345\374^T\315?\211\317\235`\3775\333\277\177\276\220\202e4\326?l\223\016\377~\353\306\277\353\333r\303)R\321?\241\324E\247:&\313\277Rj\212[`*\342\277\353\023H\242\372;\340\277q\316\302}h\217\314\277\255\363\247A\\/\243\277\005\340\300`\016m\337\277\n\244\243\240\004K\333?\036/I\n\321\206\340?"
      }
    }
  }
}
node {
  name: "normalize_element/component_20"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\204\263\337\003\tD\320?\022\357J\334tU\330\277\336Q\010\211Y\324\340\277\204\257;\037\226t\342\277T\253L\204O\353\334?X\202\326\r%\244\327\277s\230\222Y{\247\317\277\315Z\247\035@7\336?Bx\264q\304Z\335?(\350@ \341E\342?G\220k\277\214\024\337\277\351\340OC\n\224\327\277\363\303\255\'_5\341\277\241\357\362\235-\272\344?\262\317\010\333\364\014\324\277t\370\234\242\300\316\326\277\234\023\377\240\303\266\252\277_\373U\302\013\t\340\277\340\342gw\326\333w\277Wmi\373x\344\331\277\373\330\023\023\212c\332\277<=!\001\304\331\327\277R\327\230\337\202O\331\277\026\340\026\207\216\370\344\277\316kO=\220\004\337\277Bt\357~h(\341\277k\014:!t\260\340\277\311!=\240\307#\347\277\214\223\014J\342v\332\277\216\374\013N\216\014\342\277\207\010\254\332=\322\327\277}\357\312\211\321N\334\277\312\356\023Q]J\345\277\221D/\243X\356\333\277\014\224\024X\000\323\327\2773\301p\256a\206\326\277L\356\301\265$\021\340\277U\240X\237Yo\343\277\357\240#\003\212\242\310\277e\026\004\003\306B\332?\374\014=\234\237\346\323\277\315\001\345c5%\333\277\254\367\341A/\223\341\277\3410\352\275\245Z\340\277H\322\177 \212\323\324\277b\026\230\035\373|\323?&\210_V\315\030\335\277j;\236}\202\027\304\277\217\323c\235\".\331\277L}j\006\002.\322\277\210\001}\350\243\210\317\277\320D\330\360\364\212\346\277\210\333\374\032\244{\341?B\250\234@\"W\340\277\321\246\023\236\n\227\336\277\243\217\371\200@\247\342?\254\007\'\375\030\016\335?@\302\3155\016m\315?d\017\006\001\246\312\335\277Sn\354#\001\364\326\277\271\367\364\001\0263\337?\330\367<\332\223\033\331\277U\367\310\346\252y\332\277&;\221\273c\214\322?\325\250M\275\352X\337\277i\301r!\342\250\326\277\225\336\314\"\363L\335\277yE\t]68\335\277Cy\274\034\270\273\321\277\272\316\257{e=\326?\3348\326\203Qb\327\277v\233\201\333$\320\346\277!s\n\227\372\036\323\277\242\351p\235\024\300\343\277`\235:\301\304\300\333?\177\375\316\376Y\026\345\277\rd\311^\347M\333\277\302\233\332\276\354\003\326\277\274\016\017@\356K\327\277\'U6\007c\037\335?x\311j\200\363>\340\277\3646\364\036\200w\336\277b\333\242\314\006\231\324\277k\206\257\n/\234\335\277\256\2708*7\321\321\277.\3335\276\202v\340\277B\251\203\335,5\255?\201c*X>&\333?\333o\355DI\310\332\277\013\'\253\032k\234\325\277z\001\325\303\300\210\326\277k\320<%\214\313\333\277 \322o_\007\216\326?\034E1\324\274~\343?\342\037\266\364h\252\342?\362\246\256\276\262y\341\277\254\003{\247]\347\340?\331\316Z~\236N\345\2771\r\036\0017\006\344\277^\243\243$=/\332\277\230\316=\332\356\224\342?\354I\005\272\233\214\340\277.\261\360\375&7\330\277\365\337ZX\3752\316?@\265\013\027\0035\323\2775\272\336\221\014\224\343\277r\r}\301\270\345\333\277\220\000\003{+\226\330\277}k\324\001\030\350\332?\242\345\006d+?\313?@\020b_\231\324\335\277\207\2554\204\276O\323?\\Z\252^\300\203\325\277S\2707\"\214]\336\277![u\241\342M\332\277P\210\004|L^\327\277,.\216\312M\024\340?H\006o\376\025\010\346\2772+\210?\222k\333\277\226\357\266^\025`\330\277C\027y\376Y\030\335?\020#\204G\033G\334\277\005\220\363aj\311\334\277\363\327\330\343\215\345\335\277\201\222\247Q\355x\324?\206\215\262~3q\334\277\361YK\277L\255\341\277\232\311\036><\r\333\277?\315fa\221\027\335?BjEa8s\345\2775;9\340F\314\334?(\377\244\353\323;\340\277\246\005\203\371\230\000\231\277#;%\326\230F\332\277\327~\327\014\025\010\340?Zv\322\014\363/\333\277E\272\237S\220\037\334\2775\351\370`\000~\331\277Q/[_\342\027\325\277\246\013\261\372#\014\322?\034\304Z\276&R\325\277e\213\244\335\350\243\326\277\033\262\313\001\314\306\340\277\246{\276\342\200\310\324\277\334t\025\234\013m\333\277\341\307\177\036\366\204\334\277\207\305\250k\355\375\332\2778b\261v\251\313\307?\244\232\243\330\033F\313\2778\273\265L\206\343\330\277\364\016\001\321\335?\341\277\200\010\026,z\314\322\277\365\200\273\344f\225\326\277!\0347%\356k\326\277\013(\324\323G\340\332\277\005\371\270\272\214\260\337\277\007v\241^\225\260\336?\257k\305H@\026\340\277^\204)\312\245q\340\277\375\342J$n\241\336\277K\323\373!\221Q\337\277%@n;D\016\323\277\017\277\223\375\220\312\342\277\244i\365z\234\016\336\277 U^<\315S\340\277\227\005n8\207\306\336\277Qj/\242\355\370\347\277\021TKB;\212\330\277\211\260\2060#a\331\277\277<\256W\242\375\332\277O\3333\t\346\001\305?Q\010p\2743\301\333\277\"\310 \373IJ\331\277\037Wv\003\375l\335\277\273y\354_@\014\332\277\311\241\321_\340`\325\277\205\371]\236\357#\335\277\030yY\023\013\274\346\2775\000e\235;K\331?RG\350\343\261\321\334\277M\215+\211G\275\341?\256\302\177\035\254\275\326\277\237x)\320\202+\325?\323\325\302\321\372\000\325\277zY\260\340\300\034\335?\250)\023\3106:\333\277\367\350\313\332\277\225\335\277\355a\324Z=\314\332\2775\025\332 0\"\323?\243\244\260 \007\204\327?\034\255\017\220\324g\325\277\365C\360\350\024\236\314?\300\2112e\361\354\325\277%\'\217~f\326\317\277\305e&b[p\342\277\n\177+~\370\036\326\277\275\270}$_h\334\277\207E\363\235\353\375\326?\363\351\014\347u\237\334?\200\316I\224b\254\340?oh\251@V\005\337\277\313\356n\n\320\033\345\277d\017\304\344\323\004\321?\242a\316\277\237R\330\277q\275\330AF<\332\277\260E\301B\234\275\341\277\307\'\246\003@\262\322\277\203\225\371\375Q\212\340\277\217ND\\\214\003\321\277R\277\207\"\017\212\327?\317\257\234s\246?\334\277\'ZE\301\2048\325?8\231]\234\235\261\330\277\007\354\213\000~x\327\277p\n+\025T\324\345\277&\233aY\037\305\327\277\243\\uxc\034\337?\352\256.\237\223\273\324\277$\351\036\002\334f\330\277\031W\\\034\225\033\331\277A[\0303\323\007\341?:\034\237\301\215q\324\277E\234\261\334\220N\332?=,/TY\257\340\277L\032\243uT5\333?V\3469d\373\267\322?i\257\231\327l@\323?\312\"\342 \000\274\337\277,\206\304\240\300\271\327\277\305Q^\320\347\210\343?\2451ZGU\223\301?Df6\341\301\003\324\277\361\322\217~\342]\327\277\213\254\261[6\200\323?\021\361b\243\244.\333\277W\357\252\346\275Z\313\277\204K\307\234g\354\326\277m\213\327a\361\200\326?\231\263\302\035=8\336?:\327\346\265\310,\332\277\2176\361\202Fx\320\2779IN\201\'\010\327\277\013\330i\377^%\341\277k\273\t\276i\372\345\277\226\261_\177+<\341\277\010\273\027N\210o\346\277\377{l\242\001\"\342\277\346$\224\276\020\262\336\277\274\\\304wbV\335\2770\025\331\326h\234\304?\017H\035x\020\026\330?\277n\246|\347\033\327?\343\253x~\254\373\330\277B\005\352A\377\014\320\277\216\363\016\"\337\306\335\277\212\307\352\373\025W\325\277\356\305\037^:Z\342\277\370\333\205\203\020\222\337?\315\3662\233\021o\350\277\252\264(`\371;\336\277E\223\027\333\234\261\327\277\311\371(D<i\321?K\022\370\201\263\355\322?\200H\277}\035\370\335\277;\020\202#\2731\327\277\002@d}B\367\253\277t\302:D\222\017\333\2776~\033A\256}\332\2778?\017\377\372\362\322\277\016\315e8\330\372\317?P+\267zo\010\332\2771\311m\240e\302\337\277\253\244>^\2022\334\277\367\245eA\264\030\322?\207oa\335x\367\337?\331A\302\203\2503\326?#\304\317^\001U\346\277j\366@+0\344\326\277Z\244\303\"\n\326\327\277\377\354\242C;B\340\277\024\360\204\301\251\215\332\277u\321\210\200\340}\330?\217\3027E.\225\333\277-8j\"\277@\330\277\352*\027\t\361\361\311?\204\330\025\nC\252\313\277\264\"j\242\317\307\335\277\225\200Vh93\316\277]+\353H?+\340\277\331\317b)\222/\335\277#\204h)0\317\300?\347a\364\036_\251\325?\251\256\021\373\343\301\330\277\241X\331\0049$\331\277/\3103\2730J\335\2777\253x\002\345\337\333\2778RS\036\037e\335\277\335<zh\304\361\343\277X\202\265\377;\241\340?8\017\314v*\005\327\277\200\374\031\234\220\257\325\277X/\320\377\274z\336\277\367\207V\274\313\244\331\277\360\320\301D\315a\323?\313/\244?\013t\331\277}\252\320a:\204\325\277\262\007\244\016<\210\321\277T\212>\233,\240\330\277\201>\025`\355b\320\277ox\213\321\204w\340\2771\\_\034C\335\334?$$5a\271m\331?\3277\356\234\177\336\335?\343(\212\241\3465\341?\317e\315<wJ\332?\312\0017b\230\271\343\277U\3149_\211S\350\277t\016\371\302\277c\340\2777|\177A\332X\335\277\363L7\242\336\200\337\277\024u(;\344\303\332\277z\310\224\017AU\326?3l\265\003\205,\313\277\330>.\273q\\\333\277\221\315]de\250\337?\266\025\230\2413!\335\277\r=\336\27387\323?\265(\036\335)\231\334\277\374k\273\001Ma\346\277\310\212\216\242\326\r\326\277\362\250BM>\307\342?ns\27635\344\324?<\271\215\243\305[\321\277\234\363:\177fR\340\2770\252\271\232D\326\327\277\025?\337yV\220\310\277\245\364L/1\026\335\277\375\372|\357\312\t\323?r\212+\27277\307?\276@Z\255]d\340\277u\250*]\217\374\320\277\206wV^4\034\336\277e\275\336\036\000\310\330\277\204e\t\276\253\226\343\277\026H7_x\'\327\277\0136\236\235F\031\344\277v:\353\256G\274\327\277w\366\327#\273o\313\277n\365A;L\340\327?\377\260\347c%\303\335\277\264\375\361\177\303\033\334\277h\223\005Do\316\332\277\024\234\023\336\222\032\334?*\333n\037E\337\334?.\347\020@\2030\333\277\016Bi=\266D\324\277v\355\301Zk^\325\277\032h\302\037\023\303\342\277\205\004R\203\345_\334\277\226<C\335\254f\310?\3316\326\017\373N\350\277\366\004OBeS\336?%k?\3377\272\330\277\206f\350\351m\375\340?n\002\302=\205r\340\277\347\356J\375\202\376\326\277v\2231\241\366\031\332\277,\020\034\033\252\367\325\277\375\0067c\342`\340\277\306\272~\342|A\337\277\177\334~\371d\305\325?J\235\333\3374\330\333\277\362n\227\303\017J\332\277\365\261\314l\241\365\333?\266\372\207\200\205\204\332\277\255=`\334\025\223\335\277\253\023\206\267\275\023\334\277g\370\313\376\253\324\331\277\271\003\022\240\350\262\336\277\231\333{\300UA\340\277\204\226\\b\270\374\342\277\202%\r$\3360\330\277\354\325\360\302\020\230\325?\300\024q|\345h\331\277h\016A\274K5\333\277\345\034\310\274\206\007\333\2773]\200d\327\211\330\277\322\217\002\033B[\326\277z\234\222A(N\332\277\237\2375\201\032%\327?_kB\234\177\242\332?\313\037\302\256\334A\340\277\275\036\351_\324f\332\277%\367\307\275\361\034\324\277\323H\215\001\300N\333\277\266\335_\230\247N\336?\365L/1\226\251\340\277\022\035]\000u\336\324?\314\177\243x\360\356\315?\371\215\206\276\201j\321?\214]\211\335\312T\324\277\300\024q|\345\350\330\277$\205\177\377P\252\207\277\240\261\345K^\323\335?V\244\035\222\265a\343\2774)\252#\354\300\330\277\014\372c>F\227\274\277\017\327\007\345\277\370\326?\006\316!\302\"3\332\277\030s\337\203:Y\317?{\031 ,\276|\324\277\204C\0248~\315\313\277\273\007\215\005*H\351\277?9\351\001\034\220\334\277>\321\320\232z\370\330?V:\035\235\372\r\251\277\033\275\032\2404\024\327??vr\341\233\001\313?}9\232\300\000\004\341\2772\344\330z\206p\341\277_K\341\244\335f\327?}\'\301v\213\233\316?\317\035\365\276\216\013\336?Z\370U\024\n\354\327\277Y\341\361H\0276\343?\353G\324U\313g\326\277\234\232\323~\316Q\343?V\032\347%\265\006\333?\013\336\004\235\030\353\335\2777\351l\267\023\033\340?`J\023\245s\364\344\277c}f\275\326m\346\277\010h\317#N\200\332?\213\273\007\t\315\005\314?>3\220\2004\020\240?\323\"\221ldM\340\277\037\271\271![\320\321\277)\264\254\373\307\002\334\277\342\014\264\361\026\376\327\277\224T\001R\366\361\330?\251\206\375\236X\207\345\277\006\002S\274\200M\331\277\223~\220\237lN\335?\r\243\203\2427$\332?\007\324\325\374|\004\330\277\261\346\327A\353\"\343\277\211P\031\275\"Q\336?\021)z\236G\236\322?\336I\227@B;\343\277\277\223\334\202!\002\323\277\031\242\361\341\345+\340\277\332\227\307\365J\264\334\277\'\345(\037\006c\306?\215/\363\200&\000\340\277\034&\\\300\262/\337\277n\322~\265\264d\335?$\327,\033\306r\333\277\241/\275\375\271h\336\2772\177;?{\344\306\277\210Fw\020;\323\334?\244\267\313\300\371{\335\277\243\321x}A\246\347?$d \317._\330\277E\253I\246\371\231\335?&\350\'\203@\272\312?\317(\002A%S\321\277\365\3767\335OY\335?\262m\254\037\366]\324?\314\261a\362\253\336\343?9\272\204\"a\010\330\277\220\205\350\0208\222\346\277I\331\"i7\272\343\277\257\367\321_\236D\326\277\216u/\377:Z\322\277z\306\276d\343\201\325\277\342\243Q\303\257\377\337\277\335\027Db\212K\334\277V\266\017y\313\325\330\277t\305\326}\021\036\346?5\323\234@\001)\332\277\273\221\303q*\343\343\277\250E\320\332e\246\323\277]ry\377a\303\330\277\325l\016\2450\316\301?]\376C\372\355\353\327\277<qR\373!t\332\277b\313\341I\301\211\334\277\312\351\241l\200\010\321\277\206\306\270\207)6\337\277H\360\022\336\026\023\320?\245 \313\304\245\021\327?I\275\310\200\303\026\340\277\373\270\354\306q\326\351\277\251=\333Y\252\301\325\277\365\312\212\033\226\n\334\277\357p\\B\025\311\353\277\360\313O`\360\037\341\277V\360\272\002\372\222\327\277\341\252\374|\245\275\331?\345\262v\200\314\223\341?\005\242i\201$\t\337\277\263\213\026^Q#\327\277a\313\206\220N8\324?l~\025C\346H\323\277B\304\325\032\255\327\327?\022\024?\306\334u\343\277!\302dO\247a\333\277\021\373\251\226\031[\323\2770\302o\236E\312\332?0\262\t\325r\214\340\277\361\033\025\356Kl\335?P\024K>4\373\334\2776\200m\263g\005\334\277\025M\261\264\235\000\334\277\2658\337_o(\336?\027\240\310\356]\236\346\277U\236\345\036\267\004\340\277ZGv!-\340\342\277\276s\377\303#\022\336?j\032o\206v\351\351\277\"lxz\245\254\335\277\247\220\361I\243Y\315?:0o\304IP\334\277\274/\035)\021\027\333\277\017\014\336_VK\344??\010\\\262\205{\312\277\322\201\325&\210\231\314\277\227\372?\250\007\\\313\277l\013\256=\334\303\340?B\363s\"E\r\323\277\307\001\211`\373\315\335\277\271*\375B\227\311\334\277\034~\222\226%\225\337\277\221\242)\226\266\023\342\277\373dZ\325q\200\316\277\233\312\303\276tE\327?\303\224q!\311\213\336?\327T/\"\376\237\323?\260\376\021~\220B\334\277\244\360n\2374\330\331\277\036[\307\237EB\330\277\210Je\202\310?\333\277\364\031PoFM\335\277\031A\276\337\303\200\336?P\221\236}@{\347\277- YeK;\340?\370ES\207&\032\324\277\016tab\373\342\336\2773\206\336\207(K\321\277\211\206{\033QP\333?mY[\004\010\027\331\277\010(\005\304\301q\320?\236\002\005\203\020\365\332\277\233N\272F.,\317\277\036\r\257=\026\317\332?\324\0329\301\355?\335\277b\317\246<\035<\332\277!]*>W~\321\277\006-$`ty\311?\255\271HFs\311\343\277\330\266\213\335\374\016\320\277\334\313\307\377.\035\343?\226\001-~\317\237\335?\325!7\303\r\370\344\277^\274\335\232\2158\326\277@\362s\350\231\003\337\277\252\031\306\233\004\010\337\277\200\n\252\272\005\032\327?\242o^\336\024\375\333\277\366M\263\243\345~\314?\350w\016#\2148\333\277\306\000\344\337\302\025\337\277\353*\356\211\2777\335\277\231\336Y\026\247\265\333\277\277\325:q9\236\347\277\240\267\004\"\274$\342\277h<X\231\005\347\225?r\205\034\000\026>\344\277\317;\004Dw\277\333?\027\335r\334\306\262\325?\341R!`\245\251\340\277\217\216\212\203t\306\324\277\256+f\204\267G\333?\206\273\006\277\005@\334\277\322?w8p\275\325\277W\240\253\347\203\351\310?|=F\026\274\252\310?n-zD\330r\334\277\001)w\300\361\014\324?\301.q\201W\315\333\277x:\241!-\337\330\277\037w[3Ct\323\277<\025\r\2458\277\322?\305\366\244]\226\000\333\277~\251]\033C\343\333\277\305\277t\377\375N\321\277o\327*E\033\025\330\277\371\345a\333\201>\336?\305\377\374B\270\227\336\277\305\237\362\371r\260\330\277C[k{\375\301\335\277I\010\240b\346\354\341\277N\004\026e\333N\335\277\035%L\244vw\335\277]j)\3053M\331\277R\255l\274\307[\337\277\254`\n\305\014C\350?\326\344\010\235\000\330\337\277\340+\272\365\232\036\337?\244;\004e\205h\313\277\001\215-_\362\332\331\277\360\222\356\235\207\311\340\277=\335\324\233\254\354\320\277a\201\371u\361\010\341\277\320v3@\365\021\334\277\027\274\205\001\215\212\337?d\241\347`GM\343\277\031\016[\345\317X\337\2777\325\346Ar\031\330\2773\215\344\372\220Z\330\277j|\r^G\036\324\277\256\247\014\322B\270\331?\356\241\361\002\364\224\311?\022U2\337E\010\336?J&\n\241A\322\330?\210\312\022\337\201\350\331\277Q\n\004K\277\216\327\277\024\274\031\034\302\304\326\277.&O\274w\022\320?\310n\260\201\276>\341\277k\316\311\244\351`\334\277}\321y\350\026\325\340?\251\211>\037e\204\322?I(\"hqk\337\277\351!\001@\241\340\337\277\251\237\232?d\031\340\277\253\240X]=\335\345\277\027\027`\202\307\365\335\277~\3644\375e\371\323?\262\261\032d\365\273\332?\240\245+\330F\274\340\277\262\361`\213\335\276\331\277\361\374\273\241\235\021\343\277\016@\366\274\023\232\324\277\007\341<b\025\353\327\277)\352\212!Rv\335?\030\033\241<\177\034\333\277Zm\027\375\0250\337\277\352\275\347v\345\351\346?\303\364\275\206\340\270\331\277\301$\360\342X2\327\277\375$\312 o\240\337?\327\014\231\300\347\346\327\277]\370f@b\200\352\277S\213\322\357\014d\344?\216\302\273}\322`\315?\243\035\334B\374h\334\277\177\246\332~d\200\332\277D\316\261r\036\004\326\277}\243\353\374\272\327\331\277\377-\267j\215w\315?\217R\tO\350u\327\277W<y\201\'g\327\277w\005O\337:\230\334\277\216\204l\0171\224\342?!\366\327e\327A\307\277\304\340\355\203$\232\263?\232N>\177\3227\340\277\331s\200\375c\243\336\277)\303D\3050\316\325\277l\351\321TO\346\325\277\256\2716c\267 \252?\025\276\010d\300#\337\277\n\266\031\300\276\312\332\277\225\264$8\334\344\310?\213\243\325=p]\334\277\022\027\200F\351\322\333\277T\3032\301f<\222\277h\315,\225\371?\262\277\316\267O\330\217\336\322?Jj\025\273\205\007\320?\327\251M\367\225\342\340?}T\252\341\256`\326\277v\247\330$\201\376\323\277\246\211\014\345#-\327\277[\214\r\037\tb\337\277\334\372#\353\364\254\257\277\315\306\316\004X\036\326\277\302\346V\347\234\310\305?~\n6d\362<\332\277GB\266\207\030\212\334?\206<\376\342\204\317\330?\333ikD0\216\320?\364\272\217\355\306\314\335\277\307&\231\237\222\250\265\277\320X\240\202h\362\341\277R$\004P13\340\277\320e\305\313.s\330\277\310C\337\335\312\022\341?\'\276=|W\014\336\277\300\341O\236\303\246\343?\274]\212\006\2041\326\277n\271\002#\222U\337\277Y!\376\304uJ\334\277\322Z,\240\253\310\324?&\233\274\022\222V\340\277s\373\037?\237q\320\277[X\036A}M\335\277\233N\374b\000r\314\277\231?K\374\366\332\342?.\272H\343H\216\324?\330\'\004\233\010\325\326\277\320~A^Q\202\343\277\036\376y\236hL\340\277\270F\035\200\201\236\322?\363\205\332\200\031]\342\277\314h\036\237\024\366\340\277\014AH\365!\230\317\277\206$\0164\372,\320\277A\224y\365;\236\340\277D\340\006\204\357 \320?\010\003\317\275\207k\343\277\201U\2329\311\273\342\277\310{r\240\311\266\342\277\001>.`\270i\334?\331\312\360D\265m\341\277\240\001\222<\031\224\325?O \354\024\253\006\343\2771  \004\211\022\335?\361\036\261\'\313Z\335\277H>e\353\3174\330\277\277\363j\004\013u\330\277U\234r\236\024Z\330?\305\327*\003\377B\336\277n\227\211d\300\300\321\277\301\326\031\235\373\004\320?V\274\3542W\341\340\277\351\235\n\270\3479\342?*\006\243\355\363\363\323\277Il\261\272Y\254\337?\341\3143\037\245L\320\277\260\345\266\371VV\316?1\232\360\246\266\257\346?\371\257\275`\2019\332?\027\251\346(\366\306\344\277\265j|\313Au\340\277\321\214,69\276\301?M\2241\374\257\314\333\277\323\300\277\243\356L\254\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_21"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "[\004\255]fZ\333\277d\244(\341S\n\323\277\341bE\r\246a\262?\037{\244^C\262\323?\377\275\210tG\030\251\277\245\2066\000\033\320\330\277\311+\306\257\0166\304?Y)\312\306\377\364\310?\203\204\315\245]q\313?\352\224hE\253\305\245\277\363zN\177\230\262\246\277\205]\322 \036,\325\277\315\226I`\265\252\303\277\345\235\340\356\356\371\274?\004\0244w>M\301\277\2421f\225Q!Y?\246\227\275\021\202z\334\277Y\367\217\205\350\220\324\277\014\033L`\306V\333\277$h\'\336\\\227\324\277\314[\032d7\330\261\277\233\216\337_-\214\321\277\313\241f\304\334\240\316\277\252w\002\2534s\320?l\214\347}-\371\303\277}4\350\t\234\314N?\210K\n\003\001\370\320\277ig\342gm\344\320?V\333E\177\005|\322\277,\275p\306\264\337\313?`\362\324]\270\367\336?c\376]\341U}\322\277\271\037F\301\271\252\264?\263\270\234\236\271\377\315\277\361\"\331D\342u\323\2779\365\232\201>\317\326?L\375p\033\003nz\277\222\251\212\302\221\364\325?\217\251\232\244\"c\303\277\340\325\223u\017;\265\277\250\333(\236\362i\265\277\032\217\316\320\252\\\211\277Z+\230\000\025\361\325?\230\244\021\2673a\300?\316\033\345h\247I\270?\237\317>^a$\340\277\335\356\345>9\n\260\277v\216\345\203\274#\250?\267t\222\316<\220\261\277\226]Q\306\3171\300\277\377\267\253\272\273\214\270\277N[\247\272\025\374\320\277\372\224\003@\214E\210\277P\274\031!{>\263\277,\335U\366\372f\314?\320\262\223f\230\377\300?\200\003\305U\206\355\302\277 \300\267#{\210\335\277`Q\322BP\325\227?\230\203E\352\342[\324\277\313\273\352\001\363\320\321?Bo\371a\347Z\321\277\nH\240f\355\333\302\277\277\004\270j\350\260\333\277\0350\366\373Q\026\277?qe\375$F\250\330\277\312\317\321\240$\001\257?\227\232\363B\360\256\252\277E\0211\251\312\214\257\277\032,\312\334\344\006\231\277\275\343\322\000\367_\325\277\336XP\030\224\351\317?\372\000\322n\\\025\210\277\225`\324b\256T\327?\311\241M\'<\225\310?\343\352\031%\\\006\335\277\252\262s\303\204\013\266?\343%\254K\225A\265\277b[\222E\222\007\307?\344\311$\331\331\306\312?\357Yt>~\247\330\277\364Z\236A\"\361\243?\244\345\037\001\314J\275\277z\255\337\247\005\212\255?}*\244\205\2268\220\277Nm\030!\026\023\251\277F\r\001\033k\232\335\277$A\372\036\334\272\323?\372<\353\277s\224\324\277*{\205\344\350\032\302\277\253\004\213\303\231_\246?\352D\037\177\253-\323\277wx\356\216\243q\204\277\021\217\243\275\352\026\305?\223\211\230hI\255\207\277!\023[\007(\t\310\277\300z\232\233\210a\300?O\312\353[\302\256\255\277\020\304\036\177\016\230\327?P\026!\351\221\216\301\277(S\232\007\217:\313?z]\226\341\0052\267\277\276v\003\341\027R\264\277z<\353\"\236\017\335\277\334\341# .R\263\277\326\301f%R?\272?\323\301\372?\207\371\322\277Q/:Q\371t\256?\014\t\224$:\021\305?5\024N=\230\265\332\277j\002\034\2550\236\272\277b\207\214\242b\367\333\277I\2453\213\253%\275\277\010:{\343{\261\303\277f\213\377\226[5\326\277[\266\224\3736g\327\277\3439\266\371\332\216\304?\265\212\335\302\343p\336?vg%ajA\257\277\211P\031\275\"Q\330\277P\231\315\251\205\016\266\277\014\330\202\234\3770\331?\000*\250\352\026h\312\277U\267@\243\360\260\277?\245`\225$2\340\332\277H\036\200\273\211-\320\277\300({*+v\315\277%\357\271\237\225l\323\277\262\2728\236\215\344\274?\252\003j{\005\363\321\277L\"\322\241\231H\312\277\344i\330s\302\031\266\277\020\374\271\262U\023\335\2775\010\030\002%\252\234\277\355\345\215\177\336\325\220\277\'\352\232\003\343d\311\277\375\371S6\356\305\312\277\361\332\2648\264\337\224?\000\372dbF:\326\277l\026\331^\354\265P\277\275#\031(\337\"\330\277\026S\206\375\340t\271\277\000\306u\204\272e\314?}\246\255\375\334Q\223?m\020\200\224\345\337\207\277\364\214\330\2029\325\321\277Y\034J\304\306\202\245\277R\356/\234\032Q\220\277\0306\024\210\350!\312\277W7o\200\277\266\263\277T/\2466\304\272\301\277\325;e\000k\177\204\277\366\326~:7\320\275\277\261\377\370\032\233\300\320\277\203=\273\266\226M\310\277\275-\310\376\310`\263?5g\330\203\244\252\300?TK\252\036\177U\261?\271\322\276\373\333L\265?L\345H\302\031\027\330?p4\376\177\307\260\251?\207\2070~\0327\321\277v\336\313\037\001\023\214?\336t\245GN\204\207?\032\021\020\274\357R\266?\325\260\337\023\353\324\325?\260X`\0333\201\326\277\332\340\322\236\203H\223?2\362&})\325\311\277\357 \321_C\213\321?\003\352Q\341\2356\336\277\345\n\357r\021\337\245\277\201\215\322BU\016\317?8Za<{\025\333?Zs\221\214\346\022\340?\367h\334a4\247\300\277\366\271\204A%\247@\277*\216\003\257\226;\271\277y\324o\221A\017\260?\204\213\313\247})\272\277\222\"\317\201\'%\311?\266z\363\300l\247\306?\225\331Z>\026\313\335\277\240\036W\372;!\315?\271A\202\034s\"\257\277E\005\230C\234\030\323\277\225X!\376\304\265\321\277\375n\025\037\372\t\325?\224g\003UH\236\330\277\200n\334 b\234\264\2774\246y*T\365\273?\'\237\036\3332\340\326\277\276R3\367\322\014\273\277\001\260\215\272\316m\267?\253\215\271\204\246\231\276\277E\266Qo\326x\206\277?\222P\002\264P\340?*\326>W:\243\261\277\201\264\275\345\003e\273\277\236\316\304]\205\340\255?\370\'\334\036\311T\260\277\332\217\235\202\277\t\257?#\311AC\336\366\331\277\210\036\204\302\230\333\245\277\224\200\027\004\366\233\243?\307\2508\374\330\236\247\277\357M\035\365!\271\326?\221\200\260\327\344\276\302?\356\353~\035Q\004\276?\320)5lu\350\211?\005\2263F\261\375\246\277\242\2647\370\302\344\330\277\235\350\302a\314\n\322\277L\016\206\327\201\265\302\277\321\026\276[\254j\323?\0053\t\213H\034\262?|\232\366ATi\320?\332\260C\210m\203\310\277\352\362A* \310\321?\211W\202ZF\311\301\277\013ML\366S\214\303?z\331\237YLK\275?,\354/\3345\370\274\277\217\'#Y\311\010]\277,*\226\346L\226\207\277\232\022\203\237\2748\330\277\005\3220B\231\302\326\277\266\300X\276\262{\276\277\3633\334\035\245T\321\277\232T<GGf\302?\365\036\035\r\226\240\335\277\242\250\001\275OY\321?\231Iq\341\202\344\304\277\262\031\371\037\r\345\320\277\323\300n\\\357L\325\277=f\177$\025[\307?N\336S{\t|\327\277\301\313g\324\327N\276?g\265DW\267\264\274\277\373\355Fz\254t\316?\311@\330\010H$\315\277a\313\375\236\360\303\271?~\336\330\334fd\330?\231\376\374)\033\367\315?\243\350\201\217\301\212\306?\336\324\264IM\324\305?\230k\023\037\206s\324\277#\357EI\202O\313?br\027\037n\240\324\277bf#\000\315\332\333\277\024\234\343\244|}\231\277\200\371\277~\343\306\247\277\345\001\270\233\330*\320?&\276)\230pi\216\277\232\315F[S\250\326\277`]\364\231\334=\312?O\200\027l\331\220\326?\026&\005v2\301\213?\236w\245]3\026\303?\205\'\364\372\2238\327?\027\230\333\336\352\220\301\277\\\223nK\344\002\332\277eLfa\364\301\331\277uXD\301JM\320\277\337\350:\277\356\025\325\277\264\220_\303\374*\333\277\016\025_\304\251\234\302\2771/v\261\037\030\262\2770\234\323{\026\303\251?\375\344\336\262\371\356\332\277\250\211U\273\332\025\236?\"\227\201\310\367\314\237?\023z\201\202 z\265?Iu\210\037f\246\261?;\203\257};h\314?\031\264\3539D7\327\277}\334\247x\226\377\273?AqtS\322\334\275\277\021B8M<\363\240\277&\315Y~dc\314?\251V\243z\022\250\203\277\270\262\237 \014\027\261?\256\373\236\303BN\317\277#\031\017B\202\332\322\277z\244f\264\372\017\334\277\222S\340\tbE\302?\250\237\036x\010%\304?y(\002\203A%\256\277r\310\020D9x\254?)\356\323LRt\332?N\236p~\334!\336\277b\"\207\203\342\231\250?N\325\373\225\347$\263\277\231\252(\034I\233\324\277\360V\320\223\266\341\253?s\377G\\\266\014\326\277g\340\020B\361w\261\277XA\210;I\000\302\277\242\235\262\036\347K\260?\016C\365 Nq\301\277\225a\273\377\270\222\270?4]\025\311\323\311\266\277\000\000\000\000\000\000\000\000\356IX\002\306F\331\277u\265p\264>@\301?\"^\215\242\2750\323?\027q\360;<:\243?\032\362\327}*\033\322?\2655s_\006\027\226\277p\225H\036_\255\315\277+)\240\036\025^\321?\313\026\007\237\377\201\270\277\025\242\350&\326N\257\277/>y\026\214c\270\2771W\016FO>\266\277\371\234`\244\274\373\321?zQ\273_\005\370\305?31\341\300y\253\310?#\333uF\3060\301\277\230U3\306\342\222\222\277\3353}<\025\354\320?\017(T\235\371\310\247\277[\370M\243\301T\265\277\262\357\314\374Qq\325\277\nG\024\203U/\301?\352\t_ \207\017\246\277\362,Z\343\340P\331\277\351Q\n\035\350\037\322\277Zq\242D\350\263\320?\334Y\344lt\255\276?\217\236*\370\320\262\314\2770dT\235\376\201\304\277\363\271\\\302v7\256\277Q\321\201zm\225\304\277\021\322\350H\r\361\276\277\0369\220\375E3\261\277C\025\345o\316\312\240?\365\335J\002\026q\346\277X\216\322\235\016\201\334\277i\275\245\275=\337\262?\315(=\243\022v\220\277\337V\223\n\327\341\307\277X\231\000.\216\353\262\277\344kl\002Ng\310\277_\271\362\032:\304\237?O\335\355^\024[\241\277\311+\233/\262A\217\277\024\205\310\257@p\264?\014\322\006\303\344\275~\2772Gf`\252:\270?t\215i\202\265%\252?\201\320Y\352I.\302?\350 \236\333:n\314?EU\300\373\262\315\315?}\257\204b\351K\254\277\305\3378![\263\306\277\267K\023\235\002,\332\277\230\246\022\342\355\350\245\277\226\254q\323\362E\243\277\260I\310Q\3125\333\277\356p\340z\271t\341\277\036\334\000\340\226\227\311?\'ia\303\221\017\322\277;\355\000\272\365;\314?sC\370\274\207\260\326?\2159\031f\262\311\251?1\361\303\030\303b\221\277\000Tq\343\026\263\335\277O\312\346\242\010F\276?\257\033\337\254\373\246\266\277\360\340\304\343\3446\330\277\315Am\247\357-\300?5\212\233\t<f\324\277\325\343\240\177\340\374\257\277\'\271G_\326~\304?a\231\276\244\037w\223?,\264\307\231\223\010\236\277\372o\261\344\"e\324\277\225\246Zn\335\213\267?\265\247&\271\252\211\315?\365\241\352\333r\303\321\277IY\257\267\007\000\264\277&H\370 \374r\327\277U\372\307J\345P\271\277\363p\310\'\340\256\267?t%\273\377\263\331\217?O\001\325\344\316q\327\277L\365Ka1\254\320\277\202_\331\273\365\320\317\277\177BE\356L\025\266\277\352\376\271\201e\231\306?p\333\3577wG\301?\224\317\203\237^G\256?K\n\311Un\232\261\277\003\214x\374(4\300?(?N=w\'\263\277\021\317\201\001^H\272?1\306\246\346\211\037\221\277\356L\364;E\265\333\277y\r4~eN\334\277\320\341\323\374.\365\226?\207e\371\333\032\350\321\277u\251\370\\\371.\331\277\332\3228\016\233L\253?7_\374\237\211q\341?\342\270!\000\027h\310\2776\002Y\236\363\222\270\277\324\322`C\005\301\267\277\305o\320\177\213\245\312\277=\311\251\337}<\333\277\033\322\'@\264Y\260\277c[\253\3422\023\245?\357cX\0078k\255\277\3200\020_\201\303\312?S\321\263\264\256,\265\277#\306\204\373u%\320?&m\010`\223\315\256\277H\201\313\204\333\261\333\277\354\273\350LV\034\277?\327\232\224\037D\364\321?\255ci\233s\324\221\277p3\313Tw\233\334\277>}e\177\265\0305\277]+\312:V\010\274?p\032.\264k)\262?\3740)\333\023\346\330\277\227m+\346\265\314\300?4\357\233o\002\333\267\277\3628w\201\263\020\316?\365\261\253^\270\322\305?oZ\031\"\341\332\300?\022\201\321\202\243\246\300\277+P\254\317\254\327\265\277o\326\236a\203(\337\277\t\321k\375>\215\340\2774\375\351q\245\277\273\277_6K\023\000-\301\277@\244!\333\340a\320?(\272.\374\340\374\300?\347\313@\242_\024\241\277\227\243K(\022\006\312\277\035\317\200\335]\345\320\277\257\330W\005\007\007\311?A8U\255;\314\266\277$\375\315\366\256b\312\277\317\301\361\204w\334\332?\262\346\360\336\213\216\305\277\277\002\240\243\270\227\332\2778\301\324\"\3444\320?M{R?\322\324\267\277\253q_\2342\226\324?\016g]\'\036\345\303?\014\360\223Ys\266\335\277\252\342|\240\313\212\321\277n\232%\236?/\267\277\370\350\344w`\241\316?[l\007\341\3317\244\277F0\001\004\033\363\222\277\025g\031\235\204\266\256\277\035wO\300\244h\267?\272\260\003!82\267\277\017\353t\275\300\356\307\277N\370\276\033\177`\324\277\347X\030\001\231F\311?j+\335\372<\310\336\277.N\211\337\245\270\224\277\234s\215\"\255\251\320?\007\210\325a}\252\330\277\321\323\231\336r\263\302?\231\021{\364\310\027\267\277M\272\322\327\230|\303?\207\274i#l\262\332?\361Q\000>\330_\274\277\252lP\342\020\375\261\277\336\005J\n,\000\306\277\033A\353`K/\272?>%\245\250L\224\247\2771\377\360\014}$\255\2776\372\010d\305\\\256?j>\235\341\274\356\324\277\251\253\361\210\300G\322?p}\215a\244\320\264\277\372+\277g\177{\316\277\216\366\211Mu\222\333\277\211\346\t\235:\303\325\277\t\r\016@\264 \327\277\303c\201\247w\216\311\2771\037\367J\254\316\260\277\325o\354\372\201\002\322?\n\327\202bTg\333\277\214y%\342\020^\322\277#\363\310\037\014<\313\277\354\213\000~\370?\270?}p%\330\013\307\301\277e\001\321\233\2431\322\277\352\347\217a\374Q\300?U\240\305;\210\351\237?g\323\274\3449BQ?E\203\322\037\263V\320?.\007\027~\262Z{?o\010\372\260\203\357\330?\342\270\216\234E\"\246\277CZ\000\246N8\244\277\343xW\240\212\331\314\277\261p\016\256\353\335\271\277\323\342\347\032\301\341\322?(\211\374e\2759\316\277\344\215\020A|0\246\277\347& \334S(\250\2778\303^?\374\260\245\277\006\326\3654\365\364\260\277\266\344\351C\264)\323\277\306\035\312\253\316\305\323\2770\031}\273\333k\331?\371;\251i\366D\307?\035\037\312\243]\375\322?\315\010<\036\2354\223\277\270\270\344\275\014\364\273?\351\325\000\245\241\306\301?\260\017\367\000\371\354\224\2771t\262\365\210\250\310?\026\260\221\342\353\004\334\277\376\254\001c\340-\320\277\r\323Jc\254\335\325\277\004\326\201\336\341\027\277?\365=vYD\373\233\277\274\200\260\266\326\325\263?}\330\177[\177d\247?\033E9E\005V\307?\215\212\213\345\216\345\232\277Z\353Q\331,\356\315?\264A\n\304\tQ\257\277\006\345\350\267\320\021\307?\371\342\305\241\002\320\337?\255\273\036\361\320\034\336\2772\024^\037)$\330\277\270B\365bj\303\317??\025?\337yV\327\2772p\345\221\344\336\323\277\353\031\270\277W\315\253\277\351uQ\025\3170\316?\005g\225>\031\210\321\277\334\225#\205.\270\320\277\201\216=\030\004\030\305?\335\372\033z\254\225\304?\005k\234MG\000\264?\347\222\n`S\262\246\277\023\271\236\360+9\260\277\035q\242?/:\252\277\240\201?\231\322<\256\277\016T\337\\p\304\300\277\377\227J\303\031\221\332\277h\374t\234\330\314\245\277\376wm\004\034\241\313?z\301\310Gb\264\224\2776\243\230\034t\222\226\277\207\252\363\003\2622\241?\225M5\212\027\321\316\277\305p\267\034\226#\332\277\226\270\206\000}\356\320?f-\211\334\241\233\275?Z\306\331\266 \302\303\277e\210\342\334\306io?\254\265I\250\215\250\244?$ \3545\271\357\305\277[tW\033\010n\277\277f/n\262,\351\207?\033\242D*\020f\270\277n(\204\'W%\266?o\023IO\354|\333\277\244\023\210%\205|\207?\3322\t\254V\005\244\277/\346\000$G\270\320\277\020=\214\275\325\302\315\277\310\226\006\372\033\037\245?\304\343G\241\321\002\330\277\020\017\027o\032\021\323\277\225rJ\202h\224\307?\247\3158\rQ\205\260\277\235*B^\315I\325\277\004W7\346\216a\310\277\r\277\202\3218\026\274\277@\362s\350\231\203\300?;)\202\356\201\014\266\277\253O\203\263\245X\302\277\262\367\301}\r\326\326\277\241Ph\274!K\333\277\230\316\230\223a\246\321\2774\271Z\037\275\276\334\277\307O\374{\235\222\322\277w\001\352^\013\240\240?Z\020\210\337f\324\263?5\020h<S\240\331\2772\207\213y\251\032\310?\001\265\244\3458\236\250?\261\000C\342`g\254\277\315,\225\371?\356\305\277[K\036\23240c\277\223\035\331d\246W\326?v@\310h\323G\307\277\314\010\220\035+c\267?\200j\366\037\035G\322?\022\267\361\304\377_\270?\032w\367\276\300\305\302\277\312\334\276?\214-\325\277\273\261\207\223\207\307\252?\361C\010<\356c\326\277\305\215|\332\2700\264?\315;-\303\250\271\302?\212\341n9,G\301\277;\244\234Xu\220\316\277R\322\344\336\323\007\255?\312\"EK\273$\261?\226Z\250bN\303\251\277\264\336w%,\236\305\277\231\202\351?a\014\245?\312\037\210\003S\023\314?-\376\235\212\247`\277?}\211\302x\0279\320\277s8\251\036\037\343\322\277f\347#\337[\247\340?K\034\036g?\367\222\277\006\357\016\235\\\233\336\277\255A\353#\350\226\305?\335\265\252Cs?\252\277\3337\265;\275u\324\277\\=\243\204\313\360\265\277\035\256\223\002$\375\301\277o\n\216?\017\275\334\277\362=\310W\247\357\303?\225\301\213\235tK\263\277\332^\003\t\'\365\306?0^\230\361[\231\334\277\207\014\263\351k\n\262?H\031/\345\225N\270?{*L\204\262\025\312?9\266\236!\034\263\307?t\367\316\242V\034\267\277\340\363GA\205\335\263?\3142\274@\346V\277\277\237*o\337T\270\264\277\353Y\255\237@P\312?\016\274Z\356\314\204\322\277\274\023\375\353&B\325\277\334d\022\375\363\027\303\277K5\273\007K\351\305\277\371\312\223\326\245g\226?RI\3709\231\023\251?v\272\332\'\323\252\306?P\263\027<\022\320\322?\346Ig\232\217o\304\277\336(\354\201\332\030\301?\177\237Fa\344S\250?\271e\326>\\\363\252?-i\227\377(\233\246\277\374\267`\343\331\351\320\277c0r[\312\025\224?\255[oa\376\006\324?\327\302\352\227\241T\317\277eF\313\303:<\331\277\262\273\335\036\306\\\336\277\262}m\242;-\262\277\034\270= T\322\323?0\330^\"\026\345\245\277Im=\236\361X\261\277OHB\215\010\347\261\277\253\236\345\334\232\362\335\277\271\364\324\217\3628\323\277\273\266\032\206M\354\315\277.\010\274\376\352\022\275\277\243I9\312\207A\300\277i\032\024\315\003\330\333\277\270\350\246\305\307\304\273\277\242\241V\003Z[\325\277\030\226\375\302D\346\333\277\256\303f\272\266\273\310?db-\035\367V\323?Tb*?\241\305\323\277\272\022?\316M\376\264?D\214S\204\006(\332\277V\020\177$W\367\333\277)\232\203w$$\270?\302\232\0240\313h\330\277-t\251:y\313\265\277\337\214\232\257\222\217\312\277\225\341O\277\321\257\312\277\025\250\305\340aZ\335\277\002\034\316>\207\340\306?\256\032:,\303\356\335\277\2349\240|\254\246\261\277L\357\260\303w\346\243\277\372\377\243\374\305\350\246\277w\"\024\235]%\332\277\350\253\375\000\030\215\271?\316L\027\377\312\014\336\277V\372d *\350\312?\275\254\344\2760\364\227?\263pa\366\025\030\265\277\364\354\250 \365\215\317?\217T[\301\241}\246?@X\235\007=\274\223\277\311\366\221\303v\343\251\277\n\322s\2502\316\277?\227\3262[\252\271\276\277\237@\022\325\337;\266\277\2656\t\265\021\025\267?\272\320\307B\225\026\322?\325\310\360\320^\032\263?\251]\237{\007\346\335\277G\336 \367\000\037\300?\330D\316\021\345J\216?@ZR\244\261\354\321\277 n=\371\252\313\312?w\346\324\204\243\232\306??\037\300}x1\330\277\363\205\332\200\031]\322\277Y=7\237\000\253\321\277\0075\317S\025\001\261?\212G\017gq\013\233?6\270c\240!r\341?\017\023\005\341\247=\332\277/\\-\342\001\206\324?4\372\013\034T\013\301?d.\200[=\310\321?\377>\241\246\257\312\316?\227\027&t\023\214\262\277\033\241\033q3\242\247\277\313\357v\265\303\374\315?O\300~\241\252\266\305?\276o\036|\230%\254?\235\264W\274\344\001\321\277\344\254_\033\267\271\322\277\t\"F`\220\032\270\27710\237j\374\333\266?\207\327yD\032O\326?\005\017x\005Gn\340\277apo\254\373/\216\277=\251x!\362\235\247\277B\0006AP\305\272\277\270p\244\\\257#\275?\225W:a\272\367\233\2775J\362\267\230\372\244?\214wO7\263\n\205\277L\026\367\037\231\216\304\277lL\200H\\S\261\277\250\341\031<eX\324?=\226\343\272\316k\334\277\227\214\245@M\312x?rT,\206\304\240\230\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_22"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\300>\031g\374\220\215?\032d\334\036\316M\334\277S\323\313{\336E\336\277\3152\325\335\206\002\343\277\304U\257l0\236\341?\250C]Z\303\373\333\277\033=\356\303\220\210\234\277\352\261o\037\240\030\333? u\"^*x\331?\326\362\024\203\321\266\336?B\2210\004\347\351\334\277\273\335\242\376@Z\335\277E\264%\304\277<\330\277/{#\004\365\367\342?\350w\016#\2148\321\277\313\257r\252\255\277\313\277\201jr\347x\273\322\2778\303h\261o\002\341\277\350\303\240\3747\320\177?\234\000\036\254Z\255\344\277\224\320\247\237\201\242\340\277(4\275\202<\024\333\277\377=\231\373\273)\327\277SH\350\035]\373\340\277\022\034\362*\306\324\327\277&a\225\301\007\345\335\277rt\360\247!E\340\277\260DVm\355\263\347\277\003hJ\241\342\256\333\277\n\210\203c\032\366\337\277\354gV[V\006\342\277T?\312\343\3042\337\277\2164]\364\272\252\344\277\221D/\243X\356\333\277\267\260\023\003\311`\335\277\3537\362\304\2345\336\2771z\260\275\375V\334\277-\325`u?B\342\277#\231\274\236;\203\302\277g\372>\177N?\322?\370[\361\303\367t\321\277\322\356F\325e\347\324\277\254\367\341A/\223\341\277N\324N\244fU\333\277\027<\226\210\001\\\320\277\246\013\327\301\306\227\216?\3562\262\032\001\013\333\277\312\202.\206\027\351\256?\252\222\361\275\371\354\327\277\242\352\272d\332F\323\277\237\344\234E\340)\225\2778&\325\210\252\351\350\277\030D\244\246]\314\333?\333\002\370]\307n\342\277\217V\265\244\243\034\324\277\315\314\314\314\314L\337?\244OP/\235{\327?\312]:\234\257H\244\277\341\254o\375G(\331\277Sn\354#\001\364\326\277{\n\210bU1\340?t4\334\272z\231\334\277\253\321\253\001J\003\322\277++\030Xq\361\202?:,\344|wL\335\277\022US\355.\253\333\277va\265C\r\260\327\277\265\214\324{*\247\326\277.j\275\000w0\301\277\215k\225\303\233\363\314?\232\213\t{$o\332\277\325\201\007a\3110\343\277!s\n\227\372\036\323\277\313\317\323\241O[\344\277\350\345E`\213a\334?Sd\204\"\243\204\346\277\330e\031^ \363\335\277\266\373n\035\220\302\312\277\023\227\210\\\025\315\332\277\331H+!\314\353\333?m,r\231\344\221\340\277n*{\340\235[\327\277Ef.py,\325\277\343\264T\234r\036\334\277,\201s\312\314\032\317\277\336\252N{\0102\325\277\325\213\312\033\232\221\334?\356\234\177\036\027\223\321?\331p?}W\306\336\277\002%\354x\037\t\316\277\360\007\217x\252*\312\277\256\035Z\236\346\010\340\277Y\216\251\036\335\306\314?\234\314.\316\316\330\337?\024\301I\344\314@\341?:%{\337S\224\307\277\267\006[\221=g\333?\n\026\301\336H)\344\2771\r\036\0017\006\344\277\360\3224\305o\014\320\277\rU\214N\361\223\334?\235J\006\200*n\337\277i\375o\035\312-\333\277\",\007\323`\265\212\277\024\317\227\346o%\306\277\324\235\345\201\341?\335\277\205\252\342\327Y\276\336\277\272d^?\253\351\322\277\336\034\317\343\007\031\326?\361\302\345\227\022`\234?.\025\3009\310\220\341\277\201K-\177\261\003\240?\334\243\365\277u(\311\277\304M>$\031E\333\277(\212F-\203 \336\277\210;\213\234\215\256\336\277\374>5\301\344\004\333?\360\020\316\300+\266\353\277\325\306}P\274\357\337\277?Xc\\\263\r\334\277\242\200H\0327P\342?\031\212\340$r\246\331\277 D2\344\330\272\335\277\225\337\232\"]\177\327\277\250\215a\203\302\366\242?lO\034\202\333\301\336\277:$\224BI\026\337\277h\267\361\202\343\215\332\277\324}\337C\262\225\321?\277S\267i\"\"\354\277r$\247\341!\215\347?\374\205\303w\007\035\322\277\226\243\021}\210W\322?\265\377\001\326\252]\334\277\360n\300BA\304\333?\343\330@\333\346\235\335\277\016r0\376*\276\337\277\202\222]\304\322\033\325\277Q/[_\342\027\325\277\325\361\261\036k\004\305?\237\376\365\002\232\245\331\277yy\370:\302\314\322\277t\t\207\336\342a\326\277\214?\233f\313\003\324\277\271=Z\377[G\323\277\034\325\247$\004\016\334\277K\236\241nV3\325\277\303\'c\235\246\246\252?\021\353d\333/\300\310\277\234!\013\207\224\225\340\277\267!\214\300\324\246\330\277\"\200\304D\275\277\317\277g8\257\373\330\256\344\277\373\032\315\272\024\221\330\277\266\235\266F\004\343\342\277\211/,\342\350(\336\277.E\250\010&\355\332?G3\334\241\335\370\330\277\000\332^$\027P\337\277e.\025\3009\010\341\277Q\215\217\375\311\253\327\277%@n;D\016\323\277Hn\013\236[\013\342\277\323\276\373\333L\342\327\277\231L\262a\217\301\343\277M\303\350\240\350\215\340\277/\201\000\276\200\303\346\277\251[,\373d;\324\277%\320\273\014Z#\336\277**n\036\177\020\335\277t\264\257\336\326M\263\2773VY\343\205\227\335\277@\357t\204_\254\307\277\371\227\356\277\337\331\340\277\307\337Q\276\373^\343\277\275r\336{\217\345\324\277ek\236\237\271\271\331\277\255?x\243El\345\2775\000e\235;K\331?_\274\233~\273\262\323\277\333b\310\373\202\247\340?\207m\2132\033d\332\277\254\\\003\266\336\312\251?\302\221\366\3652\300\304\277\242\0318^\211\031\325?f$\357\332\255\276\333\277BT\206\026~\225\340\277!\322\312\030z\037\321\277N\335\256\372\320\303\236?\250pF\305\346@\320?\363!$\342\030\017\312\277\030\253\366~\335\310\266?\242WM!\241\327\341\277W\343S\235a\254\320\277\233\r\350;\256\274\332\277N\026\255\222~1\331\277\255)5 \347b\343\277\215]\005\245&I\317?\323.\t\304\251^\326?\356\030\252\244F\217\331?q\361\307\037\322\020\327\277\246\023d_\rk\344\277\207\034\375]\017\216\232?2t\252\204@\321\332\277\025\300\275\0005\224\324\277M\307\265\004\215\227\334\277\320#\317\300\213h\202\277\343\264\022\200\240\330\332\277\306\017\303~\267\217p\277\031 \321\004\212\030\337?\300\323}c|\226\336\277Zv\363\032\334R\260?z\"\302\236\372\260\333\277\325\276\220@I\242\324\277\277Pv\351\025\005\344\27710\341\206\316\241\334\277\243\\uxc\034\337?\207K3\2022\262\303\277\327\314\020}-\336\336\277\353\022\376\3324\025\325\277\332\233\316\004y,\336?q\222\203e\256\004\300\2773J<E\263W\324?h3\373\372)\247\326\277.\253\023D\233+\327?\024\334\233!M\243\255?I\274\372\200YD\350?\326\000\347\275\030g\321\277\224\377$\2310\365\322\277\024\261\210a\207\021\341?\312\242\314\340\321\301\276\277\346z\224w\371\311}\277S\371\350\036#j\315\277p\314Wn\016\374\320?\014\212\315d\213&\335\277\000\264\004\036\272\316\277\277Z\013X\027\\\030\335\277\330\337\247\344{\312\322?\002^M;\210\237\323?\226(\326\004\254\360\321\277\313\320_\205\347g\317\277\3069\003\206Y&\316\277\214t\263\3753\234\340\277\271\030\003\3538>\344\277\307\330\t/\301)\335\277\310\352\373\025\327\235\344\277\221!l\035\3012\340\277I\305\030\273\361l\327\277}\234\202_\227\237\332\277\261\274\016I\353w\256\277\037\323\240\211,)\317?\206d\267\205\235\030\320?\317\"F\225\202j\312\277ZI+\276\241\360\276\277\213\037[}\022\253\340\277#C\330:\202%\333\277\356\305\037^:Z\342\277\340u\252:\263v\326?\021\262\207Qk\365\353\277\213F\210<\223\207\335\277Zs\025\305\212\036\324\277\270[{g\000\344\236?L>\321\320\232z\260?\225\305\263\272\213\346\305\277\2613\246\334T\217\333\277B;\351ur#\304?c\340ojV\254\342\277\367\324\342:ck\322\277L\266\313\310j\004\311\277\302\270\351\037\267\013>\277\nq\233_\203\024\340\277Jxc\275(\254\331\277\377}c[Hx\333\277\367\245eA\264\030\322?\207oa\335x\367\337?\324\222\267\361a\325\262?\004T8\202T\352\346\277Zm\325\340C\312\344\277\200\331\2302\313\371\304\277(\343\316;\004D\335\277\022p\000\344!\237\327\277~\355\r|\024G\320?(\243\302\277\245o\336\277\361Po\241\206\n\333\277\367\3503\2764\347\226\277\006l \300\226U\327\277\253\322\222\236TA\332\2770\306v\255s\302\312\277\004\334=\212\204@\341\277xB\257?\211O\342\277\347\374w\361<\300\277\277\242\272\322\225|\252\275?(\245VN1=\333\277\271i\330\224\320\302\340\277 :N\033\037\367\317\277\260\021\024\201\342n\334\277\212\313\361\nD\217\340\277\2014\255^\217\363\346\277\202\307u[;4\334?V\302M%\207x\323\277\207?\273*\355`\265\277\371\237\374\335;j\341\277\367\207V\274\313\244\331\277\345R\023\177?\365\244?nA\245\000\007#\332\277|ve\274R\373\333\277\246\332\300\200\322\216\316\277\215\003T\335\310\341\334\277\311\223\244k&\337\316\2774\203\370\300\216\377\336\277\301\332b\310\373\002\331?^z\240\272^?\321?\313\300\236\002\242\230\323?\251\205\222\311\251\235\326?\010\320k\303\223\243\323?G\033\r\001<\231\341\277\257\367\321_\236\204\344\277\277y\026)9L\334\277p\322\217\341\014\031\333\277\242X4\276\253u\332\277r\372\274\3328\277\331\277\255\004bDh%\316?L\256\227\343k\210\257?&cJ^|U\335\277\222\207S \222%\333?\377\360\014}$\343\337\277$>\177\363E\357\261?Z\303\373`\317\255\341\277v\310(*v\017\342\2772\235J\304c\230\327\277\371E\256@\231\253\350?z\214\023\333\264\004\332?\356M>\003\013\334\256\277\231X\350\234\002\215\330\277:73\033\340Y\324\277\2221\210Yy\023\260\277g\356c\375ME\324\277\001\273\201\237\304)\317\277\374\216\203@\236\305\264?\376\031\326;y\344\327\277u\250*]\217\374\320\277\016\373\230j\301\346\326\277`\306\230\344\025\302\325\277\234|\'$\241\306\336\277\202S\304\216kh\331\277Uf\020@\346\372\350\277\207\364\200\036\017\242\323\277Y\236\356\331\306\341\307?v\016\320C\216)\320?\231\355\257\303={\331\277\336\250\272\354|d\332\277\r\327r\200\303\270\331\277\002\332\261lA\312\334?s\332\256+\301=\334?\336\005\347\337p\227\336\277/\361\r\246\335\277\317\277\347O~\377\244\351\326\277\002\302\177\241\344\341\343\277\365\014D\303 \370\332\277\260\347J\210\342\243\306?oe\211\3162\313\346\277x\023tb\254\302\333?yb1E\024\356\333\2777\233\371\233q\026\336?\263:\336\211\376\265\343\277`\354\367\243,\354\306\277\206\214\313\341(3\330\277$8\036\001\026X\333\277d\'\325\241G\312\333\277T\363$\0028\352\341\277\023\300\305q}\253\262?\373\340!1\346S\332\277\2739\2468X\311\331\277\002,\217\301\314/\323?_\233\350N\013\271\327\277W\036j\374>s\324\277\240t;^\365\276\330\277L\273^\2730\251\334\277\031\216\3473\240^\335\277\025C(\245V\216\333\277\t\300?\245JT\341\277\243w*\340\236g\331\277\034\375yd\275b\255?\024T;`\252\333\342\277^}\237\036\231\326\340\277\305\252\244\302\226&\325\277J\202\r\333X\201\335\277\233\243\330\033\306\256\327\277\211\317\235`\377\265\333\277\240\017\\\006\030m\317?O\364\027\177}\242\252?\313\037\302\256\334A\340\2773\377\246\177bG\336\277D\343&\366\022[\277\277U\305\257\263|\370\342\277o\234\230\036\342\331\322?\2470\000\236\376\275\330\277\362w\357\2501!\313?\200\245\313\207M\220[\277\211\200\340}\227J\261?.T\376\265\274r\316\277\245\215\033e\232<\333\277\327\226*\346Z\223\266\277\240\261\345K^\323\335?\023\236\320\353O\242\344\277F9^\242\366R\340\277\017\257:^\300L\275?X\311\246\340\031\002\317?o\335(\r\220\303\313\277\334v\353Fi\200\224?\247A\321<\200\205\325\277\r\207\342\3447\262\226?\332\177S\016\034\206\346\277\213\037\000\304\237Y\335\277\244\225\224\036\372\354\320?\016\265T{d5\323\277\341\'\016\240\3377\320?\204\375K\020}\220\246\277\027\342G\353^]\331\277A\2325\241\336F\337\277\263~31]H\342?\220\216\243 \025R\204?&\340\327H\022\004\333?\025jUd\327*\334\2772\221\322l\036\207\334?)\245\261\007\244\216\330\2773\376\032\234\312\332\337?/\302\261\272\027\020\327?\365\372\315\243f\270\326\277\224\325\031\204^\244\336?\245\223\266\002T\302\343\277c}f\275\326m\346\277\3058^\005!\256\321?\342\241\t\303i\211\251\277(:?\203U\016\305\277)\270\263\n\366\272\342\277\r\331\'\0358)\317\277\223\\\027\341\232y\332\277\347a\364\036_\251\307\277\374\'M\275M\003\317?\300M\220\"|\371\340\277\357\\s\242\270\376\326\2775\024\014!\306o\336?\361\376p>\022\302\323?b\357\254zL\246\325\277\022\276Zb#\230\345\277E\2540C\004\230\322?Y\255\363?^\347\225?\215\271\010\337=x\337\277\343=\377$\333L\320\277w\\\\\374\3209\337\277lmm#\226;\320\277;\252\360 \243\'\255\277\235|\202\335\023\030\334\277fw\222\276Z\277\341\277G8\322\276^\306\334?\006\245\005\273\2437\336\277\356\271D\3349`\332\277\322\365\276\235\266\331\177?\302=\350<\3275\332?\275\2168d\003i\342\277\305\315\302\001\241\263\341?\313\210f\371\025F\334\277\345\277\366\202\005&\331?n\343\313\033\222 \275?{|\214\003\371\343\323\277m]\305=\361\367\333?\314\312zZ\023E\266?)1\276\036\002=\336?N\3138\333\026D\321\2776w\364\277\\\213\343\277\257\267(\016\373X\344\277\263#z\276\013\200\325\2776\204\370\3729\211\324\277\030d&\254\350\352\322\277jfo!v\303\330\277\022\356\337\006\306\013\337\277\375\007\2428\221\252\323\277\243\203\344S\266\376\341?\255.\351 \226j\335\277\376\324x\351&\361\344\277\331\035Z}\330\377\327\277\261E\332\337<\211\334\277B\266\352B\305\233\263\277\330ph\374\210\000\334\277\177d\235\2365\207\333\277N\231za[\324\325\277\201\215\220&\203H\274\277\304\014\350\340\364\311\333\277\324\000\343r\243\034Q\277A84\237R)\333?B\212K\237g=\335\277\315\260Q\326o\346\357\277\354ody\262\366\341\277\365\312\212\033\226\n\334\277\345\306_ )\276\354\277\366a\275Q+\314\340\277\222\r\377D\300<\335\277uP\221\\an\332?>Q\341!\357\311\337?\346\264\300\201=\244\340\277\027\306H\274]\253\326\277R-\001|\340x\312?Y\233\255Y\272D\310\277\004\033[\370\217?\311?UeB@|\350\342\277!\302dO\247a\333\277\026\365\315&U\025\300\277q\265\251\025\001\251\322?\364\310z\305\256\310\340\277\301\252z\371\235\246\331?9\261,=?1\337\277\234\321\301\300\224\375\336\277j#K\244<\014\336\277\210,\024\341\r\306\334?\023/\252\240\375#\347\277\277[\305\207~R\341\277K\255\265\377\032\263\337\277\035\004>\273S\354\331?EY\t\'\263\013\343\277\"lxz\245\254\335\277I\301\260@\214\355A\277\260\357y\264\'\267\333\277c\307o\237\217\021\336\277\346\'0\370\217\340\346?s{\356\251A=\260\277\376\370\2056\204S\266\277\033\262!\002\205\257\240\277Y\037\305\357\\N\336?\n\002\330>\354^\321\277\307\001\211`\373\315\335\277\221\216\274\275\265=\340\277\025%\031 n\332\334\277g\270\001\237\037\246\343\277\n\254\322\314I\036\343\277\260\033:fn\370\276?w\367\000\335\227\363\335?\246\235\365\204\200\327\264?p\r\246@\352\037\337\277\345M4\3763\331\340\277\352u0\007\346\215\334\277\006{\270\211\377\340\335\277(\231\234\332\031&\340\277\227\\\336\177\330\220\334?U<\344\034+\347\343\277V\2602\277?\n\336?\232o\216\204\307\210\322\277\230\345\343\301\263P\341\277\262\201t\261i%\320\277\017\337x-\327\221\327?Y\274?{\201\033\323\277#B\005\202^\212\221?\034}\314\007\004\272\331\277\320\361\321\342\214a\335\277jB\305\376\323\211\322?\316Rp\200\262L\331\277\344hm\236\023\220\330\277\362\377\323\242xt\331\277\026`\001G`~\223\277\275\304\232\3021(\341\277\276O\023\205\257\022\204?\316}\203@x^\345?\317d\244\203\232\206\325?4\213\006\337\352O\345\277\260PR\375\326\220\323\277^@\026?\031e\334\277\375\364\2375?~\331\277m\365\244e\007\211\314?\376\325\241\242\003\365\336\277J\251e\0326\222\220\277V\345\255\200c\313\320\277\222!*\001\357\354\340\277\r\233\022Z \013\334\277\231\336Y\026\247\265\333\277\210\235J\202Gf\343\277&\032\244\340)\344\343\277\332\227\"\257\275\205\332?\306\255\335\321Z,\341\277\367\251\317z\235\371\321?\300{\303Te\245\267?\314\225b\303\252,\332\277\361\334\326qW\n\320\277buX\237z}\326?\036\214u\375\3049\341\277\033@\307`(T\324\277\216\276\325|\215\013\300?\272\313\326\336\315q\240\277/x$\240\272\340\335\277B\245[\300\025\232\261?V\215\322cc\267\335\277\330\361\241<\332U\334\277\3636\035\236\261q\315\277\356\312\262P\000\377\247?\214\2419>\234\370\335\277~\251]\033C\343\333\277Gx\265\273\213\240\313\277\351\371.\000\350\313\333\277\270\222\333\376\256\362\327?\027]\203c;\204\335\277\246\367\350h\260\004\324\277\034\263\313;wP\333\2770\204\234\367\377q\340\277\351\366\355\177\333n\330\2772\310\237\240\373O\333\277\344\007:\234\361d\334\277\004\206\366\373\017\272\330\2771\266k\235\023\026\333?\200\003A\035\342!\337\277\253\362\024\244\337_\333?F\337\356\366j\221\315\277\025U\277\322\371\260\343\277\204\275\211!9\231\335\277\272I\261H\270\265\304\277\270\2109R\307\364\342\277I)\t\005|\351\332\277;\320\371\337\000\351\334?7\370\004\201|&\342\277k\'\214^\3642\332\277X\r\025%\031\240\334\2773\215\344\372\220Z\330\277\352h\311\241M\'\336\277k\\\305\003F\356\323?Nv\330\351\254;\336?\357\333\265)\303\335\332?\334\366\332\277\364n\320?\346XA\200\312@\336\277:\364\016\236\246\"\317\277v\033\324~k\307\344\277\3053)\204\\I\243?\024\311\231\036\373v\332\27795\206\357\263\200\341\277\1773\255$\344I\336?>\225\250\0366\177\230?I(\"hqk\337\277\2442jc\221K\340\277\334\025\270DG\025\326\277\242\235\262\036\347\353\351\277f\035D!\270\240\343\277*$\025\235\227P\320?\210\240\213\002T\303\341?\363(\215\177<\307\343\277(A\301\275\031\022\333\277l&:&\346\364\345\2776\316\001\335\362,\323\277\306V\310C|s\321\277\326(w\341\377u\340?\030\033\241<\177\034\333\277M%,\277F\021\340\277\306*\357\364\224&\343?\004a<\2751\010\336\277[\344C\365{\007\325\277\300\323}c|V\333?\036\030\243\"\014\313\322\277\013\005\021N\260$\350\277M\302\340\365\364\354\342?\357\277[AO\332\251?\250\034\325\341\317\215\327\277U\267\304\333\224<\336\277\026\2073\277\232C\343\277\026\201\230!\341\275\334\277\377\251SF\245\326\204\277iO\260\234\020<\332\277Y\261l\244t\202\302\277\r\177\227c\303\344\336\277f\371\272\014\377\351\331?\240\"^\tj\031\245?\312\215\277@R<\325?2x\024\276)r\335\277\273\237\256I\022\037\341\277ET\227B\326I\342\277\227\n\"96\016\315\277\217\014\007|]\212\323?\211\021\333@.\357\332\2774\261L\001a\316\334\277k\353\216b\014\356\253\277\201\237\212~\341\023\331\277\027\201\261\276\201\t\336\277\227V\001\306L\005\317?#Rp\004\353\260\310?.h\335\343\245\313\241?\002\237)\270{`\217\277\315\237%~{\215\330?+qx\234\375\334\333\277\324\331$\232\233J\307\277\0346\035C\370\376\320\277\366\312a\234d\020\334\277\234\316\302\\Z\246\333\277n\3339\305\221d\327\277gaO;\3745\276?\351w\006\262C!\343\277\3458\001\227\021\250\322?\245\233\253\203\017g\322?T{\307\337\254w\261?J\274\227V\236\033\332\277\007\251\302<\267\022\333\277{\331v\332\032\321\340\277\235u\031@\360\337\331\277V\367\341\203KE\325\277\235\206\003|\022\263\331?\036\362\3408:\370\330\277c\365\242\321x=\344?6\204\370\3729\t\313\277\241>\362\234gK\327\277\0132v\200/\336\341\277\330U\026\277\010\236\311?sc\274\336\344\024\341\2772\365\343\304\221\346\330\277[X\036A}M\335\277\010\370\177\037\037\336\341\277\310\303\214:\204{\342?\235\336\377\246\373\251\304?K\224\030_\017!\340\277\356\341\334piF\342\277\235\251\306\001\252.\332\277wGJ\243\227\213\264?B+I\001\026\267\336\277%\232\233\312\375\351\342\277\004\256\310;\311N\325\277\003\027\330!\006\323\260\277\027\252\017\342\322J\343\277\nc\272\371\016\312\224?hJ\241\342\356B\342\277\201U\2329\311\273\342\277\360\347\312VMF\335\277f\2402\376}\006\333?\262\003\370\270\200!\343\277\016VR\335\022/\320?O \354\024\253\006\343\277\222\230=\\\2648\330?]^\220_\005\231\332\277\230=}\302\341^\344\277\260\350\326kz\320\334\277\030&\360\332\347)\320?{q\332:\325m\331\277M\227\036}.{\223?\357\240e\037\\\250\335?\245\363D\204=\365\334\277+\312[d\361\321\345?\2374Xa\310$\310\277g\320\022\\\223\013\334?e\222.\211\365>\267\277;\364\345\036uh\322?\253\235\274#\276\356\340?df\023\036<,\344?\027\251\346(\366\306\344\277\265j|\313Au\340\2778.\343\246\006\232\262\277\233e\201<\334\212\325\277IFs\t,%\304?"
      }
    }
  }
}
node {
  name: "normalize_element/component_23"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\236\322\177\336mA\334\277\277}\253\342~\241\250?\374\030\326\001\316\232\332?\350U\370\216u\314\262\277F\313\303:<!\326?\002\340\022_q\341\272\2776\223\220\304\242\324\334?e#3\276\377\364\250\277\357\213\257\244\272\223_?\251dB\304\264\214\326\277o\317w\3401v\321\277\240q\303\241\316\313~\277\370\215\257=\263$\302?\251\026\317\250\022H\307?\3026\177\237\263\375\265?\347\347\341__\306\326?e\234\3205\335|\330\277\272\232#\310\224Q\221\27744;\336&\024\335\277\233\342\324{\350\212\250\277:\266\267\276\274>\316?*\267\352\303E\261\255\277s\245\226\224X\245\270?r\261\026]\346\215\267\277\224\272\tc\260G\334\277\010\262\032\"\331i\325\277\330\336-\344\237\206\242?\rM\237>~\306\310\277\0341\314l\004\240\253?\031IP6\304\374\272\277\256#\263\037\316h\251?]KmN\312I\205\277\207r\036%\341\010\320\277-nP\271\221\313\252?\316\246\315\177\342\334\225?\003i\333=4\204\203?\254E<\3000l\305\277\014k\232\337\177\027\271\277>\333^c{S\240?c!\276<2\020\326\277b\275r95\202\307?Q#\200\335\341\335\330?\354\336\"\341\217c\260\277\216\025\210\340\260\233\321\277\0266\301?\276\247\337?\333:\223\221\016\352\340\277JY+\177c\364\324\277Z\033\031\232\241\247\330?+\356G\243e\321\302?U\320@n\267\013\275?\360m\336^\360n\246\277\226\303Y\327\211G\251?/\350\265\300\273h\311\277a\257\311}\037L\324?[nza|b\342?x\006\262C\241\n\303\277F>T\277w@\331\277 \300\267#{\210\335\277(\300\013\266l\010\337?\365\357]\367\024\010\301\277\304\255R\337\321}\247\277L1`\371\216B\217?\333\265\214\355\030\313\264\277V\244\035\222\265a\334\277o\310\365\245m\262\256\277m\216\333~\345\200\274\277\346:\360\336\017G\323\277\222\025\221\233\300x\325?\346H>\341\262\253\304?\272\316\257{e=\306\277\355\262A!`\177\270\277\036\305Z\370\321\333\313\2776\310f?9\'\312?\217\"!\200\212\031\267\277Q\356A\177\3269\241\277\247\204\365\271\271\374\301\277\201\340\371^\246\232\305?\311\325<\005\310\351\267?=D\006fC\006\303\277\313\004\rG\241v\253\277\314\265m\272\223\277\203?\203\213\221\374\363z\323\277\361\370\223\204\206\366\254?\021\246I\245\257\322\327?X\244\221\350\310>\310?]!\305c\263a\325\277U\262\255\260*\014\333\277\024\374\367_56\247\277Z\317\030\377\241\r\226?\216\261\023^\202S\271?5\210\305^\336\022\331?+`\276\231\361\346\223?3\242Y~\205q\316\277`\027\217\234\226i\300\277\035\343/\3220\241\335?Y6\316\001\335\362\230?O+\\\301\3746\304\277K;\230\301\3264\323?\n\336\251\343\245Y\305\277\037\032\355#}\373\327\277\230`\304\200\035f\277\277\022\233\227\334\213\034\322?\205\204\336\321\265\345\323\277\374e d\223\333\335\277\276M^\350:\"\301?(W\004Ax\033\316\277\0366\221\231\013\\\216?\037\322\024\246\224\374\331?p\247|!Gg\301\277$\225\255\036\305s\330\277\365\010^\302\333b\305?\344\023\323\001 Y\333\277 \224\336\324\223;\266?\367\212\362\365J\223\263\277\277 .\250\213\356\222\277\352\356\327\3606g\247?\376\211>\335Hr\300\277\302TL\010\312\253\303\277\374#g\274\010.\324?\263\010\353\035s@\265\277\330\363\322\240\252\272\326?<M$\240\333\256\260?\324\370\001\037\356\260\325\277o\001Wh\326\010\274\277\214\226\352\2373+\334\277\351\244\352c\255\275\242?K\251\372~2\022\256?\210\235\335\345\030L\220\277\027m\310\036%\037\305\277u\362\2740\246T\202\277\031$u\351\374g\270\277\354\262\251\004\325\020\330\277\206B\200\343\235\211\334\277\373\274V\000[\267\321?\342\3608\373\271W\264?\337N\367Ac\024\236?\301\255N\335{\t\254?\312\243\300\247\336?\335?ND\"\3419c\271\277q\321\003\376t,\312\277\307\271s\177\372q\270\277\365\326#\201\304\376\301?\n\2032\215&\327\341?-\322\304;\300\023\316?\371T\004\356/q\326?\300|\240\177\374Q\254?xh/\r\211\234\256?B%\256c\\\361\313?\020\325\214\363\324v\263\277,\016\312\250\360o\314?DV\361%\330\250\305?\264\345\\\212\253\312\312?\221\325\316\254|\001\237?\352\361R\034\315\262\227?\036\321t\336\025\255\273? \'L\030\315\312\333?\3707\n>=\036\267\277L\201\026\\\275\224\322\277\237\367\316\201H\363\334?\250\365D\370\223\010\253\277\031\010\331\344\266\036\317\277\261\177\t\242\017\022\260\277\032\350e\nY\272\203\277\314\310j\004,\003\277\277\314N77C}\313\277\264\276\365\037\241\377\263\277\302\234$\206\262*\273\277\227\226h\373\035\253\334?$Q?\332\305U\261?-\027}G\205\230\272\277\326J2\274\243\020\337\277\225\210\350\2769\357\321?U\233\244\236\252\247\342?x(\356\236Z\202\234\277_1\372<\014\316\261?A\231\251\275F\032\300?\022\324\225t9\312\321\277\375\200\254L\235l\323\277\315+l@c\252\261\277\262\355\233\230\201\214\311?\217\201\310di\216\233?\347\351\226\374\323\266\302\277\311\253s\014\310\036\340\277`\365\025\336\3044\342?\207\021g\352\032R\326\277\223\032\376}\304;I?\002Qt\200\007\326\242?\302r\337\305Vk\347?%\255:\243\224\355\333\277\322\367\001\345Bg\324\277\315$E\277\021\270\337?\222\030N\343(\312\330\277#\022\350\3000\350\302?\257r)-\252\345\215\277\300n\340\'q\312\301?R7a\014\366p\314\277\267\"\333@T\366\263?BFY\"\304\223\324\277c\210\265[?{\326\277\227\021\007\236\265:\303\277\035\020\327 \202\340\324\277Y\214x\272\014b\311\277v\"w\307\030\216\332\277\321p\261?\334W\324?\370\353\343\333\232x\334?S\027:\300\335c\334\277\262\335\230\371i\267\345?\017 \350\r\234X\321\277i\036\300\"\277\376\325?+8\366\313\253c\267?\222\246\213^W\035\323?\300\034$\341\316\207\333\277\304\035\017\200/\272\242?%\314\264\375++\302?7l\000\333fO\312\277]\371\260\007(G\306\277\321\205&\303\320n\246\277\025\020\244\234yC\334\277na,\277K*\260\277\313\235\035\231\334b\266?\370\240-\010a\305\301\277B8M<\363\364\332?U\2717\\7\'\326\2772\253\332\342\330\302\323\277\254|C\237\227\343\320\277\3575\210\377\th\333\277;&b|^\022\303\277\342\242\244\321.\360\330\277}:\242k\364\244\265\277Y\321\356\251\377 \300\277\277\271\277z\334\367\334\277n\204\311}@:\340?bu7\221\221\232\270?\315T\014\200\206q\250\277\256e-c\025\377\221\277\273t\351a\334\024m?\027\207\264?\260\340\263\277\261\\g*a\371\272\277@\362\265\004lI\263\277\031\217R\tO\350\341?\013E\020\240\014y\265?j\252\243\272\353r\337?\254U\273&\2445\236?$\243==:\236\302\277l\025\263\024\177\312\301\277W\255\257\"ag\323\277\374H[\246p\316\323\277\217cV\265\305\261\263\277~X\225\233\255^\221?#\004X\242\273\375\336\277\237S\363\311HE\315\277\357\233\363:\177f\322\277\313\006\004\000\350\214\342?\256\267\315T\210\307\325?u\273,`\341(\260?\007\303\353\300Z1\261\277\235\233x\377\006\n\266\277\330A\014\021\303P\275\277\266\372\207\200\205D\317\277\331\354n\274@\353\253?\260Y\354\376\312-\302?\340\251\025\340\232\277\332\277\271\317\340\245\212\030\334\277p\217\255\200\245g\334\277Up\221\336\344u\275\277\3065\272ZY(\337\277\226\0179d\240>\302?\022\213\224=t\207\326\277\010\232\tee$\333?\206LC\236n*\334\277\200z\371\2764\034\306\277S\023T\277\230\316\316\277[\204\030\236M\375\273\277w\244/\301\377\017\246??\260\246\\(3\234\277\243V=\005e\177\331\277g\336\036Bd\252\262\277w\037a\307h\345\212?\321Q7\345D\032\300\277\001\325\005\335\332\231\271\277\316\336\276\263\342@\326?\234\255\325\201 \376\301\277\344v\220 Z\000\256?\265}]\300\252\376\240\277z\244f\264\372\017\334\277\325\354\036,\245_\265\277R\337\350\031\261\005\341?\372\321p\312\334\374\303?\206\322\356\302\234\301\270\277\300\240\310\374c\346Y\277\367$n\0355\311\336\277b\"\207\203\342\231\250?\346\307\302\204\217\320\321\277oTA!\0178\207?L\342I^\337\277\323?0\206:\370\376\020\237\277\324\226\337\016yp\315?za!)\3305\324?Bw\363\233\\h\247\277\243\203\005b\237\241\300?\215\347\032\003>\201\334?AR\270\334h\231\320?/D\271\372\322W\334?\007p\304\244\t%\335\277\355tR%\353\354\300\277}6\027$\"\241\250\277\301\312>\033\373\n\316?[\264\337^\3026\265\277\257\263\337\342\372\332\307?&\3265\234*\306\300\277\302\031\272\341\220p\251\277 \250dJ5}\326\277N\277\237u\350\317\321\277\247-dd\177\317\322\277\255\210\334\004\306W\324\277\352:\364\340e\273\272\277\254\263s\375/\025\314\277\017\257\315\301\221\022\261?\300v\264\232C\214\300?\001\302\207\022-\371\321\277mLs\036Z\323x\277\271\030\003\3538~\321\277\2677\307\322\352X\257?\001\\\260_\256\210p?]\207\206\237\341\310\274\277\003S\325\035\356\327\322?\217Eh>\306\340\333\277Uj\035-\363\003S?\004\033\327\277\353\263\300\277\3334\225\311\231\273\310\277DzO\2724K\232?\343\256\005\215\376o\207\277\177\203\301\370\023\334\216\277n\224\253\016o\214\300? ^[h|\231\300?\275\321\\\341< \311\277B\345g<t\256\322\277~]<rZ\246\343\277\303b7\340\261\347\334\2774\325\366#\003\310\322\277\253$O\345\366\303\306?\327i\353z~%\227?\310\237\003&\313$\310\277|$\237\003=g\246?%\003\243?\362V\333?\240:\363\376\201*\331?\035z(]<\364\326?\256p?\236e\357\337?\217v\324\177sR\306\277\027\240\n\0130$\273\277\305\302sc8&\334?\316\271\302X2\t\307\277\202\330l\301_\207\247\277,\031\341\234\372\010\230\277<\330\305\341\212\223\322?\222v\243\217\371\200\264?(R\016$\367\215\310\2770)\343\204\256)\325?5\033\267\332\273\255\324\277\346\002\227\307\232\221\330\277\247\027\3475\227\027\310?H\317\343\346\n\245\264\277\256\3257\334\002\343k\277\276\363\254 \335:\227\277\272U)\240\375\006\262\277rp\247|!G\326?NB\216R\256\225\330?\251\351iv\223\316\341\277S\272\306\367]\302\225?\216R\317\243^\307\321?iy\324N\203\330\332\277\207:N\377\311G\271\277\320\241\331c\214\211\223?\271`_\241\305\310\321\277j9\351\340\r\247\340?\004\261\307\237\003\346\325?\200$\221\"\3272\324\277\006\321bB/P\253\277\314\241\373(\331 \304\277`V\254\n\242(\270\277\244\246~Z\034\200\306?qb\376\300\013\221\323\277\311\034\313\273\352\001\331\277u\006F^\326\304\307?\345\000\013\252W[\336?\274\001\352\366\'\253\316\277\344>\346\301\345\312\260\277cV\374\232=\264\223?&\205\375\307\327\330\226?\341\241b{\261 \325\277\013\214\345+\273?\254\277\016\201\310\307\223\311\303\277\313\004\221\177E\202\322\277\243\220\241\271\007N\211\277\315\210\373]\022\306\305\277\320\356\220b\200\204\321\277\246\222K-\245x\312\277b\362\253\336\206=\320\277\305\"\341\3268v\334\277`E_\244\304\354\336\277C.\243\036\303_\326?\331\356\221\032\t^l\277\013)?\251\366\351\325\277T\3347E\347\377\204?\025o\016\036@\233\242?\273:2\034\360\365\306?\223\030%d\367O\302?\035\377G\236\322\236\325\277T+]\013\304\374\333\277\367\321F\001\344|\334\277`j2\200C\252\322?\334\200\256\001:a\322?\000\036Q\241\2729\324\277d\036\032\222j\n\266\277\037\253k\037\270\353\323\277\241\312JB\013\321\201?$2\203c\\\222\321\277\361\344\211\326@)\334\277\370\\\032}\3248\320\277\354\375\302\002\312\354\300\277\305\331\242<[V\244?h5\352B(F\335\277\227\026\273\236d\202\275\277\231Y\225\216\203\\\305\277Tg\336?PM\307\277;\363zI\306\336\273\2771QR\232\254U\315\277P\350\222\3755\321\325\277\261\356\212\246\324\241\317\277\276\210tG\030i\271\277\212T\275\241\225\240\300\277\217\363H\315hu\321\277\255\343S[E\032\327\2774i\317<\353`\335\277\2455aV\203\213\334\277\277O\260Z\364)\323?^\241\310\300%\363\271?l\333\346|g*\347?\324N(\237y\024\337?\030\342\201\226\350\013\315\277Z\234\020\276 W\343\277\rTB\207+-\315\277\372dg\377s\000\257\277\272]7\276Yw\322\277\370]\241\247\262<\220?\220`p\356+\346\256\277\226n;\002\362\204\337\277\314\214\310\301\266O\333\277\240(}\337\307j\274\277m\356\340\016q\377\271?\017\310o\033Wm\264\277\302S#O\355g\340?\250,\361\035\210\356\334\2777@\364\232\332\366\226?\314\2202\373\237p\322?\026.K>\355%\226\277\\\213\375\002\315)\323?\014P\"\333\\\251\322\277\355\334\315\266G-\307?\330\276\0354\375\n\265\277\206\344\246\376(\207\313?O\345\027\322\237\005\276\277\201\006\274Hx\255\265\277\211\2147\307\363x\301\277b\337g\277b\013\335\277\321\311\326#\242\322\326?\034\206\003\337<\356\202\277t\240\342\223\251]\334\277\317\177\264\244H\343\304\277\n\004K\277\216I\306?\304ep\357u\255\305\277\303ai\340G5\266\277\276\363Qgj\351\272?Cf\272\031fO\316?\360stC\360K\266?\353\000\210\273z\025\307\277Wk\366z\3269\321?Qc\010!\234\246\324?-\203 \366\370s\322?\000\000\000\000\000\000\000\000\231\374&\177\275c\304\277\016\036\277\032\024\213\320?C\330|\2367\374\254?\302T\320@n\367\333\277\372\255\306\247:\303\265\277\177\340_A\360\261\245\277\024Bb\0265s\331\277\217\303\242\032\335\236\321?\006B\\\200P\363\260\277\023\001\230|\375\032\334\277\253\311\261\307\324\365\237\277jU\307\001&\266\277?\336\322\305\001O5\264\277\372\304\317\271\272g\301?(\'\373c1\034\215?\n/\301\251\017$\261\277\247\226\214\347\\\237\307?g\r\275I\374\037\315\277\343B\270\336C}\261\277s\262\273\335\036\206\321\277\221I\270#\253A\251\277vF\347>1\231\325?)<\211\204\306~\320\277\206\272z\333m\023\334\277 \251\215\003\022\201\320\277G\000\273\303\273\026\310\277\236q\n\300yP\250?\234\310\345\242\316\332\323?\266\210\305\373\263\027\324\277N\222\225\374\333g\323?\350\233\331S\027\025\324\277\007\2733\243\267)\243?\315\340>^\207\353\216\277I\371\317\356\036\r\214?\200\360\2006b\373\276\277\2410I\341Q\025\264\277\177)\250MA#\327?\272\373w\330\237\237\342?5>\325\031\306z\301\277\332\276.`U?\341\277\342\026=\001^\260\300\277\315j\252\274W\214\332\277*VO\336\2564\272?8Fy\301C38\277\224HG\336\336\032\322?\000\000\000\000\000\000\000\000\222GG\2443\321\330?y\277\033\0346\033\327?t`\0304\035\317\261\277<\031\332\010\335\210\307?\027\300@\202u+\254\277\220\203\226\236~\n\316?\212WY\333\024\017\312\277\340\\\204\250I\220\222?k\374x\236.\001\331\277\313\r+\2019\237\335\277~\212F\353fN\220?\271^\211\366g\365\331\277cj\"\236\262\273\240?{-K\350\354\354\316?\367o\342\324\234\366\274\277P\265\307\037\315\327\247?\212\016X\244O\314\265?\366\227\274\205\236b\266\277\361\247\276\332\356\361\316\277\207\2679[av\301\2775K~\2330\'\321?\024\332\346\204\3302\317?\002\201kz\222l\310?\371\037O\201\202\301\322\277\213\313L\304\266 \303?\311f\273\000\003\032\334\277\272}\373\337\266\033\322\277\"83\234`o\232\277\203\030\350\332\027\020\320\277\212\311\331C\0246\321\277\330\211\201d\360\346\334?~ad\217qA\264?\323\346\315\033\006w\334\277\323\272.x\250\330\270\277\315\346\324B\207H\332?\313.\030\\sG\320?\237\363\205VH\365\314\277\334\256\3413#\315\300\277V-\310\032\036\220\300?\361\035g`\005\364\324\277Q}\316z\204\\\327?\232\215|\373\306Y\323\277 [;\366X\237\301\277o\023IO\354|\333\277ub\007|\033\256\324?O\316\314\243M\233\272\277F\341\202\205\366\336\306\277\271\255~\203.\225\252?~\020\321\001\254B\324\2774\372\006c\232\242\250?(5(X\353\335\313\277!\002P\275\034\223\313\277\253/\236\203_\221\321\277\033\255\027\001\035\277\333\277c\243\203`\033\222\301?\262y\301L\200\006\272?\222OA\336\250\236\264\277\224\220\037\\\307Y\317?\253O\203\263\245X\302?R\377j\037<$\323\277\315\250}c\235\344\333\277wZ\242\246\242 \236?\353\255\334f\205}\335\277\217;+\275\304\305\220?q\2045c\013\240\320\277\000%\2310\365N\326?\260a\237c\264\014\335\277&\037\232\375\252\361\302\277\315\306\316\004X\036\334?\306\316\251\236\253\261\303?\234\251kH7\035\311?\374\367\205\374\330\t\323\277\324\240\000;KQ\225\277\306\352E\243\361\372\242?WN\020\257\312\t\267\277\351\317\002\335,\230\312\277\014Z\'\262\377\317\272\277=\257\302w\254c\313\277ND\273\"\352\331b\277C\2704D6\214\320\277\306\337\366\004\211\255\332\277\033\337rP\035\206\334?U\037\376P\0377\272\277\024p\031\201\302\352\251\277\332\212?\202\311*\230?\353\033V\300V\354\301\277\031\202-\300\210G\333?z0\020\241\235\325\323?\255a\320S.\236\265?\230\211\277y\263\376\310\277&O\376\223d\302\272\277\"~\223\340\354Z\315\277\370V\240\355\003V\266?\002+\3112\253\024\236\277cS[\250\004\335\274?\344\354\245B\237<\320\277C~.\001\225\375\333\277\256E,\336\237\275\273\277\374\343\275jeB\322\277w\233\220\006R\212g\277\'\376b\225Vl\235?\t2I\377\247\357\252?\210t.{\310\212\335\277-\317A\237\3410\304\277X\306\247|\337*\315?*\221#!\272\265\275\277\246q\271\013\336\241\337\277=\304\263\302\374.\335?\240\274\023\334\335\275\337?\301\201\264\362\327\323\216\277+\310\350\343N\347\321\277\335\211\345\330r\225\313?x\027\234\177\303]\277\277.\363\014\320l\r\325?\2260&?\332f\322?yW\301\230\302\275\302\277?\032\261\303VX\316?\257C5%Y\007\320\277\000\006\233\235\271E\302?\236E\316F\327\232\303?\"\302\001%\354\270\332?\206)\343B\222\027\307\277\036\272E\005\363|\306\277i[I\002?p\266\277\341v\r\237\031i\300?@\351\033\003x,\266\277\217fv\'\351\253\322\277\311D\245l\354\355\330\277\231.a\300\324G\330?\255\335v\241\271\216\323\277\340\232\340@\355\334\322\277\277\350\227-\376[\261?Ov\010#\303\030{?\321)\341l\347\271\272\277\262\273\335\036\306\\\336\277\361\247|\276\034l\324? \217*\324\344s\345?\203$?$t~\321?__\353R#\364\322\277\017\336\313;VB\305?(\310|\376\203!\335\277\0018+\337\211\022\236\277\222\032\003\200\235z\321?\361&d\214\264\371\300?\344\260f*\3451\270?4\247&\034\325\204\331\277\366\360e\242\010)\305?v\316\303\307/\325\251\277\t\n\017\334y\211\334\277sc\376\372\266\232\306\277f\024\245f\n\373\232\277\034\n\300\273l\246\300?\000\207y$\230I\331?\301\335\376\001{\261\332\277\306+\265\203\266\301\335\277\252\0368\200\341\t\303\277\n\323\336}\341W\302\277\306\236$\372\010>\277?\363\032\024\375<n\215\277\260\2700\271\356\271\304?\263_5\236!\277\336\277\233\350\322C]\271\305\277\362A\021\203\247m\333\277\313^\235\000\026;\306?w\0300\324\243\241\243?\024\210\350!d\252\320\277w\"\024\235]%\332\277\2613\246\334T\017\277\277\316L\027\377\312\014\336\277\276\007;\007\307\023\311\277\213fL^\360\253\322\277\002\313\235\333|\n\322?\310C\337\335\312\022\321\277l\000\333f\317\n\324\277\006>P\270h\022\324\277\016\006\t\027\023\227\302?\t\266[\334\220\220\273\277\333\\\251%%V\311?\377\3673\376uU\323\277-\301\363\234>\014\337?:t\335\010In\250\277\312\342\376#\323!\335?\362\357\022 3e\330\277\311\273\331\325\232\034\316\277\204D\240\033\026z\267\277\205\212\232}XN\265?\033\276\001=?R\276\277\250\031\326}\225\266\314\277\272\026\353#\t\245\332\277\306\211\361\222\346,\272?\262N\317\232\2437\300?\347|\210x\261Q\301?>n\350\373\343\234\322?\330i\212\232\rM`?f\233#D\\m\333\277a\030\023\017\346~\270\277.\2021\350\245\336\317?3&\222\"\021\236\300\277e\014\336\035:9\273\277\340\025\034\271\311\203\322?c\256\261\360\232|\324\277\213\001\3200\316B\233\277~:S% \337\231\277\302\037\227\233\034\374\335?8\333\002`A<\236\277h\3739\000@ \244?i\302\233\332\276l\323\277G\341\037[;v\333?3e\216\2023:\344?G\0143\033\001h\333\277\242\262\202[N\364\325\277\020;\225\004\217\314\331?U\014\030\243\374D\251?\374\340\303\277\344S\277\277\002\237$\377\301\367\253?\234_\275\037\361\n\300?M\246e\377\227F\334\277E\341i\350US\325?q\353\207;\213\234\302\277\230\336.\226J\301\210\277\030=\330\336~\253\333\277\345\224g\373\343\177\304\277\254\007\345\340F\310\341\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_24"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "&\350\314\311\315h\310?/\002:\376\321\330\310\277\326\014_\025^8\302\277\353\324\350\027\035w\315\277`r\345\344,I\320?&\313b\305\035\255\306\277\240\341[\305\323\014\220\277&\361\003\241\006\035\321?\235\310@\\A\354\314?y\350\273[Y\342\321?d\240\276\247ji\312\277\242\243\013\240\316\313\316\277\346\364\253\357\262\025\315\277\200\237\314\232\263Y\324?$\306\276\246\377\223\250\277\314\241\373(\331 \302\277\341\361H\027\366\017\312\277\020\021\253\375\245^\316\277\254\213\374v\351\221\316?Wmi\373x\344\331\277\250\274\004D\024U\320\277\251\367\226jM\220\311\277\371\232\212\371^h\302\277\t+_\341n\232\323\277\367\3235I\342\233\301\277\346\354:\247\233\274\316\277\006\242\006Wi \302\277\367\357\260??\002\332\277\013\240R\004\274u\306\277 I\305\326\236\237\310\277\240\356M\035\365\241\313\277Y\003\255#\273\220\317\2777\'\345\244\346!\324\277e\327I\277u,\316\277h\213\265\tAX\321\277\217\242\265?\243\366\323\277X\242\036h&\224\315\277\013\303\025\212S\261\316\277\246\216\237\327\351Q\216?\21482\311\247K\312?7\243o\235BX\246\277\204\341\361\'\t\215\312\277#h\212\010\030\300\306\277\\\273\376n\313\221\310\277n\257\273/\035)\306\277\323\264\264\350\327\265\315?\352r\316x\360M\310\277\023\350\033\352\332\213\302?#\005\201[\230\201\305\277\304!\365\200t\017\264\277-\275\204\252\233\002v?\307\214\205[\035\004\323\2778\345\300aX\264\317?\034T\311\235%\212\320\277\177\342\031\227\036\013\300\2777\033L?\270m\322?\020\264]\374\310\210\312?\205\222M\342Am\304?Sp\374y\350u\315\277*\220\227=\"\t\305\277\nY\212\242\017\357\323?\235/r&\330\305\311\277\312\246\032\305\213h\301\277\357\0326\302\211\205\304?<\355\327:\304\001\321\277\347\"\266\242j\307\306\277\356\270]?/\"\315\277\017\316+\307\371U\312\277h\215I\230\314%\203\277qR=>\306\001\301?:m\266\207\367{\315\277\034\2539\345v\024\326\277\234a\223\312N\036\271\277\321\310\214\\\334\253\321\277\344\001\033\306\223\023\321?3\253\322q\220k\320\277\205\360\005\271\315\314\316\277\224\235D\245\215\372\262\277l\353D\325\361\220\311\277\004\301\210\"I\265\321?t\327\257\307\206f\313\277OJ\326\033\2244\317\277xL\325$\025\031\273\277\232}\036\243<s\304\277\264=\366\212\331X\266\277=J\200\365\023\251\316\277\026\034V\237HC\324?\305\305\366\377\026\t\271?(\244N\243=\234\315\277\3773\224$\031\203\224\277\262vF!\352:\261\277\346\325\357xI\322\321\277\376e\224\272\2468\273?\224[\244\232\243X\323?\024\215\336>\345\367\322?\324\223\"\307\020_\314\277\363\264\025^\366\351\325?\267\033L\334\215\262\323\277\321Q\324\272\211\261\314\277\300\260>\026\211\246\267\277\300K\035\242\331\216\320?\245\330\3218\324\357\307\277!l\302\007\300\211\307\2776\224\332\213h;\306?\307\350\300?\223g\220\277~\372t\341\254\255\315\277l\305\006$\304\t\320\277\324\017\207\370\311I\304\277s\224j<d\214\302?\266\320\337\225n\334\307?\203\325?%:M\321\2774\232\236\250S\273\314?:m#$&6\244\277\nG\261X\232\306\315\277G\335\265!R\225\317\2777\010\010 \224{\301\277\027\217\275\244R\350\326?\237\213+\323\324W\325\277Y\3538<\214\242\321\277\313\013\270\000\227t\311\277H\3273!9\333\320?\337\345}w\206\004\302\277:\317\330\227l\274\305\277\030d\303\201-\202\314\2773\354\007\247\313\003\314?;@I\344/k\317\277iR\257\000K\223\321\277\360\362|\037q<\314\277 ~zCLO\270?.\271@8U-\324\277~|:\005\226\257\332?5f\216\274\336C\310\277\253\026\205\033\370j\323?xW$\303}\246\317\2771u\374\274N\217\322?\254\351\325[^\024\316\277\247\205\201\235Q\251\320\277!*\307Cc\226\307\277ND\"\3419c\271\277Co\274\376\316=\255?\373\344j\\\346\221\303\2775vO?$\323\260\277\207R\362\037\017\323\253\277o}\334\247x\226\262\277\020s\254\3771|\275\277\020\203\361\272\033\027\316\277\207\022\024\334\233!\306\277C\246r\2266u~?\256\227/\372\315n\232\277\312\221\347]i\027\320\277\005\033\225\243\031\256\320\277\224\363\002B\244\014\263\277\201\037\366\276\310\266\331\277\"<w\016\247\304\277\277\334\304\342\232\257\020\324\277\0044\266|\311\353\321\277\314q\372\274\3328\326?8v\232\026\006v\320\277=\321\267\375\331\354\321\277\357\333\3267\254\200\317\277\340\273\356)\020\250\316\277v)\"\201\016\214\265\277\014\256\373\277\321+\320\277\320\336\256\321Q\222\256\277\200\025\\\203)\220\323\277\350\317\247#\272F\324\277\326\021\321\371:\272\321\277\246\006?\026G\212\313\277\213\021\262\301\374t\320\277\341\"\275\311\353\030\315\277\001X\262\235\316\231\301?\321\213$\213E\035\312\277\037\322\356\336\361\360\246\277\013\232T<G\307\312\277\260\244\303\340\355\003\315\277\024\373\323_\022\333\267\277\372\261\254\250\177\230\315\277\310\232O%\034\235\320\277\204\277\231w \333\311?#!\333C\014\205\312\277l\004\342u\375\002\325?W\305\002\374\246r\314\277c\231~\211x\353\316?l\340\232}\0262\240?\253\260\235\030\'\370\306?\300\371`[7\214\313\277?vr\341\233\201\316\277Tjzy\317\273\303\277t*\225\307\005\255\313?\223\177\230J`o\303?\335_=\356[\255\303\277e\233\247|\0009\320?\265\311<M\301\365\323\277\262#\274\332\335E\305\277\233*\020$\2142\322\277\270\374\217e$o\302\277,\337\310v\235\221\310\277n\267\352[b<\276?.]\034\360T\033\315?5\350S\340\307\305\321?N!\035?\320a\305\277\345\373\332\341L\037\324\277\335e\371\231\376\225\310?\324\304\257\026\247s\266\277\374\276$:ps\312\277\034\\\276\036\341\356\320\277Ep\022930\314?-\341\267\276\233\360\321\277n\347\356\177\357R\270?\365j_\304g\200\322?\032\311\365!5\216\312\277\371\007\333\231S\223\316?\345@r\337(\001\315\277&\236\341=oy\277\277\rd\207B\025\210\323\277#.\337~\351\002\313\277\356\310\036\302t1\325?\377k\355;\2168o\2774\033\\!I\\\324\2779\316T%\035\'\267\277\"\214<\234\002\021\324?\267\200mP=\312\276?\035\326L\245<\306\311?\013\340\034dH\004\317\277-Nk\211K\304\304?l\t\267\204\225m\313?\222%R\036\006\210\337?_e\247\376\305\334\306\277O\323\343\316\267\313\265\277\247B\227\313\241\240\326?\000\004\346\000EU\263?\226=\222],\266\250?\351\354\t\267!k\262\277.\215\302\242\3401\316?\324\357\241\310\203\302\315\277\177\271#WB[\204?p\010\227\206\310\206\310\277\203\001[\220\363\037\266?\2148\266\001L\027\320?~\341\2662\270\030\271\2775\243$}A_w\277\244!\374\356\312\354\267\277X`\300y\016\270\311\277k\273\t\276i\372\325\277\331\006ryA\376\301\277\310\352\373\025\327\235\324\2778\2565JM\361\304\277\t\347\256\200\235\366\320\277k\221@\305i\357\307\277Y\263\337$\027\255\274?\223(j\037\341j\300?6\302hw\304\370\304?\3705\324 \263\320\262\277\314\213\237\010\332\313\302\277\3042G\240\013\264\314\277\233\311X\351\305\273\310\277x\270\035\032\026#\321\277\'\364\033\242\341\377\320?\000m\222\274\306\260\327\277\305.z<gj\306\277F\021O\377$\001\275\277h\254\242\344z\200\310?2\345\246z\360b\311?8\2565JMq\262\277a\317\215\237|\260\306\277\r2\013\345+\036\314?\004xf\335\232\017\322\277\214\276\243BLt\303\277X\014.\210\016\242\277\277E*k\037\033\226\310?Dd\375\013\251G\316\277\340\024\261\343\032\372\320\277\306\002W`e\300\314\277\220D\365\367\316\277\304?AWl\335\027\241\323?\251f\234\247\266\253\313?;\371W\003R\252\327\277n\235$\002z\206\332\277\373\023\2469\303\036\273\277W\374\256!\233\330\307\277\211\177\022~-X\322\277mM_t\036\272\275?\nw\2725\341\305\313\277\247\243N\006hW\310\277\277\336\263dDX\275?j\304M\277\244.\274\277\374\014\373\177\315 \313\277\316\247!\271\033\225\236\277%\306\225\'\316\331\313\277\007\345\"cZ\200\321\277P\367\205\200\021\356\261?\327\304\2374\026E\262?\317\313r#v7\306\277*1\225\237\320\302\320\277\273\205\307\341@\006r?\352\031\210\206A\360\314\277\376\304\226X\370\376\314\277?(\234\233>\224\335\277\035|\233\335\336\336\322?C\315-\000\317\356\267\277\t&\253\340\277\222\230?\246R\036\243]\201\316\277\036`\367gP\376\312\277\243\376\376\275\251\002\311?\317\322\272\262\260L\312\277nNg\037\022[\310\277\3562\221\014\030\250\263\277\010\277\334@\344!\311\277\330\n`\353\316\352\263\277\"\205xEl\007\317\277\014a\014\027\177|\304?\330\360x\203\375\221\311?\325\223}\200\203\260\310?\r^\354\244[B\320?>\006\n@\314s\313?\220sQ\343\224/\322\277\311\214\\\334\353\211\326\277\023X\010\304N\245\320\277\205P\020\002\023\264\317\277\275\367\375\274%\020\317\277\002\204\017%Z\362\304\277V,\033)\235@\277?\251H\307\315Wf\275?s\224j<d\014\317\277\022\005\351\030F\260\322?\274Yb\351l\026\312\277/mY:\366\236\311?\303\225X\276\323\t\333\277\204 Q\262\346\221\324\2772\303(\003e%\240\277\262$H\276u2\322?\032\247\276\1775\177\320?.z#\312I\356\274\277\223\3677\211\275\'\314\277VwU5{\377\300\277\262\341yA\365#\277?5\333\354z/\337\301\277\307\336\346\350L5\304?V\311\021|\035\002\304?\352\246\336deE\320\277?\024\324\t\313L\262\277h\257\200:\3144\311\277\367\236\200\3344\354\305\277\3061\026v\346X\316\277\236\r\226=K\210\316\2778\346\351\0325\270\322\277@\272}\373\3376\320\277oJ\026\203\311\305\321?\013:\301\001\244k\277?\362N\025\276\204+\316\277!bZ\006bz\316\277`\273N\377f\035\260\277\010\007Z\005Z\317\321?\362\243\257Zx\342\320?\r\017\314\2278n\315\277FC\306\243T\302\265\277\224bOT\231\326\273\277I6\262\206\346\225\326\277\334>\263=\335m\320\277]xw\307\326q\317?X!\202\375\031\326\323\277\377>\343\302\201\020\324?o\r\215\243I\224\312\277\022f\034\033h[\324?(*\372\307ks\310\277\340\355\007]>\351\302\277z\250\320\355\343p\272\277\376\003\271\177\275\246\273\277\336\006\020\231M\333\321\277\327\322\253\032\347c\320\277\375\344\377\300\342\021\315?\003\200\000\245\343b\314\277\036\274\372\241gm\311\277\002\333\034B\360\323\304?\373\304\teD\026\311\277\2452b\362H\264\276\277\333/\341\310\352\363\307\277U\214-\343*?\311\2775j2\241Q\323\316\277d\300\243\327\260p\303\277[M\317\242\024@\321\277@\235v!\353\343\306\277@\235\270=\275)\315?\367Ye\246\264\376\323\277\205\246x\236p\335\321\277\320~~\301i\037\273\2770\372\206\231\350\271\312\2775:15Sk\274\277]5\317\021\371.\315\277\345n\306\037\373\217\300?\207\262\246h\233\321\270\277\311R\220D\324\351\315\277\314+\021\207\360\330\303\277\202\013\211\346\307\200\240\277\025\324d\204\277x\324\277x\206\343\330\376>\312?@\372\005?\232\377\316\277\335\276\334a\362\n\271?\367[\226\n\205\343\304?\034\3127x\262\335\304?Z\022^\212\304g\314\277\r \225\305q\236\311\277\254{\371\327\321\274\275?\311=\331\244\r\315\322?\321\3314|,y\321\277X\234 \240\261e\334\277\006\357q\307\027D\305?f\036\257\366f\212\307?\037=\362\305\346\374\261\277\224\270T\306;\027\311?\034\017\360\203wb\321\277\004\362\265\377\262\217\245?\251EL\242\301\232\325\277\352#\317y\266\\\316\277\022\002\250\2309\023\311?V:\035\235\372\r\251\277\361\224\233\311\263\242\306?+\177\010\273r\007\272?\023\342\035\"f]\321\277\276\025h\373\200U\317\277\214,\333\177K\335\330?\000\366\227\376\241\360\307?\275/\323\233\3669\323?\3371<\366\263\330\320\277\177]v\035\344T\325?\242}j\304\345\333\305\277@\004,$&I\322?\235>\351\341W\356\307?2\3045g\022/\275\277\007\3529\216\304p\324?\260\017_\344m\376\321\277I\263`\177e\'\320\277\334\031}7\243\207\306?]\013\'\'\342F\307?_.r\347s\002\227?8\tk\204\372m\321\277\336\1776\002\211\327\256\277\007\200\24658\327\312\277\315s\201!d\206\263\277\276\007}#\231Y\277?\214\210\377\307K/\307\277*\242.k\305\253\275\277\371\254\276\374F\"\323?N\266\201;P\'\311?\373\257s\323f\234\272\277\260\006\305\342ya\321\277\254\027\205U\243\364\304?\366\035\211\270\265\334\306?P\371|9X\244\311\277\257\212?\243\327\023\246\277\300\262\322\244\024\264\320\277\215\257\301\353\310\313\243?\220Sl\263N\350\266?4\361q\032`\356\310\277^F\024\007\216\323\312\277\252q%\361\250g\320?\021@\305\314\231H\312\277\017\306\035\251\235\345\315\277\322\365\276\235\266\331\257?i\000o\201\004\005\323?\314\253\000\000|G\320\277,\t\365\231X\005\326?\261p\355\237\002\273\306\277\213\356\017JN\\\311?@\375\004\243\324\326\320?:\225\312\343\202\326\321\277\334\224\033\332:\027\317?\267\311My\031j\313?\005]\322\203H\'\323?\303\341\334\221w/\261\277\320\277U\205\243\267\323\277)\3305\020\201\331\324\277K F\204V\222\270\277\202\212\354{\273B\321\277\335\316\337\000\n\340\267\277\010O\215<\265\237\320\277\307B\370@\300\024\315\277a+\221\331\223\237\301\277\3424\216\242\030*\327?\024\3426\277\006i\310\277by\200\274\221\330\325\277r\244\022\"\t\220\322\277\253}S\273\323\333\305\277\177Q\335\267\265\340\276?qYd\277\027t\306\277\350w\314\006\272r\301\2773\346\205\246\262\311\306\277\235r\371\315\314\345\260\277\307\031\375G*|\312\277b\247\222\340\221!\311?\030\346\251\263\377\246\310?\221\245\305\3175\202\320\277\014`%zt\276\340\277\307\356\247k\222D\325\277\251\367u\\dm\313\277\t\322\367\340\326\331\332\277\343m\245\327f\343\321\277\377\035\325\331^E\314\277\351O\321G\317c\315?\025\351\270\371\312\254\313?\343\326\213>rm\320\277\350\205\371\372s4\267\277\2601\226\206m\315\273?\313\003V\343\254U\221\277\315\324\271\334?\232\277?e{\343Z\243\324\320\277X\037\017}w+\316\277\037\201`\n\346\032\250\277cQ\307\031y\017\305?\031%d\367O}\315\277\345\326 \243n-\316?F\377\221\n\337R\316\277\275\010K#\003L\317\277\217X\305\372\212^\313\277\224&\357-\366(\325?1q\026\274\t:\325\2775}4\244\243\377\322\277|1\214\242\244S\321\277\215\033\310\304\367\317\326?qmM_t\036\314\277\337\003\215\374n\370\303\277 \331\330\374*\206\304?\037z\030{\253\205\311\277\315\322\251\206XX\317\277\002\\5tX\006\327?s{\356\251A=\260\277\232\335\002%\337N\233\277c\231\360\336`\216\247\277\204\365\034\3447\375\323?\311\017\263\234&a\257\277M\330\341\\\201p\317\277\000\336\310]\000\361\314\27782\352\2654\222\320\277\254\364\207$\202J\321\277\260\334w\261\325\n\335\277\364P\272xh\355\317?\t\354\275:\277\017\322?\276\212\347\307\272\023\316?K\"\271\004\371\274\316\277e\250i\233\013q\316\277\377\002\203\234\336b\321\277\177XFU\331\030\312\277\333u%\270G\245\314\277:\253h T\361\320?\252\230\214[\2632\325\277\362\353\352\002\034\212\323?\270v\344@\366\027\312\277\316\253tV\217$\313\277,\004 \213\300\232\247\277|\2047\367\231\253\313?t\241,[oD\304\277\372#\322W\014\256\307?\260C\014\246\'M\315\277\252\376\030\245\021\324\313\277,\2040\0225,\302?l\226\211*\0257\314\277<T\256K\350\t\321\277\330\211\303\200\302\354\320\277\353\3562\252\251\270\301?R\266\253\004I\247\314\277A\263\2613\001\226\267?\253\0339\034\247\262\330?v\026\275S\001\367\304?R\376\244\220\032I\323\277n\266\301\242\205x\276\277%p\220\265+\231\316\277)\231\030\242u\232\303\277p\254\264Z\232:\302?)R\314\007%H\313\277\316\240%\270&\027\303?\331^\352k\206\351\276\277\253\021\321\032I\243\322\277%\312\377`\267\272\312\277\336\344\371\0047\357\315\277\370\036\354\034\034O\322\2772\233\327C\301-\327\277\205\025]\315\360U\323?\232;\237\246;\364\320\277\372PX\230tJ\305?\210*\374\031\336\254\320?\022X1C\200_\317\277\324\310\266%\325\353\256\277\234\301\276!}\250\322?\3079\034#\372\261\317\277\004\240\274U\370\257\273\277e\363\304\265\322\322\316?\267W\356\036\003&\276?\374\353\252z\330\017\320\277\227\242\205\231\360\252\315?a1\217\241\010\316\314\277e.x\352\3640\312\277.U\355\303\017\010\265\277@\353+Y_n\306?\032*\255\\\373\304\314\277nuR\302\3001\322\277\202BQa\353\240\252\277$\307\245C\nR\331\277\255\007\376}\347\023\320?\344\014\254\200\316\346\314\277\277,\212\252\241\005\270\277\332\356\324\022\341\025\310\277V&\241\231\314\035\320\277\264|U\025\267]\315\277F\237\013\372=w\310\277\010\r\263\206A\317\316\277\245\307)\031\204\342\316\277dBH\355\260O\274?\202(\220\300\274S\322\277kU\340\236\306\301\325?\211w\215Q/\334\207\277d\223\333zv\016\327\277\213\261#@\023\002\321\277~\327\322i\376\024\302\277\260\351\377$W\024\330\277\3641\243H\214X\314\277\362P\312Z\371[\324?8\020\222\005L\340\321\277\0043l\265\003\205\316\27742#\027\367\372\311\277\37487\371oV\302\277CWC^\346&\300\277\226;\330\007\376\334\301?=\351m\001\333 \330?\022\201\321\202\243\346\323?b\266\t\234\021J\301?\021?9\351\001\234\315\277\2066\245a\235O\276\277\n\363\242\237>\274\331\277\266\2003\245\263\033\310?My\276\260F\207\317\277\305\2423z\177M\315\277[>\263\240\007)\324?\350y?\207\\\035\312?\032D\326\340\236\343\321\277>\333\366\177\006\302\323\277h*\037\335cD\303\277\246u\300\032\014\332\334\277\220\360\244\"\241\257\323\277\372\237\231\263\200\001\271?\363{\264\233\215\323\323?\'h\223\303\'\335\331\277}\245\332D\271\366\314\277\255\017\261\342\320\262\327\277\277\245\326\332\177\215\265\277\221\342-\241\314\320\267\277\302>\215\275\017\356\321?\274\346\372\343b\361\322\277>(\203\376\235\010\320\277\307\003\333\322\264\325\335?\352\350\270\032\331\225\311\277Fh>\306`\356\275\277*\300^\376\226\302\322?\n\351\235\310\233\025\270\277\2131v\343Y\331\333\277\213\225E\037\3732\327?\315y\204\242\222\235\313?s\032\273\247\037\022\315\277\237\316\323\210\262\232\313\2771.\013\334p\216\330\277\206\354\027G@`\304\277\366\037\241\177\3455\303?b\377+\341\277\257\324\277\'\300,\304U+\260\277\232\016\031f\323\327\312\277\221\203+\003{\212\326?\263\204\357\334\377\360\262?\231\025\304\037\311U\320?\344@\027&\266/\316\277\237N`\327\202\240\305\277k\240ud\027\322\324\277\255)L\274\\\364\244\277\217\014\007|]\212\323?\327\273\344$9\005\300\277\222\033\352\034\250\370\277\277j\266\331\365^>\301?\0360r\303\255\212\306\277s\024\377\373|\251\310\277\254x\237\272$\224\270?\013\217\303\201\014\364\316?\214x\374(4\332\310?\014\370\210\332.\033\307?\246\375\305\"<\020\321?5\3239\026F@\311\277P\367/\200X\205\242\277F\247:&\203\212\262\277\036\010\240\203\3645\320\277M\230z\'\260\312\331\277\006\214\344\341\363y\301\277\355\215\214\233;v\314?\237\301\256?\354\271\323\277-\206@h\034n\313?\037Ka\326r\004\306?\252\3160\326\263w\314?9\367\323VWK\317\277\270S\235\202\272\220\333\277jC\356\267\260\315\303\277X\\wN\016\372\320\277\275\3609f\217\206\310\277\203>\211\266\000\300\316?\366\334\031\330\360\025\313\277\246\361,\275\r\034\322?\323\036\'3{,\253\277\214\026=Cz\202\316\277\336\n\233\340\037_\321\277\017\241\252?K\"\271?~\376Z\342\361\002\327\277.\327\267\240\262\362\277\277:+X\231\337\037\321\277\230v \241\034;\334\2771P\347\304\375\313\326?\317\244M\325=\262\273?\344aF\035\302\035\335\277(H*[=\n\322\277\240\367);\273\004\321\277\237\010^\004\3704\312?\240W4\204\000\354\305\277~\n6d\362\274\320\277\014AH\365!\230\317\277\004\252\347\363=bu?\261\346\327A\353\002\305\277\016\225\261g\360\363\307?\234\034\231\242\267\323\320\277\372Lr\227/u\316\277\004>\232E\203\357\311\277\245:6e\033v\316?L\215\361\335\275\216\324\277\330\331\346\177\037\371\272?<\262f\"t)\324\277\024c\025F\345l\316?9\265uh?\357\314\277\0254\220\333\355B\327\277`\212\366\241\240N\315\277Z\314\327~\225p\301?\0225n\275\350\243\302\277BJ\005x\177z\316?\272\307\353$\3173\330?\210U\264 1M\316\277\272C/H\237{\322?\0258\372\024\327c\263\277\350/6\245\243\371\322?\247\206^\310\350U\230\277\371\235\211]\231?\320?Z\237\017\"[\016\324??\325\327\251\2500\326?\214\366x!\035^\326\277\236O\221\001\250{\321\277\254b\001~S\371\273?I. 0\346\031\272\277\210p\304A\337i\306?"
      }
    }
  }
}
node {
  name: "normalize_element/component_25"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "VW\262!\007>\317\277:\t!\367\337\020\305\277\236Y\371\002\006K\321?\202\354\227}\216\367\225\277\247r=~-\267\320?O\014$\2037\277\323\2777\204\317{\010\317\325?tf\324\337\277\267\302?C\020\265\247\303\216\307?\200\200\345\243\355\341\230\277o\317w\3401v\321\277XZ%\334T\362\312\277u\035\rT\204\243\275\277\212\333Oc\316\265\331?\343\000\227SD~\260\277\257\325\232\275\236\365\334?\344\245\366}\223\201\320\277\"\n\034\277\246\275\316\277Qia\242\203\346\320\277\2337o\030\334\301\307?n\242\226\346V\210\326?/\346\235\371\213\217\315\277H\364[\t\027\321\302\277\2402a\250\201\356\261?\311\020Sd\245p\324\277\244~(\342\276\237\321\277\204\363\251c\225R\324\2771\306\253\237C\210\277\277\331\321\027\306\006 \305\2773I4\232\277\266\262\277wQ\221\226\014x\301?\304\020R\032\336j\311\277\3359{\004\212\032\301\277?c\262\372\033\033\311\277\237\371\007Wa/\307\277\036\260\\\203\177\220\221\277\204A\035\1777\227\307\277\247#\246bh\027y\277\206Cg\200\250\207\272\277\253\251\362^1\372\250\277\350+>\301\242{\224\277CZ\276\211|\362\332?\023\310;sNm\206\277\331oX\340LH\333\277\253\213\241\275v\300\330? \320x\246\300\227\316\277E#D\236\311\243\317\277\314b\336\272\315\341\327?\245\231\027\365\203\231\273\277\301?\303\240\3561\276\277\022\224p[:\352\322\2775\325Q\335u\231\317\277\0300\026\300ss\266?R\372\370:_\342\327?|Zn\376\231 \337?\320\262\223f\230\377\300?\233_\305\2209\"\257\277\2102\361\232\231\221\316\277(\300\013\266l\010\337?\367t\226\325K>\317\277\234\240\023c\025\306\307?t4\334\272z\231\314\277\302\2325>\264\013\321\277\214\306\220R\277\301\313\277|H\266\302\r[\274?dO\351\375\322$\321\277\362\002\221\352\340\205\310\277E~\036\037\004O\333?f]\016\201D\017\262\277\352\016\275 }\356\244?\270N+\236\335N\321\277\266\372Ed\263~\250\277?\231\356\221\247\216p\277+tV\362N\221\215\277\364\362C\276\256S\307?V \006\374\022\230\333\277\027\344\231]\030\345\312?\321\027kM-:\275\277w\2600\n\243\325\272\277\217\216\'Y\271]\302?7\224\220\376M\036\324\277\017_G\230y\335\304\277r\215\256V\026\032\302\277\373\233\253A\363T\326?\000\032\273\302O\234[\277\017e\207|\300\321\311\277\010\036B\t\361\320\315\277\205\203s\374\006\334\322?!\"\322\302\2471\307\277\t\017\242\316?n\260\277\351\332\017_\303\037\335?hP<\200\250(\307\277n~\r\322\235q\262?\375\336C\025@\251\310?\177\217U\245\210\'\325?\361R$>\373:\313\277\'C\300\347\250\037\262?\001 \233\242+\352\320?\360-&\342\037I\254\277\t\340f\361ba\320\277-^\013\376\2470\320?\222\365HA\277\310\330?h\251\345\234\022\357\320\277\025\2557\305>\034\321\277\241\320\374{:h\261\277\215\326\213\200\216\177\301\277\226\350,\263\010\305\306\277\220Lf@\346\230\335?\240\nnZ\337v\303?\346\007\t\254w\023\310\277L\243\013\342\352]\323?\376\351\253PIB\312\277w\356\003\261\350\255\270\277\'\017n\337a\342\311\277v1r\273<B\312\277\240\272^?i\215\321\277\3439\266\371\332\216\264?CU\344\301*\237\266?\374#g\274\010.\324?\342\275\325\000\306/\322\277Peb\004\236\005\322?oK\242fa\262\276?\017XA%\021\316\323\277K\310(K\204x\261?\2174\227\237D\231\312\277\307q\226HX\n\267\277\371f\3357\245Y\306\277{=o\225\355\344\315\277\2060\n\304\343\211\300?\t\344\257\034c\237\324\277\001\234\244\032r\303\326?\2444\233\307a0\316\277wh7~\321\263\320\277\314\330\310\\\266i\322?\336\030\247\306\360\375\303?\000*\352\006\351-\310\277\255\310C:\227\275\304\277\312\243\300\247\336?\335?\005\314\360]R\216\320\277\017}\000\035\251h\245?\024\324K\347\036\355\320\277\006.M\031Q=\260\277\337gC\233o\206\336?\260 \315X4\235\237?$\302u{\377U\335?V\257K\"5\314\304\277\225F\355\372\334;\271\277\274\2663#\356\367\322?\253\345R\205\324\247\314\2777&\233\335 \373\325?\024\326\235Y\330\364\273\277\016\362\010\333@\233\223\277G\260q\375\273\276\310?<\2259\201\334\212\276\277UY\251\332Mt\320?&(4\377\236\216\334?\337;\305\005\373\n\266?6\026=\205\226\324\302\277\237\367\316\201H\363\334?)a\340\230\351\207\262?m\316\034\355\023\233\302\277\2029\335&\232\017\310\277\377J\2356\231\'\304\277\276\225x\202\365\346\336\277\005T\223;\307\033\322\277\342\266X\177\273T\277?G\323\217<\306K\325\277\227\226h\373\035\253\334?\235\323\362$e\342\303\277b\360\366A\022M\262\277R\263(hj\304\315\277\350\\\376\001\336\233\325?(\257\235A\246i\340?\253\234r\\\370\207\262?\242\346\222G\303k\266?\306@\033\334}^\244\277l\316\342A\212l\320\277h\272\215\274b\274\324\277\332g\271_J\314\277?h\327\265\244@r\302\277j\216\007\266\245\351\320?\245\n\014z\353\323\266\277\256\363-{+\365\312\277w\020\\a\321_\332?\266S\032\001z\271\250\277E\346_\005\327\340\314\277G\377p\374\365\257\315\277\007\270\336>\304)\340?\330\341\\\201\360\272\312\277<\025\221\335\334\312\247\277D\342y\004\222\213\326?}\272)\001\013B\276\277O\243\332\361pL\322?\001\260\215\272\316m\267?\326\2514Z\365\326\307\277\312\010^\343\351K\306\277\267\"\333@T\366\263?\235\0255\276M\204\227\277`\371\271\3027$\265\277\354b\n>\034\020\272?P\"\333\\\251%\317\277Y\214x\272\014b\311\277\022>\306\242\n{\315\277\346<\245{\204\367\324?\2763w\200i\t\335?\205\252\240\273\207\370\324\277\330\206\345*q\370\340?\236\366\323\000W\022\267\277\223\251\345{\004\206\332?\201\321\202\243&\362\276?\205\210\'\375\265c\326?[\275\273|\210\031\306\277R\035z\244$\030\310\277\032o\247\204\222\217\261\277\304\032\364\306\305\250\300\277]\371\260\007(G\306\277\234<\033\250B\362\301?B]\305^\377`\321\277w\270\350\'F\335\211?\020;t\366\245\351\271\277+\3266\346\361\213\267?\010\304\220A\223i\324?\326\016\363\243\351\005\264\277\365\367\316?,a\321\277\010\364\352e\331hP\277\202\324\334\300\323\232\312\277\236d\006\205\234\322\300?-\034\316\035y\367\322\277I\177\324\313\224{\317\277\214;sI\264\350\315?/\024\023HGA\316\277r\357+ \376\253\340?\337\310\270\271cw\270\2771\321b!!\'\322\277\315.J\226\264\336\311\277[\357\026\314\210\240\273?\016D\334\275Xo\322\277~\220\341\210 \224\261?\372\222\021@\377\367\304?E\324D\237\217\262\337?\021\302\304\233\014y\305\277\267\211j|\354O\336?\005\346[\376\307\262\270?y\307JH{\356\304\277\003\265\367-c\330\266\277\222\274J\251\021\033\275\277\376\273\272:2\234\331\277\262\3363\010/\236\230?\255\030K\344\304O\315\277\211\227\247sE\251\321\277/\303\177\272\201\002\243?\226D\344^\332\034\231\277\2319\023\211\370=\341?{\276$\235\232n\334?K?<\246I\204\313\277K\270%\254l\243\271\277\024\3629^\036\276\224?\323\362\020\201{\202\245?&\255S@59\262\277\331\354n\274@\353\253?5W\325\344\214\325\264\277\356\212l)\030|\311\2774c\227\311\354\003\311\277b\n{\177(}\325\277\244];\007\205\367\304\277\023/\252\240\375c\322\277h\005\206\254n\365\317?\3044>YR\352\314\277\245\036XD\003\347\335?M_\031eGt\316\277\302s\010\1773o\266\277\rFx\275,T\313\277\227Zk\3775\346\276\277\331\316\030b\314\310\315?\220p\265\251\025\201\311?U\003\346\204}\371\274\277}\334\247x\226\377\313\277\312\227\345%\336\205\310?\235\'\001\336\300,\323\277\021]\321_H\204\240\277\202l\376\004\274\361\332?IL\314\212\023%\266?\366N\036y\224\010\305\277z\204\036Z\371\237\311\277\273\270K\352\035Q\313\277`:\357\367r\274\303\277*\247=%\347\204\336?T94\377\304\325\214\277\033\026\233=m\340\302\277onD\336\017\313\300?\335p\'*~\200\317\277f\031\240<E\361\314?\247L \333\350\222\320\277\365\325\227\235,R\322\277\367\327\341\236\235\002\323?\277\t*O\305\262\322\277(\214\034\330\340\263\325?UN\030 \023a\337?\0237\372\332+\332\277?p\3146`%\331\261\277\034>+aT\357\334?7\321\276$[~\325?\262>/&GK\330?O3\315\t\024\020\315\277\204oq\277\t\246\271\277>!1\375\357\341\242\277\027q\360;<:\243?\212c\3212Z`\262\277\275\312\310\303\274s\246\277v\360\300\276\245\265\322\277t\t\207\336\342\341\316?\357\023\271@\177*\257\277\324\022\310x\326f\230?>\364\000\275@\256\222?*\235\003\\t\330\235\277\345\351\277{\005q\243\277\357R\217\331\376\272\307\27731\341\300y\253\310?M\014\260,$\242\273\277\223\036\206V\'\347\316\277KE[|\247U\245?\203f\351\240\321q\211\277c\340N\\mI\314?\277\014\306\210D!\311\277\264\340,\302\240\016\300?\360\206\023\034\207\017\326?\220\357\326\"7\375\320\277\353<\205\267bZ\324?*\003\256\373,n\222?\255\222\237\277\226\370\276\277\210\023\363\007^\010\320\277\204\214x\231\376\370\305?J\337Z\3345\327\321\277@5\034\236w\306\300\2778\006\317J{\377\260\277I\225\223\026O9\303\277q\210]\200\"\273\303\277\1775b\301X:\313\277Fn\033\200\354y\320\277\005\014y\241\014\227\307\277\t\366\302\021b6\202\277\363\025\213|\352\232\321\277L\002P\234\016*\330\277\257\022$\235\036g\323\277@\226\221\274kw\334?\240:\363\376\201*\331?d\264+\200k_\332?K\372\305\266V\305\327?j\300b\005\246p\263?\377o6g\216v\302\277\023\374\210\302\333\001\335?\024\234\362\317\251\267\274\277h\004\033\327\277\353\267?\t\354 ez\370\304?\262X7\234\001G\324?\337\000\216\2304\241\271\277\236\320\353O\342s\322\277\336\351)\315A\253\323?\224\250\325_\310M\313\277@6\003;\202\304\315\277\372\271\200\033R\332\334\277\321:O\341\255\030\274?\213\312\002\375\3609\310\277;\355\000\272\365;\314?\3157G\302c\344\223\277\376P\202am\312\332?NB\216R\256\225\330?\001P\244\177r)\335\277S\272\306\367]\302\225?\255`\247\232QZ\326?#\315\355\230\231\035\306\277i\330\362A\004Y\277\277\n\325\017\342\261\274\315\277jp\334\333\215;\220?\357\332\357\232\241\202\336?[\320\275\177\332\005\337?^\354b?0l\321\277\360[!j\252\300\310\277\212\210\254\177!u\305\277\265\333\364\210M;\260\277z\313\315\036\005\033\320\277\246t\372\213\352\276\321\277\216U\214\353\306X\274\277\245{\347a\262\302\323?;4,F]\353\334?\002\223\206\340\331\232\301\277\211n\346%9\277\316\277\336\207\315\021C\274\306\277\202\200)\301\352a\307\277\257\204<\"\251\374\220\277E&C\002\004{\304?\241u\"\373\377\274\305\2774h\350\237\340b\311\277\3361eu\345\222\313\277\177\264(\201\007e\277\277\303l\331\214\231es? \270%\315z\214\302\277\336\346\270\023\037\261\203?\022\331\007Y\026L\317\277D?K>\023m\316\277C.\243\036\303_\326?\001\360\025\376\210\266\307\277\225m\032\272]\330\311\277D\335(.\236\254\270?}\342\245@\013\256\303?[flC \362\320?\220[\335\373e\301\311?\020\342\206\274>\243\241\277\027\"\361<\002\211\325\277=\216Qd\316\257\311\277\0017\007\337f7\324?\244p\332\337\033;\323?\001%\221\277\254w\321\277#O4=\230|\257\277<x\237C\026\362\242\2771\206(\025C(\265\2778\344\273%\324\353Q?\353R\206\036\357]\322\277\235\341@\'\010\307\305\277{\037\227L\037GM\277\355\203\352\356S\270\273?\024\032-\254\3005\311\277\213v\313\304c\365\262?\251$\333\216\343f\277\277\307\236.\202\t\355E?\340s\026\254\')\323\277\177%\343Z\345\360\310?\215p\317\375\031\001\240\277\240\345\263\033\001\005\262\2770r\344\273s\254\265?U\276\251@\024i\305\277\201\335\372\372k\303\322\277\217TG\335\272\332\256\277p\014\\y$\271\312\277\037u\205\210\345\340\316\277kz\365\226\027\005\330?\257\202a\276\221\200\254\277FX\371\nwS\343?\324N(\237y\024\337?\367J\017\371\035y\226?/\213\344\206:\007\340\277<\204T\376s\240\322\277g\360\030\232\302\265\275?\260O\177D\263\265\227?\343\336\200\277-\022\304\277\030\000.\361\025\027\254?O*3\010 \363\301\277\2645\205B\302\377\306\277\314fH\364\266\302\241?m\356\340\016q\377\251\277WEU\237\355\311\263?w\2754E\200\223\332?\223W\245\374\2757\321\277\177\267\'\345A\274\317\277hLV\177c\323\327?uq\341aV\177\303?PE;\270\205x\325?Xl\233\373\016\362\317\277n\352\260\200\021\215\323?nb\222\333@\313\264?\203@\272\032\321$\323?\327}\021~\363\254\304?9@rca%\311\277\206\030\267\352\235~\307?\331\035Z}\330\277\321\277\177\'w\351p\276\323?\026aP\307\337\315\313?\324]\033\"U\261\306\277\243_t\334\235s\307?\226dxG!$\254\277\304ep\357u\255\305\277t\373Y\352(\240\307?R\330\177|\215M\271\277\276\013\245@\260\264\325?\371QL_\201H\267\277Q*\351z\005\226\324\277\351\300\213!\255/\327?\200\t\201\001)V\332?k\246R\036\243\335\330?\342\231\351\301Q0\310\2770 \014 \242\357\256\277\221L\177\335\206\344\324?\333\361O>wa\257\277\225\216\203\\\363\364\311\277{\002\325\375kR\320\277\273\013\265\"A#\316\277SP\233\202F\372\324\277\322\030\255\243\252\311\327?\t\330\312(\357\023\212\277\006S\203\037\213#\314\277\3774\377\371\307\214\314\277\360Q\373\204\036\367\276\277\261\250\004\233\245*\240?\230\320n>\277y\322?\355\206e\032\352\003\307\277\242\2647\370\302\344\311?\321\364\206\271\254\333\314?\241\207\230\032\272<\313\277K\255ZF\250\241\305?.\007\027~\262Z{?a\252}`\345\325\262?\364@\032\004\014\001\327?\222\352\316\"\372\006q?\223\016\377~k\006\321\277<\260\273\367r\312\234?\304w?~X\356Z?\364\231`\366\272^\310\277\217\256-\227\350\207\325?\347& \334S(\250\277\271tHA\"\263\326?\266\205cm\276\327\245\277\303G\345\2421E\313\277R\302\341?\274\262\310\277Q\363v\000\233\336\263?\363\016d\373\230(\273?\2410I\341Q\025\264\277\222w\016e\250\312\322?\322z\360\301\010\355\334?\254\375\373^\323\033\267?\323\260)\241\0052\330\277\\x\034\016d\240\261\277\2309\331\335n\217\315\277m\330\337\247\344\373\307\277i\372\262\325a\334\311\2778$\377\335LV\331?*\256\246\302\n}\261\2770\327\344!:\341\326?n3\025\342\221\370\332?00e\277r-\302?^\\\262C_\356\241\277\235\260\253f)\233\261\277\225)\346 \350h\326?b\"\316XnH\276\277\3353\001u\271w\300?)\303\334\341\273<\244\277Ou\310\315p\003\316\277q\252\326>\364\017\305?\325Il-\202\265\311\277\314\207\271\007\225v\310\277\377\226|\303\257\236\323?\312\322\271h\351\206\271\277\227\016\010:{c\305\277\237X\247\312\367\014\311\277T\273\221?9\206\265?\216\036d\376v~\303\277\362U<?\326\235\244?/\0137*\201^\320?\333`\023_\0167\325?^\334\225\000-\373d?x\242\177\335D\210\230\277\"V\332=\324\321\323?1\330G\206\240\223\314\277/\003\010\376;K\317\277L`)\201\203\254\272\277F\261\036\357<\216\232?\212\311\331C\0246\321\277\n\236!\240\353\020\334?x(\351\345\240\231\316?\271-6R[\017\320\277\207PcJ=n\260\277\024\\\356\304\223z\334?\304\370@]j%\313?\276\220\001\345^|\233?\005l\305\006$D\304?\330f\000\373*\361\273\277\025\316\311\346\005\263\326\277\024&)<\252\322\327?^Qh^\260I\216\277js\265x%\207\312\277\240\233&\001\244\225\311\277\330nqCB\n\326?qw1(.\"\313\277\036\256\356\273\226N\321\277:\211s\232&\350\310\277\306!\362\310\345\340\316\277\270\375v\002/\355\330?\3673\311\203\205w\227?\3675S\240\235s\254\277\345u\035\332b\337\225?U}\3275\2249\314\277h\243c\234\371\264\301\277\313\247\340S\255C\261\277\023\356:\3008]\271?\343\263m\377g\340\325?\356\322\036\340]\357\260\277\273I\210\311\206\373\310\277\021\315\270\200\0025\314\277\327\317\213\250\303\351\306\277\\\'\3449\021\263\310\277\244!\333\340\341\311\306\277q\2045c\013\240\300\277\024Q]\nY\'\323?\300\274\327{\267\232\312\277\'y\236\r3\023\264\277\315\306\316\004X\036\334?\233\300+\204\000\331\234\277\250K\020\277\254\232\324?\271?\310\306D\311\226?h\230\271D\036V\236?\266%\027\010\247*\304\277\370r\372\325w\331\302\277\0268\343xa\022~\277B?\327\347\377\017\301\2770\332\241i\242\262\317\277|\215\217\334\273\202\313\277\307\2016\275\264v\312\277\004a<\2751\210\323\2776\305g\333\376\317\333?`\355\263\300\332\365\255?o\236\013\237\204\204\304\277\360\034%\n\210$\315?\374\242\353_\345\222\304\277%\330McZ\237\332?6)`\226\321#\326?\257.<i\300$\302\277\231\202\351?a\014\205?3G\034\323\217]\277\277\214\276\376\373\276\305\301\277\276>)I\215\277\305\277I!\271\312M\263\317\277\010\220\200U\036r\302?Q\374\374\035\250X\233?-%\252;?Z\303\277\000\210\201\317\213\352\266?\022U\360\302sBr\277z\030\275\307W\212\307\277\032\350\322\246\207\364\306\277R8\314\341\244z\315?\205\021\261w5\257\320\277\013\203\317bk\256\275\277\313g7\002\n\330\322?\377/l\007\002\350\302?E%\371:>\024\314\277=\304\263\302\374.\335?D M\253\327\343\334?\203ze\244\377a\276?\035Ek\177F\355\266\277\275\272t\335\245\236\325?\3376S!\036\t\262?3k\255X\221\213\315?\024S\257|\022\257\324?8#\333\335);\270\277\020a6\340w|\311\2773_\363\344yt\321\277>Y\001#\007\243\250\277n4\241\305)%\300?g6~\227\010\212\333?\005\344dE\201\374\310\277\345\372-\360\313O\314?\266\370\261\325\'\261\260\277\232\366bb\322c\251\277\350\273V\240\350J\275?\200\255}\307\021g\314\277T\314{{[\331\313\277\035c\274 \001\'\323?\372\370|{t\366\301\277`\373\362\227P\240\312\277\255[oa\376\006\324?\265\333\221^\222R\304?\2357\004}\330\301\316\277E\233\210#\264\212\321\277\301\013SBM\300\327?J\242M\304\021\032\342?\373\312\346\036\320\241\325?\225\302\005\236P\217\224?\'\254C$\371\200\320?H0\233!\321\333\314\277-\034\255\017\220\324\320\277\213~]\033d\361\306?\230\2210\302\312\327\321?H\203\200!P\242\260\277\200D\227`\006\035\316\277\266\362<\377\020\367\270\277\246Qy\"%I\315\277\204\302V\277\210l\320\277:\325\265Q\370\307\240\277W\276\253A?#\232?Tb*?\241\305\323\277|Bv\336\306\246\323?,\210\273Y\007\260\314\277\353\244csz\003\323\2771-f[8\326\265?\305_\315\340sP\322\277\210\021\200\207\273\335\261\277\265\033}\314\007\004\311\277Z\331\035\326D4\301\277{p\363\235\312\257\303\277G\343\324\367\257\346\301\277p\030\026\355;\320\315\277cxp\240U \321?\311\336\326\006\274\006\303?\340Xs\'\250F\221?\303\275\25661\352\313\277\204\212\201\340\267\302\300\277d\347\366]\324\230\277\277L7L\336G\010\267\277\211~+\341\"\332\313\277:1\230}&\224\333?\321\217\351}\241\317\265?:c\220\242k2\317\277m\213\232\376\330c\242?G\025\356*\336\247\264\277\263I\227aPd\256\277:rIz\275 \322?\017\362\306\276nU\223\277\245\026\347\373\353M\336?\372$\271\364\026\254\264\277\\\341\002uoj\334?\331\t/\301\251\017\247\2772z\207>\314\234\301?s&u\0337\251\300?\243\325\240\232X\201\315?\033\276\001=?R\276\2773\354\244|\020\033\261\277\355](\005\202\245\306\277\363\205\332\200\031]\322\277\307\223\254\334n\366\311\277\232\037$\260\336\315\337?\230\014\021\2014\255\324?\330{\267\232\361\215\260?xZD5\241 \317\277I\0108\177q{\212?\203K\215\361\335\275\260\277JaU\362\356\036\205?\342`F\343\026\024\305?\004\223\270\032\0332\323?m\325\265\303M\260\231\277\203\321GA9\317\205?\253@\312\333Sj\317?Nj?\204~\307\333?H\304s:\271t\312?H\266\343\033DJ\307\277\220Y\0314\304\026\212\277nB\214\235\021\241\326?:\037\340A\232\216\336?sxs~\253q\302\277\013l\245B\002\347\317\277\305yQ\036\212\000\330?\357\266\003\\-\003\300\277wUw\227QM\270?\001o`\366\333l\311\277\003\233\357\267\250\\\304?BJ\201?\333\356\234\277\246I\204\241i\344\317?\027\332\030\277\031J\314?*\007\212\212\376q\310?o\227\242\001a\314\315\277/\333N[#\302\321\277v\217\307g\r9\330\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_26"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "V\221\222\235\005A~?\263\017\354\327!\247\317\277\363\3554\004\215\272\320\277\345\221&{\327b\325\277\370\262\202\0312\"\302?\364zbc\177U\302\277\265\221\004D5c\321\277c\216\016\335&\273\317?\300\306\375`C\244\323?\000\026\236<\321\032\310?X\300\312\302S\237\322\277\247?\332\2039\017\310\277\361\312?D\264\347\322\277\272\'\264QB\325\320?D\333\326\273\344$\331\277\036\r\257=\026\017\324\277\351\026\262\2418S\322?aU9\304\252\007\325\277\372LQ\211FR\316\277\302\363\326\351\325:\271\277\230\\ZG4\005\305\277\355\353e\200\260x\320\277\337\302\333\377\327\353\332\277\t+_\341n\232\323\277\365g?RD\206\326\277\2464\017\036u\r\325\277\344 \225 +Q\327\277\233?\"}\305`\324\277\341\241 _\337\032\320\277\376\334\310#U\247\326\277\024/\303=\236/\307\277\306c/\251\024\232\316\277h\237}\233\264\337\327\277e\327I\277u,\316\277fE\232\231\025\341\303\277\240\371\256\236\031\030\247\277{b\245\233\'K\325\277rG\305 ,:\325\277\240\234\364\000\016\010\327\277\030\211\236\316\364\226\247?C\nu\303|\232\331\277\032\340\243zB!\322\277\316\331\247\210x\220\325\277N\324N\244fU\333\277\274O\300<\205\330\313\277n\274s\334\264\017\241\277G\010\013\376\351\314\321\277\242 _\337\332\213\322\277\363\270\177\227\337\212\317\277\233\037^[h|\312\277\347\307_Z\324\247\330\277\232-Q\244\230O\333\277\033c\314\002\222\325\323?\364\006-^\013~\315\277\206(W_\372\352\324\2777\033L?\270m\322?\222\240\256\244\313\321\306?X\330\362\033=\266\253?\205\3626\035\236\361\323\277*\2262\333\333\316\322\277\030\240D\266\271\322\312? \\C\241L@\321\277D\350V\276\035\027\327\277\201\332\177\317\325w\270?\332\263c\372\220\375\302\277\335\236\030@\225\246\321\277\305\023\213)\242\360\317\277\346\341\210\336wF\322\277I~i\366\345q\327\277\325\234\223I\323\301\313?\210.EE\336j\311\277\264$\233\006\240,\325\277$\212\034d\212\240\322\277nP\332\237\264\205\326\277\300\241\350h\362 \315?\341\377\3305k\272\336\277 cI\024\265\017\320\277G\337j\276\306\005\324\277\214H\271\240c,\317\277\220\213b\240\0105\314?\267Z/\237\017\003\332\277\202\034s\"\352S\313\277\nb\342\2071\206\314\277\345m:<c\343\316\277Z}\032\234-E\322\277\372q\250\235i[\315\277\343\264u\252[\301\315\277\226\227\333A\025\314\326?\242\213<\377,\314\322\277A\345\251XF4\334\277\264\251\200\234\254(\323\277\316dj\330\020\030\313\277\371\3419\276j#\320?J\265O\307c\006\326?\024\215\336>\345\367\322?\376\'\342!J\303\333\277\033\305j\332b\n\304?\0017I\3738\375\325\277&\\\237\244\206W\330\277L6\273A\366\362\321\277Y\200[\034:\"\323?z\214\217\242\020\371\320\277]\'\036\345\232\341\322\277\"\311(\246=k\311?/\313\215\330\335\362\330\277#J{\203/\214\332\277l\305\006$\304\t\320\277=D\243;\210]\321\277\250\035\274~\332K\325?X\'g\337\316\242T?9\245Q\273>\367\310\277\372\355\353\3009#\226?\213\206\316c{\212\332\277\343!c \225\003\317\277>\365\037\004\252\240\316\277\305~G;\013\016\320\277\330\267\027\301\224\273\265?\344I\363C|\222\334\277EWu\230\'\276\313\277\033\321\3421\250\333\322\277\271\211{\250D\304\300?\201gs\203>\344\320\277\024\276\214\234d/\326\277fb_W8\356\315\277\027\002\204@\203\225{?\002{\361\352\301I\320\277\275\372\272\004\216!\325\277\223\030\251\234\233\033\320\277\007\241r\002\211\334\327?\231\273u\202&\327\322\277q[\031\\\214\344\273?\210\200\307\340\366>\316\277Y\010\274\335\334)\321\277U\316j\303Yx\313\277N2\254\301\177c\306?A\370\355wj\246\313\277\240\306\275\371\r\023\323\277\303\027\334\305\352E\321\277\227\204\023\352LN\312\277\"\211^F\261\\\321?\243*;7L\270\270\277|V\004\305\260?\333\277\255\266\315\032\335=\327\277\207\235\316\272\353Q\326\277\300\243:\333\253(\325\277\021)z\236G^\321\277lr|\335\267\224\321\277\235\010\207\203)\357\316?\036*t\3738\\\330\277\013k\031_j\272\302\2778\352tb\007|\317\277\"\200\304D\275\277\317\277z-y \330\017\246\277\333\001\317\244\352\252\322\277A\274lC\336U\302\277\034\244T\200\367\'\321\277!\334\360\375\005\351\270?\361\227\273;\327\234\317\277=\321\267\375\331\354\321\277\357\333\3267\254\200\317\277j<*a\032D\315\277\256X.\341\361\351\310\277\001y\002\243\303*\321\277-\243GB\021A\323\277y?\352\206\330&\315\277\252\225l\351\2178\301\277W\"P\375\203\210\342\277\305\213\307=D\000\321\277\030\257\232cPX\315\277\021&9\036;\001\322\277\212\250\354h\332M\303?\321\213$\213E\035\312\277\266\300\375\004@*\324\2778\005\205\203\265\230\320\277R\377\017f\311R\317\277\306k^\325Y\255\332\2772\227L\374\356)\320\277PX=\273\327$\342\277\204\277\231w \333\311?_\274\233~\273\262\323\277\357\325}\266\304\000\315?~\032\367\3467\314\310\277\356\3727\365\242\362\271?%\346zW\024a\317\277\233\310\314\005.\217\300?Bc\036\340\346\340\320\277o|\222\340\262\257\320\277\007\232\317\271\333\365\325\277\351\311q\261\346#P\277b\214\243\315\314\'\276?\334\337\217\221\242\004\321\277\240\371\275\311FR\263\277#\022\350\3000\350\262\277\275\361\336\346\307\276\300\277\233*\020$\2142\322\277G5\323Z$o\322\277\257V\324\375\357\n\322\277$\0367\231D\377\304?D\016\031\250\357)\302?V\215\322cc7\321?\205j\326[\373i\324\277\354\035$\372kh\334\277B\246T@\334\000\242?\324\304\257\026\247s\306\277MN\212\342\227r\323\277{>w@\341\205\322\277\276Q\n>\366H\325\277\201\307\\\276\232(\320\277\2165m\020\367\242\324\277m*\275\374o\241\304?\032\311\365!5\216\312\277U@\007\201\210\031\246?l\302j\352D\233\312\277\370^t`\326W\325\277zV-D\342\371\333\277N2\007{\3624\320\277\256\224\216\007\225\227\301?\242\220\t\235|_\325\277\231\227h5\311\264\303\277!O\232\037\342S\334\277\231\342`%\325-\320?\275\003\227\"T\204\320\277\256\330\374K\224\265\270?%j\365\027r\323\315\277\225@\020AQ0\316?q\\\223\\h(\236?v\211,\312S\363\305\277\261pP\312\275\243\313\277m\312\025\336\345\"\326\277\037\342Ya~\227\304?\315\236W~\021\233\270?.\313t;=\347\324\277\257S\366\247\236\026\330\277\207\305\207]\004[\320?\2663\247&\034\325\321\277\024\234v\010NC\315\277m[\357\222\223\344\313\277E\031`\325\017\240\330?\256\322@\240\361\314\324?\244\214\372\034\006P\323\277\203Q\305d\334\232\326\277\016\363\'\"\252\r\323\277\263\017\r\346\nJ\323\277\336P\235\263\252J\330\277?R\351\314\342\352\330\277)\220<\204\257w\331\277q\351\322\236\026,\335\277\272{\312{\346v\313\277\311cz\200\366\274\325\277\252\211W\274\005\320\277?\035I8\343\352\266\320? \271\261\260\022\271\276?\220\017\335`fg\324\277C{\355\200\210`\323\277\232\315F[S\250\326\277{\177jYJ\330\312\277x\270\035\032\026#\321\277x\365\"\301\361\210\314?,\010\212\304\251\273\335\277\354\275\235\351\312\214\321\277\363j\210C\231\372\326\277\004\035=_\2534}?\351\253\026\236\270\230\263?\247\023}\374\255\266\320\277a\317\215\237|\260\306\277\321\277n\"DC\320\277\\\257D\373\263\372\302\277\222\024\242\215mc\315\277%\035\'}\010\307\313\277\352L\225\200|/\224\277\200z\371\2764\034\306\277{\\\206\305\311y\316\277\201i\346\003\341\216\320\277\2017\356\336\233p\301?\201v\352>\276\214\316?\'\211\302\2723\213\302?\277\262V\335\270\377\322\277\370\344\214!3)\245\2779\t\245/\204\234\325\277\213\235:\240\266W\321\277\327qW\n\334\225\320\277kZR\203\243\303\314?\315\354o\340@\016\316\277j\267e\331\366\352\315\277\352*\027\t\361\361\311?\370@\341\242I\030\320\277\325\0350\264\337\177\322\277\036\272\207!\305B\324\277\004\014\344<\020\227\326\2779\263\341\331\263!\304\277\002\201kz\222l\303?\347a\364\036_\251\325?o\337z\177I\313\323\277\227i\240\236\343H\302\2778\320K\336c\035\330\277\327\246\261\275\026\264\320\277\224\323d\347\3513\312\277q\344\005\001\307\330\325\277C\351$\276\207\211\320?,\357.@pO\326\277\324p\035%\247\035\326\277\345\214\223\210\021>\313\277`]\262}\n\370\310\277{\367\205_\003\205\241?y\212E\241\237\010\315\277\033Z\215\272\020\212\317\277\262\007\244\016<\210\321\277\017\336\rX(\210\321\277\355)\275_\232\334\320\277\274sj_\'R\325\277\261\201\370\351\r1\314?a\360JA\240\373\242?\325\223}\200\203\260\310?\'P@\352\341\021\313?\2773\3229\334\032\301?\346\273\347\002\217\226\325\277\013< \236_s\325\277\023X\010\304N\245\320\277\243\241\220\256\343\211\321\277%\347\006;\254\r\322\277DA\276\276\265\027\315\277S\260\010\366F\312\311?mJ\201\036\315E\331\277\212\207\336\177\267\202\320\277XS\274>1:\313?\274Yb\351l\026\312\277\035\316\231@S\247\300?\302\376F\226\'\353\307\277!Mi\273\021o\325\277\264k\214\347}\255\332\277\262$H\276u2\322?Q\347\330\341\262\201\252?\255\372;_\334\333\325\277\024\271;\306pP\323\277W!\345\'\325\276\325\277\233\n\351\327s\245\317\277\232\003g\235\257a\322\277\1775b\301X:\253?\374\216\203@\236\305\264?\361\224\274\327\234E\317\277\313\351\333\027\n7\317\277h\257\200:\3144\311\277G\346O#F\262\315\277D\276K\251K\306\325\277\341H=\227\353\345\310\277\362\203\014G\004\241\315\277@\272}\373\3376\320\277n\233\363\235\251a\331\277\202\273? \310\350\324?t\023\255\303n\353\320\277\253\243W\301w\364\320\277\350&{\225\306\371\334\277&\206h\235\206b\313?w\205\374;\364@\320?\257\037(\330\373\344\310\277o\324m\375\262\003\327\277#T\343\204\215[\315\277\001\"P?\240\032\322\277!L\233\273\247<\313\277\000\301\345\000d\031`\277B?2\241ra\330\277|\024\246\326\230\343\304?\302nT~\204\'\317\277,r\231\344\221\t\315?\276^\253N\030^\332\277\213\016\222O\331\372\321\277\363\257a]Gb\315\277>\301rB\360\221\336\277}\2619\377]<\321\277\256\010\006)\3334\314\277\005<@b\201\320\252? \352\343F6\374\321\277\352\313\261@\344B\325\277\024\010\330\232\357X\314?Z&&\0348o\321\277\025\345\322\370\205\327\323\277m\305\037\301d\025\322\277\236\222\265~\341\262\323\277\203\256\226\236]\274\322\277O\276\217Y\254\227\327\277[M\317\242\024@\321\277A\256\036A;\361\323\277\246\214ns\031\355\264?\344/-\352\223\\\300\277\231\274\236;\003\033\313\277@\230\302 <\034\327\277-\235j\210\205\265\321\277\322\217\002\033B[\326\277\306\331\370<\024?\314\277\026\t\371\342\203\005\305?t\265\323\336\371(\322?%\"\231a\345\310\325\277G>+@F\206\326\277`\005\370n\363\306\334\277\257\003)\251\3722\273\277T\025\340\334\333\204\313?0\342\361\243\320(\320\277\022F\273#\306_\320?\2744,\3432\260\267?Wt\322\230\234\234\306?\327\221\372\035PW\311\277\035\200\201\336#4\317\277\025(\242\232+\356S?#\354%\327^U\315?\207\257\247\004a\372\323\277\021,X\364\230\222\305\277\317\233\355~\323\203\330\277\3154H^)\r\225?\215\317\246\033\017\223\322\277W\365,\347\326\224\301?<s\007\230\226d\307\277\204C\0248~\315\313\277\010\372U\312|Q\340\277+\233b\243\346\212\321\277+\366\275\2446\023\231?d\325\326>\323\001\300\277TR\253\330-\274\301?&\304\277|pF\307?%\304\246\337\317\272\316\2770b\237\000\212\021\322\277*\325\221e\271S\272?q\311\215\374\243j\252?\364=\033\240\321\251\316?\335\201\225\236D_\306\277\316\374\254*\342\021\316?0\334\363\333[\272\310\277@\004,$&I\322?\213\255=?\316,\303?A\221\233\237\352\251\324\277\372\267\r\233\257/\311?\316\317\201\243\354\306\326\277\244\201ib\313\334\341\277$\204`\270\347\267\301?\264)\354\334\223\013\240\277)\3644?\202\213\274?dx\rv\2327\317\277r\r}\301\270e\327\277\276_\365\025\336\304\307\277\324\"G\337I\360\323\277:\027-\335\260\257\320?\366\223\030\241+S\333\277\311\227\253zT\327\325\277\250wL8OP\305?N\266\201;P\'\311?\007\324\325\374|\004\330\277Xz\351\375\261\326\323\277\254\027\205U\243\364\304?\216\031\321\013\261\331\263?\030o\022 \226O\327\277\313\225\315^\256l\330\277vJ\017\\H\264\312\277\354\265\352\204\341m\325\277!\275\023y\263\202\311?\014\202\032\000\242G\324\277Q\235P\200\017\373\314\277\245OH\276T\244\321?\021@\305\314\231H\312\277(\272\354\337\016\367\320\2772\177;?{\344\326\277\036\233O\343\377\n\305?\226\336H\352N\301\307\277\270\037\360\300\000\202\327?\2375\344D`\221\320\277\365\033?\267D\354\314?_\211==\201s\256?\363j\210C\231:\302\277`\234l\301ZN\322?\363\201J\200\2150\274?\260\207\233\370\017\016\310?k2>\'\030)\331\277\303\215J\240wY\327\277q\235\322\003\027\222\330\277\263#z\276\013\200\325\277~F\267\230~\r\301\277/\177\215=\336\030\330\277){\246\362\321=\324\277w\377P\027\306i\311\277\303\337H\003\354\241\322\277\331/\320\234\222?\326?IM7`\302.\323\277\202\237\202\r\231\274\323\277F\"\270\2721w\300\277\031\301k<}\251\316\277)A^\223^i\265?A\203\013\201u\277\324\277\246h@\030\323\'\326\277\037\343@\376\210\025\325\277\327\223m\236\362\201\321\277`\332\303\240D2\314\277\313\374\335\032\\c\225?\225\257\025~\272\013\326?j\2266\342\352|\321\277\242\351.\201BZ\324\277z\251un\034\251\260\2775\226U}S}\322\277\242\'\310|\376\303\334\277\343m\245\327f\343\321\277\3110Y\242\324\332\322\277\020T7^Tg\274?\3032\262;\0174\321?\343\326\213>rm\320\277\t_\014\243(\351\305\2778?\315\342(m\321?\357\356;e\271\225\324\277es\223 u\036\323?x@<\277\346$\324\277r\307Y\340DW\317\277\231]\234\235\261T\316\277cQ\307\031y\017\305?\353\247\244\363\206\240\320\277\265\010\275\345\207\235\303?:\322S\303\002\010\323\277\272\202\257\340e\243\320\277\217X\305\372\212^\313\277\374\356\251\336\022g\301?\350\225_\304Fr\332\277qb\376\300\013\221\313\277(\274\241|\203g\332\277\345\216M\336?\227\260?F \003\036\275\346\341\277n\221I\200y\314\325\277\030\347[^:_\241?\277\204e\307\241Y\320\277s\037\312aA+\320\277\275\000\373\350\324\225\317?\177\"\005\005\224<\324\277\034\273<\204\216\251\312\277\306\005\230\340q\035\321\277\253\272\242\357\311\036\320?B\363s\"E\r\323\277M\330\341\\\201p\317\277\322\315Y\372+?\311\277\332O\255[\220\357\321\277\311\246\001(\353\334\322\277\tu\252\337\371\003\245?\205\245T\236M\002\264?\010\243\345\202+G\320?,T\253m\2228\262?iX\347sI0\323\277\2306\373\207\035[\303\277\030^I\362\\\337\270\277\333\032\256a\310\342\323\277K\323\373!\221Q\321\277O\344\254\374\360;\322?\364\2307=\336Z\334\277)o.\233\214\354\321?>\035\3215z\322\303\277\241\010\363h\3644\312\277\316\344z_\205)\324\277|\2047\367\231\253\313?\337\252F\n\300\032\313\277\376\311\335\274x\014\245?\260C\014\246\'M\315\277\204$\232\335\346\317\306\277\334`\352\337\334\374\315?\361\222\007;(\025\320\277\325.}\032\275\273\316\277\375\265\345\361\356\247\261\277\353\3562\252\251\270\301?5\301\344\004u\243\324\277\372\364\022B\213\025\327\277z\313\315\036\005[\317?\362\006\230\371\016~\303?\004\363\302c`\231\322\277\022o[c\351\346\322\277\364\351%\204\026\353\321\277\020\275\367\375\274\245\321\277~\237\273n[\245\306?f\226N5\304B\315\277\351*\274O~ \277?\352\257WXp?\321\277\266\347\205}3\230\313\277\253\2233\024w<\323\277\252\346\244\275\342%\317\277\305\254\027C9\221\337\277\275\344\177\362w\357\321\277s\254ANN#\322\2774\326\037\335\337\013\325\277\010hl\371\222\327\315?\300{\303Te\245\267?\356\3602\036\000\214\322\277\0337-_47\334\277\225^\316~:\244\252?\361\220R\236\263d\306\277\322?w8p\275\325\277\"\305+\t\203D\204?\324\355pd\263\335\311?8~n\211\3307\316\277\236\230\2228m\276\301?\355aP\"\231\300\321\277\347\234m\250\367X\316\277`\266t7\025J\312\277?\275\373\336\004\261\271?\211\367\261\274\212\020\325\277\236ko\"\300\212\317\277\207\027\206\300x\243\323\2778|\230\336z\244\310\277J\023\245s4\375\301?T\206X\232\347J\304\277\305\237\362\371r\260\330\277\241\355\342GF\230\324\277\2715L\341\377\026\322\277\204\221\352}\333\272\321\277\205\276\252i\315\305\323\277\3039\331\274`&\306\277o\354\300\326\370\216\315\277\254`\n\305\014C\350?,G\310@\236\235\321\277\236\374H\327mL\301?\004\221\301a\324{\321\277d\"\245\331<\016\271\277\213\261#@\023\002\321\277U\364\013\237B\350\315\277F+s\312\016\267\315\277\t\270\020y\005\201\315\277\367\374Y\301\251\356\310?F\010\260Dw{\326\277\236\232&\307\370\213\320\277?\037\300}x\261\320\277\326J2\274\243\020\321\277\323\262bv\036.\310\277\320\266\232u\306\367\311?\035K\212U\244\276\312\277\005\351Zb\002\212\303?\206\336f\032\342\022\314?\031A\276\337\303@\320\277m5\220\323|:\324\277\317K(\361w\367\243\277\313\260\335\177\\I\263?\024\342x\333\330n\320\277\276\006\361?\001\255\306\277\252\2145\022W\204\315?\307yI\255A\251\257?\032D\326\340\236\343\321\277qwsD\000\350\320\277!\356$\001\356\242\320\2777\252\323\201\254\247\316\277\223\201,\331\353\274\306\277\214\021\211B\313:\321?\304l\0238#\224\277?\266\240\326\270\'\335\311\277}\245\332D\271\366\314\2778D`\325\356\021\316\277\036Q\343\326\213\276\316\277%\277\362\336 3\327\277\262\230\277\337\273\217\302?o\234\230\036\342Y\317\277>(\203\376\235\010\320\277\034\237$\270\354\353\307?FHz\244\003\212\322\277\212v\025R~\322\330\277~l\026X\225\267\313?\225\375\251\247E3\317\277\2131v\343Y\331\333\2779\315\n^W\000\325?%\177\213\251O\315\242?\277\341\364\344Pu\316\277(Sy\371\245\227\316\277b\313~\037\006\241\262\277\0314\374\300\270\310\325\277\007\374\ng\361\301\313?\375,\032[\235\326\311\277v\207\230;\310%\330\277\270\260,\240i\354\311\277c\210\236\277\311i\253?\367tT\271y\370\315\277\373\005\273a\333\"\312\277\313\270\353\235\270y\324\277\247\346\027\312.=\317\277\361h\241l\343\262\254\277\362\317N\376\325\000\333\277\270\347\\\376\001^\305\277\rK\352\241\tV\334\277\204\030\236M\375r\331\277\\\'&V\343\370\241?\210Rs\240$0\321\277\271\312n\301\255\026\315\277,\367<^\314\277\320\277`Rc\337\241j\316\277\375\177\222\276\355b\252?A\031\333R\244N\274?\246\375\305\"<\020\321?\214\312<\250z\350\314\2772\331\211\334\035\343\331\277\262\211\243\335\256\270\330\277H\022J\200\026\242\321\277\324\221\264\377\'\235\276?4\361/\376\215\250\321\277\342\234\362\227\377XD?\013_\241\007%i\300\277\3458\001\227\021\250\322?4/\003\245\323\000\307?B\236UM\255J\256?9\367\323VWK\317\277G\214\340w\272\220\273?D\020\316Dd\332\332\277Jn^\346\205\005\314\277\316>\207\340U\342\316\277\352\202\217\3735]\305?J\275\237\001\222\374\321\277\231\302\234\003xI\323?\230D\244C3\221\331\277(\rV\0302\t\314\277\366,\306\310\253\326\305\277\347\376\352q\337j\317?q\376\313Z\257\316\321\277\223\315\321\272x\005\307\277\257\270\325\377{h\320\277\022>\335>\200L\246?\032U(\0006\210\277?\367K\027\244\021\332\322?\010\243\345\202+\207\304\277\r+&\200\254q\331\277\326\327\004b#\032\320\277h\025&!\313a\252?\"wl_\233h\324\277\213M\320\313\315\334\323\277\355\256\375\256\031*\260?\245j\334\027\247\014\315\277\343\263m\377g\340\327\277\n0\306\345\223\354\\?\232\267\250\036\202M\324\277\351\005#\037\211\321\331\2772g*\202\007\037\325\277\325\364nf\323\225\300?\205\321\315z\010\225\317\277\020;\327 aR\314?{\rf\270\246e\314\277\363\304\326\340;\271\304?\237\310\325\300=\254\320\277i\253l\001\234<\265\277\007\246h\037\nj\302\2772\330\242?\023e\307?\221\376\013\302\344_\321\277K\211\311\300\246\263\326\277\303\260\r&\017U\310\277\220\315\341\234\t\364\323\277k\326\031\337\027\227\306?\245\215\033e\232<\327\277\255\250\240&#|\315?~\000R\2338\371\326\277\305\375\313\336\347\262\305?\246\022\267m\214[\246?\310\361\236^\204\204\265?\013+\221\033\260\361\317\277\206\207\027\341y\353\323\277SP\335\236\030@\306?\373\261\007b\362i\322\277\256\332\261\350\010&\300\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_27"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\2772\251\200\377V\316\277\226\365\264&\212N\310?o\034g\211\204\245\325\277_\247\344\336\364\025\312?\346\013\265\0013z\322\277`\202\253 ,\201\245?\235\217B\304\223\376\265\277D\305\216\177\314\362\255\277\214\tZ\026\206\247\311\277\360\261\252\024\361\014\323\277\360\224a\036*4\321?\226\251\242\250\316\313\216?rl=C8\346\311?H)t\240\177i\330\277\332\351b.\004\224\310?CO\261\007\346*\307\277J\322\024\205\206\023\321\277\300\264@l\375\265k?\363\310@\032%\032\311\277D`\366\374z\217\323\277\204\203\336\227\n\334\311\277\020\302/7\020y\315?\301k<}\251D\326?\23291\337R\262\276?\255\004 (\226_\314?\0162f\236\236o\316?D9n\204\207\241\332?7C`\233C\210\337?\324\364\227\345\004P\304?\244\204&\2523\316\311?s\241\362\257\345\225\314?P\306o?\035\345\233?[E\034>+a\325?\363\350\004<\202~\313?\2500P\300\3305|?\360\267$\244\301\257\321?\341\205\347\204T\372\327?\031\245\256)N\275\306?P\230\305\376\221m\305?\036\267\251\313s\216\315\277C\251\336\226\237\006\316?[\013\222\302\345\306\307\277\317\320h@\367\304\311?8\n\265K\300\324\345?\027\323\361=\310W\304\277l:\n)\242S\305\277c\265;\234\247\327\310?\003:8}\342%\301\277z\025\000\200\357\370\332?\313G\265\374~\371\324?\r?\356\021 \371\323?\355\206\naw\362\343?\004\215\333`\217\246\330\277u6\211\346\246\362\315\277TD\331\235\346\313\267\277g\3448_\010\023\216\277Z%\201\233\3776\314\277#.!\233\273H\322\277N\330\372\371!\374\311\277#\350y\201\243\256\303?\274yr\231\017\022\202\277\020\037\330\361_ \321?\3542\231}`\177\335?k\224\232\342\026\030\324\277\3143\243\335\360T\305\277\314\233?}68\220?{\251\3615x\035\265?\214;\265e\206.\310\2770\307\237fP\206\313?\365\202p\201\333E\325\277\250\320/\000CE\266?`\315\001\2029\372\267?\342\207s\242\2270\307?l\205<\3047\373\303?\377\361\271n\2452\272\277\204\353\366\376\253\323\343?\315\240\014\033\206\013\306\277\\/\227\236\372\221\332?\264J\237\014D\005\300?\330\307T\0136\277\271\277\014+\r\343\013\246\326?\027\006\023\034\352\271\201?\221\332a\237B\346\324?G.j\275\000\367\301\277\'\264\223^\'\267\303?\353\221\231\032\207K\235\277o\001\262!I\032\322\277\341\2264\35316\307\277\345L\217}\373\000\247?\225\206u>\227\204\323?\351\357\010\033\\\302\306\277\177\256K\307{Y\245?\234\222b6\267x\324\2778\316\330]\3012\302\277\te\2062\371\013\330\277\265\203\266A\222~\301?l\031\217\243PN\246\277hG\242~\264\013\314\277`T\224CrO\323?\3663\333fA`\201\277(1\000;\324\002\323\277\302{\273\343\034\016\312\277\245\005\273\243\367\364\314?\204,\013&\376\250\310\277\273\352\350U\360\235\314?\204\354\202\342C`\332?q\256a\206\306\023\261?\220\261\003|\361$\301\277\327\177B\342\303Q\322\277\375\323\025\205\300>\322\277Y\321\017\270\350\303\313\277>\352m;\206*\325\277\023\377f\030-\366\322??\271\267l\276[\313?\307\373C\303\372\360\232?\357\1776(Pz\324?\3439\266\371\332\216\264\277\351\032\034\333!\264\307?9\375\217\002\372\263\320\277\307+\243\240\372X\240?\243\361\372\202\314\204\325\277\265l\255/\022\332\302?T\003\254\331\363J\314?\n\376\216\023\354\340\276\277\345\306_ )\036\323\2775\006ce\260\271\264\277\034\025\315=\003n\313?\221f\250a*\303\273?\243\266&@\301C\340\277\275\223G\036%\302\341?Y\247F\277\3508\273\277\332\361\364\204\004\020\251\277\355\256\375\256\031*\320\2776]\rX\213\262\305\277\216\357\346\004\310\353\325\277^\"j\344\353\031\324?,\271\314\341AP\312?(ox(\247\311\310\277\n<2\201\033\\\252?[e\"|Z\213\313\277\354S+\237\'\226\257\277\014\001\341\277Pr\321?\243\320\022aL\305\256\277\037\017\236\205\024\356\307?th\252\212\035K\304\277\233\367j\r\306\004\260?\371\215e\260\230\007\340?<\355|\201Qp\321\277\360\274\267\226\207T\310?\325\026\350$\245j\312\2772L\2676\236\031\316?@\006\237\244\310s\310?\305\211\267\347\\\376\300\277\231\265\230\310\232\313\262?\277iU\246\363<\320\277\350\230\373\375\305`\303\277\3444\300\334Y\201\245?1\346\021P\237\354o\277\334\347c\004uF\303\277&\177\2038\007\266\304?kY\361\037h\213{?\272\nR\276\3320\254?)\030!~\366J\325?\224\024\232\034%\314\324?Ig`\344e\315\320?C\372\336\300\223\377\227\277\363\363\225\366\274\221\343?\035\024{\005\365o\307\277m\351\013\000\331\024\316?f\2431b\270\035\301?\337S\030\337@\226\320\277\345 l\241\371\326\307\277\323\220\322\033\327\207\255\277\236\261\324\037\006_\312?vg\222\375\230\373\317?\024\303\274do\353\304?g\375\230\234\373\'\307?\267\'\'^\216\314\343?\327\362o<D\310\320\277\262\355\233\230\201\214\311?\222\342\353\204\372\n\310\277\316\270\272\255>h\267?vv\350\252/\001\324\277\374\2323BB\013\226\277\227\267v\344@\266\320\277\366\212]\221N\023\315?\222%\316\345a\374\324?\213k\2354\344\n\263\2775\372\207\343\257\377\321\277\312\243\033aQ\221\301\277\251U\022\336\300\022\277\277\036\371\203\201\347\336\304\277\360\2316-\302^\306\277\305\000\25249\347\276\277\314*\t\334\374\367\321?\020\377v\372\275$\275?V\333\207\233\327\201\320?\247\024\205\247\241\327\323\277\363 \271\014j\205\276\277\213\350\021\202\331\255\307\277\320\262\230\037R\350\247?\312\361T\321i\247\346?=\235\n< \036\313\277\312\"\207g\215\352\313\277>\310x\265Xa\307\2770$q\240\321\247\320?lf\004\206r\303\274?\312\306%\274t\373\241?s\350\260\237\036\013\240\277\317\341\272_\216\351\260\277\340\034C:\033v\310\277\3134\026$\350\365\322\277|\340\031#\310w\305?\267k\327\276_\320\332?.\263!b\367[\343?\252\241hyy\225\315?\032cqI\037\004\265?\270\225r\177t8\245\277\020\273\204}\032{\313?%ZU\243\025\347\314?\211U[h\3515\236\277\246\024l\n\001L\274\277\243\363\257\037A\365\302\277\374\035\212\002}\242\301?\254|C\237\227\343\320\277p\244\"\004\232>\316\277\005\3220B\231\302\326\277E\tX}>b\225?s\005F$+\273\311?\361\340\037\235WH\315\277\213Q\225\276)\017\325\277\346z\224w\371\311}?\311\265x\343j\205\334? \234\313\344\006\211\300?~d\245\017~^\256?\026\001\256a\017\270\250?\277\024X\337D\035\302?\233\351\271\340g7\312\2775M\257\377\000\214\335\2778\275I\333\021\261\262\277\033\335Z\211\355\254\276?0\023$:\364\253\300\277\030\013\236\235g\307\302?\217\327\315\326\013\017\343?I\340(\334\237\311\312?W\255\257\"ag\303?\374W\322a\360v\325?\001\026\335\240\024\262\257?Uka\026\3329\314?!\254\347 \277\351\311\277$\362\372\037\242\t\322\277\352\277Z\367\207\224\311\277\231h\021\003\275m\246\277\362\310\243D\340\202\314\277\026\300\326\235\325\237\316?/\356\016B\243h\315?\315W\311\307\356\002\307?X\333\034\000\324A\322\277\363\2240.\260\242\326?\350\256\231:\227{\306?\317=5\250Gd\334?\221\3774{\301\243\322\277`V\213\374\270\205\323\277h%\255\370\206\302\243\277f\014\234\001hs\314\277\221p\020c\210\322\304\277\361\334\326qW\n\314\277\031\320\342\367\374Q\240\277\032\307\304\275d)\305\277d\377\300E\274\257\317\277&N\214\273\261\277d\2777\362\'\307\360\032\307?\353\354\\\377K\245\324?\364\355\217\275\377\213\320\277\332A4\331\220\226\220\277q\240\023\204#\357\324\277^\251>\302\366\024\351?\262\"\223!\001\002\301\277\365\220\337\221g\315\332?p\317\024\266v\r\310?\264\376;G\211\202\307\277\256\300\210de\207\327\277E\265\014a\312\372\276?\360\346\026b\310}i?\0035)\303\300\314\325\277\327\312:\322\317\212\323?\205\361\rd\301\355\301\2770s.\2039\223\310?\214\204\266\234K\361\340?\264\361y(~J\311?\234\237Ec\253S\324\277D\357;#\235C\334\277\362X\267jli\312?\003a# \221|\321?\361r\350_X\037\305\2771\035\337\203|u\302?\263\225\227\374O~\311\277M\307\265\004\215\227\321\277\321\331\270\264\320\204\252\277\021\243JAu{\333?f\321\246\260sO\271\277\351\306&\277f\265\313\277\363;\352;\001E\326\277\376c\337\0352\310\316\277\327\026\\{\270\007\331?\366\303|7\345#\305?\255\2368%\305l\301?\024\035M\036\344/\303?\254\244\272%\336&\302?F\201x<\261\367\316?\3575F\3437\242\300\277\235\204\220\373oH\321\277\0036\020`\313\n\326\277\233\207\270\336\333Y\327\277\324N\244f\325\010\301\277v\374\366\371\030A\301?\030m\237\237\363D\345?\303A\245\276\352P\313\277K>\227%\021\314\302?\010\322 `\010\224\310?]q\355\033\312\226\303?\271\030\003\3538~\321\277\301\031_(\036\037\275\2778\232Qc\252\257\255?\372(\002 \027j\307\277\253)E\002x\321\310\277\335~\267H\363*\305\277\n*\354\232w\271\324\277\357\010\237\224\346\342\265?b|=\004\372)\332?|<>k\310\211\314?\365\311\3767\376]\312\277\256\023\362\234\210\331\323?\212oj\230\210\324\316?V\244>\240\236\204\334?$\031\244\246~Z\316?\335\316q?\266\335j?\021\243JAu{\337\277\337\212\243\366KY\317\277\0050\017\340\307\255\230?\360fO\372)+\302?\214u`\357\264+\340?hJ\343\376\300(\322?6O\277U\350\315\335?\270\005l\203\352\321\304\277\313%~Z\177*\311\277\0239\022\242[3\311\277tz\275\177\034b\323\277,\010\314\340{A\314\277=\271\246@fg\330?\235\234F\377p|\301\2776\227U\267\376\006\315?\347:\t|\260\322\302?\376\227\316\373\275\034\246\277U\233(\327N\363\306\2771\\\302F\376\005\316?\203\301\303!\014\035\250\277_4\267\204t\337\316\277g;~&\375\350\234?u\200X\035\326g\322\277\001\n?\202,\365\350?\346Q\3647\326\002\225\277G\020\201\377\272\216\240?\261\225\247\336\340,\301\277w\354\261>/&\316?\252\242\323N(\237\301\277&1\020\035e\361\311\277\227\271+\201\265f\307?9q\365@\204\350\233\277\332\001\266\007J\237\315\277\202\030\317=wD\324\277&\312\030\376W\306\330?\033\247[Uz\226\314?@\301\305\212\032\314\326\277\004\365\230\016\276\254\277\277\375\006Xq\313\303\272\277\311\204g[0\345\306?8) {*\230\212?\217O\351\334\304{\334?\265\247&\271\252\211\315?(\367u\277\216\250\334?\\\376d\010\327\016\316?\207j\255\334\311o\320\277\334h|6\335x\310\277\240<\207\215\r8\305\277\237\307\254\007a\250\263?D\232\004\261du\264?s(P\177N%\272?\377\366+S\202\264\264?\215r\274D\355\345\322\277\027\205\331\333\230\344\305\277\306E\377\025C\203\340?\263&\026\370\212n\340?]\241\264\334>P\326?\200z\267\242b\326\312?\241\364\350\272\256\'\331\277\"\224\357\000\354/\237?b\362\253\336\206=\320\277\357\372\263\274\376f\320\277D?K>\023m\316\277U\212\272b\210\224\302\277\242i\201$\211\261\206?]\331\313\327\341\277\316\277f\303A\022[\031\207\277b\201\361\004\2511\313?\306\320^; \342\322\277Wzm6Vb\305\277\nR\204/\247\337\324\277C)\357\035\024\030\261?s\027\274C\345:\326\277\224\200^\331\201\312\312\277^\217WZ%\334\300\277\022\217\037\205FK\346?\315Q\354\rcw\324?\010-V\232\265\020\317\277\006\364\200\2019\335\332?\252!\026\3262>\316\277&\275\230\373\036\324\272\277L\212\001\245\260q\234?\244\272\210\010bM\312?\301\350,\222\372\333\273\277l@B\234\240\360\327\277\272\365\334:\346Y\301\277\231\272m\3272\266\260?\321\035H\007\271E\311?\022\325G\037t\202\275?n\261\221\332z<\334\277+;\026>\317]\315\277\306\307\037\363\236V\277?{xd\346\341\210\262?\245\223\266\002T\302\343?6\376\206\201\225\240\344?\307Qo\374?}\321\277\006\271\356Z\000\242\330\277\215_\374]m\377\323\277V\214F\200\313\n\320\277I\377\201(N$\310?g\020z\221d\261\275\277e\213\341@\001A\272\2771\026\270\002+\003\325\277\314~\335\351\316\023\331?V\253\002\3674\016\311?\333\374\006\300T@\247?\244\304\215\337\004\364\314\277\2675u`1Q\275?\266\253\343:\276$\315?H\201\r\241\255\367\312\277l\311OO\304G\326\277\2747+Gm\207\273?\357#\257\265\224\177\303?\323.\307\247\327\230\300?\376\223\246\336\246\201\254\2770\377tE!0\314\277\364P\333\206Q\020\321?\366\362\330\"\253\323\314\277\020\003\203\302\245\005\240\277\230\322e\367\005p\310\277\313\"=\332r\215\314?\0168df\023\236\304\277\251T\344k*\346\251?Vn\232%\236?\313\277WZF\352=\025\347\277\225bG\343P\277\313\277\246\342\357\254\027\"\261\277\334\303\024\233E\236\322\277\037\033\026\335Y?\314\277\3545w\323\261s\270\277-\375S\303\3419\324\277\275\274\347]HI\342\277\373\332DwZ\310\320?\201x]\277`7\345?\350\304\360\241\334g\273?\257G]Bp\"\305?\305Eb@\376\353\317\277\003\207\202\337\247\246\311?\202\311\215\"k\215\343?\246\267`%\366;\310\277\177\367\361D\316\312\306\277\266P\215\362\'\205\331\277jR\260\334P\305}?\301x\037\252\235\037\314?L\336\337$\366\236\320\277z_\225\302u\251~?\020A\264\332\354\335\324\277\026\334\315[\216:\301?\210V\335\331\r\021\300?\263\265\235:\177\250\304?S\342\276\376\271\242\306\277\263\344;B\027\236\304?C\016\337\374e\373\322\277y<\261w\024\241\307?\377b\021\036\310\325\300?\257\312*\021ME\312?.\024\331\234\275\222\312\277%\033\257C\2543\256?\334\314\026\200\256\314\270\277\376qo<\247\362\322\277\334\264\000\n\201\236\311?_\276\023\270\027\306\231\277$\233\253\3469\"\327\277A\'\245\034\243\247\304?\277\3213b\013\346\315\277G\355U\226\256\001\312\277\177\026\275\346d\310\226\277\211\254=\005#\243\324\277\200\200\224\\\356\341\301?\222\r\377D\300\374\311?\265\254\024e\343\177\312\277\001\264Z\036sw\322\277\312\337{\207\364>\310\277X\345\204\0012\221\307\277\265x\251\277\3736\320?\326\365v\021\3076\220?\034D))\311\035\302?s\232\313.\224#\261\277c|V\241\2325\330?\264R\214\034\267R\324\277v\274M\250uU\306\277Q\310\r@\034\204\266\277\222O\331\3723M\333?\032\'\317\006\252\220\316?(B\013\205\337\270\321\277\214lc\303\005\346\327?\341dUc\215\243\247?\345RK)\236\351\315\277\024x\'\237\036\333\314?\353\223\365\376\263$\303\277\331\243\005\242\006W\301\277\023\227\210\\\025M\251\277\223d%\377\366i\306?&\037\026\305\006\246\330?%e\244A~t\310\277\tPt\331\277\035\260?\255O{B]\301\306?CSv\372A]\322\277F\264>a`\210\310\277\225i\333\000\321k\246?\222n\0219\371\004\313\277\301\215H\237L_\250?N)\320\243\271\200\310\277\274\330(\251\033\301\312?H\327u=\013!\260?g1\014\263+\010\322?\371\006\010\341/8\241?\236TE\002W\303\337?(-\330\035\275\'\312?\001\311\317\241g\016\312\277\233\242mF\027\345\311\277\002\201kz\222l\310?\024$\327\311\360\n\302\277\302\260\221^\263\340\313\277Y3\317\235\242[\321\277\000I\340(\334\237\305?TC4\035\256\223\321?\rc\373^}\233\323\277\t\215\036\307(2\306?\007\316\031Q\332\033\303\277\376s\342\274I\035\321\277s2\212H\301\221\316\277\237;\003\033\276\"\303?L\370\347\232\260\232\254\277k\317\321O\335\201\326\277n\374&\240\313\014\330\277z\207\367\366\220\353d\277+\231\357\"D\340\330?\2013\306\301\204U\322?\221ZQ\030\316\224\305\277\232\215|\373\306Y\323\277NZ<\345f\362\306?O\267&\274\210_\327\277\367sm\034oz\302\277\357<\361\234-\240\323?M*\236\243#s\312?H\322\301<\\\331\310? x!\302d\317\345?\020k;\267\032#\327\277\317l6\332\232\302\307\277\314\373\017\033\362p\301?\361\373\355\2413\237\324\277\002ze\007*\235\303\277\2049\017a\333&\312?X\305~\303\002\247\320?\\I~\006\314*\225\277\313\222\214\336\241\217\313\277\254\206\016\313\260\033\332?e\177\311[\350\251\321\277Y\357\303\203^\346\322\277\241\3131\337\025O\256?c\316\330<\263\t\326\277\264\022\275\003q[\257?\203\272\355\347\271*\266?#_\256\352Q]\312\277.\206Y\005\275\271\320\277\003P9\344ni\331?\235\332\370\227\315\261\303\277\270b\230v\336\204\311?\374\344\346#B\306\321\277A\201V\344\000\017\313\277k\024\253i\213)\307?xq\217c\363\212\312?\336\007{n\374d\331?\341\'\314\203\r\262\275?$\036\232\303\377\'\327?B\226\005\023\177\024\322?\266B?\360\204\240\272?=\230&\002[y\245?\243\201/\267A\016\263?\252\010\334_\3424\305\277\315;-\303\250\271\302?\317(D]\367\230\245?V\220n\235\342%\321\277\200\365\227a\314+\330?\330\250\373\276\207d\300\277\230p\205\003c\365\313\277H\003\262\266\255V\255?\231\202\351?a\014\225?\372\000\356\303\213O\337?y\277X\177N\270\252?$\313\017}\363r\314?\025h^\253\2204\263?\264\357\345\231\362|\316?\241\317.|\320\265\323\277\207d\320\">$\324\277\206:\375\267\312\307\223\277\374\343\275jeB\322\277\035\302\337\314;\220\251? \254\020\240\360#\333?\242\035`{\240\364\304\277\332N!x\370\302\317\277\031\376\304\342\346=\252?\311-\030\"\310\275\311\277\332^\003\t\'\365\306\2779\356\224\016\326\177\323\277\374AvA\361\241\303\277e\353\360B\000\021\306\277=\2552}\265\266g\277\333)g9\032Q\325?\247|\245\177\213F\310\277\003\277\231\332J\026\306\277k\221\376\250\227)\330\277T5b\342f#\316\277\033\300\225\313\312\037\272?\311\333[\333%\273\340?\351\016 K8W\255\277\223\355\225\334\325\251\331?\332m\376\374J\351\325\277E\257P\265\'\022\304\277\'\307SE\247\335\331?\036\272E\005\363|\306\277(\277\034\250\031\363\302?\260;\037\226\264\177\316?Q\337\317|\020\372\277\277\317X\352\017\203\257\306?$rM\303\350`\331?\346\364H\305\367\254\323\277\363\322\274\377iL\262\277\303j@ET/\237?\343\307\024\203\362\004\257\277\323\330^\013z\357\320\277&\251\230\277LX\240\277g\276\377f\224\364\315\2776\031<\351\320+\316\277P\216\237\031\006$\244\277\336\363\262\334\210\335\307\277\370a1\250>)\317\277\036`{\240\364\211\305\277\306\327\205\274qT\323\277\n1\362\r\340\210\314?>\241\256 \223-\334\277\257\305\331:Yf\307\277\204\003)\312\010\034\315?\200\0136\236\235F\317\277\2417\313\033\026\231\330?W4\0109\020\016\303?F\265g\032=L\316\277\361\027\212\246y\350\261?\256\353\233$+\371\304?\372\003\212\375\n\236\354?c\221\rAa\222\310\277\010\272\213j\360\302\315\277\210\256v\332;\037\304\277\020\034\237\342\233\032\313\277h\314Ojb\223\202?\\\323\325\200\265(\320?\244\3672\366\312\341\306?!\321\035\'\371O\314?8h\257>\036\372\314\277\300\362\367\275\023T\304?\n\021p\010U\352\323\277\311\256\223~\353\330\304\277\255\023\033\034\272\023\331\277\227`H\271\301q\311\277\2508\016\274Z.\323\277R\232\017\000\003\236\327?\252\006\'\303mD\320\277\313\023\010;\305*\315?\334R\275\353\";\301?\337\261\257\247\343R\310\277c\371\312\356\217\030\245?U\334\270\305\374\334\262?\006>P\270h\022\324\277\003xM@\372C\313?\301\020\360\246\206\366\200?\364\342\202;iD\314\277\331>\005<@\342\321\277\277\273t\027Q\250\306\277\022\037\216dEC\303?\311\335\020x\232\253\301\277\216\330\274\344^\344\322\277\025\217\322?\235\377\250\277\367\360<#\327\356\322\277nIq\002\221\215\322\277\362\364\245\022\371\t\343?\364\tn\336\027\033\241?h\241\360\033WJ\323\277$SO0\255\227\336?A\310\344\232#\'\313?*\205\006\203\347\265\333\277x\327\023<\t\025\302\277\200\237/\305n\202\321?WPb!\204\221\313\277#Lr<v\202\306?\022\255\313\337s\026\354?/\251\017aR5\266?O\030\336\366N\026\224\277\273t\274\2275\020\317\277G?T\371\"\312\310\277\036\261/<\243\353\332?\007\203\245\231r.\314\2776w\221\225\241\242\305\277\235\264W\274\344\001\321\277\212\355\213\327\376\306\262?!\203\211\375m\250\325\277\020\330I;=\010\320\277\363\253{\\\002\215\272?g\206\205A6\334\326\277\nx\200\304\002!\314?\003,M\245\372i\331\277\031\005\034\235N\315\332?\024\273K\034X\022\270\277U@NV\024\310\317?\026\264=8\247\253\304\277\346\377\227c`\272\337\277\355\207\257\341\257j\332\277\371\274\301\233^\367\254\277\355Mg\202<\026\275\277`\306\332\000\350\007\323\277\252W\035{\356k\336?_}<\364\335\355\343?"
      }
    }
  }
}
node {
  name: "normalize_element/component_28"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "$<\353d\272!\326?=\211\235c\037\350\300\277\n\370\363u2\233\305\277\353\324\350\027\035w\315\277]nQ\342J(\313?)\"&U\2311\266\277m\005\207\3665\273\304\277\222\r\377D\300\274\321?\240\214\361a\366\262\321?\032\242\n\177\2067\324?\370\327<X\020\224\314\277\256\304\260\201|\"\306\277\361\312?D\264\347\322\277V\307\236\373z\227\322?\220\355\245\276f\230\302\277:\351}\343kO\321\277.UC\304\310\360\220\277\354\027\252j\233\305\313\277\366\375i\335\345\246\300?\234\010\260\002[)\322\277\204x\311\244+}\315\277\204O\357\271~\007\304\277-I\226z\263\331\310\277\300\247\203\006\254f\324\277q0\304\177\364\254\316\277C\001\035\336ZC\321\277\211\376\330=\334\202\312\277\367\275\227\014\021\201\325\277*A\332Z\272]\300\277\307\300\225G\222{\321\277}L\362\303\013\231\245\277\347E\273D\324\310\311\277N\353\272\340\241\342\322\277\215;\316\002\'\272\313\277TXFv\347\201\310\277X7\203d\246\331\306\277\016\0168CXj\320\277=\345E\344\303\205\320\277\306\330lY|\022\251\2770\352\305\026\243\252\316?\020\255W\211`\271\276\277\032\340\243zB!\322\277#h\212\010\030\300\306\277\201\3112i\370\273\322\277\027<\226\210\001\\\320\277\2657\370\302d\252\331?=\254\242\005\211i\314\277\023\350\033\352\332\213\242\277#\005\201[\230\201\305\277:\227=d%A\266\277l8\362ar\372\311\277\252\014\004}\371\317\307\277X$\201aTm\325?\262\024\207;0#\321\277\322.\256\n7\215\316\277\224\005\002S\274\000\325?\244^d\300a\373\320?\356\201o\375h\366\323?\216)\016VR]\323\277\204a\341\240\224{\301\277\274\252\026\205\033\370\320?\037dY0\361G\306\277\317Sx+\246-\310\277\2607\265\\\313\236\324?6\202\001B\363R\320\277\323\212\312\341\356\207\276\277\305\023\213)\242\360\317\277J\210f\\@\001\323\2770\307\237fP\206\273\277\010X\212hd%\316?\313\333\021N\013^\306\277&KR>\251\233\332\277D\342y\004\222\013\277\277\321\310\214\\\334\253\321\277y*\226\021\315r\320?\020\337p\274\216\372\315\277+\266r\304\224\'\314\277\213\342\260\217\251\026\314\277M\230Y\031\307\'\301\277\264\017h\237}\033\321?\275f\177\301\352\237\303\277\316\264\263\236\0200\322\277N~\254\\\177}\266\277\307\221Zj\265n\307\2777#\030AB\230\275\277\217\317}\234\335\330\325\277e\031\342X\027\267\263?5?\243\0310\355\315?\276x\365\340\244\237\306\277\222v\304\235\342\243\311\277\303\313_c\2177\316\277CH\314\242f\376\314\277\311\323\250v<\034\310?\261\244\334}\216\317\327?\272\342=bO\026\325?\022\361{@E\372\322\277`\234\256\335,\324\326?4\375\n\200\216\"\327\2774\033\032\005w\326\311\277e\301if\322K\314\277\330\227\021\203e\221\326?)\313\020\307\272\270\317\277\331\177\225*\356\313\302\277\3113\365\333SI\322?\014\332XG]\004\311\277\252.};\313$\325\277c\332\016x&U\313\277mBs\000qU\320\277j\002=\273\031\301\305?\005&\201\027\307\222\321?\375\235\263&\222\277\316\277\222\013\347}\220\243\327?\334\243\365\277u(\311\277\343!c \225\003\317\277\033\016\215\037\021\360\307\277OG:\342\024F\241\277\027\217\275\244R\350\326?\023a\344\341\024\010\306\2776sHj\241\344\323\277\316L\325\342\370\306\305\277\2545\326\366].\312?\207[6!J\007\275\2774UI\307I\237\307\2777\347\\a,\031\321\277\212\212\335\343\361Y\330?\211\225U\001\214\241\311\277\323\255\317\203XI\322\277d\214\325\007\016?\312\277\262\2728\236\215\344\314?\230\204M\225\326\374\312\277\363`b^\r\361\322?\364\262\036\245\257\263\325\277\225\374\241\374Q\222\263?\215G\004>\232\205\320\277\214\302\211C\221\311\323?\0328={po\312\277\247\205\201\235Q\251\320\277\013\036\317\374\244\271\320\277\264\314\001\006r\036\267\277\'@\240u\205\245\303?\376\254C\177\262\363\262\277Z;\233\237,\306\307\277\321M\356\271D\334\311\277\236L\365\307(\r\304\277+\325\354\036,%\320\277\020\203\361\272\033\027\316\277\235\275\361\275\330^\315\277R\003\223<S\277\270?&-i\200c\263\260\277\342\351\266\300\365\023\315\277\213[\375\277\207^\325\277tqe\232\372\212\300\277\214\332\232\000\005\217\316\277\260\260;83U\271\277\366F\214\"\224\014\317\277\332Ta\\?7\324\277$^\277\334\376G\325?\002:\335\303o\024\323\277K]\021\200\250I\324\277\313\2541*\241\242\310\277\305\350V[\363\033\322\277E\240\270\353\276\306\261\277\204\345\031E \250\323\277\333\3577wG\210\305\277Q\034\233xb\261\321\277\327\n\201\371\267\215\312\277\326\021\321\371:\272\321\277-C\373\334\371\023\322\277\030\257\232cPX\315\277\026\3746\304x\315\304\277\310\346O\300\033w\320?A\022Q\247\227\363\313\277\254\366\227zi\314\314\277g\350\206C\3029\302\277QC\002\343l|\260\277\305\2626\031\227\242\303\277w\341b\240\306\330\320\277\324\362\301:\247<\323\277hi\331 \264\032\314?\274vi\303a)\323\277\313\222J\302\317I\324?\013\363\273<\337G\300\277\225\315$\003\243?\331?\376U\221\033\217c\302\277\202\360\025\233^\373\316?\237\250S\273\262M\304\277\034\3156\334\3544\312\277*a\\`E\274\322\277\226\302\315\363\361\032\327?\305t\3379\255>\311?\001\265b\311f\330\316\277e\233\247|\0009\320?\240\356\321U\231-\311\277\355\241\226I\201\303\303\277&\212\363\344Xf\325\277w\327\372\236h\t\273\277\3435\022\025h\177\265\277\345\264\247\344\234X\314?\0131\321\377\366\345\320?\345ta\275\264U\327?\304\244\t%\335\340\320\277|\324>\241\307\275\322\277\310\350\302@\276a\323?\271\007[\313\350p\273\277fA0`,\300\321\277-wf\202\341\034\324\277\303i\264a\274\002\227\277-\341\267\276\233\360\321\277C[\214\211\346d\272\277\261\255\270\233Tr\315?T\350\325c\317\\\315\277\324\372t\237\220\333\327?.&p\312`5\310\277f\262\311+!i\305\277\260O\204\375l\036\321\277\014\004\340#\213I\301\277\343\333`M\n\030\322?Rj\212[`j\302\277\035\303\306iF\216\310\277\3422v\333\350\020\312\277\037\355f\343\024\237\325?_\333\025\331R0\246\277\214b^\354b?\316?\251\214\230<\022\255\323\277\225@\020AQ0\316?!]*>W\376\324?1,\230[\316c\307?\304\220b\241R\374\324\277c\315\257\203\326\005\306\277 \213#\305\266\373\324??g=B\356\036\314?\001\033\255\366\362\263\302\277/N[\247\272\025\311\277\005}\361^\030\235\321?=x\365C\317\332\307\277s*\303\377\360\317\241\277\"\347S\200U\031\277\277\217\202\257\001t\214\303?\256\322@\240\361\314\324?\007\316|{\225\004\315\277\317\3440\322j\314\260\277`\370\220\t[\340\313\277!\360\331\235b\223\307\2773\010\203\235(\252\323\277\017\346<\204m\233\314\277\203m@[9A\330\277\353z\232zz\370\315\277\t\347\256\200\235\366\320\277k\221@\305i\357\307\277\333;\376f\275s\314?\350\373%\271.\302\313?+\022\023\324\360-\311?\317\"F\225\202j\312\277\215\310=~\353\232\320\277,\217\003\351A\305\306\277\304\337\376u\321\004\266\277\353\215Za\372\336\316\277\020\312\240\177\'\322\322?\361\312?D\264\247\322\277\013\232\267f\0020\302\277+o\201\343\266\246\305\277\352\245R\201\315\030\325?\250\001\336]\302|\324?8\2565JMq\322\277\000x]\"\213\362\302\277T&\305_D\357\261?\220<c\241\316C\315\277\222\024\242\215mc\315\277\303\241u\\\246\211\316\277\3616%\017\372\210\325?\027QM(\310x\307\277\201\230\337\304\353\225\323\277\306\002W`e\300\314\277\'\334\310\310\233\364\306?\371,\317\203\273s\321?\330\334\352\234\023\271\327?%\203P\234\253\177\326\277\226h\240d8?\317\2772.f\225\343\337\315\277\r\372\363\351\210.\314\2778\251`;\265F\325\277\367J\017\371\035\371\310?*8\274 \"5\307\277\324\351\'9\263\237\304\277\351\260\210\202\225\032\320?\346^\002\345&\322\230?\325\0350\264\337\177\322\277$~\346(\027\225\276\277\022?1x\271\204\307\277hRTG\330\001\302\277^O\317\026k\223\314?;\304\242\226\244:\312?\263mb\222\333@\301\277>\017\007l{y\276\277\271}Em\321\270\320\277\240\237\322V_<\306\277\376\304\226X\370\376\314\277\364\031q}/p\336\277lT\320\202\212\t\324?\006\3743\346\"|\304\277\363\325ec\353\272\306\277\246R\036\243]\201\316\277\373\323\302<\226\004\315\277\262\336$\335\001d\326?\207\244\232\202\3122\306\277\036\247\246,\\\271\271\277Q\313\244\300\341\t\301\277[\352\244\347\253\236\300\277\272:o\177\010S\277\277.(\302<\032\275\315\277\356\251\305u\306V\310?;\272\031\207]\010\316?\260\326?>\327-\321?\253sN\3440\265\325?r\\\031\2267\356\314?\211\215`\200\320\274\324\277\370\244U%x\240\327\277\023X\010\304N\245\320\277\\(.\001\327\031\322\277\004sW#y6\321\277(\010`\373\260\373\306\277\306!\321\272\374=\313?\271\245z\327Ev\300\277o\317\034\'\277$\310\277W<7eUa\324?\225m\032\272]\330\314\2771\036JY+\177\324?\323;\313\342\264\326\325\277\351\336\334\302g)\327\2772\303(\003e%\240\277\342\'\'=\200\203\320?\253\202(\312kF\305?k\201\034\030i\367\313\277D\014C\375\221\326\322\277\007\002*=O\223\306\277\332\020\232_\370\201\250?\002\\\332\272\3454\315\277\275\276{\354\323\026\335?\260\261\205\377\370;\317?t\313\026bXr\323\277\265\217\323\337d~\273\277\025\361k^\264K\314\277[iJ\231q\246\307\277v\333\307\002\r\223\324\277\2370\264|U\025\322\277\321w\226\244[\304\320\277\375Y\240\233\005\363\322\277\372.\332 \351\214\261\277\005\235\265\200u\301\320?\356\226\201V\242d\317\277\370\334l \033\320\321\277bRS\375\020\274\300\277ap\315\035\375o\320?w\205\374;\364@\320?}\257\204b\351K\314\277\315\024\347f\207\221\302\277f\325\255\277\241\307\271\277I6\262\206\346\225\326\277|\334\216\333\365s\317\277\203u\261\243P\232\320?\035\330;\355:\345\331\277\355o\2772%\310\322?\251\201\315\326M\353\306\277c\016\202\216V\265\323?\177\027S<pF\306\277\213\016\222O\331\372\321\277\215\347\\\037\020\307\305\277\376\003\271\177\275\246\273\277\252\224\246Zn\235\320\277\327\322\253\032\347c\320\277\034\316\241\261\233\276\327?\003\200\000\245\343b\314\277\030\002F\270Ep\313\277\225\320\300<\"\256\320?Z&&\0348o\321\277U\217\0139|\363\315\277\363~q\343\365d\314\277\341\323\030\204$y\305\277x\203\201J\t\177\315\277\324XN\204\005^\313\277\243|\336\340M/\317\277\252\301n\267\250?\303\277\367\234\211#\356\265\330?\226\233E{\376,\314\277\241J\315\036h\005\324\277\244Na!Jf\305\277\006\2728\"\306\010\302\277D\330\266I\301*\306\277\021\r\234}/O\313\277 \203\r6\022t\314?\033&\277\352m\330\313?\032.\366\207\373\002\312\277\257z\002Y6\020\274\277\211\277\036\372\213\254\314\277\362\331t\343a\312\314\277o\234\230\036\342\331\322?\304\314\343\325\336\314\322\277\020\022\324\266\202\242\306?B\031\025\376-}\323?\371\215\206\276\201j\321?.T\376\265\274r\316\277v\267\333\303\230\323\306\277\246p\261`\352\200\300?\226K\231\212Cl\321?b\261\270\305\035\353\303\277\334}\257\235\377\211\327\277\223\337\303\241\216\371\265\277X\311\246\340\031\002\317?\230\201o?\205H\317\277A(\357\343hN\325?l\210\277`\026\336\320\277\010g\340\025\373\252\272\277\211\306E{\335\036\333\277\370l\200F\2476\313\2776\310\250[\013\355\316?1\323\325\241\303\021\303?\212\252\343!!\204\314?=3w\343\223\304\320?\256\025\nd\270\262\324\277\276\025h\373\200U\317\277\261x\177\366\002\267\316?\235\027\202wM\243\324?\202\016g<\031\365\324?\335\201\225\236D_\306\277k\314\261\335\271\007\330?\272\0043\350|_\275\277\345\215\335O\327$\317?k\320\372\010\272E\316?7\0372@\375\302\304\277\267\\`\003\340\247\323?\366X\002BN\314\320\277\201\335\372\372k\303\322\277\017\276\254`\206\214\316?\216}\342c$\271\325?\260\275\375V>\215\300?\371\030\346\343^\t\322\277\365i\221\304\375\r\277\277\342\357\315%\013N\311\277#\356\271e\352\"\313\277\374\'M\275M\003\317?\275\342F\035_\263\324\277R\273>\367\016L\302\277W\027C{\355\000\322?kZ\224\237u\211\317?\320LjG\365\306\306\277\236\227\314\251Kc\313\277\210\375\330\0031\371\315?\017ll\341?~\325?\327V\344\276r\320\323\277R y\010_o\301\277vJ\017\\H\264\312\277\374\026!eY\352\301\277\376#x\350`\242\314?\010\377Cv\265G\314\277ce\023\344\220\"\317\277\252q%\361\250g\320?\211\255$\242-!\314\277\017\306\035\251\235\345\315\277\243Y\227\"\022\350\303\277i\000o\201\004\005\323?\367cj}W\245\314\277\263\333_$Q{\332?UN\030 \023!\304\277\365\033?\267D\354\314?m\006v\004\211P\324?\270\022p\276\307\317\320\277y\267h\267L<\320?r\211#\017D\226\326?\326a\032\300:\022\333?\034?\371`\276a\310\277\314Y\247\343\224\355\324\277\220^\036|r^\322\277\023\317];\346\366\303\277\324h\315\352x\'\316\277\200\212W\027\277B\305\277){\246\362\321=\324\277Tw\300\320~\377\315\277C\262\333\302N\014\320\277\3424\216\242\030*\327?\\s\252)\207\236\305\277]\315S\200\234\256\322\277\rL\023[\346\231\316\277\006\254\352\037#$\277\277\213\212\366\200\222e\320?\352<ga\010f\276\277\350w\314\006\272r\301\277X]\240\007\353=\316\277\200\266z\363\300l\313\277\307\031\375G*|\312\277\226\215s@\267\374\324?^]\272\356R\217\304?a\370-\337\237w\322\277\033\215\021\303\355T\322\277\343\271\010\235!\346\312\277)\302U\267\335x\312\277\242\2647\370\302\344\331\277\343m\245\327f\343\321\277\247\010\354As\343\301\277,\262\245`\360\335\307??\201\003\234\326\024\320?\211\0352\212\212\335\307\277)\217U\347\2449\301\277\0140\301\343\272\255\307?\004N\235\344\232\304\301\277W\322\304\032\262*\320?\034T\311\235%\n\323\277\312{\346\366\334\323\313\277}\337\350\370\242\034\305\277\"^\215\242\2750\315?(\230\265=\017(\320\277\260\333\261\"\264\257\317?\2236U\367\310\346\311\277\323\364\033\036\251[\311\277qdqA\256;\305\277I\251\235\304\224\306\323?\353\023\212\276\314\001\320\277\032\225\314\230\037\013\317\277\367.\357\2733\344\330\277@\262o\335\203\306\325?\376\311\010=\325\200\331\2779q\244\371\204\350\307\277\343HN\303CZ\322?Pl\211\205\357\267\312\277,Z\2515\007g\307\2773\205\224\300b\344\322?\364C:v/{\274\277sxs~\253\361\301\277\300\224\303\037,\200\312\277\204\365\034\3447\375\323?^\\\262C_\356\301\277514\t\244e\310\277\000\336\310]\000\361\314\277\317F\021\306\r\307\317\277\nIE\347%\224\307\277d\034\n<\203\310\320\277\233\312\303\276tE\327?\342x\231\274\\\337\320?\267)\232\3360\227\325?\313\004\221\177E\002\311\277T\375\214\003\226\371\307\277+\007i|\025O\303\277\3563x\251\"&\313\277\035l\373h\202r\313\277O\344\254\374\360;\322?$\343\203d\"\241\326\277d\202\361>T\273\322?\343\230\033\302\347\275\307\277\336\335oY*\024\314\277\273\224\302\325d:\300\277Q\352?)b\252\316?\347\326\326\025T\320\314\277\242vdQ}\014\325?\237\205\2205\033\022\314\277\271I\213\201\025\252\234\277|\226\255\026T+\317?\361\222\007;(\025\320\277\210\246G\256\366\213\323\277g\352}\374\010p\316\277\"B3\272I\255\317?\354S+\237\'\226\323\277a\342\217\242\316\334\276\277ld.\333\0240\324?K\311r\022J_\320?\376=>BIX\325\277n\266\301\242\205x\276\2776\350*a\226\013\321\2778s\274\300\264\301\315\2771\347\000^\362\001\316?\231hNf\325J\312\277\342\267|\177\336/\321?\250\324\2319,&\314\277_\177\022\237;A\321\277!\313a{V\347\313\2770T\3256\213\270\314\277u\255\275OU!\327\277?`\026\301\234\254\332\277\020tY\361\262\313\261?4\326\037\335\337\013\325\277\367\251\317z\235\371\321?\r\361Y\350\224\221\330?f\276\305\273\n\006\323\277M\003\263\000u\234\306\277\207\206\007\305=\263\321?\250\3556\3327\230\314\277F\300t\234\323\023\302\277\237\371\203\036\275\343\320?3\257\033\235\220\251\316?\320w\032\335\377O\314\277\342\032#\002\243\205\330?\021\\@\303\366\356\311\277\207N\360\311\232C\303\277\367\215T\204@\323\300\277\372\325\332\003\306\035\324?\213\324\203\233\357\324\306\277\327O\275=!\236\324\277>e\312\301K\364\277\277\221\353\t\277\222\263\330\277\260\024\260\272a\335\320?\207\307\270\301\324\277\312\277\"\237\374\202\202w\310\277\343%\356gg\207\312\277\2715L\341\377\026\322\277\023\335i!\267\225\316\2770\374\267\375\270\236\312\277q\226\253\202\305\237\310\277P\314\264\334\035\302\322\277\323\013\343\023W:\330?\326\"\036`\030v\324\277e\243\030\305\027\322\324?\031\274\267;\316\341\257\277\306\344\005\277\252\206\320\277\365\003h\245ZU\322\277\031\202-\300\210G\313\277\253$\323\035\233O\327\277\3641\243H\214X\314\277T\266\037[\\\004\325?\246Y\207@\201\271\320\277\236\232&\307\370\213\320\277?\034$D\371\202\307\277\020\202\206\345l\215\303\277\346c\365\035\377uH\277\256\335\321Z, \313?l\372\334\236Z\334\300?Z\247_\\\211D\323?\013\006\031\371\243E\315?0\317s\331\"\310\310\277\373\205\r\005\"z\310\277\222\004\300\374>\261\317\277\262F=D\243{\322?Y\260\"\335\256\033\323\277\361\376\354\005nv\312\277\200\033\367 \343\325\324?xRp\302\316^\327?M\013\003;\243\022\325\277\036\303c?\213\345\325\277\305p\032GQ\014\313\277\010\317\235\303)q\327\277Q\315\233y(\300\320\277&\022\022\212)\350\302?OOi\016ZY\314?8~M{\357\224\327\277\374\034\274\002\023\260\303\2778D`\325\356\021\316\277\016\361\366\275\331(\275\277\262k\265f\257g\307\277$[\300x\304\360\314?\036\314\375@\177\302\323\277^Q\245\301\310f\322\277\320\254\266\254\014\364\333?\324?t\200\341\016\277\277\222B8\352\021\270\310\277\302\023z\375I\374\323?\315!\210w\251&\301\277\313N\334}\320k\335\277\213\225E\037\3732\327?\217\220? \3516\322?\277\341\364\344Pu\316\277kq\031yQ\"\304\277$\"\302\340\026\203\320\277\264\346\205C\210\016\302\277\234\244}\234\376&\322?b\377+\341\277\257\324\277\237\002\303f>\357\314\277{;x\334\246\256\314\277\221\203+\003{\212\326?\333\353\n\241v\004\267\277\304\340\355\203$\232\263?\236T\003\346\204\375\314\277:\266a\276\003\326\274\277\310\2617)\263\336\312\277\230\002\251\177\326\035\305\277\036\033\036N\242V\275?\362\373H[\246p\317\277\266\327\345\010\327\253\302\277QMI\326\341\350\320?\215f\341\302\354+\311\277J\317\025!L<\304\277\351v\233\334\224\027\307\277\0329\245\341\257\240|?\266s\016\\\355z\324?\271\331\304nD\234\323?Q\351\026p\205f\327?M}\305\277t\377\276\277\321\210%\'\013F\310\277\246\211\014\345#-\307\277H\022J\200\026\242\321\277\246H\031\314\272\332\305\277\245\330\023U\2465\266\277}:?A9\274\320?\006\361\344G\272n\314\277\3458\001\227\021\250\322?\2042\246\303\267\356\313?\2313\323\244\261\t\324?E\212\267\2042C\320\277\003\250\261\326\263\224\312\277\307\344`x\035\330\314\277l\336\345\340\241\301\322\277\335\210\376;h\027\322\277\203>\211\266\000\300\316?\372B\310y\377\237\315\277n\"\206_\342v\324?\026Qn6\261\033\311\277\026\201\230!\341}\320\277\254\261\337n\244\307\315\277_\252\200\030t\204\314?\007\251g\203D\301\327\2774l\311\347kO\232\277\277\021Y{\nF\323\277,\244W^M9\320\277\301-\212\344L\217\324?u -\306\247\235\314?\201f\347\237\246\267\330\277{\220u\243U\316\320\277\333\336\013\037S\357\321\277\027Y\235b\366\256\325?#:\374\034\274\202\316\277\245\222\021\202\033\312\314\277\244\354\336\236\250\353\273\277\262\007\244\016<\010\276\277\307\024\213cM\372\271\277\326\261\245\242\014\260\323?\234\034\231\242\267\323\320\277\354y\314z\020\206\324\277\002?\221\304\036\334\321\277X5\316\3071\351\310?(\020U|l\340\323\277n\035V\227\327:\304?\257g!d\315\306\321\277\274\225FH\264\317\317?\'X\024]\264S\322\2771Z\252\177\316,\320\277\007\246h\037\nj\302\277\312\301\360:\260\326\316?\257\361\364\245\022y\307\277\214\316\'by\246{\277\302\241\330\206a\362\306?\357<\257\200[Z\323\277 \025\326\370\022\313\304?\277\363j\004\013u\311\277\265\340\003Co\224\323?\264\236\214\267\266\354\311\277\007T(\240\303\333\307?/\333N[#\202\327?+n\334b~\356\316?\264{\352?\010\024\327\277\236O\221\001\250{\321\277\225u\346\273\347\002\315?\022\330 \274\013\316\300\277\202\022nKG\255\256?"
      }
    }
  }
}
node {
  name: "normalize_element/component_29"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\276\342\200\310\350\241\313\277\177\271\334\201\266,\324\277q\377\323\005\243/\250\277\260\341L\300mu\333?\014~v\033/8\242?|\023\236+\245B\332\277;\374wuu\344\310?\tJ\331;\006\030\322?\0238\310\332\225\214\323?\266\332\201BV\032\277?\274\245(\331\342\201\300\277+\202\305\002\333\030\327\277/\001Sa\307\032\321\277\362\204w\034\263\352\320?B\006v%\2279\311\277\013\342\217\344\352\256\313?\216-W\201R[\323\277\342\261\372~\305\265\333\277\363\310@\032%\032\311\277\3347\311\037\244X\230\2770O\204`\227\331\276?V\013\221x\036\001\330\277p\357u\255\030\211\322\277=\251\243\241N\322\332?\360h*^A\247\265\277\201\357\032\032mZ\235\277\224\\\017pRb\336\277\223]\243\3042\246\327?8\322\276^\006\210\325\277|^T\377\3365\326?vH{\315\274&\341?:N];Ia\325\277M\272-\221\013\316\306?h\312\363\2055\272\325\277\206\235\265\035K\306\325\277G\246K\0300\365\317?\034\r\\\365\353\024\234?\342\274I\035.\003\335?\227\223\016\336p\202\311\277\206CFr\277d\271?\214\323s\177\263\034\306\277\277\200^\270sa\307?E\324\206\273ax\332?w\273^\232\"\300\227\277\260;\233]\020t\303?zX\342\340Vj\310\277\325\232b\345\002]\274\277\234T\217\217q \312?\242\200\2126\t\326\307\277\261\251Nbk\021\312\277\'\371\021\277b\r\316\277d\245\264\304\353v\332\277\204{LA\n`\306?\031\347\007_\2540\272?\013\235S\240\201\236\320?\177\217U\245\210\247\323?\033\304\336\366\312\335\261?\303Z\204{\310\010\320\277\334\244\334\\\200&\312?mD\244dA\272\326\277\232\302s\204F\217\326?\373\023\td~\007\327\277T\265ri\333\264\316\277a\262\310\341Y#\315\277ko\307\006\230\032\311?\024\356S]\331\350\331\277\305\327l\037\321\210\275?\347P+\361%\371\307?\003\262\225\237m\230\305\277A\306la\307\223\275?\026\203\013\242\203h\327\277\247\317\314\233\334\322\332?Z\216\302\273}R\300\277\024\355*\244\374d\335?\353\363br\264t\324?W\\\034\225\233\250\340\277\346{\200\315\275\260\270?\311\325<\005\310\351\307\277b[\222E\222\007\307?[\326X\035\224\313\322?\372u\216\236\2560\335\277\350 \340\367\0144\303?\036\205o\212\\*\312\277\346(z\277UG\311?\\^\261m\356;\277\277\347P\310\306j\220\272?5 )\277\230/\320\277\002o\365Z\330,\336?\341\031\300\235<\023\327\277&Pii\023\314\311\277qG\213u\242\213\314?H[\256\341\226\215\325\277*P0\010Q\343\313?B\316=\034\013\'\326?\212 ;`8\206\205?\262\22154\2574\323\277*\255\236\027\027\\\313?^\002\023_\275\357\213?{\333\351Z\275\273\336?_=\230[\364*\207?~\273x\201\212\021\335?9\3027\207J\247\304?H8\312M\026\357\240\277WC=\330\275p\315\277\353\215\234}\314$\305\277\243R\262\275\222\273\311?4\325\223\371G\337\324\277h\307p\351VW\317?\252\371d\244b\214\322?\032\205\352\007\361\330\316\277LQ\267~\275l\271?\031B\245|\316~\313\277\242\223\2149[\202\307\277\005\001*\003\244\t\320\2774\221\210\337\003*\327\277\266k\000>\221\312\333\277\376\211>\335Hr\320?\017\236\246\"Wb\344?\207\224\270\361\233\200\264?\365k\004E\2408\335\277\373Z\222a\3476a?\005*\312B\307P\330?\321;\272\266\\\242\306\277\313O\344(\304\314\311?\2174\227\237D\231\312\277H\036\200\273\211-\320\277\353\004\217\312\250\215\326\277/\031\246:\rf\330\277V\356G\202W\350\310?n\211}~\357\241\330\277\345\2546\234\205\377\306?WJ\t\240\234\221\253?wh7~\321\263\320\277\014GF\275\226F\272?\336\030\247\306\360\375\303?\305N>^\304\316\325\277m\237\300\001Nk\323\277`7\256wf\237\311?>\375\261Z\252\\\327\277\327-\206\233!\017\303?\275#\031(\337\"\330\277\tQ\276\240\205\004\311\277\000\t\334\035\306\242\321?\273Y(>\343\347\271\277\006\217%b\000\227\314?\'K\020\"\327\025\325\277aNT_+\333\303\277\014\335\364\200\334\362\301?\374\321&=\302_\323\277E\253(\230\020\367\275?\315\330D$\022^\320\277Z+\0349\271|\300\277\221\373\014^\252\210\272?\257\033\000\273\344I\321\277\323\214\252\376\277\354\255?[5\031\237\023\014\314?\027\177\272\005;\023\312??\022\274B\233s\304?Q\005\222f\342\214\315?m\265^>\037\206\333?i\261o\202\312S\304?n\334b~n(\322\277\364\025\244\031\213&\305\277&+\257*5\332\313\2777D\027\3777)\256\277l\353\351\033\177\177\332?\300\3348sY\026\324\277_\205\255<\365\006\311?\313\3022\221-\246\324\277\234i%!O\332\320?\371t\351\035vx\317\277\376\262 9>\177\301?{\267\036*2_\323?(\244N\243=\\\337?\202u\034?T:\341?\031\300B\203\240e\307\277h\005\370\001W\230\245?\237x\342\372\366\374\220\277\202S\243\200\202E\303?\273>\326\000cE\321\277\323ox\244n%\330?\263.$\026\347\336\307?\266\034\277\"\205S\311\277\237\033\273\300\274\262\322?\250g\213\265\tA\300?u7\364\273U<\327\277\253\332E\003>\340\330\277 6\242\305c\320\321?jZ\030\330\031\025\310\277jFU\377_\366\266?\035E\214\215/\220\303?\257D\177\354\036n\272\277\364{\363\377\320\352\277?s\333\031\001pG\306?O\263\233t\266\333\322\277\220\353\0210\333\312\254?\t,\312\266\035\344\340?\354f\360>ae\275?\325\325W6\367\200\263?\333\334\230\236\260D\311?X\330Z\377\261\207\223?\32229R\t\221\272?\305\336\356Y\225L\314\277\'\344\336W@\374\274?\037\221\000\177B\207\313?)\344\316u\257\315\225\277\307\006\373D\330O\331?5\211QBv\177\320?1GM\303\t/\324?\346\037\340\275a\252\257?R\220\351\032w\224\302?\223\034M\201\016k\307\277\306\312\201\201\224\326\326\277\026\303r\327T\016\316\277\367\247\032\336(\t\327?\0053\t\213H\034\262?K\245\247\341\276\202\323?\006$\205\245\306\363\225\277h\344w\303K*\320?|\020\300\325S\016\315\277\265; \340{\305\320?h(I2\0061\305??\257k\300\217\206\257?i\334E\337w\350\246?\"\210w\251\246^\301?\000@%\031\377\337\307\277\372\306\252\035\322c\247\277\375\010\226\377\235\250\207?_\231T\300\177\353\322\277\222%R\036\006\210\325?*\201\336e\320\032\321\277}2s?\257\221\327?\230\203f\370\313\376\316\277\205}\226B{\320\327\277!\260\017>\326D\327\277\265\277\026h5,\313?5\255\373d\030\371\333\277\t=\223\344V\224\306?\205\205#\340\301c\262?\2208;\204\267\250\322?:\020\006\\_=\326\277qrC|\365\253\320?|\245E\340\274v\331?\242\243\013\240\316K\321?\004#\212$\325\322\324?\013\225E\202%\256\332?\374H[\246p\316\323\277C\256\324\263 \024\320?\334n\274\032$m\330\277\360\344.\035\316\027\320\277<\203+E\227\\\302?{\317\263\037J0\276?\036\3767\202\226f\325?\r\364\273v\212\321\311?\033\355\237D\327\007\331\277I\3767a\210\275\300?e\r\254\035\244\253\333?[MlxY\227\307?\363\2240.\260\242\326?\026Zkb`\241\330?i\304Pw3\335\317\277\274\325\255}\205\365\312\2774c\227\311\354\003\311\277m\364\234\272\023h\265\277/\275\242\000\3666\323\277\2569Q\\\237\003\310\277\211\tj\370\026\326\257?\223\247\315\264\324\254\260?:wyB\310\\\316?5\277q\204\3228\315\277eK\177\304\351\003\300?\344\342\274\300+\320\255?\327\243.!8\221\262?\330%\221\032f*\307?\362O\374Z\217\351\326?u>\033=\247\356\271\277r\342>\201\226\377\253?\251(E\310\314G\274?S!\375z\256\204\307\277\353\3658\035\022\310\325?\253\025\3717`\276\311?H@\\\244\026\353\303?\354\241}\254\3407\324\277\3461\024\301I\244\325\277\344y\374 \303\221\314\277&\302\310\303)\020\266?i3\322{\370l\317?\305}y;\241\333\301\277d\337>@1\221\262?4`5;\367\303\337?5\260\227\236\227g\320\277^A`\006\337\213\301?i\252\013\236`\004\221\277\377\304\320\003\202-\331\277^=z\005\232\266\310?\t\217\323c\235\242\333\277*\271\324R\212g\300?t\254\234\007\301\364\310?\215B\324u\217\t\312?BT\247$g8\316\277\317x\317?\311v\320?z\261I\341\356j\275?\364\025(R/2\260?\267*&\302\310\303\310\277\"B\320\217\216\304\277?j_H\240$Q\320?\271\2507\037\256\007\265\277\373j\232\271\270\364\317?\342?Y\010\335\353\302\277\271g\002\352r\357\325\277\242\036\252Bf[\332?\237\323\3014\353\020\272?\217r0\233\000\303\302?/\372m\374G\256\302?\235K\016+\036\017\271?E\364\010\301\354V\333?\376\257B\343\354\312\303?\\\254\250\3014\014\316?\3403+>\262w\320\277\230U3\306\342\222\222\277\003\2349\177n\003\326?\317\013\325\237\215\364\266?}9\026\210\\x\305?\347\255W\344\031\354\326\277\277\221\253\036Q\235\321?\320\301\310\005Fb\302?\377\2562\307\260\222\313\277\354\031\367#\233d\245?\327\177\204\376\225W\331?\361\311\365|\356\200\305?P\214\217\303\036\"\332\277\373\242\327{\376o\247?\357Z\276\005D\316\313\277,\307\032\344\344\364\320\277\211\357\243\236.\240\312\277\267\261b\203H0\220?d\003\351b\323\312\300?\215\3405\236\276\024\322\277\337\212\243\366KY\317\277\215\231D\275\340S\302?-\'\035\274\341\004\274\277\363\235\353=\215\242\322\277d\3259i\216j\306\277\332\020o\337\233\315\325\277\331\314\306\357\022A\310?\346\031E \250d\304?\237P\323W%K\305?noOA\222\032\271?l\327[5\225f\304?V(\024\032o\310\265?b]\344\267K\217\316?\224\2149[\202\304\321?\030\3350\300\364,\317?#n\251\336uQ\323?\313\364\215\340-\255\272?o\257\365\332\246\327\320\277\221\261\177CM\231\327\277QMI\326\341\350\265?\236\245\032\254\356G\265?\312\rm\235\013\245\320\277\260,\342\205\276E\350\277c\370\035\375\016I\321?\230\321\331\023nC\325\277\362\325\247\177\275@\325?txJ\377y7\335?0@h^\212\202\314?\007\237\377\201\346\261\303?\233L\344\233\320\030\325\277\255\2058Z\376\021\311?\367\342QK\357\362\275?#\315\355\230\231\035\306\277\311\\S\377\244J\272?\211\311\002\303Ep\333\277OH\000q6\241\277?E\373/B>\211\320?\234!M\243f\333\322?]\352\265\023\004\023\240?\027\236v|\244V\325\277%d\326A\024\202\244?\022n\215c\177\264\325?G`\244\376\027\333\337\2779D?\307\005o\251\277\262\251g\377\013\035\266\277z\322x\330\372\330\273?\317\3750\2351\247\313?\276tj\231\322\033\276?@\241C\205\217\355\331\277\307\2277$A\372\325\277\320\327\207P\000 \324\277\351\035q?\025t\274?\005\216\302\375\231\344\325?H\206\027\242\025\250\276?\240h\005#\2023\303?W\021$\245\217\257\310\277\313:\322\317\212^\275?r\236Vvf\'\301?\004!\325\207`b\306?\351\312-\316\224\255\277?\325\362\332\327GH\314\277\223@{\334T0\311\277p\253I\205\3530\302?F\313\303:<\241\325\277o\265\220x`\035\315\277\215\250\232jw\331\301?\306\033\364\000qR\343?\2163\234\036S\370\242?~\315\213v\211\250\300?\256\036bI\332\t\270?\034\320\322\025l#\271\277\331%h\2334\360\312\277\246z\225)\244\004\271?\020\367\242\207\353\342\302?1\275\263,Nk\235?\3200\020_\201\303\312?^\201\004\237\310\216\274?\230C\275\246(\223\305?K\007\312\3613\303\271?T\007\365\004\364\010\320\277\002\331g\245{\343\304?\256/\320\275\240(\331?9\377\002\203\234\336\265?\256C\332k\3465\315\277\221|%\220\022\273\304?)\334~;\201\027\305?\273\345Uc*y\307?C\340\355\346NU\332\277<\234e\273\347\345\321?\211\273\027\353]\264\267?i\264\013\274IB\327?\0351\345\t\245\253\315?:\304\005\301_\243\305?\365W]\301\025\324\234\277\311\246dR\246E\272?\374\222*\335\237\203\321\277\311\\t\r\216m\323\277\360:4\217p\030\274?\336\331hJ\374\033\312\277\255T\253\nh\375\324?t\25312\022\353\322?bZ\006b\372\332\272?\031\311`\2758\016\305\277C\224H\005\302\014\322\277\234\313\303\370\037\317\317?\016\263\237\336\357D\274?\2157\246\345\017\037\317\277\216\352\317\331]\273\341?Z=\222Xs\374\245?[\305\013\267\266O\313\2777\354k\033N\262\332?\017\227=\2053\252\305\277:\217\314\033\016h\334?\350\363\366\214\351.\320?\334=\314\240\322o\320\277\376\372\327\250=[\331\277\242^t\242\362i\300?\270;k\267]h\322?\240@\361\306\366\030\301?\236\372\204\017\314\241\212?V\306\022\030\343*\311?$\216\310\271E\307\310?\274\220\263U\356\252\273?\002\351\213R|[\250\277N\370\276\033\177`\324\277A\355\\\275/S\327?Q1\214\303\262|\323\277\245\356\322\237`s\263?\252u,\000\327\337\326?\202\264\030\237v6\305\277\006\007\305\240]\017\322?.o/\345S\262\305\277\024\3455#A\300\312?\226\214\010k\010s\340?*3\214X\027y\312\277\320\276\013\276\335P\265?c,.\351\203@\315\2774\356\223\304\016:\261\277\337\224\207\277\005\335\302?\357\016[@\211\313\311?\323X\322\274\251\351\311?\367)\340\001\022\313\326\277\272\257w=\240\305\333?\003\275\211\204cT\262?\030\036\342\274\2139\315\277\336\207I\331\236\260\316\277\r\301\026`\304c\331\277k\373O\345Q\275\330\277\365\327L:\241B\273\277=\211\235c\037\350\306?\305\030\232\343\303I\326?\006S\203\037\213#\314\277\373w\032\274\361\346\323\277\316-\031l\217\203\322\277\261\250\004\233\245*\320?T\335+\014\364\375\272?\225N^C\364\224\324\2772O\266\232\330\260\322?\377Y5\000\002s\262?h1l%XB\201?j\016\030=\032{\324?Z\005{]\320\014\305?\214{\332~\205N\334?\215\210\326H\032\365\300?\350\021\345\003\351\377\274?\260\337\331?\313\312\245\277\351\275\316\331D^\265?29\2653L\355\335?,\247\261{\372a\324\277\234\347_\375e\230\303?\004\037 \353\353\361\272?\360j\2713\023\014\303?\216N\310\2240O\274?M\267\364\201G\010\327\277_\251W_\227\300\325\277\025(Z\240zw\333?\232Z\327\344\000,\321?\356\235,\020\230b\334?\316%\250#x*\251?A\340\232\236$\033\315?\'x\330~\0218\316?\\\254\323A\221\000\241?\347\000\177\000k8\323?3SZ\177K@\320\277\344\336\231\\\316]\324\277\341\036t\236\353Z\327\277,\335v\004\344\t\320?\317\221\350\2470\235\300\277\333\272@\356\307\222\304?\001>\3135\375\300\316?\211\221\312\271\271\035\322?\010\031\257\026+,\304\277Z\353Q\331,\356\315?A+\017V\214\010\302?\025\227\333\244?\207\314?\270\024\343>jz\341?\242>\013:\010W\302\277S\324\221\n\000\341\304\277\355\"\226\336H\252\321?yq\250\000\224\026\307\277\245\242\261\366w6\327\277\253v\321\200\017\230\274?\255\254\206\'hQ\307?\275\215jd\2316\325\277U\320\037`\316\350\327\277]\2564\337wB\312?/~\001ZF,\315?\004\234R\034\017O\305?\n\260\033\370I\234\256?\n\016q\244\032\223\276?D\te\247@\342\300\277\r\007\0313O\317\275?\n\316\350``J\272?\272_\ri\267\n\313\277\266\3411\265\005\201v?E\250JB\277\302\300?O\022\001=\303\n\305?xjh\342\241\030\236?K\243\023S3\265\313?\032\277SuMP\246?\222z.\327\313\004\315\277\243\236\025\203M>\327?]\312\022\000\220\321\322?l\256`<\377M\245\277X\022\207\t\366\241\303?)z\277U\307?\317?\234\001Ge7\361\320\277o\333\224~\004v\301\277k\000\200\255\\\271\306?4J\227\376%\251\271?\210\241\257\002w\376\246\2771\243\253\266\223\357\313\277\202\224T}\031R\306?\310\242\002\212\005\374\306\2770\"\233\365s\324\324\277\233\233F\305\305\362\324\277\226gV\235r\330\275?E~\036\037\004O\263?\260\244+\304bU\255\277l_\335\004!\021\330?i\365\233\252\367+\300?\271\017H\333[\276\300\277\036_\357\274\\\335\322\277\310vc\346\247\335\310\277>\267\nA\222\002\314?K\370\357\013\371\261\277?[/\300\035,\014\317\277\310\234\241\227\325\344\316\277\021\315\270\200\0025\314\277RI\235\200&\202\324\277\\\'\3449\021\263\310\277u\340AX2\354\325\277K\265\313\216\277z\276?\3048\250\222;K\275?VR@=*<\311\2772\207\213y\251\032\310?\206b\002\351((\313?c>\244\010>\300\302\277\2506Y\037\346\375\266?\3132@y\212\342\310?K\257\017\343\034\222\331?=W\347Z\254O\320\277\020\"\266G\261\324\271?\207J\310\254\203(\333?\022\267\361\304\377_\270?,\023]\233\266\024\307\277\302A\214!JE\330\277@1\025\217IN\275?v\3251\036\r\366\264\2776\300\324\3508+\313?U\037\376P\0377\312?\024p\031\201\302\352\311\277\215\240\255Z\004\214\243?\'sT\267xM\217?~u\321gr\367\312?b\307\363\3273\235\300?M\311\305Zt\231\320\277:X\203 \325j\302?d\317\236\313\324\244\322?9\312\013\372\034i\307?{\333\351Z\275\373\325\277\002\323\016$\224#\327\277M\005h\235\351L\337?\242\030\315\210\332O\301?\005@\313\251ST\312\277\260)%>Vt\316?\005l\237?\2018\271?\254\0253\343\351l\325\27740\321\244=\363\312\277\254\214%0\306U\271?\205\021\261w5\257\320\277\214\303\025\')\366\313?\262\362\252R\243%\272?A~6r\335\224\323?_\254\230\337\243\335\312\277Z\300_\'P\037\314?\230\353~_m\326\313?k\336\314C\001\266\321?\033\017\031\003\251\234\322?\317p\332\276\r\322\300?\252\356\025\006\372\376\303?\361\220\233\275\211#s\277\261\236\336\265\031\341\265?\353Y\255\237@P\312?!\323\220\247\233z\340\277\007r\273]P[\323\277\257\274\375\034\223\003\320\277:\255\362<l\255\253\277o\031h%JN\313?\314\253h\343\360\230\240\277*d[\304\177S\333?\240D\225\253i\250\320?%\375\203i\224\005\314\277\310\266\312\033y\203\320?\266Ub\001\300o\255?l{y\tg\232\311?|\367\013\231\322\312\212?_pY\307\351\322\265\277Yf\327\336#r\270?\377)\260[_\177\333?Ov\010#\303\030{\277eF\313\303:<\331\277^\360\253j0\252\317\277\336A\211\"\346\212\301?\324\306\307\335\326\314\326?\354\314\322\210xo\302?$\3177\232\n\216\315?r\276\236\320g\027\275?N\335l\336\376}\316\277StE\245\3503\331\277\334V\'%\014\034\303\277\030*Z\024\321\n\274?\310\230\273\226\220\017\307\277\200D\227`\006\035\316\277dB\345\302\365\346\313\2772z\311Z\236b\331\277\n,\004b\247\222\317\277\356\372\026\347\271O\320?e1\024$t\337\330?\0270??\245-\336\277M\231\037\250\350\002\302?2\345d^\036\235\313\277\237\027\325\277w\335\316\277E\240\372\007\221\014\313?\313\241f\304\334\240\331\277Y\335\250\035\027\270\304\277!\376\345\20332\317\277\223s\377\3441\373\323\277\324\335+\251\311B\311\277\300\362\367\275\023T\304?\241\216}\1779i\321\277s$\300~\3028\301?\232\222\005|\031\355\256?\276\233U<\201\362\300?\303\275\25661\352\313\277\033\237\037\3772\003\274?g\313\301\205\237\254\307\277\246\217+\273\201~\326?\234\341\207\374\223\365\256?%\346\376\217\270l\310?\344-W?6I\327?^\250\025\t\032\361\267?\356\255\016\241\306\024\305?\021\003\331\302^\356\304\277\364<\023\365\335\010\313?8i\371\005\344\340\266?\027\321\033\223jD\265?A+\356G\243\345\313?2\365\343\304\221\346\310?f\017\366\036\025\234\315?\301\021\356\337\006\306\303\277\230\n\\\344\277\274\324?s&u\0337\251\300?\236|\022\211V\257\215?\021\341_\004\215\031\321?\275O<\004\341\314\320?\355](\005\202\245\306\277\223\331(\004\325\363\332\277\360\315\302\340\222\n\333\277\005\3142z$\224\322?g\010\215\201\361\343\303?\262\232SnG\035\342?\256\330\200\2048\301\314\277;\0227\300/\242\334?\003z\327\\\022\300\221?\"\237>\237T}\327?)\254\371\226\336\243\325?\271\305\272\300\376N\266?\370\303\317\177\017^\302?\327\330\251\342[\222\322?k\346\034~/,\323?\375\216\331@W\256\310?=?\223\\A<~?\006\305\311\334\000\\\324\277\211\321s\013]\211\267?+\220\260\332\302\024\272?\323A\250\234@\"\327?\277\271\340\210\305Z\315\277\177\"\004\340n\364u\277\311\343\253\025T\361\260?\006\323\223\246\3774\311\277\037\212\331\375\360\024\315?\200\367\310\305\234\220\306\277TTD sr\267?\2769\226V\307\232\314?\331\203\377c\327\254\241\277\037#\311AC\336\312?!5\222\251\'\230\327?}g\254\344\000M\317\277\024&\214fe\373\271\277\216\370Z?\031\275d?"
      }
    }
  }
}
node {
  name: "normalize_element/component_30"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\321?\177\251\270\324\245?}\345\203\226\\b\315\277\036&\216\372\363\206\300\277\236EJ\0163\017\322\277\360\357}\2736\345\323?\276\340\rHFw\314\277\027\204M\370\000\270\300?Qs\013\300\263{\316?\035{0\0100U\312?C\211;\203+\305\314?\357\331\306\341\304>\310\277\246\034@}\323\315\321\277R*#&\217D\307\277%\304\246\337\317:\325?\377\232N\340\r\321\260\2773\016\327eV\301`\277\010\343\n\234*\'\326\277:\030\373\334\032\"\321\277\367\370\214]\005\345\321?K\316G!\342\t\340\277\265\330\365$\023d\321\277\323\240\252:\222h\313\2772]\004\235{U\301\277\373(\033\275\2675\321\277\005a\275=Ge\247\277va\367_\3375\314\277\343\330\037\315\375z\305\277\0149\370\272\363\341\330\277\347\361Ia\275U\313\277}\020\227V\"\324\316\277O\300\300\275||\324\277\316Y\227\001\004\277\320\2777\'\345\244\346!\324\277\010BOVN\363\314\277C\006\217\3027E\322\277\204M\370\0008\321\324\277k$\256\010\243~\314\277\240\222J\343\335\262\321\277\010\t\024[\210\250\202\277\275\231$\330\260\215\301?z\255B\322\300\362\264\277je%Z\260\\\271\277\036\333t\374\376*\322\277\036a\305g\272\360\277\277\241\224Z9\305\364\263\277\246\013\327\301\306\227\216?C+\305\310q+\303\277\337\377\246\373)\243\325?y\r\260E\301\302\306\277\037\304\010\300\303\335\261\277tZ;z\221C\276?\206\242\212,\343\360\330\277%og\374NU\311?\034T\311\235%\212\320\277,\260b\031d\220\210\277\356C9,h\265\317?\323\026\327\370L\366\304?\275\332\254\2365\266}?r\207,V\375\337\301\277MT%\200Q8\306\277z\3458\277z\277\322?\304\376\231\336Q\245\312\277s/Q9\375\013\274\277++\030Xq\361\202?\240\371\234\273]/\313\277\302w0\234J\n\315\277\244\212\342U\326\266\304\277\006[\364g\242|\267\277\376\246\267\014&h\201?\261A\262\302%\256\263?\374\337t?eD\320\277\023\013!\214D\215\321\277\313\002\334\342\320\021\275\277X\360\221\203\310\030\324\277\304R\217\372\014\244\317?\337\231;\300\264$\326\277\205\360\005\271\315\314\316\277\003-\246\227\355J\210\277\016yW\177|\260\321\277\352w@]\315\317\317?\227\353e\302\314J\320\277\230}\211>@s\307\277\213&,\376\252\264\277\277\006\3462\177\226\370\274\277\354\213c\250\263(\270\277\241\315\334\t\027\356\302\277*\217n\204E\205\340?\264\231;\341\302\215\265?\211g\277\244\347L\321\277\3619E\201\035\203\244?N\002;\001\304\222\264?\346\325\357xI\322\321\277\315\372\377\376\2658\264?-l\027\344x\217\321?h\021@ \206\014\314?k\345\261\250\200b\304\277\276\233\023 \257l\320?\305\314\231H\304\357\313\277\n`\261#a\241\322\277\245\374b\276\325\035\265\277l\237D:\362\366\313?\244\000\356\005\250\241\271\277\273zW5\357\325\317\277d\003+\177\245\220\257?=\320&a\210\227\242?\354\315=^\'y\306\277\'\231\346g4\203\320\277\224n\343\000\016b\247\277s\224j<d\214\302?\326\001\214>Q\037\260?\271\354\306q\226\310\321\277\000\377\367T\014_\264?\200\222\2714\251a\212?\304Lp$\257\322\310\277\230M\200a\371\263\321\277QJ\010V\325\313\310\277\n\"ZDw\275\320?\223\240\t^>\243\336\277EWu\230\'\276\313\277\344\320lh\024\\\316\277\3012\333\272@\256\323?\350\317\247#\272\306\312\277\201\264\275\345\003e\313\277\261\335=@\367e\305\277\310\231\344Om\323\263?!\323\024\340?\006\322\277iR\257\000K\223\321\277T\027\327\225\";\315\277\253z\342\001\261\341\257?\200w\2270?\334\332\277\177\301n\330\266(\340?\372t\375\001]\233\270\277\rG\004\241\304@\337?\270\256\271\037\307A\316\277n\010\002\"\314\206\314?\323\251\206XXK\317\277\0055\031\341/\336\321\277W\200k\376\312\020\267\277\noI\355\311\354\275\277\347Y\026:\031\226\231?\203\361\333)\200V\311\277\215\347\032\003>\201\253\277\331\017\312^cU\273?\270\"\0203$\274\270\277\304\237\324\243\030<\240?\020\203\361\272\033\027\316\277K\353\014\337\004W\300\277&\204]\000Y\t\243\277&-i\200c\263\260\277\022P\341\010R)\322\277\033@d6m\353\310\277\224\363\002B\244\014\263\277\310k\024H?\320\341\277\240\232\375G\307Q\306\277\"c\377\206\232\262\327\277\320UFe\273\251\312\277.\274?\234\217\204\321?]\0206\341\003`\312\277q\317\3536E\323\310\277\212\005\276\242[/\323\277T\027\266\2079\030\311\277k\267\341\240R_\301\277m\004\301g\024`\310\277I0\n\277*\320\242?\314\177\243x\360n\325\277\200\377\030\000\313\306\320\277\326\021\321\371:\272\321\277NV\230\000\364b\277\277H.\244h\212\245\321\277e\335\344\\/\262\322\277\356\016\306\333\214\313\237?\r\360Q=\241p\306\277\213\026\003\230\360S\301?8\005\205\203\265\230\320\277:\271\266\"\367\225\326\2771?\232^ \220\277\277\255\246FC!\335\312\277\"\273\034\300l\214\324\277e3M\371\214\233\307?ML\325E#\002\303\277\334\005R{t\327\322?\025\354\267]\005D\321\277\204c\226=\tl\263?p\212\371\177\366\037\310?\210p\304A\337\351\275?C\202\363\363\360\257\317\277\000\177\010\334\200\360\317\277P\325\302}D\222h\277\205whA\360D\257?u\273\3115&@\273?\340\021\323\215\311E\245\277.\355\253\335<\366\304?#\206\272\233\351\326\332\277G\221\367\242$A\302\277\203W\344::\354\314\277\\\001\307\226\314\316\311\277\014\243j\005\227X\324\277\025\366\037_c\023\257?\324\353\232\271UJ\305?\300\253\212\025\332\336\314?\240K@e_&\307\277\313\033y\203\334C\330\277\033\350\305|\205t\253?,\276\001c\006\365\243\277o\224\013\201\233F\276\277x\024Bb\0265\306\277K\351WB\220\346\333?\252\313\224\2344\211\316\277D\271~\013\374\362\320?R\277\207\"\017\212\327?n$\236&\022\320\306\277\350\223h\013\000<\270?\223\307\262\344\0324\316\277\302C\353\275\005\315\271\277\244\274\240\317\221&\327\277\374\224[Ap\350\322\277\343\333`M\n\030\322?\310\306\242:4d\230\277\243\332T\233\007\311\326\2779\316T%\035\'\267\277`^\3336\347\273\321?o\366\244\237\262\322\322?\355\022Q#_\317\303?\025,@\241\277L\304\277^aE6%\023\302?\r\027=\340OG\264?I\274\372\200YD\350?\353\257\364-\265\326\265\277O\323\343\316\267\313\265\277\\\257\351AA)\324?Q]G\274?U\243\277\234Q\322G\t\017\317?\317<\353\340\201}\233\277 \235\025\254\314\357\314?\335\232t[\"W\321\277*`T\265Q[\244?m[\357\222\223\344\313\277\333\311\330\2670^\272?\243\352W:\037\036\311?5Tn\235\335,\245?\213\021\010\302\265\335\263\277\232\3310\010\201\234\237?\306@\2151f\001\316\277\226M\220C\212\"\327\277\017\346<\204m\233\314\277W\255\257\"ag\323\277\336\235)2B\221\277\2770a\372\177Q\331\311\277k\221@\305i\357\307\277\0262\231\"\247L\227\277}\300\321\310\306\007\272?\276\215\346+\365\352\273?}\213[\300\\o\264?\210R\"Y%0\232\277T\2009\304\211\271\320\277\261\267 \235\262\301\323\277\372)\216\003\257\326\322\277x\365\"\301\361\210\314?,\010\212\304\251\273\335\277\255\341\\\242\376#\320\277I\207\301\333\007I\267\277\021\"\273\000k=\253?\351\253\026\236\270\230\263?D\250\236AMq\222?\370\345\006\"\017\355\314\277B\377\251]\270\330\322?\032\200W\025+4\324\277\367\3110r?u\277\277%\022\262\027\375\255\224?\257\344\237#6{\243?fe\240\327D\213\322\277\222\250\274\302\'B\311\277\306\002W`e\300\314\2776@H\232h\245\303?1\305E\203N\347\322?\264W\20298\340\265?%\203P\234\253\177\326\277j9+\375\337\254\341\277\rL\357\335\215\036[\277\r\372\363\351\210.\314\277\310T,D\250N\313\277IL\314\212\023%\266?\315\354o\340@\016\316\277\220\373\363\300\t\375\314\277\300\350\241\237q-\221??\301\007\247\354\221\314\277\332c\330\027\277\337\274\277\316\247!\271\033\225\236\277\177\271\334\201\266,\321\277\320.:\264#\260\324\277\324z\2464\356\017\260\277\256\004\336\013\304\231\210?I\026\254H\267k\314\277\227i\240\236\343H\322\277m\'!\303\360\262\311?\256Bo\2267,\317\277\243\345a\035\236\020\314\277\346p\020!l\000\333\277C\351$\276\207\211\320?\226sk\312\374@\262\277\257\ti\215A\'\313?\022.hJ\200T\314\277`]\262}\n\370\310\277\212!\212\340\267\325\253?\277\255G#\227f\316\277\246\244=\024\273\354\321\277\254\333\311u\215u\265\277\017\336\rX(\210\321\277\275\250\376\275\353\236\271\277\"\205xEl\007\317\277\014a\014\027\177|\304?\031\030\273u\345P\276?\364\234\035>#p\301?\027s!\240\014\237\305?\002\343l|\036\212\305?\220sQ\343\224/\322\277\254\013.\014GF\323\277\023X\010\304N\245\320\2774\337=\027x4\313\277\221z\323\035Y\263\313\2772\033*\347\007\005\311\277\273\240\327\002\357\242\263?\253\212\272 l\002\324?\210nQ\301<\177\321\277<\025\354\226O\234\316?\272\005\236\275+i\306\2771\036JY+\177\264?\203\252\311:\2712\337\277\306\0162\342e\372\321\277Uq_\336N\350\301\277\256\342\205[\333g\326?\265\370V\034\265\237\325?\030\305J\203\335\333\245\277\020\031^b\217}\305\277\204\255et8\241\271\277_\244\243^\350x\305?\320,d\t\306\234\300\277\272c\230\260\211\016\277\277EC\207?\021+\263?\336!\305\000\211\246\307\277\271\304\323#\364\320\267\277,\2350\335\373\006\303\277W\362\251J\3701\304\277z\034\345\344n%\307\277\260\336\217x\005d\304\277\234\341\304_\254R\325\277pB\337\345;\333\306\277\034\236\271\342=\242\341?\371\\\226D0\355\265?\332M\266\242I\271\313\277\000\264\377d\000\346\305\277E\010\270\265\277\022\305\277ap\315\035\375o\320?\237z\377z\340>\317?\317\336\266B\232)\313\277x\254h_\270\364\267\277\324X\014h3\030\304\277vk\272\032\260\326\325\277^\254=&1\014\316\277\226<C\335\254f\310?X!\202\375\031\326\323\277\340E\241]l7\320?\214R\276w\006S\315\277\037\303\276\370\375v\320?j\323\"\354%\327\323\277\010\266\252\"eVR?+\310\350\343N\247\242\277\027M\004\375\307\272\312\277\252\224\246Zn\235\320\277\375v\206g\021\243\317\277$bk2\272\356\267?\264\303F\366\224\336\312\2775\212\233\t<f\304\277OH\000q6\241\277?g\350\206C\3029\266\277\362\233\260gI,\227?\330\036\346`p,\312\277s%\310)\266\331\317\277y\250\361\373\314\023\320\277\272}\177\030[g\307\2773\2535\234K\024\322\277\276\311%D\257\365\314\277\232\305\325\022<\317\261?\022\346,\242\334l\330\277\231\274\236;\003\033\313\277\217\002\237z\377z\301\277\232Z[\035\245w\320\277\225?\204]\271\203\303\277\364\220\245\346\335\036\316\277\330\327\236\177\331B\262?X{3\305w=\313\277w\375\376\244\014\342\321\277\270\354\214\306\014\232\313\277vn\271~\352\355\247?\224\314\177\202j\007\331\277\014\324\030c\026\020\300?\273\037\340\336o\023\307\277\343d\357\200C\214\264?:Y\322\240T:\241?\211\200\340}\227J\261?\030/\212\334\333F\306\277\271\240c\254\333E\316\277}>-\263\306\250\260?\226K\231\212Cl\321?D\251Z^\373:\325\277\225+Y\241\212\323\336\277\367j\323\032{\335\327?\000%x\"\014,\272?\253gH\342\323\006\231\277\276R\320\314\027\244\261?\367\2046J\250\252\317\277\320\263\274\037uC\307?\251EL\242\301\232\325\277X\020\363zjT\322\277\373I\255\336~L\300?\364\254\234\244\226\271\312\277\207\363\357\201\275\214\277?\311!\252<\366\275\226\277\372\327,v\177e\311\277\276\025h\373\200U\317\277\326\241?\3319r\337?\344\002\247\251+\300\257?\300\214\020\273B\241\320?\316\207\353A\326\215\321\277\002\246%\271p\336\317?\313\273\250\345 K\307\277@\004,$&I\322?\213\255=?\316,\303?\316K\3157\005\246\300\277oa@\2432M\321?LU5\234\2150\323\277VV&>o\021\324\277S\353\232\034\200\005\275?`\241b\336\333\333\230?\306\231\221\007C\231\265\277dx\rv\2327\317\277O\301\n\205B\343\263\277\007\200\24658\327\312\277\240\305W\335\030r\256?\3074\347\2415\215\263?\370\270\030\3761\177\252\277\330\232\352\037\375\\\273\277\322\362M\344\223\337\320?\345d=\020\264]\304?o\225P\217\247\304\275\277p\265\312#\352K\326\277\310\342\212\315\277D\264?\201\364\207E\220s\246?\275h\227\210\032\371\313\277\037Y\000 \025i\252\277\'\007\036\2453,\317\277\037p\362\225\037\274\311?\317(\261\371%\323\224\2774\361q\032`\356\310\277\302\212\360\202\312p\305\277\252q%\361\250g\320?\001\364\1777r\227\306\277\313\"=\332r\215\314\277\221\316\206\035Bl\320?10#\243\240g\320?\314\253\000\000|G\320\277N\005?\036\270\022\320?\265\267\010J\331;\315\277 \301\340\334W\314\305?\037\234\262Gf\375\310?:\225\312\343\202\326\321\277\334\224\033\332:\027\317?6;s\213\320:\271?s\227i\240\236c\316?\301\342\323\020\023\334\255\277\320\277U\205\243\267\323\277\366\224AZ\010\027\326\277c%\014!\354\266\276\277\216u/\377:Z\322\277\325\232 \3110\027\276\277\036y\224\010\\p\317\277\0044\031\247\204T\312\277~\205\270\233\31549\277V^\227\206\206j\324?\242\343\325\377Z\332\317\277by\200\274\221\330\325\277\374W\024~\302\274\324\27764+\374\225%\314\277EQ\n4\204\325\203?mm\310\334\010\315\314\277#\330\372\0320\345\307\277T\2038(\304P\302\277^}\334\201\261\363\266?\027\014\021\344^\350\315\277\030~\361\276\212\211\253?56\205\337\227\304\315?\334\370M@\227\031\315\277\014`%zt\276\340\277\032\302\316\240\343\033\334\277\n\'Pa\370J\316\277\242\'\310|\376\303\334\277\366\262P\337\360\212\322\277\035\341\233C\245S\323\277|H\370\336\337\240\312?;\275\234#<\353\315?\217\202\257\001t\314\323\277\376\'8\"\003l\240\277\233\373/\000\"7\266?\232\372\314\233\273D\250\277\223p\000\201\367#\256?\034T\311\235%\n\323\277\002\225\267D\252\377\314\277?\353u\346y\313\263?\254\265#\341\352\034\275?d\355\214B\324\365\305\277\301\252z\371\235\246\311?\273\315\002\212\344m\317\277\370\0173E\312\240\321\277\345._\352)j\315\277\320\037\201\334\321\001\321?(\217\331\037IE\326\277\354\206m\2132\233\325\277=J_\347*\206\303\277\337\021\231\342?\227\320?\370\236W]\0032\270\277\223\336\273\366\232\330\313\277\371\032J9\324\371\226?\240$\260{#!\307\277Gk\363\234\200\250\321\277\264\301O=N(\333?\362I\376\222\032\373\254\277\025b\242\377\355K\264?\020\226-i\367q\275?\274\224\374\200\356h\321?\215\212\213\345\216\345\252\277\354U\\\003\370z\321\277\226\365\223\030\241+\312\277\317F\021\306\r\307\317\277\010\351)r\2108\325\277\033\222\007\340n\342\343\277\245G\273 \016Q\273?\342x\231\274\\\337\320?\236\265\272 K\264\274?\200X\200\000cG\321\277sF\367 \302\207\321\277\007\031T]\270\032\323\277\357l4%\376M\316\277\333u%\270G\245\314\277\\8\020\222\005L\320?\231\222\027_\325U\322\277d\202\361>T\273\322?\320\247#\272FO\311\277\221\326\367eYE\311\277\220\330QI[d\260\277M\313\233\005\322\254\310?-b\361\376\354\005\264\277n\341\026\177\0350\253?\237\205\2205\033\022\314\277h\375\024dW\034\327\277mI\232\201\302\207\270?\3106\333\242\355\224\311\277[\373\320?\240\267\311\277\026\332Z\333\353\017\322\277\365k\004E\240\270\221?R\266\253\004I\247\314\277-NJ{b\241\322?g$\347ieg\333?\010\223^\253o&\276?\370\024B\377\3539\321\277n\266\301\242\205x\276\277%p\220\265+\231\316\277\r\263\206AO\271\252\277\227:e\301\006\274\265?)R\314\007%H\313\277\340\005[6\204t\236?\361\261\315#\005j\225?\253\021\321\032I\243\322\277\035\314\303\225\365\023\315\2770T\3256\213\270\314\277\302 \341b\342b\315\277\353\372\354\035\301\017\321\277t\375\253\\\342\247\337?\232;\237\246;\364\320\277\023V\225C\254z\271?lN\024\327\347 \300?\302\353D\223\325\276\307\277\324\310\266%\325\353\256\277e4U\244\200\274\313?4\331\334$H]\320\277q\262!\300h\335\270\277\243\240%\3314\000\303?\365\\\312\3548\355u?\336\211a\240\316\211\320\277\353\323\236PW\220\267?\261\006\336\177\032\255\317\277\260?\303z\'\217\320\277{L\033C=\323\240\277\356\312\262P\000\377\247?\345>\377^\206\326\322\277\006\231\246\000\377\261\312\277\004\362s\343\340I\257\277M\303K\313\243v\327\277\374-\350Z\007I\310?\357\237\270-\333\230\310\277\000\022\331Iu\350\264\277\343%\356gg\207\312\277\r[\212\026fB\316\2777\253\272\036\267%\314\277\037`R!\303O\306\277w!g\253\334U\314\277 \317\221\t\266\231\305\277\212|\260\3577\230\266?Y\024UC\013\036\314\277\24110~\\\023\321?\037\265\221\004D5\235\277\236\206\177Cn\247\334\277\271\372\363eP\n\316\277\000<\375\373\347\304\261\277\326\177)E#\306\325\277\t\270\020y\005\201\315\2773\326\304#m\272\321?\264Q\245\177\254T\325\277s\315\r\033\237\250\312\277\320\364\216*\365r\314\277A<\\\274i\304\304\277b\263mb\222\033\321\277\024\325\266\274\315v\272?\226\2354\303\374K\341?8.\343\246\006\032\320?\021\316\237\035\r3\264?\031A\276\337\303@\320\277%\313(\032\224\376\260\277\220>\367/ZQ\341\277(\251\232\300w\022\260?bE\221\336\005\204\313\277a\331\365\240\332?\316\277\311\311\243\237\231u\321?\200l\246\003\330\316\252?)ki\2500:\312\277\244\303\246B\372\365\316\277h*\037\335cD\303\277\330W\313[}\216\337\277f\222\344\373\332!\326\277\372\237\231\263\200\001\271?\224ot\235_\367\326?\'h\223\303\'\335\331\277\247\270\242{s\313\321\277\217\365\334[\364\202\334\277HZ\340\341,[\271\277\314\251\317\233\253b\256\277o.z~\203<\324?\307B\031O\251\267\315\277}\333\002\370]G\314\277\372\010\374\341\347?\327?FHz\244\003\212\322\277\"\224R+\247\230\271\277s1@\201\373*\316?=\270}\207\211\243\272\277\224\364\223\336\365!\327\277\206ZO\204?\211\323?\244\257\367M\'\372\263?qS\207\005\214\350\310\277J3\314\277L\312\320\277=\2160V\345L\340\277N\313\366\276D~\314\277>W\000\370L\233\236?\366-\316s\237w\322\277j\261\251-T\202\274?19{\210\302>\306\277+\203\254\237\345\226\317?\373\257s\323f\234\315?\373\005\273a\333\"\332?\344@\027&\266/\316\277\234\202\004\336,\322\320\277c/\014?\3254\334\277\256\277{\000\270}\251\277\240\273\311\024\030\327\334?\304u1r\273<\275\277(?\322u\033\263\306\277h\010FcF_u?\0360r\303\255\212\306\277\007\267si\025\340\312\277O\036\273\260\332\241\322?_\0245\177\351@\335?\361\005V\243\221\256\256?{\004\035\376\261H\233?\200%\272\333\2636\313?\262B\025\'\214 \316\277\014\367>\023i4\204?\262\211\243\335\256\270\250\277\345\022\303\345\343\240\314\277\212c\023O,f\343\277g\204\320\244\301\253\313\277I\204\302w\315q\302?~\n6d\362<\332\277fR\236\324\362^\304?\317G\276\267\216\026\301?\315U[\000\006\301\272?\377\206\375\\<\325\314\277R\223*\233\203q\343\277\037\215}\250\270\032\317\277u\216d\003\247F\307\277\366\350\262=\037\n\252\277\030\207\206\007\305=\307?eq\377\221\351\320\311\277\320\221Ca\243\356\320?J\367\221`L(\200\277\203F\270\342ES\310\277\0132v\200/\336\321\277)zx\200;\021\253?\020\214(\222TK\323\277R\307\225@kz\317\277a\274\254\252\023\247\311\277\257\025#\001Y^\343\277)\350Y\275\201\021\323?S!e^#V\260?\215\240)\"`\000\337\277}\310!\003\365\275\325\2776\341E\374\026_\316\277wGJ\243\227\213\264?\"y\337\337=\023\313\277\"\235\211\002\340L\322\277\001\350\305\303Z\000\322\277\221rb\325AZ\300?\030\027\273;:\207\322\277U\201vaM`\255?\372\376zC\351$\323\277\372\024\266U\377V\314\277\303~\262\326\016N\310\277\362\322\311)lL\312?(\020U|l\340\323\277\232\204\335@\031\224\265?\257g!d\315\306\321\277\315\353\343\374\250\341\310?\227\242\246\247\331\315\300\277\266]p\037\034\340\335\277\331\204\254UX|\317\277\312\236\014\247/\370\266?\0225n\275\350\243\302\277*B\177\333\362\025\336?K\242fa\262\245\340?11\n@\253\345\305\277f\242J\305\255\337\327?\207\301C\353\275\005\215\277M67\tR\347\317?\332\2141\202V\370\251?\\\037\224\377\342|\323?\023\366H\336\224M\312?:\256Fv\245\345\332?\003<\253\375\204\320\322\277\023\334\202\204\254\027\316\277\177\347?\355\265u\203?\375\224\225\354\371\026\260\277\rU\357x\254|\317?"
      }
    }
  }
}
node {
  name: "normalize_element/component_31"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "VW\262!\007>\317\277\203\021\177=\364\027\244?n\006M\205W\326\336?\240x\313^\201\253\273\277[ZO\245Mr\334?\\3\"\346\314U\300\277\351\267\257\003\347\014\334?\000\000\000\000\000\000\000\000X=\225\020\002\253\210?\275\266\351\225\323\032\310\277\352\224\252a}\313\325\277\240q\303\241\316\313~\2776APE\\\306\264?\232\213\t{$o\324?\3026\177\237\263\375\265?\253\022\033\342\016\252\344?\337\006\214`\251O\313\277Z\222R\274\t?\250\277\306r\246d\224\202\323\277\352\256.\237\223\273\327?\341\t\275\376$\236\341?\005Mg\001\274\000\252\277]h\021\376\0034\262?\230z\006\242a\220\300\277\353\223\365\376\263\344\336\277\317\030\377\241\r\376\334\277:\335\303oT\270\245\2777C`\233C\210\317\277(\353\002!\003\300\246?\031IP6\304\374\272\277W\376\204\314\370k\262\277\177\020\217\345\331\274\244\277<m\350\3018\223\315\277G\371\332\027\366\322\215\277\2500P\300\3305|?O,\205z\331\372\304\277\254E<\3000l\305\277\252 /9(@\301\277\327\313Y\0319}\230?\317\261\315\327v\244\312\277\200\321\006\334\312\375\300?\377\316\366\350\r\267\343?\320\307)\370u\371\275\277+\n\005\266\224=\346\277\303\373`\317\215\337\342? \320x\246\300\227\316\277:\266\267\276\274~\326\277\320\370\031r\307\366\340?\223m\224\200\216\022\244?\377\332>\007=k\234?\232z\037?\002\\\322\277\001\363\230\232g\231\237?\201@\336\340H\366\262\277\022\233U\300\271\266\343?cl\225\036Uf\344?Xt7\304\202?\245\277Z%\201\233\3776\314\277\303Z\204{\310\010\320\277\343-\374\205\303w\346?MT%\200Q8\266\277\363\361Z\301\314\347<?\225G\372^\212E\232\277I\327\n\242\007\241\311\277q\200\rF\364\204\316\277Q2\362\337\247\235\234\277\276}F\267\230~\267\277\226w\325\003\346a\325\277&\354\221\274)\333\343?1\010\024\000\3175\260?=k\257\354\037\227\264\277\274\226\353\310\354\207\272\277\241mN\210-{\317\277i[\014\237&\223\276?\250\"p\177\211\323\302\277\314-\r\371\360\367v?\247\204\365\271\271\374\301\277S\255\246gQ\212\315?\357\037\025C\225A\225?\n\274\366yJ\326\314\277\221\251{\227dz\220\277)\271I`\001\271\205\277\264Ke\233e \324\277@P\352\242S\035\241\277M\363\257a]G\337?\363/\366\034`\377\300?\250\2010\001\t\024\324\277\222[0D\220\373\311\277\200\337\221A\206?\260?o\305\216^\276\t\236?\000\222e\230E\356\264?\372{)<h\366\343?\310\003\241\336\013\321r?\200\"`\276\006\216\267\277\307\026.\035\006\002\221\277\303\177\272\201\002\357\340?\362/3\200x\334\251\277\255\200)\240\334x\262\277\n\373\321\313\203\317\337?\210.EE\336\352\315\277\"\327\227\266\311r\325\277\305O\365\301\270o\235\277\036\336s`9\202\342?\344\020PeA\266\322\277\025\2557\305>\034\321\277\032\366%b\344A\256?\335\301\035\342\376\247\322\277\0366\221\231\013\\~\2776\301?\276\347\364\343?\016*\2639\265\320\227\277\346\007\t\254w\023\310\277\024\020\213\377\330\367\335?kJ\221\000^4\317\277*t^c\227\250\241?\206R\033\237@\r\266\277\301\204g\310\314\223\232\277\352\356\327\3606g\207?\223\204\325<m\253\250\277+\006\274\212\224\377\315\277\315;N\321\221\034\340?\253\265\315\3401\264\267\277W\227S\002b\022\340?\333\231\225/`\260\246\277\203\334E\230\242\334\322\277\311$~ \324\240\253\277\017\233e\242J\305\317\277\002*\240y\316P\260?\031]\367\271N\341\261?\276\265~\300$\021\250\277-\376&|\005U\222\277\262k\367\202\201\255\267\277\370\217\"\276UO\340?4\355I\375H\023\325\277\355\256\375\256\031*\320\277U\316j\303Yx\333?\212\010{\352\303@\271?\020\273$!{\236M?\n@\253\3451w\221?\222\356B\316Vy\345?\254\3315\347\001\250\273\277\363W\247N01\266\277\307\271s\177\372q\270\277\247hY\265s\263\267?\014zN\376\027\375\343?\230\255\212\252>\333\304?\324\r\024x\'\237\344?\242\000\354\004}\347\232?\340\340\365\033Yyj?\022\202\270\037\256d\331?\254r\302\000\231\010\273\277\310\242\237_J3\341?b|\177 \314\257\266?hL5qz0\276?\254\245g\027_\366\315?_t\201\344\000n\244?9\264m\275K\316\333?R\021\341>\366\003\344?Y\321\356\251\377 \240\277\226\360\337\027\362\343\323\277b!\204\221\250a\344?\336\032\236\17774\302\277\031\010\331\344\266\036\317\277<\317L\356\177\231\250\277\252\270\270`\205h\260\277!\275\362j\312\237\345\277Iqe\273\010\364\335\277\3311C\0355\252\270\277\302\234$\206\262*\273\277x\370\245]\320\313\344?\3165\355\336aE\237?JJQ\231(\343\315\277R\263(hj\304\315\277\270 [\226\257\213\340?;\353\t\001\257\345\344?\227\306/\274\222d\300\277\030\362\245C\351\003\255\277\345\327\254\206\006Z\274?\233h\302\274\350\'\323\277\017\232\300!\022\315\320\277\034lB>\016\241\242?\274a1\243\205\357\250?\226\216\275\007}#\257?Z\021\322\246,;\313\277\375\214$\244\342\275\320\2778d\250/\360\201\336?\200N\030\377\0048\316\277\257p\300\036{\014\230\277\303SQ>\2714j?\355\177\343\337%\000\345?ot\000\212\262\263\316\277\301\266U{\236`\307\277\336\306\352\177N\333\340?\036\371\203\201\347\336\304\277Nng\241\225\242\333?\257r)-\252\345\215\277\243\233\033\330\314O\237?\376\270\036\001\263\255\320\277\317IRF\032\344\260\277\227\230\200\302M\204\307\277\235\225\335aM\304\313\277\003\252fs(\205\247\277\203\263\010\203:\376\323\277]\233t\370\367\333\303\277\022>\306\242\n{\315\277\357+ \376\253\030\340?h\026\262\004cN\345?R\030J\334\031\034\341\277\311\305{\202\202\332\344?Jr\206\003\235 \323\277\254\366\372\244$\365\337?;.p\232\272\202\304?\267\002T\202\017\317\340?\261{\237h&\261\314\277\306\313\303 1<M\277\375\374s\250\021\300\300?E&C\002\004\373\321\277\330\202\336\033C\000\320\277g\356=6\2539\216\277L\303\021 \032\310\327\277\352\362A* \310\301\2779y6P\205\344\257?hS\020d\206\213\253\277\252o\354\033\220\353\334?9\232\002\035\326i\312\277?\360\306\274m*\323\277\3467\257^\003\252\305\277\345\367\r~\250U\315\277\254\225\"\\u\333\321?\326\241\242\003\365Z\325\277n\371d\237\251\322\270\277C\326\t\036\225Q\217?\270OTW\272\222\317\277\377\021\237\236\3539\344?\365\255\203A\241\267\265?\340\377\340\246\263Q\273\277\256e-c\025\377\221\277h6\241\246\034\347\222?\262\\\035\235F\234\272\277\001\314k\333\346|\262\2775\013r\037\322R\307?Zi\255\303,O\344?\337e\271~W\212\230?<w\314\212\362\326\344?R|\223\336\353/\243\277%\020e^\375\216\311\277l\025\263\024\177\312\301\277\320\205\252\373t\372\320\277\357^\346\"[)\323\277h\266\351\327\357\354\266\277\000\000\000\000\000\000\000\000\211\227\247sE\251\321\277b4\206\224\372\r\275\277j#\t\210j\306\306\277\nG5\221>\322\345?\322$\312A}\t\344?u\273,`\341(\260?\034\361\340\376\216n\310\277U\242\r<\316\037\300\277\274\314\217C\355L\302\277[\227\267v\344@\315\277_+\253-\230\237\207\277K5y\353x\243\276?\274\325\255}\205\365\312\277\370\315\365d\233g\320\277b\n{\177(}\325\277D\241w\300\373\376\247\277Oiq\204\024\225\325\277W\306\216\337>\037\333?\273\245\213\003\236\252\324\277\317\032\264>\202\356\344?M_\031eGt\316\277\027\267U9\202\216\313\277l\304\335j\347E\320\277L\247\330E\217\347\300\277\311\301\021I\231y\312?\235\345\230}5?\222?g\301Y\204A\235\307\277r]c]\375T\307\277\355k\227\025\016\255\314?\251\333\331W\036$\326\277\001\325\005\335\332\231\271\277c\247\016\250\355U\343?\362&\277E\'K\262\277l\325\t\303\333\336\244?\265}]\300\252\376\240\277Rm\344x\r\023\317\277\375\261Z\252\034\244\304\277\223\016\377~k\346\344?\263\210\027\372\026\214\300?sK\212\023\210l\264\277$\026\306P-\246\265\2775\260\227\236\227g\320\277\234Yd\236\t\013\313?\367\314P\344bo\322\277I\352N\301+\223\242\277\367\327\341\236\235\002\323?K\001i\377\003,\265\277\254Fey\rp\340?E\253I\246\371\331\347?\307\007\206\003K\264g?\215K\260\223Ul\276?a`\014\233\267\240\343?\227\351\362A*\000\341?\013\016\212A\273>\344?V|\350\'A\244\317\277\301\351vY\300\302\307\277\355\305\243\226\336e\307\277\312\233\rC\365 \304?\003\352Q\341\2356\312\277\250o\231\323e1\263?&\3265\234*\306\300\277\266m,\351\247\206\205?\265\374\237G\265\235\314\277\272d^?\253\351\303\277\036\304k\352~F\305\277\037\212<(\254\375\303\277\277k\247\030\255\304\300\2774\032TvU{\323\277[\210\250\236\331i\277?O\267\344\237\266\231\263?\004\305\260?`\320\322\277f\030\370\003~\212\253\277\361\3021&Xw\304\277\247\203i\326!P\313?\216\213\310\202RL\207\277\337O\360\301){\245\277\245l\313_\245\213\340?o\306\335\336=Y\320\277\371\227\356\277\337\371\341?\272\227ErC\235\307\277c\270\327\325&F\312\277\370\255\2724\2347\214\277\277\370\273\332\376\223\321?\241\025sk-\'\320\277\211z3\375!\034\254?\2161\342\310$\237\273?\316`\235tlN\312\277\334x\240\343\335\360\323\277\275\302\243\t\353\261\317\277\332A\200g\326\255\321\277jyq$\310\257\324\277%\032\254Qr\373\274?\316d\346\237l\014\267\277V\360\333\020\3435\336\277\020G.j\275\000\264\2776\354R~\255F\345?\315\204\025]\315p\342?Bn\320\250\nW\343?\261\231\215\337%\342\342?\270m\204\352\213)\260\277 \231P\271p=\301\277\016\253\221\300\223\024\344?\335^\220\374\332\335\304\277\306.\264\347\360\030\231\277Xs\261\276\311\303n\277\001\250=\200\240\027\340?\334\323\027:]\263\266?\027\000\364E\214h\303\277\251\221\n!\357.\340?\342\203K\205\200\025\326\277\353\250\356\272L\207\317\277\335g\215(\212\343\261?\346Q\3647\326\002\225\277\236u\351\275\272\254n?h\307\267\276\342\205\243?\236NG:\342\024\277\277L4H\301S\250\341?\260\330p\242\247\362\342?\256\365\240\373\315\237\334\277\005h\271><\343\247\277\360K\242\0037w\341?\n.\363\251\245\261\314\277\027\n\236c\274\275\305\277\320\241\331c\214\211\223?oD\275\001\342\005\302\277\241-\010aE\330\344?\257\314\276\237\330\022\344?\332Rj\243\370\300\324\277\264\037\221\0058\374\237\277\301<\277\203\372q\311\277\205\3501F\373\n\300\277T\214Vb\\y\262?qb\376\300\013\221\323\277G\253\275\374\014\367\305\277\372\211w>\013\233\335?\327\213_\200\226\221\344?\345]7\235K\016\314\277d\316Y\275\310\246\247\277\363\026\034\031<0\202?\314\232~\247\316E\215\277\231&\360w\275\356\306\277\323\n\333hc\231\266\277P\232\274\267\330\243\311\277\312\013\372\034iz\323\277\243#5\304\343\350\302\277\264qi\241\t\271\321\277\232~\3441^N\306\277\205\321IBd\211\320\277\223\"\215eU\337\301\277\022\331\007Y\026L\317\277k\202\003\265s\365\320\277\304>\"\"\014\316\340?O\336\365\t\010\374\205\277\225m\032\272]\330\311\277\351\033\376\276r\311\245?h\326)\301\250\305\276\277\"\300\216\244IN\336?0LC\340\212<\314?D\326\236\202\221Q\311\277C\325;\036+\037\326\277M7\242\336\000q\315\277\346lK.\020\016\340?\243\266\344#\357\275\333?\001%\221\277\254w\321\277F\255\223\247j\n\306\277\353m\330[o\300\307\2776\254\353H\334\000\273\277\330v\301}p\200\301\277e\246YE$o\321\277\372\\\257\341\3208\324\277q;\023\036]\272\305\277\267\2571\037x\313\270?s\332\3179\252\340\317\277\305I\355\207\320\357\244\2777tP\025\225\005\313\2777\340\024\322\361\003\271\277;\363zI\306\336\273\277\307\256\274\375\034\223\221\277\030\252j\233E\234\310\277\244s\033`(\330\320\277\r\375\246\277}n\243\277\212T\275\241\225\240\300\277\322s\311@\267z\310\277\\\377\256\317\234\365\312\277j\363\305\377\231\030\315\277NLr\033h\231\314\277\335\"\223\000\363\230\343?=\031\024\264f\267\267?m_\366\241\301<\352?\370;o\276lv\344?\206v\305\301\342\306\275\277c\353[\336\003\021\347\277XV7j\307\005\314\277\031\332uy\267\325\231\277O\212^_N\375\271\277\341-\014hT\246\225\277\377\310:=k\216\301\277k9\002~\256\262\324\277\223J\343\335\262\277\314\277\240(}\337\307j\274\277\262?\232\373\365T\261?\374f\2139B\345\270\277\243K\356f\374q\341?\334=\314\240\322o\320\277\221\252\346l\023\204\211\277\225[\377S\026\352\342?\321\317(\242\205\331b\277\373v\022\021\376E\340?\336+F\237\207\001\324\277\375\017U\235z\211\326?\035.\035A1\336?\277\313@\257\211\026j\335?%I\204\004\224\237\312?\201\006\274Hx\255\265\277\301\177\365\343\357\021\207\277\334\303\024\233E\236\322\277u\223\030\004V\016\341?\245\370\031\223\325\337\246?\001\222\237C\317\234\314\277\032\225\035\340\036\213\252\2773\312+\276>F\270?\304ep\357u\255\305\277\265\\u\236*?\261\277<\260\322\223\350\033\247?\037EB\000\025\363\341?\366\353\363\275+\'\262?\303\327\327\272\324\210\336\277\001\232\357}\375R\341?B\201o\201\241\332\342?t\253\020$)\310\331?f\356\037\340P\305\215?\244T\200\367\247\267\312\277\t\334_\3424\311\341?\312\022\000\220\321\t\266?\364\235\251!\273\034\315\277\372\255\306\247:\303\265\277\027\346\213]\2452\232\277\026X\370\341\2756\327\277\323||\337K\243\340?\361\233\343X\3567\273\277\2626\276\335/\362\316\277k\177\215B\227\022\244\277 \232\3659\251\365\263?\346\016L\202\370?\250?\264\276\365\037\241?\334?\325W\333=\016\275\200\277\242\370k\2218T\243?\277\272K^td\320?|t4X\202V\322\277\340\371J\302\263t\215\277\215\366\364\350x\022\312\277%8\232\310q\314\303\277\013\333\0059\336\323\341?\330\363\322\240\252:\300\277+\t\334\374\2679\326\277\031\035\322\240O\201\267\277\361\223\223\036\300\201\314\277\213\352\026A(V~\277\205\202\255m\345\000\340?$\352h\311\241\315\314\277\263\334\210\335-\377\340?X\345\204\0012\221\307\277\342\202,>\027\243\224?x\251\001\030\tL\237\277\346\365\263\232\246\266\251\277\364!^\215\242\275\254\277k\213\000\341\"{\304\277\263\340n\336r\324\337?\027`\304\343Ga\343?2F\325\303X%\244\277\212In\003-\323\345\277\342\026=\001^\260\300\277\2309\331\335n\217\315\277\236\341\366\231\355\351\242?j\363\353\306<\244\200\2778$\377\335LV\331?NC)as\374\224?\255}KJ\213\304\340?\312~\212\241\244Y\341?\241\r\341\024-\253\202\277=!\"\322\302\247\270?\324\341S\306\340]\303\277WI;\2402\277\340?\222\007\001}K\316\321\277\031Q\0348N\247\267\277\220\256gBr\266\250?fV\245\343 \327\317\277\356\242\340\020G\252\241?2\"0ZpT\314\277:v\234\02710\222?>\320\247\341\235\264\336?f\205\"\335\317\251\317\277\240\333Fa\351\014\214?o]\205\"Jl\250?z\242jB\372\360\242\277\231\222\027_\325U\322\277\025D\325\226\327\235\250\277\220\242\214\300q\274\333?Q\251+\002\020u\340?\3524\271\265\330\257\302?\236\3273\337\034\211\306\277 Z\022=|[\337?\212\337\373\270\211\034\316\277\272}\373\337\266\033\322\277\317\276\217\366\201\334\304\277ZBFY\"\304\300\277\002\232\010\033\236\336\321\277w\0318\177\227\342\343?\275\244\224\204\002>\333?\310zj\365\325\325\320\277r\241v\350\211\241\300\277J:o\010\3720\342?\222\336\036!V\001\334?!\370\010\312\247\246\302\277z\207\367\366\220\353d\277\266\311U\352a\201\266?\024\361\255z\206Q\331\277\312\343\304\262\364\374\340?\243\'\341\031\237\217\303\277o\350V\235\017.\325\277\213.\363F{v\317\277x\274$)D\033\337?CV\371\226 \300\311\277\305\264\251\2319M\275\277]\211\032.m\226\215\277\275\3279\233\310\253\326\277\232\334\336$\2743\345?\315\264\026\311\313X\270?\302I\334[x{\307\277v\023!\032\202\010\302\277\236\347\364ab\030\317\277\211s\036_\214\022\260?\312\377\206~\335Q\267?\345\000\272bX[w\277\374YE\342\222\341\340?U\262\013\",\014\277?\273I\210\311\206\373\310\2776O\277U\350\315\317\277-%\211-V7\217\277\347\344\240\337R\251\316\277P.\376\330ZVW?\310 \332;aQ\321\277\034\323\023\226x@\332?\303\031\221b_\266\316\277T\254\032\204\271]\312\277\367\300\330\214\035\036\344?\253,I\037l\021\276?X\352\264\311<\315\340?<-\344\266\"V\306\277\002\306\344!\024\332\272\277\254IB\300\306\371B?\001\252\023+\376J\305\277L\337\255$`\221\314\277B?\327\347\377\017\301\277=\257\302w\254c\313\277\235&\267\026\373\005\240\277\265u\252[\301\337\321\277{R\242\374\017\366\324\277\377\227k\321\002\364\343?\323\270\341\276\250\271\262\277\024p\031\201\302\352\271\2774c\362\202_\325\330?\303]\203\337\002\340\311\277\r\263\206AO9\343?\325\017\240\225j\325\340?w&\026\363\321\264\210?\331Iu\350\221\222\277\277\212\252%>\363I\304\277\204\263! \333\211\322\277\016ZuAp\241\245?\323WF\331\021=\261\277{.S\223\340\r\235\277\307?\236#\023l\301\277(\231\227!`=\274\277\330&W\251\207\005\244\277:\332\243\3750\276\303\277)i+\032^U\205\2777\027\240\351\374F\263\277\326d\031$u\251\325?\205\021\261w5\257\320\277\021\277(b\215\212\311\277\0362\'`\"\273\335?m\273\\\006\2244\240\2776\027$\"\241\022\321\277\034\251\010\201\246\217\344?\335\300\323\0329\201\344?\363\013\213^\001\335\233\277\232C\357\340i\252\330\277p\177\211\323\244o\340?\350a\010\003F\314\255\2773\370\177\376\020U\333?M!\241wtm\340?\215+\r\200\341\252\316\277\231\277\337\273\017\270\304?%\357w\203\303f\311\277M\253\266\325\213%\305?km\361[:\007\323?\177\037\006\241Y\345\343?qk\332\336\321\263\321\277H\343/\261\"8\246\277\227\301\336\345\236\005\313\277\341v\r\237\031i\300?\337\274\255\376L\340\235\277Qn\231\333\3269\325\277\311D\245l\354\355\330\277h\302@!L\233\337?\274A\264V\264\271\303\277\025\267\300\324\205\216\323\277\3173\223\373_&\300?\265\333\221^\222R\324?\324\334D\014\277\304\263\277E\233\210#\264\212\321\277\016\206\031\236\207\210\342?^%iH&\361\346?9`\272\275bU\340?\007p\006\301\333\352\303\277\271\326IC\256P\331?H0\233!\321\333\314\2771A\267\336\t\322\243\277e?\244B\351I\331?0S\254}\256\264\332?\365\\l{7\355\265?\273_\005\370n\363\314\277\256I\3303[\344\263?\216I\310\005<p\223\277\204\302V\277\210l\320\277\335w\322\343s~\316\277-\241\263\263\205s\270\277\034\n\300\273l\246\260?\022)\223;\350\351\331?\002]\342e\331\325\316\277\025&B\331J\036\322\277\336\030\201\377M\362\265\277=\343N+}\317\277\277\032\373\263\233\360}\261?I\277\221\001\037\n\260\277\256~\360\312\303|\266?\n\304\377\336\354]\272\277\267\253\241\036\354\336\321\277\254I\340\244\243{\317\277\006\320\326^\227#\330?\032\345\323BM\235\301?\322[\227uZ\222\300\277\362N\323\241\262e\317\277\204\212\201\340\267\302\300\277\333{\002r\323\260\257\277\276\007;\007\307\023\311\277\213fL^\360\253\322\277,$\005\273\006\342\343?\216\345\300\037<\342\306\2777i\277ZZ\362\325\277l\242C\236,N\305\277\216\245Y\352j<\250?i\344\024\231\220A\300\277\217YQ\336\"\213\335?\014\327\366\270gD\305\2770\3220!\213\031\345?\336\024^\233\360?\313\277\261\261\001\307T\360\343?\2259\247\243-\370\254?\026\325K!\312\366\256\277\305\227`\243r4\245?\305w\275\217\376\362\333?\017\027-\376\276\030\304\277J\333\256\206z0\320\277\000\276\004<\243\214\313\277\371\205x\240%\372\222\277\313\310V E`\253?\262d\216\345]5\343?\242\3662\274\037X\335?\301\313\251\360\251\224\277\277xZD5\241 \317\277\034\335\326PI!\275\277\357\005\354\276\361\"\220\2773FVDn\202\305\277\014\021\351\027\"0\237\277\2755\260U\202\305\336?\370\351\221i\341p\307\277\213\001\3200\316B\233\277\203\227\256\232\306z\262?\351\005D-r\364\343?\362U\372\"\004\030\330?\\\263\200E\321\216j\277O\241Fc\345~\303\277\177\337\0323\344\363\340?\2653+_\300\300\341?\261\243K\341<\372\271\277\\\332\374\001\007[\330\277\001<X\265Z\026\344?\375\'\221\332J\003\201?\343\355\265^\333\364\247\277\325\002\377\204H\300\302\277E\361Ky\204\205\306?\331\0060]o8\324\277\367;V!\314\n\340?%\302\3204r\'\274?\263\371\345\267\333:\213?\305\033\333c\320f\320\277\325\'\024}\231\303\326\277\257=Xk\315{\343\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_32"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "Z\201!\253[}\342\277G\034\316\326\243k\200\277\363\3554\004\215\272\320\277\315H\2656*\303\307?\355\272\267\"1\001\322\277\3017\321\327\301\373\273\277F\037w:%\332\307\277\014\300q\337\213\253\311\277\017\351\\\366\220\225\305\277\360\274\371\262Y\032\337\277\330\270a\210Z\242\224\277d{\312\275\002I\302\277\036R-\236Q%\313?\000\353H`9\343\313\277n\303\312\226\034\337\211\277g\304\232\004N\272\305?f\324\337\2777\225\325\277 \231\314\200\3141\255?\206+V\3034\302\343\277/\210\'?\322\225\345?\036\372\356V\226\350\317?H\326Q=\350\305\250\277V+\362o\300|\261\277\377\204H\300\307\344\321?\223\274cF\262&\266\277\032#\n\024N^\263?\215\222\333\037\275\033\254?@\351\372\364\216\t\323?\3125|@\335\226\245\277,\314\214\310\301\266\322?\014\325\237\215\364S\204?\367\257\213&@\342\260\277\367\355=\277\234\027\306?!\004\222\337\203\030z\277\217R*]\321\030\267\277\204\021\373\004P\214\320\277x\337\306\240\3623\303?6\315\330#\026i\320?;\323\3275R\235\307\277\235\240n\034\210\027\325\277\350+>\301\242{\224?\350V\276\035\227\'\312?\223L\3633\232\001\302?\020\337\323\346I\343\322?_\216hL\322F\266?*\354\375\241\364\000\351\277\3507e\321\350\314\261\277\337\377\246\373)\243\325\277q\372@\023\335\212\237\277+\256\001|}\316\302\277\261\362p\247\031w\302?O\035\355\260p/\263\277\202k\264=\366\212\335\277LHs}\202\270\325?y\262z\013\024F\260?g\3154\006BW\337\277\0367\231D\377\274\331\277\357t\204_,\304\341\277\334\244\334\\\200&\312?5*p\262\r\334\273\277{\336K\351\262\373\306\277\225G\372^\212E\252\277\347\005\361\344G\272\266?\327\323\365\341\254\n\343\277G}H\256Q\305\203\277\245m\357_\310\006\274\277^\260\247_\032\355\271?.:8\\\324\274\310?c~\260\204\234\024\301?\214i\246{\235T\333\277\022\322\340\327\304Y\305\277Zk\203n\212\242\334?+\304\002\343\tR\264?\210\346K\271\014I\320?\026\014\266*\354\026\300\277\202a\216XjA\310\277\376\370\246Dmv\303?~\376Z\342\361\202\320?[v\312\233\252\030\267\277Y\373\\\351\214\332\303\277\261\t\037\000\'J\272\277\343\374M(D@\314?s\32158\266\303\306\277\333w\320\342HD\233?pq\032\303\030h\257?\n\247`\350l\334\323?\255\3510\025\321\345\343\277\340\306\332\235\275L\306\277\3651\301\236\346L\261\277\240bo>\202\326\273?\016k\307`\007F\267?\350\2751\004\000\307\232\277!\325fR\371\215\315\277V\253#\005\0361\332\277?\331Z\2002\035\330\277\005\006\336\003SQ\272?X\376|[\260\324\327\277\031\257\360c\t\301\251?5\022\272\256\014h\261\277\364\003\221$\214\017\324?Ml\035\240$\362\334\277\243\345\304GY\371\275?\021\010\263\212\260A\200\277lv\244\372\316\357\343\277\004\013XYx\352\304?R\254\246-\246\200\267?\014\360!\004\213\223x\277U\027\021A\254\351\302?\235\035\200?\302Q\302\277\005@h\177\230+\341\277\227i\240\236\343H\324?\264\264\215\036C\220\345\277\026!\310\203%\205\303?\0102m\305\037\301\204\277%\0010\277O\254\276\277\236\034p#\206\031\330\277\327\241\232\222\254C\324\277\3564D_B\010v?C\357\246\276\240\303\327?bg\337\034{\344}\277\3279a\035\"\t\321\277\203\025`\205\177\004\222\277\202\307\032\242\310\342\260?\274\351k\235\205+\254?Z;\233\237,&\344\277x\013\330\2318u\232?\315\365\307\305b\345\302?j\247]\201%\255\260\2776x\333\\g\211\336\277\252k\304\376xP\310\277b\364\334BW\242\341\277\327j\017{\241\300\327?{\200\223\022\'\234\343\277\\\317\255c\236\r\317?\274EyI\020l\272\277\357\323\031aO\020\210?C\213\360\037\2405\314?\322\226J\252|p\306?ND\"\3419c\271\277\211y\271\374E\330\306\277\234\265\004\256e\021\260\277\244\354F\202\035=\303?$7\365G9\224\313\277\251\001Z%\036q\305?\000\363\034\323\013%\262?q?\013\002^x\223?w\2647\031\321M\305?\310=\341\025V\344\305\277\271Z\202\3479}\307\277l$\t\302\025\020\322?[\022\271C7\271\311?4\300\242\256\367\023\276?\222 \236\035W\300\343?G\265\343\341\230\300\260\277\343>(\336\267\020\334?\250/2\236\224\313\322?\362\330\350\377\311\035\324\277\241\263\263\205sO\313?\350A\213\266t\026\323?q\332\337\033;\217\274?T_+\333f.\306?\246\262\213\026^Q\271\277\024\3252\204)k\311?\320\336\256\321Q\222\256\2774\251\333\270I\265\311?B\317\207\343\320\215\265?V{\304\'\036\311\231?\t\246X=y;\311?\362\rd\301\355\236\304?G\315\262\202:@\266\277{\267\036*2\337\343\277%\2279<\010*\313?V\316\361!N\206s\277\022\027\333\377[$\263?\3419\306\333k\275\247\277q\007\316?\030}g\277W\344[HUM\261?\246\202\345c\322\272\315?\246(\227\306/<\324\277\3453\260\300\035\311\320?\363K\016\351\001\275\302\277v\216}\240GR\245\277Da\202\340\022\334\346\277\371 \\\345/K\230\277\226B{P\253\303\323\277~\006/U\304D\303\277\305\2225\224!a\200?a\336g\205\267A\274?JU$p5<\342\277Gv\204W\273;\305\277\025\220\264#\356\024\262?;\220P\216]\375\346\277K\023\337\036\276\253\335?\233\367\007\343\n\234\255?\337w\302\001\343\217\321?\300\372\177\242\240~\255?\252F:B\320\221x?\351\305?\"\\\267\333\277\360Q\373\204\036\367\326\277\246)\300\177\014\200\330\277\242P\005\222f\342\315?\310\200h\275J\204\304?0\216\200\300\271\365\342\277)\365~\006H\362\250?\227\324\340\350\3601\306?\226r\245;\333\345\277?\264j!\022\317\243\337\277\256\3015V\346V\303?\365C\021\367\375@\306\277\217\023.\375\256|\314\277\3416\350\205\032\t\307?cqI\037\004\016\343\277k\271T!\365\t\266\277\007\315\021\246\346z\240?9\315\2473\234\327\302?\203\315\214\300P\356\271\277\315\036G\367\234\t\313\277F\257\314|\203\206\325?\275B\027\273\032,\312\277\205\231\266\177e%\271?,9z>\373x\327\277z_K~z\"\323\277A,\027\001\200\251\324\277\330F]\347\266/\304?\345\341N3\356\227\326\277;\352Cr\215*\342\277\201?\374\374\367 \344\277d\003+\177\245\320\324?\241\3529\344\304)\242\277\3444~\300\207;\330\277\357L\262\037s\257\341\277\357)\020\250\304\226\313\277\215\361a\366\262m\311?Z)%\200rF\327\277`\302p\307\376&\264\277#\351G\201\r\241\305\277&L\336!AH\306\277\210\353\275\235\351\312\274\277&\001\007@\036r\342\277E\353\030\277?\221\265?\236bQ\350\'b\236\277\032\3109\005\207\204\226?X`\300y\016\270\271?\t\343#9\313r\311?T\\M\205\025z\320?!\365\215\236\021\033\335?\253\2543\337=\027\260\277\0161B\236{\024\275?(o\037p_2\202\277\032\034\200hA\303\342\277\206\304\240\300\371\034\330\277>\024\232^A\036\314\277\316\345\243\030b\355\226\277\231#\022\"l:\306?,4\003\241d\216\272\277\377\010\201dS\021\317\277U\277\322\371\360,\304?&\310\010\250p\204\322\277\306G\325\300\240\026\272?A\264\276\227\256\237\227?D\354\273>M\017\246?E\0336\200m3\342\277Y\236\254\275\364\373\342\277\262i\204\002\337\202\332?\346\246\204bV\350\244\277\357\372q\240,\201\342\277\251)n\201\251\313\330?\010\373~\203Y\325\322?\247\317\212\177\n\r\262?Xm\243\246\002\223\341\277\316@<}\312\322\306?H,1\350\347z\300?m\037\023\245\224B\303?\305`\264}~N\322\277\353\017\336h\021\233\310\277\367\214\351\256\221\311\351\277\232\304(!\273\377\301?\321;\025p\317\263\343?\327\245g\366P\215\304?A\233\177h\244\255\305?\355\320\023C0\326\320?\016{\312\377\036\033\323\277\366&\036\001\360\020\266?@V\307\\\337\250\266\2776id\241\347\200\343\277\013\000<?\030\372\325\277\367\306R\034\356\300\320?m\036\335\301\265\376\251?\034\322\243\007\020\316\223?\r\336i\310\376\315\201?nQf\203L\262\341\277\241\010\322Z\013\222\336\2770\222\336\3368AN?\005\242\253\235\366\316\323\277\034_\200\037\003\351\251?\276\005e\\i\000\304\277\276#\266\375#:\320?\377\316\325\332$\324\326?\254l\3048$Z\326\277\344\035\330\330\302\177\265?\207?\273*\355`\265\277\265\266\276\202\023\325\320?\376*\300w\233\267\317?H\314\242f\376\007\342\277J\305\352\202\006\n\252?\022\317D\236E\353\306\277\023ot\000\2122\262?[\352\244\347\253\236\300\277\251(\003\254\372\001\264?\317\035\351\243$v?\277\261w\024!T-\307\277\260\351\234\372\233+\326\277&\262jk\237\351\327\277\250o\272\341NT\333\277p\004\014?\366\002\325\277\204x\311\244+=\323?\252\334<\274\204\026\317?\240\305\352@\3527\276?\330\306\257\212\375\206\310?\214\004\246\025\327_\303?K\"Q!\204k\277?\325\364\362\236w!\330\277Y\216\014I\230/\267\277\342\311nf\364\243\266\277\035\306\346\333i\010\314\277\306\215\370\241\024%\314?1\036JY+\177\344\277\343\341=\007\226\243\340?\202\324\334\300\323Z\330?n\205Ua\330\006\221?\004\366\342\325\203\223\313\277\035i\374\004H\333\324\277\320\300(>\307\022\271?\361\353\217I\251\370\314?/\367,|;\221\270?rJ\006\2418\267\343\2778\n\326Y\251w\313?\272\314\372\336\360l\347\277\221rA\307Xw\350\277!\366t;\034Y\307?\'K}\276\005\220\242?\001\\=\345\240\235\263?\030\210Y\300\350\030\222?=<\021\345\207\241\320?\371\250\371\t\353\357\312?\235J\006\200*\256\323?t\355M\004X\001\311?\220\033\270\342f\341\334\277G\005\312}\335/\330\277F\007$a\337N\300?\312`\326\325.\267\306?U\t?\006e\371\301?<p\245\t\241$\312\277T8\243bs\300\305\277\300<\350\002,\254\316?\261|\242Z`i\222?=\222\273\235\267\020\303\277\261\347\245AUu\333?5\256f:\307\302\310?\336\253V&\374\022\346\277\325\370\371\255\245\231\261?<u8\374fI\311\277n\2770$\035\241\235\277jt\275#\031(\310\277\271t\'39\020\303?\315\247\022\216\356Z\270?\331\315\253B\323.G?\226\360!4\304\251\263?/)g\275Ru\264?\375\2648\000nX\325?A\272\330\264R\010\344\277Y\002\337#Q\036\301?\302\344\350\037\264\206\261?\343\\\273\233D\020\335\277\274axx\021\236\312?\3677\352\235\230\031x\277\324z__ba\271?\243\020\330\007\037k\262\277L1jk\002\024\272?\201\256\"HJ\037\314?2_\310d\035\000\230\277\013\201\226\215R2\206?HW\341}\362C\350\277\343+\r>\305\330\325?\005_E\004\353\321\327?10\341\206\316!\271?t\375/\225\2063\260\277,V\254\230L@\230?V\207\026\270\300\016\237\277\317=5\250Gd\333\277\364\204\014\201\257\352\322\277s\004\345\300\357\002\232?B\014\317\246~\271\307\277\002H\n\270)\026\315?\0031\277\211\327\253\256?\335\315\370c\377\341\334\277\342\002\252a\272n\276?N\326\003A\333\005\323\277G\315\364\236\014F\343\277\307\274\n\000\300\327\345\277\226\276^\001O\321\264?\314\003\201c\tJ\250\277\332BF\366\367\210\341\277S\001\234\203\014\311\323\277\250\271\005\340\331\375\224?\252K!\353\004\317\343?\250*]\217\374\240\267\277\002S\376\234\037\322\330\277\027>\215AH\022\327?4\242\2647\370B\345\277~\270\232+9]\324?K\237\014D\005\275\300\277\254%6\202\001\002\321?#\216+\344\000\260\255?\360\314\333C\210L\327\277\262\025\217\346#\204\332\277\023\302\233\034\333~\326\277\177O\254S\345\273\341\277\00269\337\374D\311?\334\035\204F\321\177\305?~\345\377]\270\026\340\277R\331\013`%Z\344\277\374\254\256\032\266s\325\277\202;_\322i\364\212?\t,F~y\330\325\277^\303\004\034\337\252\320\277d\266\'\362k\276\206\277z!x\3274J\331\277\236\274\002\260\205I\270?\300\221\345\311\332\313\322\277\014\277H&\257\347\262?\\sG\377\313\265\313?4\371$\177I\315\320\277\312*\327\241\273\200\342\277:~$\374\275Z\325\277T\347\254\252\362\230\323?x\225\200[!\363\231\277V\312\235_\265.\272?\350R\301\200\334\200\226\277\304\201\353\345\322S\335\277b\352[\244X\207\305\277\235\2753\332\252$\301\277\364\003O\010\272I\313\277\006\220\2207\257 \330\277\225}\236\331\212\n\222\277\253\316(ek\340\267?\014p\244\340\347G\323\277\230\236U\013\221\270\342\277\035\307\264\333\323\372\324?\302>\372Y>(\222\277\216\036\340\305\322r\306?+\306TU\303Y\323\277I\242\362\n\237\310\343\277\240bo>\202\326\244?\342o \311Q\245\305?$\334\277\r\214\027\310\277/\337\227\206#@\313?h\035F\"\343:\244?\322\365\276\235\266\331\257\277\373\270\354\306q\226\321\277\305-\223\237\\l\323?B\227\r\276r\365\344\277\242-\264a\267I\247\277@\274\360{\202a\323\277f\266u\201\334\257\344\277\206N\266\036\021\025\322?Y\312\307(\256\256\277\277\261v\312Y\216\206\344\277v\353N\332\3103\314\277\330\264\224$\266X\301?\273G\364:\373\255\302?\266\367g\016b\312\264?\305\253\213_\241\244\273?\323\337\246\232\264\304\322?\017\263 _\005\242\263?\202\311\215\"k\215\323?PiH\005\343\232\315?z\256J}\264\223\264?.\270\325b\246c\331\277\271(\345{g0\261\277\005i\306\242\351,\321?I\010\240b\346L\327?\241\266\202\260\227\311\213\277\246w\330\341;3\344\277\333 \3157&\264\261\277\036z\275\3018\264\261\277b\221\323\225\327c\315?\226\351\227\210\267\316\217?\352\177\363\301\266n\305?T\205\253\250f\373\342\277\304s\235\343/o\307\277+U\232{\345\315\306?\240\030z@\260\025\326?\221\"\327\362o|\340?g\244d\215\0103\212\277\242\332\371\341\224\267\333?l\000\035\203\241\320\305?\243\266h\\\223\311\262\277\036J8\035\226\300\321\277:\3610HUn\271\277\245\t%\335\340\325\302?\245\2066\000\033\020\245?\345\r0\363\035\374\324\277\250B4\241\346\367\326?\224\243\000Q0\343\335\277\363S\240?\002\271\324?9\355$\200m\215|\277&\260\224\300A\326\222?A\347\301\037v\315\326\277\347\273B\274\001(\310?y<o[B\033\322\277c\274\203+\342l\260\277\033\003\001\036\220\005\265\277\343\323\037>\t\234\255?\036&\257\010\335\251\315\277\"_t?\310.\304?\324\354\264G\005\324\231\277\331\034\316\231@S\305?\020\272\235\340\017\275\324\277P\262jJ\221\000\261?\207\320\326\373lh\303?\343\013\244\325\332\305\342\277\351\000\031\036!!\267?\350\036\351>\306\375\264\277\274\356J\036\221g\316\277\341\340^\333\323\274\262?^3\022\004<\'\255\277\327\031[\337\362\036\244\277\274\224\374\200\356h\321\277\223d%\377\366i\266?\224\3156\346^(\232\277\027\311G \230\002\320?\262\340UA\322\310\267?:-\313\031\202J\301?\321\332~C\362\337\353?\2051\032\340\037\202\342\277\275\n\235\225\274S\307\277o\323DD\326\377\343\277@\377w#w\001\240\277\003\020\363\274\206\246\320?\t\031e\211\020O\274\2770\001\215\014Q\t\204?9\373\337\036?\254\235?\0323\211z\301\'\325\2779\373V-\341\267\275?\200U\344\306\343\330\324\277\373{\245\003\304\352\317?\016tab\373\342\316?=\333\274\324|S\264?L\235\262`\003\036\320\277AG\253Z\322Q\307?\370\314\253\235\325@\342\277\322:\276~\007\215\251?w\255s\302:\304\323\277\n\277\263\301\262g\327\277u1\332\236\261\023\250?\226\274\256\035\224\311\313?U\254u=,\217\340?M\317\005?\273\r\342\277U\'\261\265\010V\323?\014\027\240\n\0130\301\277%\302L\374\315\033\327\277_\372\013\373Eb\327\277\224\310\231\201%2\273?\374\271\323c|\024\255\277\252d\000\250\342F\311?.\206\335=a\005\262?^\032uc0\365\332\277wg\253\2329\207\241?$\366dY\213\352\343\277\361\261\315#\005j\225?mj\311x\316\365\310?\361\246\002\276@\350\243?R\023\220\375\213\343y\277>L-!@\002\274?aZ\355\304YO\302?\017\223\025h\034O\342\277\247\274\014\265\\\354\325?B\237~\006\212\016\335\277\177\2319nBk\340\277\323\260\255\331\251\275\313?\373\310\364\036C\324\273?\306\036\363d\253\311\320\277zy\360\311y\265\320?\205\222xb\236\341\212?o\037E\337\325\331\345\277&\021+\355\036j\342\277f\303<Y\241\260\224\277\304\272\351}\200A\350\277xGY\316\304\305\200\277 W4\347*\'\241?\347)\342\334u\"\247\277u+\327\035\203\374\340\277\205\230U\034*m\253?bU\224}\035Y\321?\243\362\310\2026\367\267?T\353X\000\256\037\340?\327\353\'\255\t\263\325\277H\331\350\275\255K\300?d\2752\036\216v\244?\336\223fwq\260\266?\340\354 \3003k\322?KM\016\341\220t\277?\036f\026>\256O\244\277\231\311\005\241\233\201\270\277\364\376?N\2300\302?\243\242\373\203\222\023\324\277\356\272\320\277\321\314\324?\014S!?\227\200\322\277\031\274\267;\316\341\257\277\316}(\207\005\355\340?\334S\346\244\377\376\302?\367\315\341\200\264\004\241?\210\235\214\236\031\214\341?\341\354\367@\002\261\272?O\351`\375\237\303\323\277\025\017\275\377n\205\303?\335x\332\216g\237\277?Y\244\211w\200\'\235?p\264\275\277<\302\250\277\241\331Ta\\?\260\277\023j~\343\010\245\330\277\210\3074\21104\344\277w\023|\323\364\331\315\277[V\006zM\264\332\277<\\@\242\350\005\242\277\032\350\322\246\207\364\266?\t)\2116\021\307\342?\277{\r\342\177\342\342\277\250\373\245\352\303\237\300?Up\323\372\266{\322?.2\246\005\324@\317\277\031\237\023\214\224w\344\277\277\331\377c\225P\324?\025W\225}W\004\327?\036\220\235\032\334\024\302?\253\312cr\017\256\340?\237\223\3367\276\366\322?\257c\371F\266\353\311\277sq\n\341\2079\321\277\264\227\310` \243\342?\363P\200\315\336\276\251\277\221?\343\205\036xw?\'\3402\002\205U\303\277\242\243\013\240\316\313\276?<p)BE0\301\277\316R\364\270V\030\315?9\262\270 \327\335\306?\270\334\2525\336\347\325\277i[I\002?p\266\277\354\242K\254J*\242?\024\254\324`\330)\320\277\223\372@_k\320\230\277lp\307@C\344\337?\312:\230$\001\260\327\277\375U\333\250\251\200\347\277\\]\353\336\314\340\304?6\032#\206\333\251\316?\240t;^\365\276\344?Q~Z^\034\211\305\277\' \375a\021D\345\277@\224\334\037\367\006\333?\352\tK<\240l\244\277\304\347\363\366\214i\313?\016L\217\"B\016\334\2771{vL\037\262\270\277\021\212R\347\366\367\341\277\300\267\036\302Nj\225\277z\342\367>n\242\313\2777!\245\300\237-\340?_W\233\030\365\275\260?\262\371\023\360\306\235\345\277h7\002\nX\237\301?\037\266\272\275 \371\244\277 Dt\000\253\000\342\277n\023|@\221\010\202?\315\224\326\337\022\200\265?Y\260\340\300\334\325\327?\311\213\216\334\201\227\323\277{\231r\317\004\324\343\277\301\326\327\200)\337\346\277\206~}\337\205\316\323\277M}\305\277t\377\276\277\302\365\315\242\034\361\302?R\241\243\035\203\212\242\277]\236\224j\033\326\301?\245\340B\201\353H\353?G\234FA\215N\273\277\332\201)\271y\331\344\277|Z,\342\307\332\330?\341o\346\035\310v\337\277X\320j7\260\013\324\277c\300H\036>\337\343\277\321\010\323\203\304\356\301?:\324\2455\274\317\353?\031\337\376\371\t\251\313?\246\023\0015RB\266?\361l\311\211\372\315\300?\321\217\351}\241\317\305\277\000\300\332\346\000\240\275?\004\306\372\006&\267\315\277\241R\035Y\226;\303?\274i\351\300(\367\302?_6\256=\273U\326?%!\262\304\332\312\333\277\246\347\304\273\257\314\332?\343\221p\010\362?\313\277\362\005o@2\372\321?\224\262V\376\306\350\353?\021@\244\276\260%\336\277\257b\257\177\360\004\332\277\335\273a6\\\277\342?\001\362\312\232\375&\307?\374\201\335v\302G\301?\207\tY\314\276\341\342\277\241\030Q\301~[\311\277e\353\360B\000\221\254?\276W\320[\014\203\247?\370\242\003\263\276X\256\277\374w\330\237\037\241\264\277\372\324N .q\341\277\363^\357\335jF\310?\267\376\206\036kE\341?\215\331\016\035mb\320?\352\025\344\241\316`\321\277\325\356\262\2720m\332?n\035V\227\327:\304\277b_w!\262\024]?\363\353E\274\216[\321\277\323i\233\352\342\031\311?\200\022\372\3643P\343?Y\341\320:.S\301\277-W\344|V>\335\277\373s4\273\254\221\240\277\313RF\267\271L\340\277\210[O\276\352r\346\277\330\327\333\342\361\037\304?\245\361\321\003\233J\276\277\027r\266\312]\025\313?\324r\322\301\033N\321\277\024\215\336>\345w\313?S:?bG%\320\277\246lG\'\001 \333\277\026,Y>`\330\324\277}}J!\322\347\310?\355Mg\202<\026\255?\356Bs\235F:\343\277\274\251\314\275U\021\314\277\305\210\351\347\362\313\340\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_33"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\262\306\321\003\274X\266?6\217\303`\376\312\350?zYn\304\356V\327\277M\030j\240;\371\347\277\347\276A <\337\345\277>\366i\313o\307\347?\363\264\025^\366\351\343\277Cv9\200\3318\340\277\372\361\270$\336l\332\277\325%>\322;\360\346\277V\342\3608\373\371\343?a-\343KM\247\345?.\315\010\312\310\364\346?@\266\023\302\366\325\351\277f@\007\247O<\352?\352\206\267\030M\270\351\277j\214\020\375^\263\321?\020\375\177Aw\356\357?pPN\366\307b\263?U\010\365>\237\222\343\277\225\332\346!\256\327\352\277`\236\204\210\212\247\325?\362^\2652\341\027\351?\325\210\252\251v\027\346\277P\200\264A\036\350\333?V\3208\375n\364\331?\214\200\257\215\035y\351?\343V\336\341\270\004\342\277JQ\035a\007\004\353?t\301\317n\343\005\347\277\360yQ\375{\027\351\277\024\313\322\363\0233\351?\330y\002\376|\335\343\277\2011\021%\020%\330?Q\370l\035\034\014\345?\317)\320@\217\305\340\277/\320\244\003H\343\331\277\303\256\365^\337{\351\277Xa\3512\353;\350?m\032\200\262\316\335\344\277Jn^\346\205\005\351?\355\243\256\020\261\\\351\277\361=m\2364\376\346\277\244p\332\337\033\373\347?a\257\311}\037\214\346\277Y\311\001\232\214\323\302?\214\037\031a@\005\342?\020\273\204}\032[\343\277\023HGA\t\326\347?y\n\024\014B\324\346?j\337\334_=n\355?\001\363\230\232g\231\237?\214\320t\033yE\350\277\035\322\177A\230\034\354\277\007\366N\273NY\352\277do\316-\031\354\345\2772\323\254\"\222\027\352\277\205\222M\342Am\304?c\021\036\310\325\243\353\277S\206\375\340t\371\335?\2429\374\177\346]\342\277\032}y\277\331\377\321?\301\006\237A\236\230\352?\302\327:\345\217q\300?\030<\361At-\322\277\267 \000\335<\372\342?B\327t\363C[\341\277\314\322-\277\374\003\351\277\330\272\324\010\375L\352?0\2031\"QH\346\277@\364j\241\340\031\346?\255WGD\347+\350\277\231\370@~xN\351?\203e\021/\364\355\351\277\363\033\211D_\311\335\277\315\374r\177X\243\335?\271)\263{\321\242\321\277i\327\316A\341=\351?\352Q\237\201\344\037\343\2771\003:8}\"\340\277\233/@\354\226\356\350?\220\351\032w\224\024\344\277\303T\351\335\016#\351?\377\213\261]\353\034\352\277P\323\035zA\272\347?\204\377c\327\254)\343\277\346\217_\373\246\t\221?&\310\010\250p\204\350\277\336\376\277^\037\345\347?\211\200\340}\227\312\352?\231\306\345.xG\352\277\211d#kh^\350?\262^\220\035\351\246\347\2775l\347=\306\203\345\277&\3129\014A\351\345\277G\207M\205\364\353\327?\246D\320\240\272\334\341\277\334M*\371\\\226\300\277f\303\365\203\025\302\345\277\006F\003\035R\261\341\277\002{\216\300\006a\343\277L[u\200\324\244\353\277\rf]\355r[\341\277\207\274\2121U\325\254?\022\341\272\275\377J\352?I)\215= u\324\277\214\331\222U\021n\350?\330\364\240\240\024-\351\277\'V_\300?c\350\277)g\275Ru\023\270?\032+{\\e7\352\277\322\372\235\036\302\025\275?d\377\341S\245\022\353?\n\206s\r34\330?\262\300\221\037u\004\350?\0041\330&x\267\316?\243\261\366w\266\207\343\277A\321\341\306\322\354\344\277\235ER\177{\346\345\277\201\0021\001\246i\343?\301\317n\343\005\207\346\277\213\367F!\207P\347\277n\267\352[b<\335\277B\346\014\275\254\246\326\277B\'c\000\321a\270?(\206?\036U\010\350?\034\025\315=\003n\313?oN>\240\340`\345?\344\356Z\337\023\355\343\277\270\316\277]\366k\340?\001\023\270u7\017\346\277\233\007M\236\364\266\341\277\274\241[u>\270\271?C\376\231A|\300\344\277\226\343\272\316+\303\327\277\214z\363\341z\020\321?#\205\221\342\014\023\303?y]\277`7\354\351\277\315\t\363\201\221U\350?\367\351\323\205\263\366\345\277\370m\210\361\232W\350?w\276\033\342\212\261\354?g\351\257\374\236\375\354\277\212RJ!\363\365\351?\252\324\354\201V\200\350\277L\301\277\255`\000\351?\327\367\341 !*\352?\005\t@\222H\021\350\277\264\244\212\177+\033\355?\315\\;\254\313D\352\277\220H\200?\241\343\344?\250\2010\001\t\324\350?#kh^i4\345\2774\355\007\341v\255\351?1\226L\302C\340\346\277{\250\310|\233Y\350\277\376#x\350`\342\342\277\210\227L\272\322\027\344\277\3100\335\332x\346\350\277U\025\267]\252J\346\277\030\211\032\226PK\344\277\235\314\211\207A\352\347?).;\202#Z\345?\320\t\343\237\000\347\347?\320\255!\202\273\035\346?\025\r\010c\372\324\342\277\307\312y\020L\177\261\277]\031T\033\234\310\351\277\032\256\345\000\207\361\306?s\251\000\316A\006\347\277I\3501AB\321\262?\325\275\004]\261\265\351\2777|\301]\254\336\351\277\211`\332?h\340\347\277v\207V\037\366\237\352\277\216\276\223`\273%\353?\217m\031p\226\322\343\277U\200Ra*E\340\277xN\212\301\211)\346\277e\310\261\365\014\241\350?w\326\023\002^\253\342\277\240\n,>\r1\344\277\021\366\256\300\336d\270?\001\237ab\332\324\346\277\372\314\376\345\377\372\347\277\325swBTF\346?[\304\240\341\007\306\310?\302>\215\275\017.\354\277\331\230N )x\251?S\021]\006R\030\345\277$\216\206\235s\241\346\277}\272)\001\013B\276\277HD\204\301-\306\347\277-\013\201\267\233{\347\277q7-\035\030e\347?\335\375\032\336\346\214\345\277\001r\333!r\270\351\277\275\010\215?\325\361\344\277\271\013 \276D#\350\277\322\222C\233N\370\333\277|\232\366AT)\344\277\010\366\251t\301\352\346\277\240\302\251\300\335\032\272?\3653Pt\2701\347\277q\357T\237/\306\352\277\240Wv\240\3221\332?\366\005\231\t+\372\341\277\303x\0279U\010\346\277A\nC\211;\203\346\277\017%{\000b}\326\2773\257\331\200\276\303\351\277\0347%\356\353\237\253?\203\216\220`.R\332?Q-\"\212\311\033\351?\341Ub\340\261F\351\277\031\2452b\362\210\342\277\376f\336\201l\377\343\277uL\'#x\r\340\277<E\026\202\177\376\342\277\343\377\351a\303\216\354?\376I\327\247w\014\342\277!v\246\320y\215\344\277\032\017[\037{B\346\277r#\033\376\211\000\344\277\240\207\3326\214B\350\277V\205\364~\035\344\257?\031\221(\264\254{\333\277\003S\325\035\356\327\341\277\242\225 \310\346O\350?~\310[\256~,\350\277\036\324\260\245ha\316?\302\305\006\342\247\027\351\277\013@H\273v\316\351?\327\363\332\021\363Q\347?\217\365\036x\306\210\350?$W\373\205h~\342\277~(\207\005\255\266\341?\'\251\247\352yR\350\277\204\215\302`\304?\345\277\214\021\211B\313Z\352\277\300~\343\306\210\237\346?\372@\227\025/{\351\277\217M\227j\013\264\347\277k\321#\302\226)\347\277\036\0017\346\320}\346\277q,\336~\257w\351\277||c\204\307\351\333?\233\263\231\236\013\236\342\277\373N\335\246\211\310\351?iz\303\\\326m\300?flC \3621\347\277\222\215\254\241y\305\344\277\201\316\244M\325=\353\277\204\037\244\300e\302\347\277\312\0017b\2309\343?:~\342\337\353t\341\2773\245\365\267\004\340\350\277Dn\206\033\360\371\351\277\351\010\246\273g\264\331\277\352c\231\331B\353\346\277\313\225\213B\334F\351?4d\237t\340\244\274?\361\256\006j)\007\277?_\016\232\341/\373\334\277N=w\'D%\342?\3217\270`\350\222\274?`\315\\;\254\313\345\277E\"~\017\250\310\341\277B\356\277!\226\305\346\277\305@\317M8G\276?\212\360\345\364\253/\345\277\306>\267\206\010.\345\277H\276\330\234\377.\331\277}!\344\274\377\017\346\277uA\330\204\017\300\343\277?J\025Z\020\251\260?\206N\266\036\021\025\342\277\346\240\031\376\262\037\345\277\207\334oa\233\334\353?O7\365&++\346\277/\222\217@0\205\351\277\207\033l\301\275X\343\277\327\351\366H9\216\353?\364\364\266>Q>\345?\322\330f|\302\006\303?\263\222\373\302\320\017\333\277\213\245H\276\022H\351\277\257\252\207\375\330\243\351?\301b`_\343\341\343\277=\340p\325+\233\352\277\007_5\"Z\243\314?N\346\006\340\362Z\343\277\361\357\330t\2516\342\277\350\300r\204\014d\333?\315vC\"\206\200\350\277\373\232\335A\211\342\347?\375\350\'\336\371\354\351\277\2458\242\326\217h\352\277G\365\347\354\256\375\341\277R\314\346\026_\031\351?\216\342\177\237/\005\350\277e\202\310\277\"\201\352\277\342\365O&$H\347\277{\367\205_\003\205\261?)\325\231\326\001\353\332\277\254\022v\233\201\333\343\277\021\251\314A\216\365\347?\"\3662\037Js\345\277\263d\351\236\320f\352?\235\345\303\375\221s\352?\337\034\t\217\221\307\346\277\277Q\237\242\362H\345\277\224\031\014\001\002\316\346\277\243|\336\340M\357\347\2773\230\320n>\377\345\277\202\243\211\034\307t\351\277\323\t\262\257\206\325\327\277\317\240\241\177\202+\345\277\335m(\306C\251\350?\331\253\023\300b\247\342\277\255HT\301\013\217\344\277k\211\215`\200\320\345\277WMc\275I\372\342\277\000mP\240\364\212\350?)\303\237~\243\237\334\277\375\352\232^\234\367\351\277px 6\201\267\265?H\322\177 \212\263\351\277\240\254sg\201Q\346\277\256N)\nO\203\342\277\262@\005\321\244^\330?\324\275\251\243>$\344\277S\203\037\213#\305\354?\357\335\254\342\t\264\346?R\014\220h\002\005\350?\242\336!\377\253\222\264?\202\270\376\237\273\013\344\277\302\323T\344J\234\314?\246\035\253R\202\027\263?\2677\t\357\274\336\343\277\352\323\205\263\266\304\350?\ta\177#\313\223\345?@\370P\242%o\353?F\235\024A\367\000\352?\374\315\376\037\253\244\350\277X(\210p\202e\355\277[\207Y\036Z\032\351\277g\327\030\317\373\232\343\277:5~~k)\351\277\233f\r t\367\332\277\"wl_\233\210\350\277\265\n\254-\206|\345\277Z\275\303\355\320\360\341\277\271\225\024\016sx\341\277kU\340\236\306\341\347\277\3647\241\020\001G\353?\324Z=\314\003\275\350?\\\210zf\356\306\347\277E\204\332\312\246\267\341\277V\021,\026\330\306\301?\364\266\343\227\013\346\342?\303\002\251^\310T\341\277\343H\220\337\025@\344?\212\031\2064\3176\343\277({\360\177\354\272\352\2772\316:>\265u\347\277\270\252\221\002\260\006\351\277\364\206\177\001RU\321\277\376h\223\036\341/\343\277Mw\350\005\351\263\353\277\352\337\327CY\312\240?\033\034\333!\264\324\335\277\3633\232\001\323\316\320?\'\334+\363V]\346\2776\0052;\213\236\351\277\3721\234!\013\007\350\2778\272\255\241\222B\343\2776\037\327\206\212\361\350?hE\355\341?[\327\277\0220x\240g\326\346\277M\306\347\004#\245\341?\326(\332\013\273^\341\277\353\206\313\3743\033\242?W8\223\200\342\021\351\277C\005\342\320\266\265\350\277\200u\003\242\263\016\345\277\\.\260\001\360S\335?(>\210\256U\314\354?d\316\216\257\230\354\343?/\367n\230\rW\345\277\34143\351\245\230\340\277\232\210mA\245\240\341\277\014\267\327\335\227n\343\277V\331\322\376b\221\355?\247c)\355h7\341\277$\272%A\321\037\346\277\005\227}\rw$\345\277\313p\023 \320\232\345\277\203\250\271\344\321\360\300?\244\347\222\201n\365\240\277\253\rg\341_\002\346\277\350\263M;F\303\345?\005\"\233\026\202=\264?\322\331\023nC\226\341\277z\360$3(\244\353\277A\335\233:\352\303\343\277\304\344\025\241;\365\341\277g\300\264\003\t%\344\277\t\037\245mW\203\341\277\336d\351}\302\335\300?l\321\002\264\255f\344\2779\371\302\236U\312\347\277\371\206\302g\353\340\335\2774\\\313\001\016#\340\277bHN&n\325\343\277\213\330\016\343\301\230\337\277C\300\306\2326H\345\277hkm\257?h\271?\240\337\367o^\034\345\277\271\340\014\376~q\347\277\201au\273\311\265\332\277\356\362\245\236\242v\305?rl=C8&\334\277\331q\313`\3572\344\277\243\365\246\330\207+\340\277\264\353{`\t\034\343?\354>t\377`9\344\277H&3 s\314\346\277,\245\3023\374\302\344\277g\217a_\374\336\342\277\350\233\372a\000\030\346\277*S\314A\320\321\343\277\327\372\"\241-\307\346\277vYe\t\3379\316?\314\275\372W\332\322\307?1\357q\246\t[\354\277X\217\373V\353\004\351?\202\326\221]H\253\354\277q\253b\"\214\274\352\277+\267\233}qk\345\277\376\271\005\236\275\353\341?\"2\356\376_\022\340?\260\263|\270?2\341\277\027\315\024\204<\314\346\277\321\010\221g\362(\352?4uh\242\031\225\355\277\371\300\351\270u\022\346\277\223J\343\335\262\277\274?\200\221\341\302\313]\347\277\337\030\002\200co\354?\r\336W\345B\345\350\277\320[\341\002u\257\351\277\315i\031 \006\367\273?\275\261\373\351\232d\352?\003\244\354\343W\"\353\277\310\003\025~>d\341\277G!f\202#\271\351\277\345\354B\030\344\023\343\277/\342\226\352]\227\342\277n\245\327fc\245\342\277\377\2504\377;\244\351\277\323\036\345\026\251f\323\277n\0326%\264\000\346?@\010\226]\017J\345\277\354M\353\272\340\241\300?-\205\366\240Vg\344\277\004\000\307\236=\367\343\277P\212!\3745\240\253?8\346\n)\036\233\263\2773\350|_\371\377\352?\251m\036\342z/\350\277n\354#\001\264W\352\277\234_\275\037\361*\353?\2501\245\0367\026\353\277\2478\263\002\350\234\352?m\226&\000Zn\351?6\370-\000\256\000\352\277p=\257\0351\177\346\277?\261\251Nb\253\350\277\037\356\217\234\361\342\350?\2632\320k\242\305\353\277\217\270\021`\242\313\352\277\016\331@\272\330\264\351?\315i\036\331\277_\305?\226\312><\t4\333?i\251\274\035\341\224\352?\024\272d\177M\024\340\277\235\214C`Y\247\343\277B\231F\223\213\361\344\277\246\367\246L\336\276\276?C\307\314\r\237\327\274?\263)Wx\227\313\347?\252\314\336c\372/\322\277Q\373k\201V\003\347\277\002&\0252\374\014\351?\036\331\"\212E\343\307\277w{\265H\177T\320\277\367\271N\341\020\003\340\277\2612\032\371\274\"\344\277\036)lPE\373\343\277J \312\274\372]\346\277~ \324\240\303W\350\277\377\325\2311\273\335\345\277~\323\252L\347\371\337\277\304\225\026\242\001\304\343\277\025I\005_\342Y\351\277\226\330\316Z~\036\330?`R!\303\317\244\350\277\021;\360\275\001\336\347\2779\244(\002b\323\351\277\220\357\3670 `\350\277\323Th\203\300\010\336?\"\315\016\247\202@\351?\236\3525\342n\025\347\277+\263RRq\255\340\277]\363\364[\205\036\337\277\260>\232\301Jk\342\277\305L\354\353\nG\354\277\373A\270]\303g\343\277m\216s\233po\324?=\260\014?rj\344\277\216\377\310\225\366\335\310?\300a\273\336\252\351\347?H\226\202$\242\016\351?\370vC\001x\227\352\277sE\316g\345C\350?$\2774\373\3628\346\277k\2713\023\014\247\344\277\233U\237\253\255X\342\277\342\352[A.L\354?\273!2Q)\233\341\277;\263\023\024\365\370\351\2778i;\"\266\206\345\277rP\302L\333\277\351\277\324\037\212\227\341\236\317\277\360\354\317\236\373\r\251\277\275\330\305~`\230\344\277\001\014;\364,\364\214?\240YmY\031(\351?H\'\\\331O\020\351\277\016}\373c\357\377\332\277kU\340\236\306\241\350?\311\"M\274\003<\320?Q~Z^\034\t\340\277SZ\177K\000~\331\277\327+\217\342\332\030\342\277\271lt\316O1\346\277\037\257Q \375 \352\277\267{\271O\216\302\352?\234\346x`[\032\351\277\371erb\366\017\350\277Ve\235\371\356\271\271?\200#\005??\346\342\277\312\275e\363\335\322\334\277\214g\320\320?\201\346\277\332\341T\020\250#\343\277\2710w\322gl\350\277k\372\303\001\272\360\341\277r\373\006\242\376\345\277?\311\366k\374\323\027\347\277E\322\023;\277M\347\277\2007\223%)_\343\277ZJ\226\223P:\345\277\331;H\364\327\320\326\2778\350\\\233\327b\350?\2273\200\\\207\317\334\277$_\t\244\304\356\351\277eV\357p;t\345\277U\302\217AY\336\340?y\263a\250\036D\304?\256q\354\217\346>\351\277\013\232\226X\031\215\321?\017W\265Aya\330?\277\234\372\274\271*\331?~\236P\231\254\033\337\277L\356f\374\261?\341\277\216\261\321A\260\215\322\277\337\263dDXC\347\277\372\212$0\214\352\345\277\327\261\000\\\177\001\266\277B\217\377\237\026E\346?\305\305Q\271\211\232\353?\002\345\000\013\252W\343\277\315\243\013\177\300\002\352\277AN\363\351\014g\351?\025!\216\330\233\326\275?\330K\256\275\252\216\302?\345\371\302\032\035\206\350?_G\332\225\257.\260?\304\257X\303E\356\350?\370\264\232\340a[\342\277\360\010\2701\207.\345\277\243\234e\237\2226\272?\035\267N\022\001\275\337\277\215\274\007CxO\350\277A<\\\274i\304\352?.\325\273.\262\223\345\277\001\251\250UO\201\346\277J\336\357\006\207\315\347\277\034i_/\003D\353?2\334\312\\*\300\333\277\3445L\300\361\355\346\277\255Q\356\302\377k\333\2771\272\366\344\345\331\334?K\212\227\300\020f\337?\211\317\235`\3775\344\277{p\261\201\370\351\305\277\360\346\241\235p\202\350\277>\003\352\315\250\271\342\277\222\r\377D\300|\347?\262-\342\277i\357\344\277\230&\266\3143@\320\277I\243]\340M\322\346\277^@yi\324\r\344\277\321h\274\276 \223\351?\332\016\272B\']\326\277\273\331z\341)\177\347\277\362\007\003\317\275\207\344\277\223\362\244\226\367\202\307?RC\300\306\232\366\347?.\036\377\201I\374\346\277\322K\326\362\024\003\346\277\005@\313\251ST\312\277 rD\010\331\303\340\277\370\215\n\367%\266\345\277\271\227\352\270\320\013\350?\363\370\305\276\307\215\352?\203]^\312\nO\345\277\340-\220\240\370\261\275?\020\274\020a\262\307\351\2778\376\237\0366l\350\277\227(\357\241L\274\337\2771E\024\356\3602\277?\353\327\347{W\316\350\277C\325;\036+\037\351\277p\031\201\302\352\031\345\277\214\226\352\2373k\342\277\365\341\017\365q\243\351\277\001\212\354\336\345\235\344\277\237v\225A\367\235\343\277\276\013\245@\260\264\343\277\317BL\323\261\224\345\277\257l0\036\357?\340?\017s\223b\221P\350??\276\316\227(\014\351?\006\2757\206\000\340\321\277\370\254\245_\2466\350\277;\206\256\341u?\340?\1778\243Ae\367\347\277\235e\026\241\330\352\346\277\233\341\253\302\013g\353?\354\250\305;\033\r\336\2774\367\220\360\275\377\340\277\022%)\002\377\310\325\277e\347\310%\351u\344\277\240\222\262\306R\204\231?\023\371GB\317$\343\277J\227\202^Mx\351\2774>\335\212\016\222\341\277,\236z\244\301\255\353?\271\325\275_\026$\266?\256\251\240`\316\205\346\277\215\026V\340\032\216\355\277\212\020\rA\304\274\351\277I\350\333@\211(\344\277\264\006\316\235\211\036\345\277dQ\231\341\215l\241\277|\221\032$\216\306\350?i\251\274\035\341\264\300\277\375B\331\245WT\347\277\343\010\010\234[\327\352?\027GHQ%\322\262?#\314\243\321\3236\350?\251}\204\253M\355\353?\351\213R|[\264\304?S\2426\273\377\031\345\277\351\337\303_r\207\347\277A\232\261h:\273\322?\235~\263A\344\274\346\277\"\356\240\310I\027\266?\307r\",\3606\270?G\207M\205\364\353\327\277`\232}y\\/\343?\257\020\261\034|\374\352?\364\310\274\341\200\316\351?\375!\211\240b\003\346?Y1\231\200\030N\251?O\252d\235}g\344\277w\r\300\'R\361\305?\256\307\361\001\211?\351\277\340P\225Bb\363\343\277\356\223HG\336\036\347\277h\\\366\363\277\277\273?F\325\351\037\310\352\335\2772\036\245\022\236\320\247\277p\315\035\375/\027\346\277k\373\r\311\177\267\343\277\337\021\272\360(\372\345\2771\271j\001N\255\345\277\000|\205?\242-\344\2776:\214\356\305\374\346\277X\357&\256\031\017\353?\224JxB\257\377\345\277\304\356\226?:p\350\277Fg\364\376\232\347\344\2778w\344\335\313\274\351\277\272\323Bn+b\341\277\214S\010?\314y\350\277\220d\332\'\025\307\312\277k\276\010\"\244\021\346\277UX\200!q\320\346\277\276A\007\237\336\263\342\277\365\311ab\271&\350\277\2624\tA\273\301\346\277f\306\025\3668\374\257?\322\331n\'\266\'\340?\252x+d\021\267\314?\232\372/\306vm\351\277\rg#|\224\266\347\2771F\301\337q\002\352\277X\212\313\216\340\210\271?Dj\332\3054\023\351\277n\244\256\255\206a\265?Q/\3704\'\257\345\277\324[\250\241\262f\344\277\345\323!?4\026\347\2774\373\227\377\353\267\346\277\247\024\t\340E\203\347\277\\\322\007\201K6\344\27738\245\027\020\265\350\277\024\373\323_\022\233\343\277eF\r\340\014\"\350?\001jj\331Z\237\345\277\374\352\303\335\315Q\347\277g\302\345g\331\211\342\277P\365T\034A\211\313\277Qjq\276\277\336\330?n\225\026\344\035\326\350\277\363\017\360\33605\352?\213\360a\274\007d\334\277\316\271g\237\277\367\353?(\037\3147\354H\344\277tFs\350\035<\317\277a`\312~\345\232\344\277X\206\335\034S\\\332\277\225}\231 \321\241\340\277?o\tDx\311\306?\230Uu\342\264\230\350?\330\266I\301*\251\341?"
      }
    }
  }
}
node {
  name: "normalize_element/component_34"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\241[\\\241\027\007\322\277,{u\002X,\326?\320\372J\326\227\233\340?\357\301\020\336\303\312\350?;\242\245\237.\032\321\277\2373\016\232\002\276\333?\213\2409\004\361.\327?\372\253\021\013\306\322\350\277\313\030z\037\242,\350\277iQ\237\344\016\233\324\277\224\361\224z\273J\345?^\200\236\202\323\315\341?\007X\016\241\010\261\351?\n\312~\'w)\344\277\371\243\003\355i\342\336?0\235\326mP\373\331?\205c\257\332\251\367\306?a<\336?q\233\346?\262#@\023\202\321\256\277\177\342|\301\331S\345?\324LR\364\033\201\341?VW\262!\007\276\345?vA3>\202\021\340?\327\362- r\202\346?zrM\201\314\016\346?\344\337\302\025\253\241\346?\273\366?\237L\314\326?\275\3357c=Z\356?\301\222i<*\241\322?PV\014W\007@\345?\263\331G]!\342\344?\322Ux\237\374@\345?\373\362\270^\211\266\357?g\371\025\306q\273\346?D\035\261qX\265\341?\310\317g\274\204u\322?\312T\034b\027\200\347?\035\274\300\366\335~\347?U\270\246\277\345Q\276?mjE@*j\301\277n\277\337\334\035\241\314?K\003?\252a?\340?\376f\336\201l\277\347?=\310\035\374\345\217\334?\235\010\207\203)\357\335?\343\235\256\264\255\342\264\2771h:\236CW\343?X\27664\310\321\273\277\265k\245\204\0369\266?\330\247\322\005\253\240\265?\221\216\274\275\265\035\341?M\257\377\000\214C\350?\344\363\212\247\036)\341\277\017\302\222a\313\241\342?\304*9\202\257#\340?\221U[\373L\207\340\277\333\366\3420=\206\334\2773\245X\342\277\210\321\277\224v\233\036\261i\342?\177\355\252QY\336\346?\253\2746~Ul\350\277\2112\n8:]\346?p\026\202^\260\302\325?l\222\202\033\347\276\322\277#\372\020\257F\221\346?\246\227\275\021\202:\345?I2\0061+/\346?+\223m\"+f\340?\350\235\361\032G\356\317?\214i\246{\235T\333\277\300<\t\021\025\317\342?\225{&\240.\027\352?\001\34615\3172\276?mBs\000qU\352?\306\365\326],\316\347\277\334\350J\241\177D\347?\027\331)\261\306\264\350?qV#?\013\327\321?\023|x;gp\341?D\371\202\026\0220\350\277\255=\242\370\347\030\342?\357\264N\277\270\222\346?\316c\275\346\217H\265?; \307\336\244\314\333?\364\312/b#\271\302?\230\212\215y\035\361\347?\242\353\302\017\316\'\320\277AL\035?\257\023\331\277\240\004\221\240S\213\344?y\374\203\355\314i\343?M\263\'\036\243\376\323?\206b\237\276m?\345?\275\002\217w`c\305\277\320\267\242 \272\230\351\277i\r1\240\017=\345\277\016\0217\247\222A\347?0\276\303H\212\243\351\277Q\n\004K\277\316\346?y\350\273[Yb\345?\350\260\014\2739\346\342?Bp\"\033\304^\332\277\204I\361\361\t\331\336?\227\202=?\357:\341?\311\334\306\260\324\304\320\277AM\251\"G\240\342?\001\317\254[\363\331\345?%\334u\200q\032\346?z\366\"\373\234\222\335?\236\223Aby_\320\277\035|Y\301\014\331\320\277\257XG~\222U\342?)\375\214$\244\242\323\277\236\261\324\037\006\037\343?*(\373\235\334E\346?1V\202b\267\321\343?\265\" \025\265\252\342?\264\'7@\037\373\346\277G\357m]\336\232\355?\3473E%\032\311\343?\352Y\020\312\3738\345?^\323\305\236$\372\321\277\037w[3C\364\340?#\177\3256j\352\345?\254-D\240]r\347?&\244\271>A\234\323\277\343\311\311\037g\025\345?\3318(\202\2646\347?~\223\001\373CN\343?\205\305\260\3345\225\337\277`\336\251\241\211\247\344?i\032\363\276\032\025\352\277\356j\250\007\273W\346?\255\275\364\233.0\302\277\032\017\235;M(\336?\316H\316\323\312\216\347\277\326\rg\300Q\331\346?w\325\207\036\306>\350?\200\270\253W\221\221\340?\315\232\263\231\236\213\317?\351.\344l\225\273\302\277\365\317\272\343\240\306\323?\350\332\027\320\013\267\340?FcH\251\337\340\330?0cm\000\364\203\310?O\362\270\342\301\232\335?Q\222\001\342\246\255\346?w\2647\031\321M\305?&\204]\000Y\t\243\277\213O\0010\236A\335?\233\'\215\207\255O\341?\320<%\214\013l\351?\326\201 \376i\274\312?m\021bx6\265\342?-\223\206\277\313\361\323?\213$\017~\301\222\342?\225+\233\275\\\271\343?\244\230\223\2024\244\350\277AZ\255]$\336\346?\223\242:\302\016\310\343?\243\231\202\220\207\231\347?\344\212\244@\023\237\347?\034\276\277 m\014\311?\003\223\237}z\206\351?^\262;\356\245\272\330?\027\021 \236\200\201\350?\003\201)^\300\006\343?&\350i\237\022`\350?\253\217n!\033\212\340?~\374\347aO\230\347?\\\026\372\375\356_\344?^\304\220\377v\027\316\277\370\255s_\020\t\337?d\333\026#\032\366\331?C\t\351\337\344m\342?\215\231D\275\340S\347?\304\025\202\342\350\206\340?l\342\r\376\270<\343?\262k\326t\230\n\357?%\272>\336q+\330\277\350E\324\341t\324\351?3\027\270<\326L\351\277El\250\377IO\340?\256\363-{+\365\332\277_F-\244.\337\327?h\010\350:d\265\312\277\016\231<\257\302w\342?\035QF\001G\347\347?Q\301~\333U@\337?]\2564\337wB\323\277Gv\204W\273;\305\277\035M\036\344/\014\336?<Ca\345\n\316\276\277\rD\005=\212)\336?\224\"\350\036\310\220\340?\032-\254\3005\334\351?.l0\201\031[\343?!\023:\371>\246\346??vr\341\233\201\313\277\234e\375\0038\277\327\277\343\017\355\000\333\303\350\277\217\341\261\237\305\322\347?\nT\030\2762\255\356?\322w\257A\374\017\320\277\234\253%\236ev\261?Q!\313@mm\341?R\206\005R\275\020\347?P\357\352\334\302hr?\022~N\346\304\303\351?\247\0252\231\"\247\312?%\266\026\301Zp\350\277k\244\337\235\000\263\336?~\266\202d\tD\330\277Mj\303\274\"\323\345?\375\374s\250\021\300\260?\305\3360vg\322\351?f[\027\310\375\030\342?\336\363\262\334\210\035\350\277\031f\262\311+!\337?G\361\340\335\200\345\340?D\265\322\265@\014\344?\331|\267\324\234W\351\277C\214\024 \303\220\265\277\344\010!9\374\342\316\277>\256\262[pk\345?\361\036VnX\211\320\277\244\257\030\\\020\335\324\277/$\026\347^\226\321\277J\326~\276ot\345?\331\0060]o\270\334?\231\314_\276H*\335\277\333\031\205\250\353\036\274\277\345\370\333}\022H\315?\374~ /Z6\302?^e\320}\367\226\347\277\027A\347^\365\332\344?\354}\262{U[\304?F\016l\360\031\244\345?Z\232\000h9u\324\277\360\261\252\024\361\314\344\277A\357\215!\000x\337?\223\205T\366\002X\311?\365\037\343\233\267\373\332?[G\260\314\266n\345?o\366\007\312m;\357?=&\367\340ZR\342?\332\235\244\257\326\177\354?\346\305\221 \277+\346?\367\205\241\037W\324\347?\020\203\257\236Iq\342?2&\026[\265)\304\277\207+\261|\247\223\323\277StE\245\350\263\303\277\226k\033\220\316\n\332?\330\241\365K\037\025\332?md\r\315+M\345?\210eu\243v\334\335?#{k\375\200\t\351? z\326^\331?\325\277\350/\364\210\321s\356?\347R\\U\366\035\344?\"\207-\342\340w\266?\324b\317\"\004\371\321\277+\226\256\2427C\323\277\001\342lBs\000\341?8\300\314w\360S\347?\300x\345\376\023\361\275\277BD(\276\363.\342?5\301&!G\251\343?\004{\247]\247\254\331?\365%\341c,\252\320\277\304\227\313>v\264\345?\223O4\264\246\036\350?\252\021\270}\250\027\350?\212z^}~\020\325\277\262\r\334\201:\005\351\277m\3048$Z\027\313\277pb\243\007\231?\353?\350\363\366\214\351.\343?V\250f\275\265_\341?\034\274e=k\r\344?\266\330\355\263\312\314\341?\2411r\232.Y\267\277\270\236\327\216\230\017\332?\323\264\325\366\300\330\341?K\023\337\036\276\253\317\2771\257\310Tf\357\320?\233YK\001i?\342?C\025H\232\211\263\307?u\nMm\004\375\350?Ss^\010\336u\344?\305\013\267\266\317.\301\277.K\205\302\261\270\333\277\262\373eb\200\005\342?\312vt\022\000\222\344?\330<X\020\024\t\340?\344T!\324\373\274\342?4Z\232\235=~\340?h\257>\036\372N\353?\'\013\210\336\034-\351\277\253:\227!\017\366\251?\230\000\364\342a-\326?\205\335f\3406\251\341?\031\262\262d+\373\331?/;\037\371\336\272\323\277\'C\033\241\033\321\346?\243#\271\374\2074\336?n\363J\202\005\352\303?\'\023\267\nb \341?\317\223|6\274\352\316?cmB\020\3265\347?QwT\353\263\271\320\277TG\\:\305.\275\277\000@\312_\214\016\320\277\313\177\355\005\013L\341\277)\217\362\274\351P\321\277\010\241\315\273\373\355\350?Z\224\002\240\304\346\353?eg\270\236td\350?\364\217[\037\030\370\350?\363\207\217\035\216-\350?\237\322wm%*\341?\334.\260\236\305\230\321\277`\365\221\245 \t\323?\035\210v_\337\230\344?\255P\244\3739\305\350\277\211\310\270\373\177\211\337?1\036JY+\177\324\277\003\201\347A\356\340\346?\330\224\320\002Y\264\350?,\023\331b\022\t\334?\267\241\030\017\245\254\352\277\341\374\270\303G@\331\277\220\252\334\372\2372\341?\371\036\201\201\030\317\351?~lXtg\375\262?\020u\243\270x\262\265?\301xa\306o%\343?=\025h^\253\320\321\277W\356\242;\312y\330\277\274\007\350\276\234Y\346?\010|\372\337|0\305?\226\204\227\"\361Y\324?\007\266k\276!?\320?R\255\317\346\202\004\347?\342\036K\037\272\000\342??zy\360\311\371\341?\366W\331\210q\210\341?|+\366\275\2446\256?\260\263\370\177\233\346\337\277\367\324\240\036\221\245\347?}\201r>\351B\341?\206\262\350\204mW\332?\322w\022l\267\270\350\277\034#\331#\324\014\350\277`%\233\202g(\342?\034\321=\353\032-\322?\312hG\036F\020\335?\312\340(yuN\351?\230M\200a\371\263\346?\234\372\037\344\345~\323\277\272\305W\226C\246\346?N\360M\323gG\350\277\215\370\004?`4\343?T\010\334\241\376\206\350\277\255\312t\236gB\347?\177\324\313\224{\246\333?4\337\271\336\323(\321?\247g\356\337\304\251\343?\220\303\273\267}\252\347?\224\3416\"1d\342?\221XZ_\207\236\327\277\353&\347z\221\377\347?\200\333n\335(\r\346?\337\272\007\215\005\252\323\277\266\336\251_m\325\341?qE{\037\273\t\336?\225,\'\241\364E\343?\362\206\250\200\203\317\344?\337\307\217\000\2073\346?g3=\027\374l\342?H\201\r\241\2557\345?\376|[\260TW\341?O\220\371\374\007C\306\277+\350\254\005\254\013\343?\202x\270x\323\210\344?#\020T2\245\032\345?8ti\2625\221\345?DK\303\225X\376\342?\2040\0225,\341\343?(S\334#a\000\317\277\232\026i\240\001\216\261?\300bh\320+9\350?\303b7\340\261\'\323?\2347\353\3377\266\345?U\233\346\272|-\337?6\242\007\200\"}\314\277y\372\357^A\234\347?(\341\370\220\2460\305\277\014y\302\032\200\260\320\277s\355\217 *\307\306\277^D>\\0@\337?S\305\371@\227\365\342?\375N\264\'XN\263\277\237\005\374u\002\265\350\277\204Rj\345\024\323\347?\3025w\364\277\034\344?cA\304za:\312?k\216Aa/\230\273\277\263N\215~\321\261\341?\031\336\223$[\337\325\277G\201\364\003\r\254\335?\316/\255\372\032\321\311?\n\370\220Kw\362\357?/U\006a\260\023\351?\310\220\214jK\374\266\277\241\2463\203:\335\312?F\277\215\377\310\025\322\277\013-\004\234R\234\323\277)}|\235/Q\347?\363\tUAw/\346?\224\344\024x\202\230\351\277S\333\033\266\014\274\316\277\213\330\314\306\357\222\350\277\346\344\352lm\206\343?\263\304\024\366\376\020\347\277\n\320\000(\220\243\343?\355?\327c\307k\326\277{WV\375\276\275\323\277TA\177\2009\243\332?j\217r\213T\263\350\277G\231\303\244\256\253\354?R;\rb\261\267\357?\027\335\223\352\257\225\311\277DR\311\010\301\215\312\277\227Gi\374\3439\320\277\241!-\337D\376\341?\203\215\251\303#\324\325?s\364\370\275M?\342?J*\360\241\206\247\330?\323\240\252:\222\250\325\277\320f\356\204\013w\337?)un\177\323@\346?;\267\277i\260\237\350\277\"4\243\233\324\202\336\277er\007=\335q\336?\221\225\004M\360\362\352?4\366F)\370X\317\277\242\210\271bN\351\324\277D\306\376\r5%\346?\264$\335\"r2\320?\024\025`\016q\"\344?A\017\326{\001\250\307?\367\222\245Z42\276\277c\306\210\002\205S\342?\246\272\333P\214\207\341?\341\323\234\274\310D\350\277\202\010\212\202\215)\337?[`,_\331\275\342?\002\203\244O\253h\323?\t\263\001\277\343\'\350\277tH\305Z\327\203\342?\377\007\365\200\273d\354\277*\315\336\000\320\364\345?-\215F\333\204}\322\277d\223\231^\244\310\322\277\310|@\2403\351\336?x*;XZ\241\347\277J\303|\273\035\010\330\277fr \332}}\346\277\2302p@K\267\342?T\236\212eD\263\356?\360c\026\353e\245\354?\350m\246!.\251\321?\305R\311\245\226\222\341?k`\355 ]\t\327?L]\246\344\244\311\332?V\001\010i\327N\337?\310\335\326\314\020\375\336?\276~\220~^%\350\277o\275\246\007\005\245\344?\271\373\034\037-\256\355?,\370\n^6r\342?\345\320\"\333\371\376\321?MQ&\034\027!\321\277\362\027\304Q\003\227\345?\276X\316\224\214R\340?\247R\375\224t\036\350?7\203\350\336\375\320\326?&w\361\341\006z\343?\364\243\002\243\242\234\321\277N\004\232\235\177:\346\277\222\023\334\376K\210\351?M7\344\372\322\266\353?[j\224`7\215\335?\266-\312l\220\t\346?\333/D\363\245\234\356?\223\246\346\027\312n\350?\206\373\320\036\222\016\340?\262\357\314\374Qq\322\277\340hd\343\003\263\322\277+\377\265\027,\260\346?^\n\264\340\352%\277?t\3767@z\024\327\277}\206\201\370\n\\\340?\037VnX\tL\335\277\201 @\206\216\235\347?\033Q5\325\3562\347?\251\321\026\235MC\320?\331\265\275\335\222\034\321\277%\010W@\241\276\342?\2567\336\333\374\230\320\277\233q\\\276\334D\346?\006\243\016\002]\341\344?\301\204\033:\207<\343?\344}\342!\010\007\350\277\240\223\224\252\243\031\356?\031[c+\303\223\340?[\264\337^\302\326\344?\355\263\322\275\261T\347\277\004\370\270\200\341&\346?\227\337\016yp\034\344?/\244\005`\352\004\314\277\374p\220\020\345\213\341?\207H\362\001&\265\344?<?\326\2358*\351\277\320\216\206\031;]\300?\300&\306\215\266\205\315?\361\371z!\221\364\322?\376B4_\312%\351\277\032\336I\227@B\316?N\013^\364\025d\347?\002?O\250L\026\340?5q\233>uk\346?\250ZE^Z]\350?V\333E\177\005<\345?P\307\000\334n:\330\277ri>\337\375\216\350\277t-\2659)\247\325\277l\314\353\210C\366\344?\265,\004\336nn\337?\312\322\373\204\273\314\314?G{\027J\201\340\345?A\305Ha\244\030\347?\217\260\003BF\033\351\277u\216\001\331\353\235\352?\215\205\327\344\337]\351\277\245\372\255!a\255\335?\016tab\373\342\336?`(7\274\346\366\317?m-\335n\223\033\326\277j\361\020c%\350\330?\376\327\024#\246\237\323\277\271\343M~\213\016\344?\024^\202S\037\310\324?\215w\r\033\341D\316\277_\t\346\340\200\363\342?\r\306\210D\241e\341?\255JC\t\nn\312?&\203i9L\013\305\277\253\020E7\261\266\344?\\8\265\330\222z\314?m\356\277\000\210\374\351\277\255\223\310xs\274\305\277\211#Q`\350\356\345?]\036c\325\275\241\266?\234%u\300}\366\351?\021\374\261A\r\274\337?Y\022E\355#\334\322\277\220\307\302\306\253\342\344?1\243\253\266\223\357\313\277%\036\365|r\271\332?\363\302c`\231.\347?S%\312\336R\216\347?q\215S\235\243(\347?H\376\273\231,\311\346?\203\351j\341h=\350??~\302\033\3127\265\277\004\275\201\023\033=\347?\253|l\036\311\035\325\277T1:\305O\210\334\277$\235\334J\n\207\351?o\323DD\326?\333?u\\l\336a(\337\277I\2578bN,\342?\203\375S\201\305\247\247?4\350\225\374\231\313\324\277\266<\305`\264}\316\277]\360q\277\246\373\345?\257\325\026\205\372\251\330\277\213\374\372!6x\346?\236P>\363(\013\342?f\004\247\200\254\216\325?\324\345\377\033\234\004\327\277\336\325\037\037\374\335\346?\316\030j=\021^\342?\316\341\234\t4u\315?$\330v\342\213\231\342?(\373\235\334\245\303\321\277\252|\317H\204\206\341?M\325\342\370F\331\340?\350\275s \322L\347?%\001\017\261f\t\346?\230\262\302\343\221n\347?\323s\301\317n\343\345?\007_\230L\025L\346?\221\025W\3606\312\345?\250\016\003\247\210\235\347\277\332\317\275\342\004\001\344?\206\222$c\020\263\350\277\374C\247\245\301\006\303?\322\036\212]6\365\343?\201v\207\024\003\244\346?m\007]\241\223\316\327?7\300/\242\253<\344?\2130\352\377\301\214\343?\246#%\342RZ\350\277y$^\236\316U\353?\303\n\\\303\261S\345?\317\263\243\202\324\267\346?9\313U\301\342O\336?\254f\245b\306\210\340?\326\035\213mR\321\307\277\017M\217\\\355\027\266\277\332\244\252\"?\217\350\277\016\242\367\276\237\267\321\277$?\207\2369\220\345?\236\343\355R4 \312?\t)\2116\021\307\342?\266\2003\245\263\033\310\277N\311A\"\320\215\350?\260]\322\377\017\303\341?\035%\n\210\244\261\350\277J\371\377\'5\352\324\277zB\206\300W\265\343?\362\326Tq>\020\344?\257w$\003\345[\341?zS\221\nc\313\350?\303\224\355\350$\000\344?\257c\371F\266\353\311\277\365\025 \341\346:\344\277$\214\260\362\025\256\345?f\":>9\356\342?>R\257!Y\\\345?t\251[\207\264\327\334?U\376\357g\374\353\273?\036i\025\242\350\346\347\277H|8\222\025M\342?\002\271\304\221\007\"\351?\236\313yk\005\362\352\277+\341dvqv\343?\nFF\203\353\274\333?C7= \267<\351\277\0026\367\302*\377\310?\351\304\263>\304\252\357?D~\005\202c\303\351\277z\322\364\237V\315\262\277\002=``N7\346?\267_\241\203\354\004\337?\001f\000\240q\376\341?\001\274& \375A\343?\243\375\325\004\315\276\321\277T\016w?\270\254\341?8\213\264\340\207;\333?\"S>\004U\243\337?$\277\227%\256!\304\277\007\300p\225\304\345\306?\320:\221\375\177\336\266\277\315vC\"\206@\347?\020\026\035\342\202\240\345?\355\200\353\212\031\341\336?\2677\t\357\274\036\341?\347@\007D%\201\315\277L\"V\332=\324\326?\025s\020t\264*\343?2^\220\200\023\002\305\277E\327\205\037\234\017\340?\322\240O\201\037\327\343?l\303\223\243!_\271\277\206\340<\305?\246\305\277\034!\352\333\325-\322\277d\034\206\003\337<\311\277\022@{?\177+\351\277\360\321,\032|k\345?\036\367R\035\027\372\342?\037\366B\001\333a\341?\226\355C\336r\025\351?\200\201 @\206\216\334?\3350\300\364\254\332\334?\256+\250\240\211M\314\277\261RAE\325\257\341?\374\312\275\237\236g\330\277f\'(\352q\004\326\277@m\361|H\260\321\277\357\214\266*\211,\350?2\220g\227o}\340?\2156},3\233\345?\364\314\242\342\305\303\345?\242\016\206\225ec\340?\021\2150=H\354\331\277\023\217\325\367+n\346?\203j\203\023\321o\341\277\301\344F\221\265\006\343?\035\256\325\036\366\202\344?W\312\327\n?]\342?\005Vi\346$\357\316\277\300\255`\3007R\346?^f\032E\275}\307?\353\345\363a(M\342?\345\331@\025\222\347\343?\0103\267\214\345\247\334\277\277t\346`.\220\336\277\3559\372\251;`\343?\027j\207\236\030b\353?\201\314\020\277I\360\350?\271f<[Q\324\325\277\304n+\377Rm\343?\374\026c\201+P\345?\234\333\204{e^\322?\365\372\254\225}\025\313?\342\211j[\336&\344?a\025\261\200\360~\320\277e\221\201\227t/\351?\036\033\201x]?\335?\235y\203y\331\300\340?\325Uh\275k\022\322\277\345\323!?4\026\347?\177\035\017\350\022/\300\2774\333\221\301\274\355\344?\030\001\035\377h\254\331\277\r\200\0029r\256\342?\303\302\377\014%\311\343?7\361\335\377*4\324?\307X\267\213z\322\322\277cw\344\274\275\363\336?\'3\307\272\004\034\224\277\266\002\226\236\3414\267\277\\\305\207~\022\244\347?4h\350\237\340\"\335\277tab\373\342\265\315?\257\334\301>\360G\351\277\240\335!\305\000\311\342?y4\037!\024E\350\277\275\207\251\377<\245\271\277\262\240\315\375\027\200\343\277T\237\263\036!7\346?L]\350\000w\317\353?\323\257!\366\021\021\303\277Lu\\\350\245=\307?3\277\334\037\3268\311\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_35"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\3369\326\275\374k\346?\303\353~>_\355\271?\240\2773N\0018w?\202S\316\000\337\271\254\277\377\275\210tG\030\251\277F\010\260Dw\373\315?\3778\345\372\014\342\325\277\235-\336\227Lx\261\277\016\350\371\221*\243\261\277\321\264I\337\022\342x\277kZ\224\237u\211\325?\3728\344\260E\\\340?X\200B\177\231\326\313?\320D\371\376\335m\243\277\272\237\266\272Z6\324?\241\017\371\333\\\204\324\277-)\322XV\365\347?\322\2047\265}Y\324?;\221\375\177\336L\347?\223\307\371\271\246\342\220?\204\320\346\335\375V\324\277Xgc\302\273\036\320?\305\302sc8\346\320?\007%\314\264\375+\261\277\255\036(\236P\033\322?\0162f\236\236o\316?\311*\031\276\215f\305?\234S\311\000PE\324\277]\260&\337\004\220\267?\206\230dGW\247\266?\265\320\000\244W\377\312\277\3228\263\341\3313\335?\3359{\004\212\032\301\277\326}\370\340R\241\271?\211\006\214\242\305\341\340?\013\025\261\302\014\221\333\277\374.2\"\315\257\302?g\301z\222*@\261?\343\305\302\0209}\270?U\256\023>+\316\256\277C\245\334@+w\273?\224-7\2750\276\320\277\323\203\304n\206\270\247\2773\205,\335\355\022\255\2777&\233\335 {\321\277\313\375i\376\363O\327?8\242{\3265\332\334?O\331]^\210\356\265\277\223m\224\200\216\022\244\277\255\247c@@\277z\277\023\351\206\277\211\025\332?\246\306D}\244\036\246\277]\274Wa\276\262\212?{`\360\376\262Z\324\277\024\347M\352p\031\332\277\202>b\3128\354T\277\200\003\305U\206\355\302\277k\032\312?\351\032\347?\177\207`$\315B\326\277c\343\013\244\325Z\320?\3301\350c\302\330\310\277$b\010\010\377\205\311?q\263\003\244\271\362\216\277I\325\033Z\t\302\346?\323s\003\354@)\264?>(\305\032p\316\330?L\261\306\200\274\274\256\277\207\'GC\2762\321\2772QJ)d>\301?\n\260\270\315\2163\262\277\312\211v\025R~\337?\371\013\342\250\201\013\305?\341kV\035<\212\255?\333\177F\344\031\006\230?\377\361\271n\2452\272\277c\221pk\034\373\272?\246\262DA\322\242\261\277\357\037\025C\225A\225\277\\k9\341o\205\320\277\313\004\rG\241v\253\277\327\222\002\311C\370\305?G4\252\241Gk\245\277\216c^&\016\311\260?\005\022V[\230b\331\277I\235\343P}\357\270?\\\"rU41\301?\261\007IU\3116\347?\363\243\201\"\215?\240\277r\004\343\277\304h\340?@7M\002Hk\322?\342#A<;.\326\277\347B\233\322\260\016\340?\264\205RAf\343\262\277_~\335\340\201\305e\277s\367\217>\023\205\254\277O\362])OI\306?<\250\250 ]q\271?O\312\353[\302\256\255\277\213\030v\030\223~\302\277q\202\200\306\226/\303?\354T8\003\325\237\243?\034\211\206{\033\321\331\277S#\202\336\014\030\213?o\260\201\276>\204\346?\376\306l\003V\222\323?C\3368J\332d\277\277w\366\327#\273\357\334?\346\327\007@y\353\323\277\320\204\031_#e\274\277\357\3165\'\212+\350?\316\233\324\34128\322\277^E\312?\310\314\346?L\256Z\200S+\320?\332\351\203<\3556\300?\242\350\211\000\n\"\340?\212\250\rw\303\360\305?6\325\213\210\377\307\274?E\372H\2453K\330\277U\370T\312B\246\265\277\326\221~V\364\342\326?S\206N(t\371\233\277\231ON\233\016p\305\277\203\334E\230\242\334\302?\202\301\230\241\257(\267?\345\200\270\006\021\304\346?\304\223\335\314\350G\337?\210\256\227\350$B\275?\225\n\317\360\013\324\334?X\024]\264S\265\270?\245\221\333\236<\006\275\277\214!J\305\020\212\342\277\204p\273\206\317\014\304?\330,v\177\345v\350?\031\325\226\370\253\031\265\277\025bL\3774\343\261?\274\220/\035J\037\301?\304\325\371\236.\336\301?/\236\305{\243\020\324\277r\213\032\310\212\314\300?\307\177\344J\373\356\270\277\327{\371\266\303\323\307?s\376\036\243\331H\316?\371\nw\323\322A\345\277F\304\275\307\323Q\303?s\246\340[\036\214\323\277\024\266\372Ed\263\333?\2060\247\231(!\274\277k\021\356!#\230\316\277\261\213?\335\202]\324?b\3356[\222\346\322\2776\016\253.\226\330\302?hL5qz0\276?\335\306,\234 A\307\277\347\213\336%HW\307?\013\007\245\334;\362\301\277\342\277H\201h\032\322\277r\250w\2428\010\255?\216\240\301>\353.\254\277\350A\213\266t\026\323\277\316\266h;\205\340\241\277\212\216h+\304]\250\277M\243\311\305\030\330\312?\315\001\'\200\007\253\306?n\360\317Vo\236\310?\243@\237\310\223\244\302?\266\306V\206\'\252\272?AW\215\353\000\004\272?t;\003<\314\313\323\277\312\307\213\330i\234\277?mG\345\344M\027\323\277\324\350\037\216\277~\350?o\256\016>\234Y\322\277\326^\331?.\365\335\277\227\306/\274\222d\300\277\376\306\350\312\261\006\314\277\377\313\367\204\323\337\331?\317\025\000>\323\246\240\2774,\033\335\016\373o?\227!LY\237\325\256\277\177\031J\365\266\374\317?O\377\274\035\237\230\306\277dP\267\375<\027\323\277\364\225\264\240\3777\346?\013\211j\000%t\325\277\257/Q>\266\305\262\277\026-\202\367<\034\316?\334\325\314\326\321\243\313?~\263\305\034\241\362\334\277\2272\231\277|q\346?\312\243\033aQ\221\301\2778\342\177\341KW\321\277\223]\243\3042&\307?i\366\345q\275\222\321\277\033\262\313\001\314\006\320\277\256N)\nOC\311?\250\003\0273\333x\266\277\214\352\235\237\034\344\320\277\235\0255\276M\204\227\277K\344\345]\263\344\316\277P)\002\336\372\227\302?]Q\010\354\203\217\266?(7@\037\0337\322\277M\033\304\275\350\301\346?fk\\\203\347s\320\277dC\365\3361\337\325\277\177\224\246{|\306\322?\336\327\222\237\236h\342\277\275\342\210919\306\277s\321\363\033\344\275\327\277&\271.\3025\363\265\277:\237\215\236S\267\323\277_W8\3569\325\345?h\003UH\236\020\311?\177\311\235\004\374;\267\277K\037\272\240\276\345\307\277_f3\342]\t\303\277\310\370\305\337\325\366\306\277\024I\354\301A\216\320?\242\020\\@\303\266\336\277A\016\255\302$\344\324?\257\261\265\201.o|?\214\020\242\245\300<\313\277#Cu\020\307\374\271\277\001\203\225$~\256\206\277\374\212\024N\373{\270\277\317T>\272\307\310\345?\354/?`\263\026\272?o\'\266\'\3552\302?\270\253\333\311u\215\306?o\271\331\243`[\264?\274^\365\3332\273\350?\350F\375\232Q\030\341\277y\307kVd\021\244\277+\373K\336BO\304?j\350va1+\340?\273t\351a\334\024m?8\325\377\336\022\245\327?\372\261\254\250\177\030\275\277\251\"h\016A\274\243\277\247\271\354B9\362\331\277\337e\271~W\212\230\277\010\200\236\304\357?\330\277\311K\253\337T\275\272\277{4ri>\337\313\277,\236\022\301L\234\263?\222\274J\251\021\033\315?\363\n\372\301\257\207\323?l\305H@\226O\214\277^\3568\352\215\377\322?!Q\r\240\204~\350?\271\243\203\036\377?\266\277S\335Ga#\270\274\277d\2731\363\323\356\336\277\334@\313\004\r\007\321\277:\340_\251\323\246\324?\020)\037\345\324\214\322\277\t\361\331\036\343\250\247\277uN\036\334\276\303\307\277\236\374\'\311\204\251\323\277a \000\037Y\314\303\277(\"3\177\233\261\267\277\346\360\244\340\204\035\347?\006R\275\220i\210\350?(\224K\004&G\322?\244\371\010\241(\365\320?\001\277g\240\t\037\347?\215\202\202\200\354]\276\277\357<\361\234- \270?\032\307\304\275d)\325\277Dz\233Hz\342\346?\3132\037k\241\277\304\277t]\370\301\371\324\272\277\213&\'E\361K\273?\311\301\021I\231y\272\277\335\220\353K\333d\306\277\3511F\373\212\373\332?\003\034J\006\343T\316\277O3\356\027\3752\306\277z\205h!\277\206\300?,H.]\223\376\222?\305~\005\0379\010\321\277\007Vp\240\t\022\250?\266\002\330\272\263z\307?G\177\036Y\257\230\340?\360\356\022\346\207\333\347?\256r\025I\303B\310\277\271h+\243O\363\324\277\000&\200\315\377\314\276?\303\312\323\177\367\n\305\277\206-\013`\2512\301\277\373\005\273a\333\"\351?\002W\344\235d\'\207\277U\251\016\366|\206\211?J\311\274\237d\274\303?\223\365a\336_\024\310\277\313\261\304\034g\307\334?TZ\034!EU\322\277M\307\265\004\215\227\321\277[\207.\236\375%\244?\362R\332\260\340]\272\277\333\215\333\273H\031\327\277\361\00261n4\322\277\364\025(R/2\260\277\244\303\246B\372\365\345?d_\354\234\352\271\256?F\245\"_S1\327\277\\%\324\343)q\275?\221XZ_\207\236\325\2771F\301\337q\202\316?\033P\312\377?)\331?`\370\327\336\346\016\224\277\201\373\t\200T7\251\277\323\344\234\2675\022\262\277&\206\211\253o\005\274\277\030\376>\251\027x\305\277Cs\276TCM\270?\254\263s\375/\025\314\277[\343E\274\3737\247\277\356 <\373F\313\313?\254\207g\275\243\274\246\277mLs\036Z\323x\277\017(T\235\371\310\247\277\005#\345\335G$\316\277\003\246\241\200\314\322\337?\3667\202\003C\036\243?\003S\325\035\356\327\322\277\372\354%2\030\210\347?\317\271> \216}\300\277\235\235\014\216\222W\271?\311\220!\317G|\207?\023\326c\256N\306\272?\204\214x\231\376\370\305\277$\257sx\255)\333?\201&\200j\325\021\312?\256\274?9e\311\263\277\336AL\277\315\255\255\277\342F/B/\336\232\277\272\205\256D\240:\346?\005\327\201\030\215\241\345?\202\021$\204\201\306\265\277%\032\254Qr\373\274?\005\372\201\001=:\275\277\245\254\225\2771\272\321?&m\010`\223\315\264?\370);\273\204\334\322\277\217\235\001?\364N\343\277B\036\311\376\334\004\320\277@y\016\033\033p\306\277\354!\361]\020\262\310\277E\036\017\035\005\377\247?\244\341R\235\'\301\324\277\360\215:\235\330\001\263?\004\377\000\020\034<\302\277A4\251W\200%\302\277_%\037\273\013\224\320\277\221\037\\\307\331\360\301?\352\265\227<\2673\326?\312\303B\255i\336\277\277\226\254q\323\362E\243\277ID\235^\316\261\350?$\225l\'\030vR\277\324\272h#2\007\257\277:\246\366;wo\336?\304\311\242U\322/\260\277\371R\032_\353\272\272\277l\222\037\361+\326\321\2779 \256A\004\001\326\277i\326cl2t\326?c\207\267\"\277\353\242\277$?\207\2369\320\322\277\304\004\332\302\230\031\346?\341A\372\300j9\264?\230\323m\242\371P\322?\324we\264\341\362\240\277\307K\222B\2641\325\277Y\225\320\237.\271\327\277\2640Uz\267\303\214?\245$\363\341\274\354\340?\032\331\370\300L\343\264?b\203\360\345\030)X\277[\201[V\345\353\307\277\225t\234\364!\034\221?\314\363;\250\037/\324?\354\221\274)\233(\321\277\301\353\216 \360[\320\277\020{\362\307\354\340\231\277\343\241\367\337\255\340\325?\217xh\016\377\037\325?#:\374\034\274B\332?\207\\\374\257kb\244\277[L\326\"N\231v\277h\307J\"\264K\246?\023 u\001P\301\263\2777\202\032\337\223\336\324?\254\276\302\233\230\242\336\2772=\221\302\035\361\241\277\001\n\024\002\320`\245\277b\313\237-\357\303\261\277\025-\212h\205\263\346?\035_\326\037\274\361\346?)\022\237}\335\320\315\277\215\360\366 \004\344\337?\006\325\006\'\242_\347?\332\3228\016\233L\253?\242\246L \333\350\313\277T\352\035d\025\023\236\277\204\315\347y\303?\301\277\020\342\206\274>\243\241\277\237)\t\303_\227\320?\036h\252\3149]\346?\370\316`:J\261\272\277\346\002\227\307\232\021\323\277\357cX\0078k\255\277rg\313^[\344\242\277<x\237C\026\362\242\277\225\026\216\035\335\323\246\277\036U\357\236s\037\275\277f\217\212\336-\231\345?\010\327\263R\3168\266\277{\364+BV\\\254?\354\214\032\014\250Iv?6\221\231\013\\^\350?v\247;O<g\300?\000u^\276P\233\311\277\364\200:dQx\235?\377\200 \243\260I\324?\307\256\274\375\034\223\221\277\204\316\0203\240\203\261\277\306\307\037\363\236V\277?m\021\210?\331\200\213\277w$\3119\322\225\314\277N\373\246\343C\346\240?\217TG\335\272\332\256\277h7\237\337\234v\350?\353\367i\201\342\014\347?\027\035=<S\201\325\277\2610\351\224\354}\313?\242k6\301\375\301\345\277}\377\254\032\000A\332\277\003\316\'2@\220\216\277\250\300,a+\360\317?\244\315\'\341\370\220\320?;\222\344\034\351\312\300\277\305\317\373\326\271/\300\277+%x\001\376\002\320?#\341\3268\366G\271\277O*3\010 \363\301\277,BV\\\301[\347?\221\265\247`d4\262?\223\315\217\236\246?\320?^\023\341E\260\210\231?\002\2029z\374^\341\277\276\225\272\236\307\314\347?]\367\230@\370m\313?k\347\003\033:j\325\277\216\334G,1\350\261\277*\027l\033-$\323\277h\035F\"\343:\244\2774t\303!\341\234\305\2770\004\003\177-\354\203?\370a1\250>)\317\277\034\031\365Z\032I\320?\262\037R\241\364\344\325?\301\177\365\343\357\021\207\277gF\375\375{\223\350?&\350H\221)\335\277\277\342\325I\350\364]\300\277(\347r w\023\346?\303\336\037J\017\036\301?T\346\244\377\3767\320?\262\315\266h;\205\312\277 \246\320\273\251o\324\277\017\363@\277J\231\303?\226\034=\237}<\323\277\346\203uNy\225\276?4\356\223\304\016:\261\277\201\036Q>\220\376\322\277C\262\333\302N\014\320\277|&\373\347i\300\220?\243\275M\301\0226\341?\317\240*q\340\177\206\277\224X\010a$*\321\277\r\262\372]\267\014\300?\307s\307\254(\257\347?\211\346\t\235:\303\325?\014\201\022U\256&\330?2\277\303\2025\255\301?y\215#\367\360\274\304\277\t\330\312(\357\023\212\277s[\256\300\210$\347?h\226\241}\356|\323?\177\235@}p\243\325?\354\213\000~\370?\330\277\312\303\337\202\256u\317\277\'\266H\373\233\247\333?\365o\362\266-\245\322\277\357IP\221}o\267\277\001\t\263\236\224(\272\277[G\224w\207t}?\250\361\354\241f\020\235\277e0\360#QD\240\277\027\032\241\002\324\322\320\277_\357\037\207\230}\262\277\316\311(\"\005\307\320?\266\245K\201\255\310<?VmP^\330X\277?4\355\007\341v\215\274?\302@\245\204?G\322\277\357\022(\244-\225\262\277s\235\251\204\345\227\324\277i\264M\330\033\210\301\277)G\032?\001R\321?F\375\242\302\3403\337?\236\247\215,\221\362\260\277\242\030\351\335\t\n\224?\033\255\325\344J\271\325\277\324\030\220\34061u\277\345!\370\204\221\203\326\277S\352qc\243A\273?w\230\376>Fm\315?\000\002f\237\277\000~\277\275N\260 I\200\347?E\3063\000\005+\235\277\005\024\2170\261^\340?\022W\347{\2728\327\277Z=\222Xs\374\304?\351E\253bCZ\320\2779\212\377}\276\024\317\277\n\021.\354\202$\244\277\303\222\376\240&a\317?\013\023\374%\230 \245\277\271c\271\276r\261\322\277\274\026\035^J<\303\277\017m\225\232\034B\305\277\032\242\n\177\206\367\324?!\340\265\360a[\344?\211Z\375\205\334\024\266\277\352\304/\006 \277\345?\3264\224\177\322\025\340?\303\232\312\242\260\013\316\277\3176\016\'\366\361\315\277\272\371Ft\317z\340?\3777\376]\002\344\300?z\242jB\372\360\242\277\340\241I\336\020\025\314\277\025D\325\226\327\235\250\277O#\312j\374\272\277\277&^TA\373\007\323\277\306\225\212\370\024!\306?\236\3273\337\034\211\306\277\302\260\221^\263\340\313\277xNi\263\240f\346?\006xc%\014!\214\277qy\007\323\2135\323\277\211Z?\242\256Z\263\277\357\n\022\025\211\215\240\277K\244\033\376&\226\323\277\242\0376&\376\007\300\277\024\236\206^5%\350?\361\014;\010\021\333\275?k\255\273\273\306U\327\2773\257\360\03445\255?\276\220\001\345^|\233?z)\351\037L\243\320\277\214u\374\237\324:t?\000\000\000\000\000\000\000\000\203\020V\204\027T\326\277\023\3221\037\304Y\243\277D\254Y\3025\322\331?\332p\375`\205\340\347?\250&\230\234\240\356\325\277\254y\351\201\352z\277?w\230\376>F\355\306?d\357\275\246\244\332\273?Mv}0:j\300\277\037n\233j\254K}?\305(\276\220\304\201\276?\341\033p\201\367\232\266?\247\3158\rQ\205\260\277\373\263\274\376f\332\343?\311\340\213\2430\367\315?JN\232\304(!\305?\276\001^M;\210\265?\200a\\\036)\352\321\277\314\321\336>}\224\266\277\003uo\352\250O\347?a\341$\315\037\323\347?G\247\225\337\365\233\333?G&;\221\273\343\346?a1\217\241\010\316\334?\203\272\355\347\271*\306\277\343U\374\375go\247\277\351\013\245\037\242k\345?\334@\325v\200\030\202\277\002 \366[\236\273\322\277\222\314\352\035n\207\302?\033\336\244P\263\223\265\277C\323\206\201\266\356\274\277E\006\342\nb\177\264?\354\2325\035\246b\320?\334\246p\353\013t\241?\341\'\314\203\r\262\275?\036\261Z\274\377_\250?\242q\362l\240\212\321?A\204\227d\r,\321?\200~\000\316b\224\257\277\205j\326[\373\351\325?\303%*\310\215*\317\277\000\000\000\000\000\000\000\000\257\211\232\"\237[\302?4Cp}\3246\262\277\360#\no\007\321\263?\032*\020\207\266\255\324\277;j\361\316FS\277\277\027\352\372OH\374\320?\231\202\351?a\014\205\277\212\252%>\363I\304\277k\226.q\242e\276\277\341Z\263\266\245e\303?\t\2748\226\034\234\312?~\352\263^g\336\320\277y@\275?\374\001\254\277\306\220\367\005O|\315?\372U\033\304PL\203\277\335\265\252Cs?\252\277$\276M^\350:\336?\212\2272f\316\327\227\277\344${!p\346\311\277\215\216\365\036xf\347?\013\203\317bk\256\275\277\343)\026\205~\242\313\277\221\244{\010p\233\205\277\312\3767\376]\002\347?\030>\"\246D\222\322\277\377\326\210?\016s\321\277\301\201\264\362\327\323\216\277\177\236H(d\204\261\277\301x\376\233\264\374\322\277\261\302\312\364\215\340\271\277i\377\301\217\203u\277?\304_\264C\323D\255\277\001\003Z\035\255\250\320\277\016\274Z\356\314\204\322\277C\337\243\037\211n\327?\314\251\317\233\253b\256\277\236E\316F\327\232\303?pS\013>04\322\277\'\263\213\2633\226\275?|\212\356\351\202\253\214\277\327EvJ\254\261\324\277G\220k\277\214\024\311?Y\037\346\375E\361\234?\364:\361\273:\336\226\277\361\035\021`L\213\276\277\266\312\002\334\342\320\277\277\261\022w\345H\241\315?6\255\230:]P\230\277\013\016\016z_*\316\277Ov\010#\303\030{\277\002l\233=+$\344?\213\230\206\237\007\220\350?e[@G/\023\303\277\231\324\320\006`\003\342\277\014:\306\272]\324\322\277\234\310n\224,\217d?\200\323\273x?\356\315\277\010\243\243fY\001\347?\301\374x\\\022o\330?w\256Z_EB\270?\344\343\013A\253\237\320\277\302\005\321A4\206\322?\264\357aaN\221\347?+a\262`\376\344\245\277w\265\201\340\226\364\326?\337+\004\203\265\373\347?nAc\3444\335\313\277\224]zE\001\354\245?\0270??\245-\336\277E\373\263z\342\224\315\277\t\232\340\3453*\347?\"i\334@&\236\347?!\007\241\223\020r\272?\220\331\274\036\n.\332?\375\344\377\300\342\021\325?\033m\260\313K\331\320?\352\300b\242{5\316?\0075\360a\376\243\335?*\320\335d\n\214\311\277%o%\340|\257\350?\324\224\td\033\335\315\277w\0300\324\243\241\243?\023\010}\341|\207\303\277\331\000\225\277\265\022\350?\223\331\007\366\353\220\245?\236|zl\313\000\336?\260lD\002\326B\252?\021\306O\343\336\374\251\277xNi\263\240f\320\277t\246\207\243\326\364\247\277\244[\322\370U\036\232\2775\323\234@\001\251\307\277)\217\023\313\322s\322?\2578\244j\0364\225\277\306\201\374\021+H\312\277-Dp$\034\357\236\277oz\037`\020\005\322\277\220\265\216\303\303\250\314\277\327\321\304}\334%\322\2774\244\243\177\366!\327?\332\254%\335\311\271\246?\214\315;\014\265\277\271\277-7\377L\020\267\241\277\374\246U\231\316s\321\277\235\013\310\0036\014\311\277\254\245\343\336\272\352\345?\000G\257\304\013;\247\277\027\024\304HH\007\310?Jr\247\021\206C\262\277G\323\217<\306K\321\277v\037\272\177\260|\312\277$7y\200\335?\350?\350X\035\272R/u\277\332>?\347\311\220\343\277\0041\224\300[\341c\277`\356\327\300\375P\230?1\357/\2127\025\300\277\'[\321\244\034e\303\277\334\310+\306\257\216\331\277\365\201w\001\025\337\251?\374c\255\343\3600\324\2778\333\002`A<\216\277q\327\001\306\351\332\322?ZJ\022[\254n\242\277\212\223\373\035\212\002\310\277$\331~\215\177z\336\277\351\362\346p\255\366\322?\374\263\223\1775 \306?=\251x!\362\235\247\277\004]\276\237a\004\246\277\300\026\337C\316j\250?V\214\210\234\235\220\326?\027\302gt\322\276\203\277\352\260\302-\037\211\345?L\335\370\207\353 \272?]9\030=\371\254\324\277\215#{)\341\256\251\277K\245D\267\003\032\350?\226 #\240\302\021\263?\341#\007\221\261\177\261\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_36"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\223b\262~T?\331\277\377d\204\236j\200\320?\346^?H?/\315?\304\377\302\227.\351\344?<\347\372\2008\266\324\277[\332>\036\331\340\316?_c4~#2\273?7\370\004\201|f\340\277^\262\\\374\216\335\336\277\343-\374\205\303\267\340\277Y?\252\037\243\025\327?\352\003\352Ip\325\315?\363\303\255\'_5\341?\013vh\375\322\207\337\277,.\216\312M\324\325?\246E}\222;l\322?\203\'\035z\3052\264\277j\376\363\217\031\303\340?X\317A~\323\007\320\277l\337\314}\254\337\346?L\013M\310\275/\335?_\307\311\016;\035\330?\274n[\245\005y\326?R(\013__\353\342?\352\300b\242{5\327?\326\276\312\353\322P\332?[WPA\023\233\322?\227{\026\276\235(\350?\262\035\337 R\272\314?/e\t\000\310H\346?\276\271d\301i\246\336?m\277\204#\253O\325?o\327la\355:\350?2\341~]\331G\331?\256\005\244\232\345\364\317?\202\245\302\361\3370\263?\024=\021@At\340?\035\274\300\366\335~\347?i\322\3712I\023\262?r\312\222\357\010]\324\277n\277\337\334\035\241\314?\032\204^$Y,\330?\256\260\307\341\0378\343?g\343\024_\345\367\340?2\375\2677d(\322?[\251\261\316BL\331\277\277l\361\337r+\323?\221\2402\335o]\315\2779\t)h(\250\307?\364z\007\252\014\004\272?o\365\030\274\032\346\336?\204U\253e!\360\337?a\2555\357\223\276\344\277\333t_)&\212\340?\037f/\333N\233\326?\316~\356\025\'\210\343\277\302c\005\340\033\372\341\277`\031~\344\224\010\331\277\026%2\275\016f\332?\034mf>1<\327?\234\"v\\C\037\340\277 \2637!B\026\331?p\026\202^\260\302\325?\214\207\265\000\206\010\333\277\216E\211L\257\003\332?W\256\330\333=+\325?_\236)\317\027V\336?9\271\337\241(P\327?\'&V\343\370c\327?\260\276\313V\250?\341\277\374\337t?eD\320?|Z,\342\307Z\354?\302\245\337\225\217\352\315?\213=j\002\373\036\351?\362\253\203\315J$\334\277\t\027\362\010n\244\327?I00\206\315\033\340?\207\256\033!\311\315\333?\037s\226@\347\301\322?qYd\277\027\364\336\277Q\233\037\034?\226\326?|\367\"5H\034\340?\343\312\321\312Z\226\267?\321\276$[~\\\321?\307\333\245h@\230\315?\232\037$\260\336\r\343?\360\223z\201\037v\330\277A\245\245M0w\326\277qN\323\004\335 \324?\006Y`\331\026\257\337?j/\005\030T#\311?\310\355\227OV\214\326?\316L\325\342\370\206\320\277,\030KG\357\312\343\277\327\347\336\201\t\265\341\277o\325u\250\246$\334?g\202\237@\361\306\342\277buX\237z\375\330?\031\334 \244\2704\330?\221\032$\216\206]\340?0\262\t\325r\014\341\277\026\230\035\373\274\326\324?\247]L3\335k\325?p\n+\025TT\332\277p\201\035b0\375\337?\367\013\321|)\227\332?t\026\356C{H\330?3\340,%\313I\324?\225\001\024\341.\224\323\277\257\013\273\377\372.\330\277\220_\211Q!h\340?-\333\332\004\020%\336\277\027e6\310$\343\340?\305\305Q\271\211Z\331?@z\263\233S\250\321?\304h\353\032\014y\307?`\0362\345C\320\340\277\227\241\\\340\023G\343?\341\2032\350\337\211\336?,\267\264\032\0227\326?I\366)C,\315\324\277\336i\235~q\245\325?.\362_\336\353\275\334?i\247I\235>\212\336?uv28J^\333\2778\350\001\342d\021\327?J\251\266a5\022\336?\361\357\330t\251\266\322?\277\246\275w\212\213\345\277\346\362\325DUB\325?\307\3031\201\021\352\346\277\200\265j\327\204t\342?[\177\t\344+d\324\277\224\245\224\337\2730\327?\340\276\212c\217\026\334\277D-\223\002\207\247\331?m\212K~Y\264\340?Res0\366\271\326?\355\221\264\270R\021\303?\336zE\236\301\262\315\277\375\311\357\2374u\315?5\2157C\273T\340?\243\320\022aL\305\276?0\013\324\377\305\265\324?Z\321Icr\262\321?6#\336\225\270\351\330?e\210\010\244i\365\326?\332\345[\037\326\233\301\277\254\341\307=\002\244\320?\313\217K^\225r\335?\310Z\350\357J7\341?\260w\373\203\263\241\322?kwY]\230\326\345?;-\211\375\257\004\313?\242\214\341\177e\344\341?-+\250\003\264\010\337?\234\225\243\266\303\225\341\277\374`\256\177\266\371\340?\225\317\331\237\027\260\337?\350[\325H\001\230\343?\346\325\357xIR\340?\236!\003\026L>\277?d\365\375\212\353\216\341?\202\261\327\036j\031\324?\262oa\274j\216\337?^Q\245\301\310F\341?fO~b\317\204\340?\341\224^@\324b\327?4\23427\337\210\336?\354\326\327_\033\026\326?\235\363S\034\007\036\332\277\302\\A\211\205\020\331?E\264\302\231\004\224\313?r\231G\274DN\334?\030ZB\343.\247\337?\014xWE\321\346\327?\272\240\000\202 \335\332?\336\362G\007\332\323\347?96\361\304b\312\335\277\022q\316\343\213Q\342?\351p\000?\333\021\337\277\200\200\265j\327\004\322?t\246\236?L&\341\277i\272\307g\354\252\313?\363)t\034G\305\327\277\274z\323\374J\312\321?\375\267y\200zu\334?\366\3701\244\222\223\325?\317Bm\341\2327\331\277=\211\276q\010\013\313\277J\034\344\273\265H\321?2\361?\340\036\327\332\277b\313\341I\301\211\341?\272\250\016\240|M\324?\221\267\032\341\006\037\342?N\026\255\222~1\331?\007b4\206\224z\337?0\241\335|~s\334\277\240EB\235\3527\335\277\250~\224\307\211\245\342\2770\303\332s\364\023\342?\0022\317\245\023d\346?\246\266\026^0U\330\277)\365~\006H\362\270?\\9\275\203\206\033\330?\006\212\263}#\225\333?\225\351<\317D}\316\277\353>[b\300M\341?\367.\'f\222\230\221?\342\232\361lE\221\340\277\313\035\354\003\177\256\327?\r\335\221V!\212\335\277|\340\031#\310w\325?\364\366\214\351\256\021\317?y\036\201\344B\312\343?\371nN\200\274r\323?\026.P\367\246\016\340\277I\024\265\217p5\335?\000\226\256\303E,\313?<{x\340\255=\337?\30517\204\317\273\342\277\020}\261\326\324\242\302\277,dK\342\356\244\327\277\202\301\332\275\201\356\336?\362\030qC\204\246\334\277D\021\367\375@\336\331\277R\305\"\300\310\317\336\277\024\252a\3405\337\341?\205&&\373)\306\324?\'\262 \336\204\014\341\277\305\242\361]\255\207\325\277Q\242q\035\355\374\224?\240$\023\246\336\211\327?\221y\211V\223L\341\277<\004Dw\377\016\324?\241B\3579\"r\231?A\367@\206\351\326\324?}~s\332\256+\330\277\022L5\263\226\202\351\277\203x4@/}\324?\357LO\365\267F\306?\247\341c\311\177\365\314?\214t\263\3753\234\340?\3622\365\200\232\266\347?=&\367\340ZR\342?\344\210\020\262\207Q\356?\005\262\256<\016\244\331?\346$\224\276\020\262\336?\321\256!\274f\007\332?=\373\343 \225\240\326\277M\306)!\365\352\336\277\357\251\377 P\205\315\277\371\277~\343\306\210\314?\013\340\034dH\304\321?\301t\265p\264>\325?\001\317j?!\324\307?\026\3030\273\202\310\344?I\303!\002\253\266\332\277Z$\222\215\254a\344?. \264\036\276\214\333?\362]J]2\016\321?\321\253\307\236\271\336\327\277\300\361\020!\t\326\333\2770\324\006\314\350l\340?@@k<\340\323\330?\031\362\276\340\211\017\321\277\201\355`\304>A\340?\227\361\245\246\023?\340?\241\310\007\373~\003\320?\276\310\333|\351\016\330\277\302\337\212\037\276\'\337?\301<\001\240\314\267\337?\367\210\342\237c\321\340?^\241\017\226\261!\333\277\245\033Y\340\310O\340\277:\315\002\355\016\251\340\277\216K\250\"\r\025\343?\220\255\333^\332\t\346?\305Z\327\303\362B\340?\"\010g\"2m\342?\234\026\376\004\376\315\332?\327\256}\277\240^\324\277\242\246\n\004\t\243\326?\276\203D\177\r-\320?\304%\205\201\000\274\333\277\347\347\346\030\031\257\204?\320\305\360\"]\275\334?\322\330\311\246}o\315?x\'\237\036\333R\340?\250\232\315\241\024F\341?\250\035\376\232\254Q\326\277\031i\220\037}\025\343\277\264\263\001;\253\003\327?\\\200\215V{y\316?V\354\026\036\207\303\322?y\014\311\250\266D\316?H\004\231S\270T\334?B\243\350?so\344?X^\250\262\336^\342\277\242\370J\203Oq\321?\255H\027^\363\361\277?`zV-D\342\335?\352\372\221dN\376\332?\347;\225_H\277\331\277\217\270\021`\242\213\334?\307\307\274\310\343\355\311?\247\005\222$\306\272\316?\021\356\204MS:\321?\332\230\215\204lO\322?!\253\000\204\264k\332?*\006@\3038K\323\277q56d\321\256\324\277Q2Z\303\034\357\332\277U\334\270\305\374\034\343\277\263\263\246\2018r\331\277\253rF9=\024\350?\367f\212\357z_\345?\247.\215\035\\S\340?\355\345\014\377\310\030\341?\373\232\037^[\010\341?\310r\\\327y%\340?\313\020*\345s6\335\277\367\267>\213)\201\271?\332\203Z\035J~\323?\316a\010J\033\230\340\277\243\273\230$\236\005\332?)\004\366\301\307\032\336\277\212\267\2042C\031\346?\330\224\320\002Y\264\350?\203\245\272\200\227\031\325?\305\334\377\021\227\255\342\277pc\016\335G\311\327\277\201K\225b&U\335?]\331G\237=\364\341?\275\213\367\343\366K\321?\t]\231\"\206\276\311\277\227A\020{\374y\335?\025.\263!b7\337\277\035\016\001v$\r\342\277\374\251\361\322M\242\340?#\256s>\002\240\313?\226\3746aNR\323?\354\203\260C\312\t\315?\351\350]af\004\344?\364\177\026d.\335\331?\252(\240\201?Y\340?\370\217\"\276U\317\330?t\354\003=\222\032\311\277\210\206 b\336\236\342\277\277\256.\300\241d\337?\235R\024\236\206^\327?,\317j\036\023\353\324?W\336\237\234\262$\340\277\336\344\371\0047o\336\277Au\377\232\244`\334?QwT\353\263\271\322??\246Z\260\371]\317?/Dw\336\000\362\345?\265R\010\344\022\007\340?\363\3757\243\244\017\336\277\273\'\017\013\265&\336?\227\274*\345\357=\337\277\351BQE\2261\323?\356\222\376\177\030\030\340\277\272\265\361\314p\350\342?\253j\366\376\016\036\320?\014\266\215\026\322\'\302?bg\n\235\327X\331?\233\233F\305\305\362\335?\263F\230\375\025\255\340?\221BY\370\372\332\336\277\002)V\262\010j\340?\276\377\013\333\201\000\332?\203\245\272\200\227\271\340\277AnT\341\256\342\331?\201z\022\\\325\247\320?`\343\237\276\nU\332?\025\004\352(b\354\323?=2-\034\316\035\335?\332,\250\271&\356\341?>Da\037\266W\334?\343/\3220!\213\326?\206\346:\215\264\324\335\277\222\252q_\234R\341?:\021\263M\340L\341?.\230\256\026\216\326\333?\315jh\240\205\006\326?\365\343\345\237\317\266\332?\265j\031\241\206\214\324?\201K\031\233\312\340\334\277\327\336D\200\025X\260\277\224\355*A\322\351\335?\256CwA+\315\306?\250&w\216\267\213\343?\030.\243?\321\310\323?-\244p\373\355\204\335\277$\"\241\322-`\337?\023\n\021p\010\325\325\277\354U\\\003\370\372\330\277ZG4\005[:\332\277\275\014\020\026_\376\322?\315\323\220#c\326\322?N<\261\230\"\212\323\277\326k\037\227\335x\341\277\247[\023^\304\357\340?\3025w\364\277\034\344?\215I\271\332\0166\246?\r\362\202\241q\325\325\277\206\233B\235\250\033\341?$\355F\037\363\001\336\277[A\262\004B\200\330?\320\332\206\264:\367\250?X$\201aT\r\351?\301\207\267s\006k\340?a\355\234$e\244\323\277\216V{\371\031\356\222\277\236\275\n[yj\332\277\363\306Ia\336#\332\277F\355~\025\340\373\340?\377c\235\001`b\344?\230\235M`\235\327\344\277\3471\322\244w^\333\277[\354\366Ye\246\341\277\334\037\275\033\352{\327?j\037\341jS\253\341\277\247\201\027dh\310\315?\210\234\276\236\257Y\322\277\215\262#z\276\013\336\277\315\226\213|\207p\323?\\\270b5L\243\341\277\235Y\\-\301\263\343?C\241L@\237\212\350?\020D\263>\'5\323\277\264\356\325}\266\304\326\277\370\250\277^a\201\322\277\325\010\232\"\002\206\336?\203\217\034D\306>\320?i\024\232=35\330?\266\234l\177>\374\310?1\234\347_\375\005\341\277_\2371z\013w\317?k\r\245\366\"\332\324?uI(\277=\266\340\277\r_\025^8\246\341\277\322\305\307\243+\303\325?\n\230\206\0022k\345?\242\n\301\242\t\261\330\277rV\341\"9\321\334\277\030o\022 \226O\347?\177@\261_\301G\321?\024\025`\016q\"\344?\357\027\232\210\n\027\256\277\210\277\303@\031\233\325\277\214\275\027_\264G\334?\216)\016VR]\331?\212\2777\227,8\337\277\357\311\303B\255)\331?\020\'\254d2b\331?W\225\\I\033\334\275?\r\354\347\003\270O\340\277\244\361\023 mP\340?6\246q\271\013^\357\277\r\320\t\343\237\300\327?\320Gt*t\271\330\277\356T\247\240.\024\336\277\022}\343\020\026\272\327?%\222*\202\346P\335\277\234\t<\346\362\025\340\277\251\227\347\332z\272\336\277}\336\2361\335u\340? \022\031\261\2529\346?\273v\016\n\357W\343?\263#z\276\013\200\325?\213\347C\202o;\336?AF\202\241\365\215\327?8\")3\357\002\341?\302\247\367\\\277C\332?l\005MK\254\214\321?\277\2576k\225\305\346\277\326\361\251\255\"m\323?\315g\212J4\222\353?\032\266\332\201B\026\341?e\222\r{\014\034\320?\365\007\322\336C\366\334\277Jy\255\204\356R\326?\235:\301\304@\323\324?o\031&\tx\310\341?\207_\034\"\217\334\306?\022g\352\032\322\r\340?K\245\351\375\220\010\332\277$\336S\234\027\245\336\277{.\266\275\233\366\340?\372\317\232\037\177\251\346?\233\234-b\320p\342?\212-\220\342\024\004\330?\231u\020\205\340B\353?\274\212\224\177\220\331\337?\010\261\320Z\023\003\321?\230\330!\243\250X\331\277\340hd\343\003\263\322\277qE\030\365\377\340\343?\360\247\245=Nf\273?6\226,\376!\303\336\277a\217\344M\331\304\336?\210nQ\301<_\343\277p\220\224\035\260E\351?Q3\377CU\347\331?\n\035l\230>G\302?\344\372\3226Y~\334\277\316\224\214R\370\"\333?\301\252z\371\235\246\331\277\225\220Y\007Q\210\327?\215\2721\230\032\374\323?\360\315\302\340\222J\336?\307L\242^\360i\340\277\216\334&\036HE\346?\333\244\005\334\261`\322?:C\314\200\016N\333?P\331U\355?\227\340\277w\230\376>Fm\335?0\374;6]\252\340?\211\037k_\243\031\326\277H\2258]\334\347\336?\3577\373\177\254\222\323?\300w\376a\ts\342\277\345\345\331z\300\033\311?\351\231\301\214\347;\266?\216\374\013N\216L\301?\250\345bge\026\341\277B\363s\"E\r\323?\033\213\236BKj\333?1\267{\271O\216\333?D@\360\276K%\335?g\270\001\237\037\246\343?y`\031~\344\324\351?\351\300\315=\177\265\335\277y\267h\267L<\340\277P\216\002D\301\214\333\277\374\004\253E\237\352\324?\236\236\322\034\2642\334?\234N\025\000\241}\302?~\\v\3438K\330?\321\320\375\244\363\004\333?0\254,\033\347\000\342\277\225\322\330\003R\007\342?0\260\330p\242\347\342\277\023p[\235\2240\330?8\332\263\337\301\254\332?<\272t@\320\331\322?\217\275\007}#\031\334\277\201\212\364\354\003Z\323?c\233T4\326\376\330\277\023\317\033\037\0241\333?\342\253\212ah$\255?d\244(\341S\212\333\277\2104d\033<\274\330?\177xL\223\010\303\330?f\230\342\303OP\326?\236-\030C\326&\326\277\206\207Y\375K\321\346?\n\200\022\033\003\035\237?\226\024/\201!\254\343\277T\321\355_8\333\330\277\031\0248\237[d\333?$ \3545\271\357\305?2\362h\231\373\032\342?\242(m\3756\274\323?8\276\027\333{\243\336\2777\342\311nft\330?\304\000\r_\364O\332\277.@\025\026`\310\316?H\013e\033\227u\336?N\310Z\205\305\217\332?/\021V\000\337\257\331?rb\027^\254\\\341?\216\3676?\366\241\332?\0353\365_\214\255\323\277\2238+\242&\272\346?eU\204\233\214\252\340\277T1:\305O\210\334\277W]\207jJ\362\340?\244\001\027\277\204\345\331?\340\276iU\246s\330\277\331g\245{c\251\336?3N\350\232n~\314?G2P\276E\014\341\277\'\010G^\020p\331\277\371\336\235\204\353\364\327?Z\204\275\344\332\353\341\277L\206\312\\l\\\330?bp\346\272\235;\326??\337\334\200KW\313?\023%\306\327C \333\277\332I\022\276\326\251\334?\005\360`\325j\331\333?i \361\206\217c\323?\260\264BGa\r\341?3\206{]m\242\331\277N^d\002~\255\343?j.7\030\352\260\332?|c\306\343\273\267\336?%\001\017\261f\t\346?/\025<\001$\005\337?1I\300C\254\331\327?\314\nE\272\237S\326?<\305\303\3368\247\335?\324r\024\336\355S\343\277.i\326clr\340?\035 \332\277\2315\341\2773\027\227.\355i\275?\253\215VZ\3530\344?\334\350\214\275Q\n\336?\331F\372\274\373F\311?7\300/\242\253<\344?q\242\310 \230\237\330?\370\244\023\t\246\032\342\277\363h\364\264\rm\344?\231\352\260_\003$\335?V\267\233\\c\202\332?\372\227\007]\200\305\322?\213\303\333{\237\007\326?\267C\303b\324\365\332\277\360>}\272p\326\327\277\377]\2379\353S\340\277\215eU\337T\177\337\277\tU\244\241\312\331\326?\353\177o\211\022c\324?U\206\324aC\177\345?\266\2003\245\263\033\330\277J\203W\242\036\210\341?V\252\331=X\312\336?\323@\301\3775D\341\277wN\263@\273\003\336\277\331g\245{c\251\336?\032\2064\317\266\177\340?\341]p\376\r\267\333?\331:\335\036)\207\355?\356!\206\302\014\322\340?_\224E\006^\322\323\277\337!Ze\205\346\333\277I\224\0073\267L\345?\265\322\367\\\236\365\325?\376\305\"<\220+\337?\302\330c\236l5\314?Rc!\276<2\323?\27163~\n\025\337\277*\205H\237\271\373\331?\256\033\245\001r\330\340?\217\346#\204\242\324\344\277\213\363\334\347\235\257\325?\322\365\216d\240|\330?}\023\371\344\027\224\341\277hN\207\3433\270\307?\351\304\263>\304\252\357?\237N\303\001>\211\343\277\345\356s|\264\370\330\277\013\261~\\\260\216\336?\267_\241\203\354\004\337?@\017\275\336`\034\344?v\344\345<\245{\320?\276\307\364\337\336\220\336\277\306\340a\3327w\337?\224\307.\254v\250\313?\347\360\275}%\251\331?WG\206\003\276\256\330\277\240\"^\tj\031\245?\034\354,\376\337&\321\277\247S\303#\226\371\330?\372\023\215\234\"\323\323?\224vY\002\337\243\342?\211m\336zE\336\332?\366\335!\203\3446\331\277@#\"F\031;\330?1\241YD\332\347\330?\350\344\373\230\305\372\325\277P\302\361!M\241\323?\203\345c\322:\205\340?\211Q!h\026\262\306?`Rc\337\241j\316\277\337\256\260C\251;\332\277\270\346\320\032j\361\332\277\212K\237g\375\367\341\277\261l\007\237\275\345\324?\334&\201r\200\205\340?\246\211\014\345#-\327?\006\205A\231F\023\340?\356^\017\242\214\003\345?\3446\361@*f\314?\3622\365\200\232\326\331\277Zv\322\014\363\357\341?S\214\230~.\177\341\277\352\177\363\301\266\356\333\277$\222\215\254\241\371\332\277S\202\264\265t{\340?\261y\013\332\232\343\346?Q\326\363^J7\342??hf\373\312\342\335?*\213\302.\212\036\325?\266Go\270\217\334\332\277\356H\016;\000\240\335?\236)t^cW\337\277u\027r\266\312\235\340?K\010\322\234\'\344\335?)iQ\341\000a\340?\250QH2\253\367\335\277{fI\200\232\232\342?7\017\016\223\374\312\262?\336\334\251\312\010\271\334?\254\2048 S\350\350?X$\201aT\315\342\277Q\225\204~\205\260\342\277\335\273a6\\\277\342?\206d\267\205\235\230\344?0\311\022\347\362\260\340?\265\371$\034\037\222\334\277d\346#\245\260=\322?u\266x_2\341\327?n\r\021\334\355\037\316?i\213\323_\233\314\266?\203\354\006\033\350\353\326?\351\254\242\201P\005\327\277\356\356\277\235]!\345?\266n\377\241\313\201\345?\n\273\213\244\233\314\333?\274\370\313\274\217\002\331\277V\337\257\270\356\\\344??\254\026\\\234F\310\277\261\343}$>Z\332?p\316\353\374\231I\330\2772\310\341\274\315U\332?6\026^\223\177\367\344?R\205\334\230\340\314\304?\374\245E}\222{\340\277\r5Le8{\324?\311W#7\232\216\316\277\307\204\230K\252\266\332\277\034w\214#\275E\335?\305\267$\305\317\330\326\277\240*\360_jU\333?\314h?\255\375\270\341\277\225\202\311\350\333\035\341?\366\023\204\341\022\266\340\277\246lG\'\001 \333\277\025\035\013\002\022\352\334\277s\367\224\367\314\355\336?S*<\303/\020\342?wh\365a\377\255\326\277x|\275\363ru\272?\000\301\301\203\013\036\325\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_37"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "!\200H}a\313\332?0\275Xs\333\231\334?)\261\214\211\244H\305\277\017\3300\236\234\374\333\277\204\037\346\3347H\324\277\346i\351\237\032.\340?\021;\256\241/X\333\277!{9\303?2\317\277i\006\310\002\354\304\305\277\360\261\252\024\361\014\323\277wX4\337\271\036\335?\005L\205\035k\013\342?oT]v>\362\334??\244\204\005\234J\331\277\267\177e\245I)\343?z\004/\341mq\340\277v\333\t\037\337\370\341?e\3532_\322\326\346?\335\347\276\275\347\227\332?\366\027QE\267\177\321\277X\257}\\v\243\342\277\024\031%\001\315\224\320?i\312\251\370\032\035\342?-\212h\2053\t\331\277j+Y\302\230\374\327?\217iT}:`\322?\246\004\016\262v%\335?~Fu|\254G\335\277gz\354\333\007\250\335?j.\334^w\037\322\277rAl\237D\372\342\277\\\377S\026*$\344?6\014\325\2038E\326\277\276\267\216\026\014\323\307?\375n\025\037\372\t\342?\002\343\317\246\3312\341\277CS\227\010+\200\271\277GM\005&\201\027\331\277\357bP\\D\n\333?\243T%>5&\323\277G\273\300\233$\014\334?\013\303\364{jN\337\277\020\025\323\032\275y\330\277o\371\243\003\355)\326?WY\200[\034:\333\277J\343\376\300\250f\332?\231\306\304 \217d\336?\361\234o<\206d\323\277w\374r\301t5\327?\022\271\246at\320\330?\277\261\014\026\363\030\345?\253\275\374\014wG\211?\271\242\367:g\023\323\277\277RL\224s\330\342\277\263\031\361\256\304M\344\277\365\316.\000\t\032\322\277\344\214\027\301\265\t\334\277\212\303\200\302,v\336?H\365\204\302\363\024\342\277\002\227\256\375\360u\327?\033\232W\032\235\030\327\277\210%i\'\030\010\306?X\013\242\244v\365\332?4OK\377\324\360\334?o\310\365\245m\262\256\277\212D\374\036P\021\337?0\344d$s\223\322\277\236\321\363\372\325T\336\277\016&\017UB\301\335?y\226{\334\022\024\324\277\323&\230{\222E\341?\n\312\002`\033u\322\277\221\356\347\024\344\347\332?\233[|e9d\332\277\377^e\310\014\257\316\277#|9\375\352{\326?\247\316\037\252[\003\312\277\277\340\211\017\242\353\325?^\310\331*wU\332\277xi\036\033\334\261\315\277\316\014\013\203l\270\337?\203\213\221\374\363z\323\277p\252\275\241SD\337?\335V@\302\254\007\343\277\206\330\252n?*\332?\017e\207|\300\321\311\277\271\363\314\344\376W\331?^\376\330^\352\353\326\277]Wi\336\263\246\344?\300vr~qF\342?\254\267Y\376t*\341\277\272<\214\377\361T\344?\357j\301\244[c\327\277\033(\225\225\313\353\322\277n\247\255\021\3018\325\277\237@3\343\310\336\317?\242\265\344\351C\264\311\277&eZ\264c\227\274\277\302\347=\204\247\206\327\277\317\267\313\237\353\322\302\277\003Y\221\311\220\000\312\277\016\237t\"\301\224\343\2772bv\201XW\320\277\006 bAi\201\333?\025wY\237\264(\342?e\245j7\321\031\305\277\3251|~\367r\343??.\334\177\205\310\337\277l<\032\177\211U\332\277\2525\244\274\034\227\334?H\214\236[\350\212\341\277\331\271a\302\005\254\333?\270\003u\312\243\333\341?f\336\005\245\303\036\312?\363-b\216\3241\344?\255\252\362\230\334\003\303?\3225\223o\266\271\312\277<c\004\371~O\341\277\314\304\235\240\207\271\326\277\356\353~\035Q\004\335?\310\001`\341\311\223\324\277\223S}\337\246\034\335\277\203\334E\230\242\334\302\277o\001Wh\326\010\274\277^\361\324#\rn\333?\\C_0n\331\344?\275\\z\352Gy\301?L\233\273\247\274\'\340?\264\007s\036\3026\307\27751\023\373\272B\314?M\216\361\027i\230\343\277\326!\263\212il\303\277Z\270\356\3368\006\335?\204\370]dD\232\324\277\207+\0146\032e\265\277\023`\273(8\304\304?\304Z\230_\257\253\267?\006`E>\226\233\340\277(eRC\033@\334?@\036\362}\016\377\325\277\342\361\243\320ha\337?\243\355V\236Y\265\342?\024m\330\000\266\215\351\277\17760\301\302,\337?R\214\177\341\2153\336\277\272\306\241]\tm\343?\373\357\271\372N_\327?\304\213l\204\321n\333\277\373\225\316\207g\211\345?\257cT\000)\375\341\277\226\341&@\240\365\327?\311z\244\240_\004\334?\305\354<\\81\331\277^\362\344?I\006\340?\014w\313a9:\332\277\241\356\250\326g\263\340\277\235\217B\304\223~\314\277\226\360\337\027\362\343\323\277\206\026\341?@k\341\277j\323\001\336<\264\335\277O\260\377:7m\324\277T\021v\243\362c\336?y\251\277\3736\306\331?\177i\017\203\022I\335?\027\r\031\217R\t\327?\013\022\364z\244\377\322\277\274\205\"\233\263\327\301?U\316\315\355\024\241\340\277Y\033\337\356\027y\270?\331c;Bz\210\337\277T\024\267#\377@\336?\"\265?\006\341\300\340\277\177\353X\337\237v\343\277H\256\223\341\025\224\335\277t\006\353\244c\263\343\277pj5^\231\233\345?Pz\225k\300\326\323\277\245\325\363\342\202\273\311\277x\214\237\204\241\'\324\277\244\021\330A\312\224\340?\277\320eb\241\263\324\277\324+#\375\017\323\334\277\271\204\350\265~\037\334?\246\271p{\335}\337\277\207\021g\352\032R\326\277\321\351y7\026\224\336?8\033e\334Xy\304?G\332\266\275\027\036\344\277\311\020Sd\245\260\331?fQu\033\026\333\325\277\354\350\013c\003P\333\277\227\r\276r\265\374\276?\220\333\355\202\332\322\337\277\270\376D\002\231\337\337\277\223\t\360\304I-\335?iv\233?\277\322\326\277\255)5 \347b\343\277\035\335\255\321\027\347\320\277\363t\256(%\204\335\277\014\223\353\236#\217\275\277\034i>!\032a\315\277\316\010%\202\'\003\340\277\030\036\240\240\2713\333?\211\036\337{\013\355\334\277\035\255jIG\271\341\277\236\256Q\203\'|\326?\357|\365\247C\035\341\277\001\216\2304\241$\333\277\343f\002\217\271\374\336\277!\036\252\245\220\026\312\277\013\377T\242\r\034\341\277\366\322V\035 5\331?\334c\351C\027T\321?\017H\302\276\235D\327?g\342\210{M\013\336\277b\341\034\\\327{\326\277%}\367\032\304\177\330\277\362&\277E\'K\262\277\373=\261N\225/\342\277\317\023\317\331\002\202\344?9Z\233\347\004\304\317\277H[\256\341\226\r\332\277\365\235\302\276[h\325\2772\253\332\342\330\302\323\277>\033\177\303\300J\330\277M\360UD\260^\331?\325\031)\245\261\007\267\277\002\233s\360Lh\306\277\022\224.?h$\337?\371\344z>w\300\322\2776\240\224\377\177\322\340?\216o\224a\2014\344\277\357&\021D\212\277\326?\005\312}\335\257#\333?c\336\231\277\370\230\344?\313\372(~\347\362\320\277C\002\004{eA\335?y\367S%\302m\333\277\235\302c\242\265 \324\277#\013\301?\337\325\343\277\350s\203\333\271\264\324?\025\\\007b4\206\341\277\206\303\024\335a0\335\277\374\214\250\334\206I\337\277\306\227\232N\374b\321\2777U\326\272\375\207\317\277\374W\322a\360v\325?\n\002\226\"\032\331\321\277&\364D!\023\272\342?61\321\336\350\274\337?%\344\305\272\237p\325\277x\374\213^\025\201\324\277\265\336o\264\343\006\345\2779\261\352 m\253\334\277<\247r=~-\333?\305\345\025\333\346\376\332\277\240N\334\236\336T\335\277@\355\001\004\275\001\337\277\332fSCU\253\324\277\034`\244\037&\204\333\277}\257!8.c\327?_BG\243\351\211\334?\3770\370\352\231\224\335?\241\374!YgL\236\2777\307V#\375.\334?\351O\321G\317\343\333?\346\'0\370\217\340\327\277\335\221V!\212n\312\277:wyB\310\\\336\277\346\337x\210\220\204\334?P+\267zo\010\332\277\2044\031DZ\031\330\277\227Zk\3775\346\276\277}!\344\274\377\017\326\277\3400\321 \005\317\326\277\264\257\331\035\224\250\325?\370\234\005\353I\252\331\27788\307o\300\035\331\277t6\r\037K\376\337?e\343\301\026\273}\324\277F\303\265\034\340\260\337\277\277\307\313`\255\326\312\277\036=v\376\212H\341?\343/\3220!K\341?\331\n\026^\264\215\335?4\240\377\232\203\322\323\277_\227\341?\335\340\341\277\001\316A\206D\020\336?~\021]\345C\257\331\277\246\223\021\274\306\223\341\277\016I\220\276\007\367\340?F\244\\\3201\326\317\277\346\307\302\204\217\320\321\277\314\304\235\240\207\271\320?8\322\000{\330M\334\277\260 (\022\247.\341?\3730\316!\241\024\341\277m\021bx6\365\340\277\324\254\\=ah\314\277qi%B]\203\326?\316\023t \220\020\340\277\350\251\212\200uB\341\277\262>/&GK\330\277\212OK\275\270\336\331?\372\300e\200\321\006\305\277P0k{\036\320\337\277(\260)%>\326\331?6\216\334\303\363\214\337\277\267(\365]\370^\341?,\266IEc\255\343?+.\022\003\362\337\323\277M\000\264\234:\305\322\277\276\272\317\226\030p\325\277\017=1\004cq\326\277\326\214o\234\322\t\330\277\302\022\223`?\376\325\277\223:\236\"\311d\322\277\240\001\222<\031\324\324\277u\026\007\341\033T\337?&9`W\223\247\323\277ek\"\330]\305\325\277\0044\266|\311\253\323\277\006$\212^\200\334\326\277\362c\'\027\276Y\344?\244\302\032_bI\306\277 \232yrM\001\341\277=\253\026\"\361|\334?:\315\341\336%\206\334\277Ir\257\202\316\332\321\277\2259\247\243-8\320\277`\234\021\010\350|\307?<\331\315\214~\264\326\277\335\347\235\257\376t\345?\351eo\204\240\276\334?i\2761\241\325\213\325?\363C\351.0\373z?\017\216\243\203?\r\322\277\023\370\036\211\362\340\342?\372\213\352\276\255\005\332?\333\325q\035_R\325\277jP\023\001w\356\333?\004\370vd\017a\320?\334\374u]\256\224\342?\273\302q\317\251\232\334?\022\266\247\3759y\340\277+$\252\001\2240\350\277w\332\371\002\243`\336\277\266pr\"n\014\330\277\252&-\001\235.\333\277\023\271\001\033\347!\306\277\006f\205\"\335\317\340\277\204Y\323\2028\213\315\277\027:\300\335\243\310\324\277\000\352\243\337\000+\323\277\357s|\2648\343\337\2772-\240\006\302\004\340?\313\200X\333\271U\343?\025\233\003\302V\"\334\277\007\224\362\377O*\321\277\345\020\253\036\264\307\337?\250\307S\342|\"\325?\026kU\236\202\264\320\277W\201R\233\325\316\337?\025\025\026\201V\005\321\277\212\235|\274\210\235\336\277\304RM\336:\336\334\277\333m\027\232\353\264\340\277\035\261qXu\261\260?\245<\251\345\275 \323\277\333u\210\342\002\216\342\277\035UM\020u\037\331?\016\326\244\200Y\306\310\277d\346\002\227\307\232\317?\267*h\336\232\t\323\277t)\256*\373\356\341\277\341/\034\276;\010\341\277X\024\300\336\016\336\320\277\374\270G\200\344g\345?R\324\231{Hx\301\277\n\343\237\000\'\347\324\277C\274\333\3407\312\265?P=-\232)\210\320\277d\001v\3420\240\322?\325IK\037\231\362\340\277\337\266\000~\327q\340\277\242Y\002\276\025\350\323\277\266\320\337\225n\\\330?>\201\013\r\037,\345?\262g\317ej\022\335?C\244\215\300\253\'\322\277\307X;\304\036^\316\277\341M\320\211\261\212\315\277\2244\034\"\260j\325\277\262\346\360\336\213.\344?G$\247\0020\326\340\277\375S\005\376Km\323\2779\206\031}y\177\324\277b\311M\2735\274\324\277\207\021g\352\032\322\334?\255\250\034\356~\360\330?Z\330p\344\303$\332\277\273Ws\241nW\341?\350\211B&t\362\333?\'z*\361\312?\312\277\254ANN\243?\342\277\340\354 \3003\253\321\277}\213\230#u\214\322\277\014\010\010A\242d\320\277j\003\250\220\310\312\266\277k\251Q\202\3354\333?\224\212!\224R\253\325\277 \247\236\273\023\"\336\277\320y2\244/\251\312\277\351\007\032\330\317\207\320\277\rH\353=\317\376\320\277\236\302\000x\372w\321\277\257-\362\241\372}\325\277\346~\342[\263\360\331?\031N\200\376\3168\326\277\327\216=\326\347E\331\277\214,xU\220\264\306\277XX.#\016\274\336?&\216]\036B\307\273\277i\000-e2?\332\277j\237\320\343\336\031\311\2770]\322b:\276\332?1QR\232\254U\315\277c\257\034\306I\006\325\277\374\204X\242X\223\315\277\020d\363\'\340\215\320\277a\355\234$e\244\334\277I\263`\177e\'\320\277\341#\007\221\261\177\325\277\240\227@\000_\300\340?C\242\330#7\267\336?ES,m\'@\343\277tP6\243\356\234\337?>Q#>\301\017\350\277\024[A\323\022\353\342\277\243h\3242\010\342\320\277h\312N?\250\013\336?\323\237\201\201\265\244\330?\234B:~\240C\324\277\262\347\276\336\365@\327\277\000\243p\342PD\342?\244\373\275=\235\205\342\277,P\244^d\200\326\277\206\300\272\277\264\007\334?\260)FL?\027\325\277\257#\016\331@:\343?\017\327\305\310\355r\333\277\030\373\334\032\"\370\343\277p\246Shj\243\335?\214tq\341av\341?\220\246\325\353q\372\341\277\354yHBl:\320\277aM\n\230e\364\340\277\236\356<\361\234\255\324\277\331\310}\304\022C\324\277H\347W\3169\323\314\277\201\321\304\277\370\227\340\277\325 \350B\216\250\226?sAC \023 \341?\354(\030\337a\244\321\277\337\017h~oR\340?-\367U\373l\313\324\277\221:K\332\236\352\323\277\351O\023d\241\351\330?\337\227e\025W\021\277?3Ndb\312\322\342?\352\302Y[\302k\337\277\226\364j_\304G\342\277\232\"e0\353j\340?u\376P\335\032\240\342\277#\3721\275/\364\336?y\004\232|qq\332?u\352%!\354\017\341\277\036]\370\003\026\347\332\277\223<\225\333\017\333\325\277\021\321\236\201G*\345?\004 \213\300\232;\336\277\333\261\307\372\274\030\342\277\031\301k<}\251\336?\355\250 \365\215\236\335?\211\346\t\235:\303\325?\014\245@\260\364\253\344?\337\347S\"\344\227\303\277\244\376\027[J\316\324\277\037?\002\034\316~\324\277\372\244\311{\213\275\334?9\310\024A\326\262\312?\277D\274u\376m\341?\257\312*\021ME\332\277\331\241P\005\222\346\335\277\325\271X\007\366\216\343?\t\304\353\372\005\273\320\277\222!\246\310J\341\304\277\355\225\375\343R\317\322\277I\020\256\200B}\321\277\244\r4]W\245\322\277o\313\221\337\354\340\333\277\324T`\022x\361\335\277H\035\231\036\177\257\324\277 u\340AX\262\262\277\3629\034\002\354H\314\277\230\261\364\343\'\374\325\277\222\r\377D\300\374\311?\334&\344\234;n\336\277`\272\275b\025\210\326\277\266\242\315qn\323\341\277\327\314\020}-\036\332\2771\341\341\207\2240\325?\336=@\367\345\214\344?R\300,\243G\302\333\2770]o8\177U\315\277\027\226h^H\346\331\277p\320^}<\364\317\277&r=\341W\322\342\277\264\377d\000f\306\311\277m\216s\233po\324?\231\277[\203k,\323\277\227\002\220\3425\322\336?3\036\337\275\'\177\330?>z\303}\344\226\344?\312\220\276\244\214S\342\277?\005\372#\220;\332?\330\207P\000 \002\333\277MU\363\177\273j\331\277\320&\250]#\264\320\277\320%\301\300\0306\342?\273!2Q)\233\321\277T\207\344}\177\367\340\277`H=\372\025\241\330\277-\236\325]4\177\341\277\250gD\340}\222\266?\207\363We2\236\324?V\217E\344\005b\324\277)\357>\"\001~\330?8\247\355\272\022\334\344?J`s\016\236I\340\277x.\347\255\025H\331\277@\361\010\023\353y\345?\240\320\241\302\307\026\302?\356+I}\335\222\320\277\220\017\335`f\347\320\277\n/^\177T;\323\277\372\254|\340t\234\327\277\304\203\034J\243x\341\277\262\201t\261i%\340?\350\255\262\235\214}\334\277L\255R\325_\n\334\277\303\236\362\277\307&\333?=\0034[\303V\323\277\235\213\267|\301z\331\277\217\'8\253\364\311\324\277\325\311\337\336\261/\323\277\250=\200\2407\020\340\277]\243\212\207\234c\323\277\002\273\232<eu\336?\023F\263\262}\310\321\277{\376\356\374&=\337\277\233R\342cE\307\314\277\212\241I -\347\317\277\276%J\214\257\207\316\277+\231\357\"D\340\330?\366\242\013$\007\360\313\277(\264QBUQ\342\277\327\233 \003\334\340\321\277\324\225\327c\205\317\332?\r\3473\003\t\210\335?\033\2219\340\004P\341\277o\341q8\220\201\302?g\234\206\250\302\237\313?\024\324l\365\007\020\312?\306!\362\310\345\340\316\277+}\317\345Y\213\316\277\330\260\256#q\003\241\277i\260%\273\004\355\323\277\261\214\313\300\032\312\322\277%h\376^+\235\323?\024%\000\203\315\316\334?H\314\242f\376\307\340?4X\345\000\311\215\313\277\376\200\007\006\020\276\341\277<\207\256\033!I\327?s&3\377d\343\334?\366\300\\\305\301\251\335?\373N\335\246\211H\343?x-\337\002\"g\332?\311\\S\377\244\252\343?S\252+<\273>\330\277T\271\036\277\226\333\325\277F\262\211\304\353\027\333?\033W\257d\277U\315\277b\353cOL\250\337\277\271E\rdEf\337?u\007\353\336\016}\325\277:!S\302<\371\326\277\316\255k\017\326\332\326\277\2503\234\327}\354\341?\243\266&@\301\203\306\277\2318\250\263I4\324\2776\205B\302\377\357\305\277\023\351D\243\267O\325?\312\324\260!0\275\326?\025\355CA\2350\325\277A\241\330\351\213\255\312?\214T\255\277\004\362\337\277\226\2742V8\325\317\277\324\204\212\375\247\023\334?J9g]\006\320\325\277S\017\311w\306J\261\277n\234=eo\210\336\277\305\016\031E\305n\326\277,>OM\223\343\340?iG\3757\']\306\277{\265\212\233\246\221\334\2771\232\360\246\266\257\327\277]\206\203\255\247\220\276?\340\340\003\"a\353\336?\270`\004\350Rw\341\277\241\317.|\320\265\323\277\313\034\n .\231\264?=n\317^C\021\315\277\020D\263>\'u\323\277yzB\002\210\263\343?8\256\024<d\316\333?_\374~{\350L\332\277\266\033u[\277\354\335?H\201O\275\177}\335\277\033\321\3421\250\333\336\277l\323\022\n\225\250\311\277\346\351\\QJ\010\335?\243I\326\237\314\330\340\277\372\0328V\030\221\340\277\334k\336\304\322\370\325\277\232C\357\340i\252\330\277/2\001\277FR\341\277\036c8\350\\\033\325\277\337\177\267\202\2364\307\277\2311\242@\341d\324\277\300\013\266l\010\351\335\277\204\276E>\347\"\233?L\236\231\375\r\234\342?\237\010=\366\016\022\326?&\036\367}\235s\222\277\037\367\255\326\211\013\340\277h\272\215\274b<\323?1\3511\302\302\246\324\277\276A\007\237\336s\340\277BK\r#s\033\341?\246\257k\244:W\307\277\340\343D\242m\010\322\277I\3410\207\223j\302\277\017\370\262\243\'\233\326\277\261\022w\345H\241\315?\253~\000\255T+\322\277\317\364T\177k\204\337\2779\211\030\341\263\026\320\277\223\300\315\177\233\307\350?\212\177\320a[R\336?f\'(\352q\204\330\277\313\242\013E\025\231\347\277\033\\\204sW\000\341\277\323^+>\221\351\314\277\002\250\2309\023\t\331\277Q\032b\243I\365\327?\225\360\204^\1772\342?t\263\363\301(\304\242\277\210\246&\240\ri\336\277n\005\003\276\221/\343?c+&>\220_\333?\013\214id_\313\325?X\335\217\200v\214\345?B\251\007\026\321\300\336?o\351\240d\325\024\333\277j+\335\372<\010\332\277\034\n\300\273l\246\260\277\222\350\206\"\264P\333\277\252\271\036}z\211\333?z\013\332\232co\334?\267\376\351H&\216\272\277\377m`\2740#\340?6.\220^\334_\343?T{\307\337\254w\342?\260\373uD\021T\335?:\276\007\371\352\364\322?)\321\355\200F\204\331\277/^\342~vV\340?\301R\002\007Y;\340\277\2538\274\275\367\371\314\277\"\361~\036\233\013\331\277\240\252\235\274#\376\334?\277\332\254U\026`\311\277\234\250!\201q\266\320?\003\356y\376\264Q\323\277\334\374\032\244;\243\325\277\227\310\005g\360w\332\277H\254\336D\241\343\323\277\244\312\315\303Kh\323\277`\320[\237\346\"\333\277\234\321\301\300\224\335\342?X8\254\035\203\035\325\277v\2637\337%\004\336\277\331>\005<@\342\321\277r!fa\0250\341\277\177\310\021!dO\332\277u\363C[\204\230\340\277\244$\27163~\274?_\262\226\247\030\214\320\277TY\220=\255\350\326\277\240\243v;\322K\321\277\200\'-\\V!\340\277\027\264w\3430\032\334\277l6\240\357\270r\331?\346\310\353=l\324\312?\033\377\025d\221\307\301? \205\241\304\235\201\331\277o~\005aU\332\334\277W\310\001`\341I\335\277\261\247\035\376\232\354\334??M\322\241x\372\332\277\333\242\314\006\231\344\320\277\010\274\202#7\271\323\277-[\353\213\2046\321\277\216\260\250\210\323\311\333\277\334gS}\0005\331\277\2319\023\211\370\275\342\277\033\006\373\310\020\364\316\277\254(\024\330R\266\340\277\262M\246\341\306\363\321\277@gw\355w\r\341?U\216\342\177\237\357\321\277\262(.\277\272\207\336\277\376{\360\332\245M\337\277\250\'\1779\253\354\301?\255.\351 \226\252\321??\332\244G\370\203\330\277\020l\246\214\311,\330?\313\005x\034P\200\304\277\265c4<\007\240\343?g\211\306\301B\371\322\277\256N\306\337\223\232\320?\347{\035\243\002H\313\277\330\024\300{\344b\325\277u\006F^\326\004\321\277\207\366\363\236\261\214\336?\323\252\216\003L\254\337?\245\200\233ba\n\320?"
      }
    }
  }
}
node {
  name: "normalize_element/component_38"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\306\220\224\333\223\223\321\277,{u\002X,\326?\277\354\205\237\213\210\346?\t\036:\230\250y\340?tuK\233?`\307\277~3\326\243\025\304\340?\340\316\317\036yq\341?\310\265\241b\234\377\357\277\004e\t!\326\361\357\277\017o\255aL\033\261\277u\346? \247:\356?5\321)\300^\276\351?N\313\366\276D\376\357?\215\233\032h>g\342\277\2759\\\253=\354\332?&\016\352l\022\315\341?\227y\006h\266\006\330?\317\277]\366\353N\345?\350\303\240\3747\320\177?6\321B]\377\t\344?X\276xP\232\027\343?k\254\016\312EF\356?\235\203gB\223\304\332?\332_,\302\003\271\341?\007\315S\302\270\340\356?\023\014\347\032f(\357?{\364\206\373\310\355\320?\326\357xIR\010\347?,M\245\372)i\321?,\314\214\310\301\266\322?jB\305\376\323\211\335?*A5\024-\257\355?\026L\374Q\324\031\352?H\264.\177\317\231\357?\263\356\037\013\321\341\350?\216\241R\333<D\337?\005MK\254\214F\356?\207\340\227~\262w\327?i\322\3712I\023\262?\331\201\221\234\356j\255?V\317\017D\2220\277?\237\341raI^\343?\256\260\307\341\0378\343?w\344a\004\0010\327?\257\350{\262\007?\344?K\343z\210\004[\301?\246H\276\022H\311\352?\236\035\311\025y\272\210\277\251\222.!\022\312\244\277\020\374\n\372T\023\231?\201jr\347x;\330?y\311\203\035\224\n\352?\225\3223\275\304\230\321\277\326\213F\343\365\005\345?\304*9\202\257#\340?\213\360\037\2405\236\327\277\265\334\231\t\206s\320\277\303Z\204{\310\010\320\277gcg\002,O\345?\350\021H.\244(\357?O\177Q\335\267\325\357\277^\030D\377_p\356?O\377\274\035\237\230\312?\363c\243\336\031\016\322\277\3239\232~\344q\357?\177aC\201\210\376\355?\312\372Q\375\030\215\355?\253`\216\375\260\256\343?\365\035\221)\376s\264?\302/\026\002\220\305\316\277\232\213\t{$o\352?\247\317\314\233\334\322\332?c$\222 \020s\225\277H\t\0138\225\326\336?\205|\361\301B\370\357\277\351U\256\001[\217\353?}\002\315\214#\373\357?T@\261\200\3170\272?\372\255\347\265#&\351?\r\241R>g\377\357\277\347\312\373\223SV\345?\361\252\275>)\t\355?\341\271\037\202\266\215a?\322\3004\261e\036\343?\363o\244\'\275S\223?F\032&d1{\355?\371/R \232\026\306\277AL\035?\257\023\331\277\177mX\256\022G\355?\3715\253\241\201\326\333?\275+\253~\337\036\336?\325-\3616%\217\355?\367>\023i4\034\237\277\346\036\267\004\205f\357\277\274\014Z\243y[\347\277\000 \304!]\244\357?\243\251d!\266\253\356\277vw\370\306k\371\357?P\253\350\017\315<\355?Sv\372A]\004\347?\222\357\357\277\327\310\321\277\352D\037\177\253m\344?\213Mm\241\022t\347?\311\334\306\260\324\304\320\277n\270\270[\314\256\333?\227\245\204\375*\302\357?\3665\375\237\344*\356?C\001\333\301\210]\341?\021}N\254\031:\276\277\345|\220\351\371h\306\277\252&-\001\235\016\343?[\310\310\376\036a\315\277Bl\372\375\254\203\332?\366\330m\2025\217\357?\225,\'\241\364\345\354?\265\212\376\320\314\023\353?n>d\200\372%\355\277\245f0\302\353\005\353?\356ai\2779,\347?\026\230_\027\217\034\356?\350k\267\331/\212\312\277\r\251\242x\2255\346?<_\232\277\225\356\355?\311\353\332A\231D\357?\346pR=>\006\321\277)\206\232\327\307y\355?\303J\005\025U\277\357?}0\337\260#\004\353?\214^\025\301b\201\311\277\r \031\376\025\252\350?\205\366\240V\207R\350\277P\263\366-)m\353?\302\rw|\033e\220\277M09A\335x\340?Mf\233\237\013\330\357\277\004\300\302\223\'Z\357?\334\353\213!\214\341\356?\345\263<\017\356N\343?\315\232\263\231\236\213\317?\334\2520%\256=}\277=~\322\375Z\346\316?\337\252F\n\300\232\323?\276\271\246\335;,\344?\276\316\336\375\027&\242?\375\225\000\302\250\200\343?\322\001I\330\267\223\356?~\240\351\340\361\321\250\277vS\210OS.\260?\007w-B-]\333?{\220\267\277\'\324\341?\267\001\206\202\245\374\357?(`\236Bl\270\264?y\024[\377\266\200\333?/w\177\037\202h\323?\213$\017~\301\222\342?\351\377\013\272sW\343?I\331\"i7:\357\277\357(\204\304,j\355?P\0010\236Ac\343?\002n\314\241\373(\340?o\234\230\036\3429\356?\364\300\307`\305)\307?\024\2170\261\236\377\357?\202\261\327\036j\031\324?\017\3300\236\234\374\357?\\BW\205z\270\325?s/\315\000Y\000\354?l\000_\237s\366\342?\327\223\257\272\304\007\357?B\340\222-\334\003\355?:.W\375\031w\300\277^\004[_\003F\342?IT^\341\023\201\340?\021j\351~\014\345\341?\371\266\005\360\273\216\341?\247\337\215\036\"b\330?\267\270!!%\021\352?\177\021\331\254\237#\351?e3M\371\214\233\307\277\344N\351`\375\377\357?\2500[Wq\317\357\277\211F\322\311\255d\346?X\"\016\341\261\202\330\277>\013\000]M\001\334?X\246\234\205\366\027\201\277%\251\361w\224\357\350?\322\316\037\211MZ\356?3\214\026\373&\250\343?\210\371\013\240\214\357\321\277\221\262\345_B:\263\277Z\361\221\275s\002\344?\301\220\264\237\265p\276?[\365\024\224\375\316\325?/\314\327\237\2439\346?\351\254`e~\377\357?8\350\\\233\327\342\350?\327\300\363\336Z\236\342?\276K\360 R\340\232?{\252\371\340k~\321\277\262\r\201\310\307S\356\277\364\221\316\237\272\002\356?g\200\013\262e9\353?\001i\377\003\254\325\321\277)\365~\006H\362\250?*\340C.\335\211\344?\006\203k\356\350\277\356?V\317Q`dv\312?p\326;7\310\377\357?\227\317\311\275\206\001\332?\302\353D\223\325\376\357\277F\306\264\200\032(\342?5]p\202F\233\327\277\0358\014\213\366\035\357?]\351\364=\234 \264\2776\034\032?\"@\357?\314\374\264\233*\251\351?\344\216\355k\023\335\357\277M\312\017\": \342?J\037\343\037\360\377\352?Y\317Z\033t\323\334?\226\033\261\273\345\217\357\277!\006\272\366\005\364\240\277,\354/\3345\370\274\277\000\r\302\036\013\370\353?n\021R\337\304\234x\277y\232\006$\345\227\327\277T\232\203V\026;\265\277Q\273_\005\370\356\351?\036\255\305\002\272\212\331?lS\002\203 \027\313\277\t\177\022\341W\223\241?(\020\321C\310\024\333?\351\354\t\267!k\262\2770\036\357\237\270\255\353\277\016\250P@\207w\355?8\031\362[\266\316\317?\220\265\320\337\225\016\356?\322@\003\034\010\352\276\277z48\276\264\360\327\277\034\n\237\255\203\303\340?\357LO\365\267F\306?\010u\221BYx\341?D\201\343\327\2647\342?4u\252\276\353\232\352?\177\004\366\177\253\310\325?7U\326\272\375\207\337?\016\367O?\301\350\355?\343\225\332A\333\200\357?1\276\036\002\375t\337?\261\274\016I\353w\256\277^\026MF\031\232\265\277\001\236\354\032\270\371\226\277\337\264*\323y\236\340?8?\017\377\3722\341?\rxO\324\210O\355?\315]\246\201z\016\346?d\312\207\240j\364\340?.\231|\026\370H\310\277\350/\364\210\321s\356?35\t\336\220\246\341?\027\230\333\336\352\220\261\277\023u\315\201qr\323\277\351\255\354H\026,\315\277dq\244\330v\277\344?\177\002\336\270{o\357?f\035#\023\317]\264\277\226\365Q\374\316e\342?cN\206\231l\262\347?G\343\365\005\231I\340?nZ\235Z\205f\314\277Z\324\'\271\303&\353?\325\352\212\235\031\362\357?!;oc\263\243\356?\337]\374\247\372\031\275\277\252I\360\2064\352\357\277D\311\231\"\217\213b?\303}\211\0352\352\357?Y(\343)\365v\333?)\201\007\345\001U\333?\320\323\302]\244\255\325?\321\245\311\326Dp\344?H@\\\244\026\353\303?=/\323\376 5\327?\360\354<;*H\351?5s\263\005\245\344\301\277\376O\366}\325\335\337?\025\317\217u\'N\343?[\365\363\205\024,\266?\260\350sA\277\347\347?\r\203\236r\361\334\326?%$D\214\346\347W\277\337/\013\222\343\363\312\277\375\317\212=\356\232\347?\037\262\222\240\t\236\357?u\341\254-\3415\345?\2020\001\t\324\254\353?\265\371$\034\037\322\342?mB\020\326\265,\357?\004\206\264\337=4\357\277\357&\3605\241\234\275\277\310{r\240\311v\340?%\274\261^\024\326\343?m\342&\233Y\350\323?\264fu\274\023\275\326\2771\325H\"f\\\357?uD\031\005\034]\347?\212\304\244\302OQ\226?s\201\313c\315H\351?\337\243\371\301\313\234\273?\214\027f\374VF\357?f!l>\317\233\304\277\233\257\355HPW\273?\213\2037\343\265\304\257\277\266\003\"\202y\341\325\277c\322\000Z\312\344\300\277\251\235\006\261\330K\336?)\224\205\257\257\265\357?#\310\367{\030\220\357?\274\304\2423z\377\357?%Z\362xZ\276\357?\366\014\237|\223\t\322?+\004\346\3376l\256\277V\333E\177\005<\336?\3408\235\"\217y\355?Xc}\301v\211\357\277\203/\216\302\334K\342?\035\316\231@S\247\320\277T\007\324\366\nf\347?QNQ\201\325\211\335?=\032^{,\036\337?\361\262\313\\\205\271\357\277\013\021\313\301\307\373\331\277\212\013Y@\025\365\331?\255Pb\337g\377\357?\265\261\n\202d\r\264\277\230,\325\242\221\321\321?\230\241u}\264\022\352?\344\365\201`e\037\266\277\n\213\304\343&\023\330\277%\360^ \316\004\355?\177A\325_\344\242\260?\226\204\227\"\361Y\324?\210\271\346\206\215O\313?\240\207\177}\031Q\341?ph\302\335\366\220\342?\240\3176\355\030M\342?\301\000\302\207\022\355\343?P\324%%5\233\320?o\221\305G\325@\322\277H\244m\374\211J\357?\005-\311\246\001h\343?eE\036\322\271l\340?\377\315\213\023_\355\357\277G\213\330\314\306\357\357\277\310\242\237_J\223\343?\307J\355\301{\371\304?\177\005\0379\210\214\334?/\2747+Gm\352?\364\234>L\014S\354?7\177<\211B\252\312\277\250\336\277\036\270o\352?8\214\233}\222\371\357\277\266M\361\270\250\326\351?\020\314\023\000\312\374\357\277\236w\010\210\356\376\343?k\312\374@EW\343?q[\031\\\214$\333?\272\020\253?\3020\353?\017U\204\335\250\274\357?2!\346\222\252\255\344?\357~\252D\270M\326\277\343+\313!\363\322\356?\355\336@7\352\227\355?\325\343\240\177\340\374\257\277\222\023\334\376K\210\342?{yK\203\354F\343?\"\n\034\277\246}\352?\237b\213\223\261\020\355?\270\300/?\201\201\357?z\n\014\233\371\374\325?\302W*^\033\340\346?\233\241\002qh\033\347?\035\311\272\277G\353\240?\323K\020\236\236\221\341?\0368\302\375\333`\342?Rl\273\2770O\353?\315\365l\014\360S\355?\327\253#\242\363U\341?\323J!\220K\234\353?\"\214\244\177wb\204\277O\364\027\177}\242\252?\324\261\357/\'\r\357?\214\222\302\202\034\020\326?\316\257\377\235a\250\340?\316\317\303\277\276l\346?\177\031\233<\266|\220?_\267cEh\337\356?N \267\"\333@\234?jF\253\377\030\337\317\277\"x2\356\274C\254\277\2724\331\232\010\266\343?g=!\340\265\360\351?\177\317z\276\207\307\252?\242\374\356g\302@\357\277@D\264g\340Q\345??\013\225\301I\201\343?l\305\006$\304\t\327?\364\205\363\035\272(\275?/I\n\321\3066\345?\245\314Y\341\216^\323\277\302\236\033?\371 \340?tT\034\2443\262\326?H\350\035][n\352?[_E\302\316_\357?\373I\255\336~L\300?\226\001-~\317\037\331?\n\327\304~&-\277\277\034\314h\334\202\002\325\277`\243\325^~\246\356?\357\216\357\377\241(\331?KE\031`\325\317\357\277\263\313\\\2059f\301\277i\225\323}\204j\356\277\261\234\316_2?\352?/\006\305E\244\234\357\277\310\n<\377\217\366\354?\224\336\365\241$\307\327\277%\002\325?\210\344\265\277\310\252R\3043\362\341?B\201\322\253\\\303\357\277\010\257\033\276\236\022\354?\035\311\345?\244\177\352?V\335\237b\007[\251\277\231\256\263c\033\237\304\277\250\211\302W\tP\317\277\354\244\276,\355T\345?9\315\310A\205z\322?f\271\317\236\211x\346?h\026\364 5\324\341?\252\003Im\034\220\264\277]\231\001xU\361\345?\275\366\026 \0332\357?\333\003c3v\370\357\277\331\366,\276W#\324\277\362Tn?l\353\330?R\236\365\000H\223\343?\2005\234l\342h\263\277\031j\271\330Y\231\320\277L\241\332}\032\371\333?OC\320\250+e\303?\276\303\'|:G\325?\037J\264\344\361t\334?6\264\370A\023\251p?\247\006y\301\320\270\333?\030\357\246\337\256L\345?\222\270\"\214\372\377\357\277#\322\035a\244Y\342?\300K\035\242\331\316\352?}\321\273\004\351\332\336?\230Bs\337b\254\357\277\356\203\342}\013\001\343?)Y\363\210v\272\342\277l\305H@\226\017\357?\346\366?~>c\301\277\017\266\371\373\234\355\305\277\340e\206\215\262\376\340?\375I!5\222\351\357\277\303\341\375\237`\022\325\277\3617\322\000{\230\357\277\216l\370\'\002\346\327?\034g\313\240wv\352?\357\2733$8\277\357?c%\014!\354\266\276?y\355-@6d\342?\361\030X\246\343Z\311?\207Y\201\204\325\326\320?\231:~^\247g\342?\356p\205\301F\343\343?\336\347\370hqF\341\277(B\217\275\203\004\355?z O\036X\006\341?\336\217\333/\237,\342?\004\212\375\n>r\314?bU\224}\035\331\304\277\037\304\204\207\037\022\355?\243?\260\272@\317\333?s\363\215\350\236\265\355?x\301\226\r!\335\340?\326?\343\035;C\331?\025b\005*\2514\314\277\350\246I\000i\245\355\277\336\364\035\2627\247\357?r|\376\305}5\353?\252\306\340\233\205\301\324?\322\001\244\221*e\356?\030,0\277.\336\350?\322\314\356$}\365\357?\353\312\3022\221m\346?\331Y\231\225\222\212\262\277I\362\277\tCl\314\277\242P&\240O\205\334?,\240\253\010\222R\303?;\321C\247\306\317\307\277[nza|\242\342?\271a\312vt\022\315\277\006\031\371\243E\t\330?\343\215\314#\177\260\357?\217BH\314\242\346\331?\254\250Em\260\252\263\277)\326_e#F\346?\010u\262PB\033\262\277\273\341\210\377\205\217\356?\267AP\3421K\355?\360\315\302\340\222J\336?U\005Y\005 \244\357\277\232\2113\320\306[\350?q\312\334|#:\346?\223\010d\341\261`\351?\326\027\317\301\257\010\355\277A\332\030\236\013\341\357? w\327\372\236h\334?/\244\005`\352\004\314\277\343\r8dfS\330?0\330\r\333\026e\355?/\374\340|\352\330\356\277k\037\353\334\306\374\222?N\315\253[\271\356\330?4\322\367\277\310\260\335?\357ou\245\n\353\357\277\303\222\376\240&a\277?\352\311\241\352\374\300\357?\3039\227\240\216\240\342?H\302\276\235DD\356?\255\244\025\337Px\342?E\027/q?;\337?]P\3372\247\313\334\277\314\205\241@e\375\357\277\262\224\362{\027F\330\277<1\353\305P\216\355?AI\036\333t\274\333?Q\365m\271\341\024\313?\034`\244\037&\304\355?\2424\212\233\t|\357?~{\256!\376\342\357\277[\365oMp\240\357?Ph\376=\035\324\357\277\210x\322_;\232\340?\240~aC\201\310\341?0\210@\334r\201\275?\320\257s\364t\205\277\277\202\244\364\361u\276\337?\376\327\024#\246\237\323\277\326!\222|\200I\351?I\276\257\035\316\264\341?\0326<P\266gw\277\227i\240\236\343\210\351?\363\n\372\301\257\347\343?\321\316\'\372\2251\300?\030\346g\227-a\264\277U\'\261\265\010V\323?\360\300B\336Y\030\332?\332\t\3453\217\362\356\277\010\223^\253o&\276?\326\242\252\256\350{\355?w\246|z\377.\220?\206\246O\037?\243\357?\t_\251xm@\344?\341O__\203o\266\277\365[\205\336,\017\354?\317\315\'\300\352\247\273\277}(,L:\345\341?`q\233\035g\"\357?\316\200\304\300\204{\357?\215\325\346\377U\247\357?\265\033\\\276\036\001\353?\315\204\323@\373\252\357?\210\"0\030T\002\272?F6\241Z\216!\337?gb\333\036\224b\267\277\354\373\313I\2036\342\277L\206\210@\232\366\357?\003\366E\000?|\324?uDt\276\216\356\342\277{-\215\004\277\362\342?\004\240\274U\370\257\273\277\270\233\3718G\333\307\277\237\tE\241\002\263\303\277\361d73\372Q\356?1A\313\302\360\364\321\277\034\r\277\037\247]\356?#q\352^\202\356\347?f\004\247\200\254\216\325?\032\202\353\243\266\301\331\277p\270\352\225\r\306\357?ud\233\n\247\373\343?%\242\353\004,\240\274?\3678x\313z\326\343?\245\372)\351\274!\276\277\001d\317;\241\231\304?8\346\351\0325x\333?X~\317\376\366\213\357?!\256\234\2753Z\327?\353\260\035\347\221Z\357?\376\241\364\340I\306\356?\311\235\251B\311\245\356?\255sg\201\321\300\354?!\225\275\000V\302\351\277\205\300\241\"\024\\\344?\027W\246\251\257\270\357\277\206\232\261\000W\306\264?\375\233\233_b\006\343?R!\303\317$\226\357?\231<\257\302w,\340?\3013F\220\357w\343?\262\0147\001\002\r\351?\320\320?\301\305\352\357\277\264\207\305\301\010N\347?\034\253\336+\004\303\353?4\343\206Bx\362\356?\333L\350\242\337\206\337?\214\346\267\236\327\016\336?\363b8\tk\204\263?l\372\334\236Z\334\300?LP&\342k\327\357\277\253\336\216.>\036\241\277t\356v\2754\305\355?\202c\246\037\232\232\250?\341\231\022A\203\252\333?\"7\201\361%\267\271\277\026\331s>\341\221\355?o@\360\235=<\342?\253\357\025@\245\310\357\277\355l~\262\030\253\320\277\333\t\037\337\030\201\344?\362\326Tq>\020\344?T\377\203\274\334\357\332?\352\034f\334\222\344\327?\321y\215]\242\372\344?\303\204\236\273\307\023\221\277\225\rk*\213\202\352\277\363(\215\177<\307\343?\235\335\265\3375\343\351?>R\257!Y\\\345?\250\371\317?f\314\340?b\256\230S\372\360\264\277\227\367\335\031\022\034\357\277o\177.\0322\036\343?\021\375\332\372\351\377\357?>\212\204\000*\246\357\277\217\375,\226\"\271\353?u\321\353\252\233\346\320?\312Z\371\033\243\253\357\277hN\207\3433\270\307?\252W\231BJ\340\343?x\346\212\367\210\375\357\277^a\003\032S\315\302?\201\204\0273x\316\354?\326X\035\224\213\214\327?^\014\212\213H\271\340?<?\326\2358\252\353?<x\232\212\\\211\272\277\220C\016[\304\201\342?\272\250q\3127\266\341?\034\351\322\3402\036\342?\370\265?a\232\263\266?j\275c\241k\031\325?\365\210\006f\333\"\232\277\270\250\273WRS\357?\247\346\027\312.=\357?\344\367\262\3045\004\326?pg\231$\032M\332?\3629\034\002\354\310\274\277a\037\327e|\010\312?\373\'\023\022\304\324\342?k\353\216b\014\356\253\277\375\277\352\310\221N\346?\303\257\242P`K\331?\306\301\245c\316\363\325\2772C\001\340zB\267\277\034!\352\333\325-\322\277\366\021\360R\207h\271\277\032\303\234\240M\356\356\277\254\304\341q\366\363\355?\246\031\275\340\364*\332?\212\263}#\025!\336?\311\325\300=l\365\357?\3576\261\270\346+\316?tm\271D?d\346?\350\234\206E\230\344\275\277\021\225>[\244\334\334?\222`h}\343\316\310\2776\261<\037\320_\304\277\357\013}\3527\027\312\277*\245\014\301\026@\357?gM\207\251\210.\324?\037dY0\361\307\342?EN\272\210J\376\353?^XH\nvM\343?iK\3438l2\317\277\331$?\342W\014\356?{I\010\373\033\331\340\277W\035\234\374\324\000\332?\232}y\\\257\304\351?-<\222?\326\033\343?\017\362\306\276nU\223?R-\277_\016\363\345?\375\211\210jcO\312?\226,\335\023\332\250\342?\002\205\325\263{\315\334?@\'\357\251\275\204\305\2775\353\255\375t\356\320\277\321\021\257\241\212Q\344?\3550\201\2660&\352?\333\203\265\326\274\317\357?\324K\347\036m7\325\277,d\215\376\300J\347?\243&\270`\302K\356?\270c\342=\244\353\313?g\366q\033\2525\326?\337\315\t\220W\326\352?\026\032%;x\236\316\277\220\014\336\374+\320\342?\005vo$T\231\321?=i\331A\302\003\344?\316\017L\003yU\266\277-\316Z\002\327r\350?\232\204\335@\031\224\205\277B\266\207\030\n\263\351?\222s(dc5\326\277\030d\303\201-\202\343?I\034\211\002C\327\342?C\313\272\177,\004\330?[\233m>\0239\233\277i\367\324\177\020H\340?\245\327\013\252\262\224\304?\030\373?E\335 \305?\177\022\237;\301\276\357?J\020\307\035\343\010\336\277\030\214\351\300t\205\233?n\263\302>K\241\357\277\020\376\013%\017\233\332?A\024H`\336I\357\277\023\366H\336\224M\312?\223\026\364\377&\213\350\277R\267\263\257<\010\356?V\314R\374)\337\357?\007Lp\202 T\232\277\371\316y\327\352\274\304?\317\223|6\274j\302\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_39"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\363\273\237\t\003\305\356?\226s\316\364\267\251\301\277#\355o\236$\274\306?\000\261\000\001\306\216\271?iB\254a3\376\302?\301\301\244\031\007n\237?\002THd\345\270\315\277{\207n\0053\367\203?@#\016b2\030\256\277U\366]\021\374o\272?\257\367\217C\314\376\324?.\263c~\311\001\343?\355\034\000\372H\r\225?Sw\206%\365P\316?\223\223\310\277H\310\274?\324Z\342\022\221\253\301\277\333\213&\037\324\250\355?\300\264@l\375\265k?\315)\371\277\300\377\357?\272n\306@\t\371\316?}\225|\354.P\272\277wsD\000h\273\324?\225\351\010\002\232\377q\277\270\270|\332\227\"\304?\037\243\270\272\316\314\320?Vl\304z@,\315?\255WGD\347\353\264\277TP\264\037\347\205\266\277\374O\037\375\006X\306\277\247z\215\270[\355\276?\256#\263\037\316h\251?}\2416`F\347\327?K\360\026\340l\207\242\277\247\367\236\333\225\'\304?j\303\376>%\037\344?\315h\365\037\343\333\331\277W\356\242;\312\271\324?\215,\262\000\032c\304?\333\333N\327\352]\302\277A\206\315\201\227y\253?~l7f~\332\302\277\320q\177?F\n\261\277\344\'z\205\252=\305?V\277\014\245z[\334\277\300M5i\t\350\301\277h\347\331QA\352\305?\213\303\231_\315\201\341?n&\360\230\313W\265?\237g\375w\216\022\324\277<hv\335[\021\323\277L\215\361\335\275\016\317?\025\346=\3164a\301\277\200<&\030\357C\263?P\274\031!{>\263\277d\304\354\002\261.\307\277\213\220\025W\360\266\302?\277W\230\261\255\016\210?\202\232\020)\274\372\356?r\207,V\375\337\301\277\230\\{U\035(\315?\367\227Y[\343\371\271\277g\033\311/\315\276\323?\307\211\351!\236\225\323\277\235\372\233\253A\263\356?\232{\'\352\365\274\307?KmN\312IM\326?\305\327l\037\321\210\275?\006\224\227F\335\030\266\277\246ssa\014\373\252\277\204\230\317\342Z\'\240?d\212\336N\307\010\342?<?\326\2358J\314?\256\316\265X\037I\303\277\252{*\310K\216\301?A\\\275\263\013@\246\2775\002\330\035\336\265\307\277\204\304Mx\317\242\241?\363\200h\234<\233\320\277z\022\001\034\265\241\310\277\3760\310\261\203\267\210?\017\224\200=\313\230\237\277A\221\027gF\236\300?\240$\023\246\336\211\320\277_d\033\033.p\320\277\367\351\025\242\205\374\267\277F;\023?k\343\330?\231\242\330\341\032\205\357?\236\240\250\307\021F\313?\3143\243\335\360\324\331?\212f\211\301\010\211\260?\351\357\010\033\\\302\306\277\373\367\256{\n\204\330?\207\365\317\236\216q\271?\375\336C\025@\251\310?\203t\014#\030\342\300?\235#\033\335{\027\303?\354\300{?\034A\322?*]\367\337\025\204\244\277\347\035\356\275\324\334\240\277>\252\212>Y\020\332?\024[\244\375\315\023\306?\\\257e\t\235\235\317\277jO\3119\261\007\307?\322\037\026A\316\341\356?>e\353\3174\027\302?C\3368J\332d\277\277\357\250s=\270X\325?\220\261\003|\361$\301\277x&K\345\241z\233?\310\3728`x\201\357?\234\327\\^N\303\266\2773\311#\023K%\357?\361J\016\257V\263\272?>UK[\330*\305?Q+3B\313|\333?\255\252\362\230\334\003\323?b)7\366\221\200\322?\263F\271\013\377\257\262\277\365\202p\201\333E\300?I\304\357\001\025\251\325?\367>4w\035\277\310?j\212\005`1Z\243?\321;\272\266\\\242\326?\031N\200\376\3168\313?O\360\250\214\332\330\356?\237\325\331\373\032\352\330?\220R\246$-\r\300?!\207\322(n&\341?X\024]\264S\265\270?\025n\277\235\300K\327\277\322(\023m}\307\340\277\021z\354\035$\372\330?\321\034\376?\363\376\357?\322\007\344uq\331\277?\212\010{\352\303@\271?\314\321\004\006 \240\311?\013\276@{\273\306\320?\334~\\\217\200\331\275\277\noI\355\311\354\275\277.+T\004&\332\237?2\230\226\303\264\220\234\277\312\340(yu\216\201?]\216\262\331\354c\341\277\'5\356\254a\257\260\277\317\364\226\233=\n\303\277\\\2679|o\337\322?\235\007\301\364\007\224\332\277A\222@ #\342\310\277\210\265\356\242\214\021\227?\'\261\367$\250\310\265\277\000t`\205\320K\235\277\204U\253e!\360\262\277\302\002N\245U\343\241\277JX2\377\234\r\257\277P5z5@i\264?l\367E\036\225V\261\277\242\210=\233\362\364\313?IP6\304\374\205\300?\224\344\220?\336\314\266\277\223\236\361\226\016J\311?\033\023A \300\267\305?\r\033\027%\327\272l?\032\350e\nY\272\203\277\200G\251\203\002\317B\2774H\240E\337r\235?\336\247\r\373\373T\322?{\317v\2741S\251\277\207xQ\337%}\273\277+\006\376\246fE\317?\257\217\363\243\206[\310\277\010H\013\002\361\273\357?\237\343\'\376\275N\275\277$\026\347^\026\311\321\277\356<\226\343\272\316\266?\024\n\210~\252`\252?\262\035cY\366\305\310?\033\36227\235l\304?\346K\373(\033\275\260?\307\346W1d\216\204?\341\210\351W\376)Z\277\224\316\023\021\366\324\273\277~\032\367\3467\314\310\277\020~=\272l\217\355?Pi\314=\207\246\305\2771\267{\271O\216\252?O\212\177m7\240\231?\301Y\306]\357D\324?\325\352H\201G\014\320\277\276B0X\273\267\356?V\002\304\205\205X\230\277\'\260\255]\342\341\273\277\240\371\275\311FR\303?\266a\230<3\373\276\277[6\204t\302\225\251\277\333\027m\341\273\305\206\277\243\246\247\331M:\270?\330\205\233c\253\221\230?\235\0255\276M\204\247?\321\267`\004\350\322\300\277E\020)\376\326k\324?\220\020\345\013Z\310\323?\225\017A\325\350\325p\277\225\036\227\202\177\273\356?jP\217\310\322\342\276\277\304Y\327\211G\271\301\277.\261\360\375&\267\321?\200S\016\034\206E\343\277\013\320C h\333}?\313K\233\375\303N\322\277\371\013\376\375\260E\221\277\024N\034\212L\n\300\277\232\036w\276]\276\355?\037\036W]f\334\315?\236\016\"!\343\364\330\277>\313w\031\2238\244?\314T\356),\375\213\277D\337\335\312\022\235\267\277\216\007[\354\366\231\340?\220\301\212S\255\205\337\277\333\215\231\237v\323\274?\264W@\035f\032\305?\311T\342\266\215q\264\277m\327?\340e\254\216?\010u\221BY\370\311?,*\226\346L\226\207\277Z\022\373_\t\277\355?l\217b\251\303D\312?\002et\274\331\321\331?\016\016\233m\023\223\256\277\335\215p E\231\320?\330\322H\360+\373\357?\023u\017\236C\370\333\277\024\373\323_\022\033\323\277\253q\322\026@\001W?\251\221L=\301\364\330?=f\177$\025[\307?\327\034ZC-\366\325?\370B\226?\276\010\227\277y\334\260\240B\013\221?\306\312?e\302\320\311\277\265\002;\345n\243\321\277\2146\340V\356\303\311\277\265v\0251pi\264?\207\335\351aw\240\221?C(\010\201\t\032\274?\222\274J\251\021\033\315?4\235BS\033\301\326?\373c\357\377\302v\306?\310\376\310`\004\016\252?,\250^m{\361\357?\344C\365{\007\344\256\277\177sp\201l_e\277\312\257\325\324h(\323\277\031z@\260\025\372\271\277\331p?}W\006\327?\3365l\204\023\213\312\277\305\221\007\"\2134\300?Og\335\365\210\207\216\277\363\031\263\231\0016\307\277\377\3769q\336\244\240?\207V@\004\3119\331\277\207Y\303\240\247|\356?\225\312%\237h(\357?Xj\346^\232\241\340?\213gu\027\315\357\307?\352\274\276\275\010\346\357?GWr\340\230\017\265?\324\203aD\313O\324?\215\232\320\240x\000\307\277fq\265\004\3173\357?\250\211U\273\332\025\236?\344\342\274\300+\320\255?\257\223\033\301\235v\322?Iu\210\037f\246\261\277o\235\347\236a\251\262\277\223\017\315~\3258\332?g\336\036Bd\252\262\277\013\213\233d\365X\246\277\327\245g\366P\215\304\277\236\322\177\336m\301\261?I\216\270#C^\254\277\360\272\002\372\022d\301?\343f]H,\316\267\277T]v>\362\235\343?\222\263\013a\220\257\357?s\203>\344os\306\277\347\335\036\245\216e\273\277g3\240A\267\325\274\277d\337>@1\221\262?Y\214\364\201hV\275?\264&q\261\375\377\357?\225(\227\240h\031\260?\355\254\253<`\"\316?J\311\274\237d\274\303?\246\253Z#\231\r\240?1\033\256\037\254\020\340?\215Lv\"w\307\272\277\254o\246\"\n/z\277f\325J\225\346^\314?\200\216${c\014\331\2774:\224_\016\024\321\2774]\025\311\323\311\266\277S\252+<\273>\304??\2547j\205\351\355?\313/\244?\013t\311?\217\246\335\\\272Q\324\277\3137\207\335\np\232\277\302\374\364#n\343\317\277\275\225\367\001\340\211\227?\246Lb\367\272\030\313?\375\023}\272\221\344\305?+u\177\253+U\254?\206\370\"\002Ww\215?&\206\211\253o\005\274\2771W\016FO>\266\277\221b\200D\023\250\304?\323\301\270#\2653\301\277c\271\204\307\247\025\305?\263A\320\030\200\"\207\277\212`\363\334\010,\300?\350_\334W/\320\262?]\006\272\373\276\255\246?d\037\307\203\353Y\306\277\215\031\227`\'\353\330?Eo+\234(\262\305?\203=\375\322h\223\273\277t\207\003\327\313\345\356?-\377\010`Vj\275?\333\225+\366vO\305?\002\321z\225\010\226\310?\307U\372C\022\301\300?\264\016\031\037\376K\255\277;\205\"\376\335\222\315?\3447xk\010\252\210\277\'\224\317<\312\022\327\277\010\006\214\005\360\334\300\277^z\010\236\323\020\277?\233/\037\336\255\253\345?\226T\022~N\246\355?i\275\245\275=\337\262?-\'\035\274\341\004\274\277\334\341e<\000\330\331\277kC-\034\364\344\244?\236\242\3729\313\315\312\277\236%+3c\331\260\277\325\327\353\304\202\316\336\277\306\326a\274N9\250\277G\177\031\240\365o\250\277\217v\324\177sR\306\277=\236\226\037\270\312\312?\235\234F\377p|\301\277\356H\314\036.\332\322?\312O\313\213#A\261\277\247W-]\177\032\260\277\205\356/\016p9\243\277m\007]\241\223N\302\2776\367\004G\321\034\275?\224Pv\n$\356\300?gC\243\340\316\252\301?\364\333\031\236EL\357?=\327s\251|\225\276\277\361(Ib?G\244?\306m4\200\267\340\342?\032s~Z\252\252\234?|\320\026\204\260\"\265?\306\203\024\331Z\241\304\277\254\353H\334\000\277\315\277t1\274HW\337\340?\315\236\231\232\343`\300?\256~\215\240\010\024\262\277\241\225\305\016t\376\355?Z=\016 \3170\321?\r\3415;\224Y\330?jp\334\333\215;\220?\004\365\230\016\276\254\277\277\212^\343\206!j\316\277\342\323\367u;V\313?\365\355M\241-\306\332?R\372:W1h\306?_N\001\027\001\241\303?\365\241\352\333r\303\321\277Rz\t\302\3233\311?\261t\272\003\247\004\317?\2325\302\354\257h\263\277\304\217>\241/\241\245\277\357\020\224\025\242G\304?\365\274\270\340N\232\331?a\341\003\27760\262?hp\000\242\005-\340?\'\330\rH\263\223\236?\312\271=\326\306\267\310?\362\314\221\266m\357\316?\203\351\254\375:C\301?\334\020\004D\230\r\261?\217R*]\321\230\333\277\310\331P>\370\341\253?B\\9{g\264\307?\017\377\033AK\323\233?\314\336\010A\375\375\356?\031\025\335\037\224<\357?\345j\371\273V\306\262\277N\250\361\034\333\274\342?\261\013\222\200\311\364\357?N\233\355\341\375~\313?\025G\222\336?/\306?i\221\'(\311c\311?*tc\034Q\021\240\277\305\\kR~\020\262?]\345\"!>\256\341?q\023\377\301\321\177\356?\346b\004;\233\341\264?\227iE\345p\367\305\2771\275\263,Nk\235?W\325h\305y0\311?:\343=\377$\333\260?\230C\275\246(\223\305?+\'\026\002\375\341z\277/\264\010\377\001:\356?\375\261{\270\005\307\271?)\370\330#\365\032\317?\355\203\352\356S\270\273?\254\304\341q\366\263\357?#\367tu\307\342\323?\036\353r\342\\\327\254\277S\223dF\r\340\303?\377\200 \243\260I\324?*\036m\325\333\212p?\256\3309\257\254\222z\277i\264\013\274IB\327?\024}Wg)\027\277?h\247\235\234\3148\222\277~\017\311V\270\341\303?N\230Q\250~\020\267?\330j\213B\375\224\357?\371.\245.\031\007\357?\374Y\311\0327-\276\277\236<\035\251m\254\210\277Q\253\236\202\262_\345\277X\323\253\267\274\250\317\277\373\331\352_B_w\277\311g&\326\261c\254?\223\025\2528a\204\314?\375\253\\\342\247\365\245\277A8U\255;\314\266\277\370]\241\247\262<\220?\022\247\254\t\026\305\305?u\205\215\236\232L\245\277\327Y\343\"\255\347\356?\320\340\306\230\201k\311?m\356\340\016q\377\251?\031,jj\270L\307?\002\2029z\374^\341\277\252\257\370\227\356\377\357?\221\252\346l\023\204\211\277g\340x%fI\305\277\321\317(\242\205\331b\277c0\230\"m!\300\277\004\215\333`\217&\266?\025g\031\235\204\266\256\277Pii\023\314=\302?\364@\311\274\014\001\243\277\250/\360\201\302\305\321?|\"\364\330;\310\316?\365\2143<\254&\302?\301X\337\300\344\206\357?\247\020\346{\350\260\256?\314\257\254U7\356\262\277\354\013S!?7\356?\302W\215\210\326H\304?*jY\214\364\201\261?N\346s|!\325\243?\331\301VC\301\020\300\277\305\304(\000\255\026\260\277.c\226\177%>\253\277\361\030X\246\343Z\271\277OU\210\344\267\352\332\277\276&sE\214K\274\277\'\356\030!\263\350\270\277\323X\322\274\251\351\311?\233\010vW\321\372\332?m1\344}\301\223\301?n\371\212fL^\226\277\003f\327 @D\274\277\376\264\366\343\233\222\357?\2372\'\375\367\277\332?\036\240^\235!$\301?1\013\355\234fA\326?\241\021\222#\242:\246\277`\3424\351[\213\273?\014d,\211\2426\357?E\312\303\000\221\027\330?\261D\363B2\313\302?\000\000\000\000\000\000\000\000\354\354\226\252\325\323\267\277H{\315\274f\003\324?1\023=\327\224\267\313\277\334\307tb\273\355\251\2776\303\025iEH\237?\215\017/_\311\033\300?R\242\035\036_\316\302?A\'\245\034\243\247\304?C\332RI\225\017\272\277CZ\000\246N8\244\277V\343[\016\252\203\340?\236:\034~\263$\265\277\231\3058=\367\267\312?\356\353\3009#\312\301?\267\237\347\252\324G\301\277\275o\230B\311\337\253?3\031+\275x\267\300\277\363\306\247\322\337\343}\277\327|C~\211\372\322?\321\204\232\3378\302\331?\002\323i\335\0065\306?\246\374\367\"\322\035\303?7?\2237\237\276\312\277+W\262B\025\'\313?I\275#:6H\300\277D\344p\275\330A\323?7\371\363\216\317;\266?\354\352\300\377w\300\265?/!\325fR9\357?\276\327\265b$`\321\277Xt\014D&K\331?\370\205\374\330\311\005\321\277*\256\246\302\n}\261?\304*{\236\201\211\276\277\245\340\204\235\275\016\303\277\330\300-\212\344L\262?^\\\262C_\356\221?\265\n5\037\344\260\277?pK\273\003\002\276\272\277\25026\273\210\313\224?\242k\364\244+\\\264?)\376\265\335\200\246\335?!IA\236\372\223\354?,\350\203\206z\321\231?\035\277\001w\352\233\355?}.\246\333\n\210\330?\202\266\315;\353\246\222\2777\317*\226\317\260\240\277qHYu\014~\327?\233\367I\377\334\341\306?T\273\221?9\206\265?\216\036d\376v~\303\277\236\"\250\226\204v\272?\324u\217\t\204\337\260?\227/X?pt\273\277\035q\242?/:\252\277\002\231\337a\301\032\270\277\360\030\232\302\265\240\246\277\304\330\370\002iu\356?5\203Sz\001Q\311?\210\216\262\270\336\272\317\277K\332n1(\233~?e-p?\001\220\303?\003A\t\376z/\274\277\215\223\377\037\340v\200?\241\2434\037\000\346\357?\356\357\te#\010\301?\241\321\241\374r\240\321\277\313.\030\\sG\320?\324\251<\313=n\276?\024\264$\233\006\340\330\277:\343=\377$\233\321\277\316m\004\332\0045\303?\221ZQ\030\316\224\305\277\216\245\366\277\257\323\200?N\036\334\276\303\304\336?\377\\v\200\016\320\357?\003\223\033E\326\032\306\277=>\306\201\374\221\315?w\230\376>F\355\306?\246\034\376`\001\310\302?d\355J&\0020\267\277\302+\254\310\246d\302?\027\032\241\002\324\222\313?\225rJ\202h\224\307?\255n\t\201\333a\242\277\314\214\310\301\266O\352?\302zP\016n\204\250?\256gz\034\025\036\255\277P\324gA\007\341\320?>\202\362\251)\352\261\277AN\363\351\014g\331\277\364\007\373]up\357?*\224}>g\236\357?f\275\030\312\211v\324?+\000\000\337\361\266\356?S@\034\034\3230\324?\217\264V\337\271*\226\277@T\226\370\016D\313?\002\225;}NK\355?AI\201\0050e\276?K\261@G\355v\272\277\234\207U\264 1\265\277\203\255+\311\256r\300?eN<\014R\225\233\277t\265W\027\236\264\300?!2m~J5\251?<\207Sb\256w\305?\326\245\210\004:\260\312?\217\210\214\273\377\227\311?\242q\362l\240\212\321?\'\353\303\274\277h\322?\347\311\363\350_\365\277?\205j\326[\373\351\325?\342x\374\346\027\210\240\277\340H$\372J\332\300?\224\231\373y\215<\256\277\303\200\210\201l\341\302?\302i\301\213\276\202\304?8\341w6X\366\306\2777\277\'\367\267\333\261?\255a\320S.\236\265?:X\203 \325j\262?\205\344\343aAd\255?y\277X\177N\270\252?k\261\200\256\"H\320?\231\370\223\017\302\236M\2772PB~p\035\223?}\350\032\027\"h\203\277\225\343\302?t\032\323?\030\321U>\364r\271?m\235\243\201d\251\240\277\202!\006\025\260x\327?A\004f\317\257w\323\277\350Pe\234\257\'\264\277\260V\355\232\220\326\357?\344\265;9}\234\306?\000\330]\371\\\010\202\277*\221#!\272\265\275?\310>\351\300I\345\356?\037J\366\000\304\372\260\277\347\037a>w\207\251\277\274t\264&\355\370\306?\235\212Q`\314Y\264?S\337\001\267Q\021\271\277\350a\010\003F\314\255\277\345\211\326@\251l\324?\376U\262)x\006\301?\257\261*F\206j\301\277\177\332\311\\\360T\327\277\305\311\036\035.$\306?\357Fr;,{\326\277\020\010\317\337\337\373\315?*I\350x\026\316\267\277o\221\342\301)\303r?\341_%\233\202\347\302?\227\301\336\345\236\005\313\277\241\252\031\204\1772\263\277v|\007\201\215R\302?\244\2347g\247\223\301?\017t\274\033n\264\310\277\361\300\031_(\036\231?\335\331\r\221\211J\301?\250\227\214!\010)\303?0\217\021]\013\013\251\277\037\002\036\203\333{\316?\251\266@\')\025\340?j\353\320~\336\323\357?E\201\265\237\311T\261?\344\314#=\024^\327\277\306\273\017\177\316V\275\277Q\305\350\024?!\267?\262\2608\200\244\246\275\277u\365t\277T\375\357?~X\312\215}$\312?\255\273?\377\271\277\313?.\010\274\376\352\022\275\277\366\362\233\277\222v\272?+\345\255\241q\264\357?V\277\014\245z\333\322\277\"\255k\223\016\377\265?\273G6W\315\363\357?51v%v+\270\277h\375w\216\022\005\320?86u\375\0066\342\277\005\343\032~\273\025\263\277mG\202\272\222\256\356?\254\233A2\323\254\357?Y\030\"\247\257g\320?o\307i\302\325\205\326?<\362I\037\241\203\305?\206S\002<K\213\247?\025\325 \241m\002\252?\263\273\233\002\364\326\341?V\003\302\276\005(\274\277\240\242M\202\365\307\357?\255\023\227\343\025\210\236\277j\353\320~\3363\300?\330\350\244\020+P\265\277::S\215\003T\357?\022\225x\006.\213\313?nA\000\272y\364\341?\247\251+\300\363b\306?\212.\332\251\332j\302?T=\357\177\2556\267\277\321\217\351}\241\317\265?\253\232{\243\261Q\302?Co3\rqI\243\277\211/,\342\350h\307?\231\003\261*\312\276\316?\020\244\270\316\2623\210?\332g\332m3\357\216?\312\204\350\333EB\243\277C\ry\340p\332\261\277\2149!\327\372\340\267\277\033\345O\n\251\021\340?\036\026\356\205\227\032\303?\214\315;\014\265\277\271\277\376\332\023\207\340\366\305?\303\376\310;b\220f\277\007/>(\317\214s?\220\245j\026\3030\356?\201\331V\026\371\263\310\277\337\t\007\214?\233\324?\030\356\330\337D\272\305?\324 7\211bn\300\277\264\354\244\031\346_\244\27728\357\244*\022\357?\242.)\251\331$\313?\326V\354/\273\'\356\277h\354\t\032L&\310?\342`F\343\026\024\305?\327\256\236\315\211\301\273?0\353\376\037\322pp\277\203\001|\236\334B\313\277\003\016\231\331\204\007\316?\273\274\3261\360\324\273\277\342\257\311\032\365\220\310?\020N4\335%P\271?\373M\036\033l&R\277+\220\260\332\302\024\272?\346W\265\2342\324\334\277W\261\327?x\202\327?\014a-%h\037\300?F\253\377\030\337<\314?\316u\267>\356\323\323\277\235S\177s5h\303?\252K\204\025\300\367\313?\311\235\004\374;\327\312?\234D\316\014,Q\357?\206\337\362\375y\377\325?\305\267$\305\317\030\326\277S\220D\324\351\345\266?\230&\225\276J\375\357?$\371c\275\305\201\320\277\337\264*\323y\036\323\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_40"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\345\377\237\324\250\021\344\277G\031\263\035:\232\332\277P\325N\336\021\337\350\277\273\026F\335{\266\330\277\344\221\354\317M\264\274\277~\314b\275\254$\344\277\250\3634\242\254F\341\277\302\317,\3073\001\302?\261N\370\031\325\361\277?+\017\230\250Z\342\301\277\222\347<[\356\251\331\277\321\311R\353\375F\337\277k\026\036\352-T\305\277Kf\'I\370Z\305?\324\233\264\035\021\033\335\277\017\204}\236\263\303\263\277\372\240\241^t\"\336\277\250\245\034@}\223\331\277\254PIB\307S\355\277\0041\032CJ\275\334?\360\357\032\221{\374\266\277\223_\263\032\032(\332\277\227\002\322\376\0078\341\277\353\362{\325\251v\302\277u1\027\002\312\320\340\277I\255\305\341\253\241\320\277\211\376\330=\334\202\312\277q\231\354\002\322\274\306\277\200I\tE\343\036\336\277\212\020\211\010 \261\312\277{\301\002\363\353\"\343\277T?\312\343\3042\337\277\211\000\361\004\014\034\336\277Q3A`\'m\326\2771\031;\237\t\346\326\277z48\276\264\360\331\277b\222\035]\235\n\322\277rG\305 ,:\325\277\030\202wM\243\344\341\277=\312\322\230Z\000\275\277\345\375Mb\357\311\330\277B=\326\274E\210\254\277\271\202\226C\305\027\332\277b\034\226\345ok\306\277\034\2724\331\232\010\313\277\333\224\341.\261h\356\277\n\3549\002\033\004\332\277W>.\036\234\227\334\277\003\264\255f\235\361\334\277\363\327u\271\322<\343\277\312\376\324\323\242\031\323\277\026\362\020\337\354\303\344\277\334\tu\337\321\311\271\277\350\223\252\'\322\201\211?\217V\265\244\243\034\324\277`[\273\304\303A\275\277D\010\033\340z\373p?}0\337\260#D\343\277\224\341\371\276\030\307\237\277lN\024\327\347\340\342\277|\010O\215<\265\303?\004v5y\312j\332\277\237\261\355\274\246*\321\277\274\215r\325\341\315\345\2774\301\r\204\246\235\334\277\373\250+D,G\341\277OCm~p\374\326\277\323\n\272Zzv\255\277`\356j$\317\226\324\277\213g\2673\237\265\271\277\306Fj\353\361L\342\277\004h\204Ll\035\267\277\237Sw\002\355\220\327\2779\365\232\201>O\325\277\267?\233E\275\032\310?\0162\311\310Y\030\352\277J\303\337\345\330\260\324\277\213\342\260\217\251\026\314\277\023\227\210\\\025\315\332\277<Pe \350\313\303?=\236\226\037\270\212\341\277\017\022\341\340\204\242\267\277\313%\237hh\315\343\277\324\020\321\277\2170\320\277\2147\350\001\342\344\325\277\3144/\301\210\001\261\2778\312\260@\252\367\351\277\024\347,\334\207\366\306?\245\332\351\377\003I\331\277\032\\\347\235\022)\326\277L\200\355\242\340\020\302\277\252:X\275\313^\332\277 P\245\202d\343\210\277\264\241\261\342\223\317\247\277&\274\014\030\207\247\274\277\"\305\337z=-\311\277\274h]\335\220\312\271\277J\312\243<o:\316\277\233U\237\253\255\230\342\277\227CF\230\206\007{?\001xv\277+~\272\277\332\212\303\272m\266\305\277.\261\360\375&7\330\277\274\356\010\002\277!\345\277\323\177{C\206\272\322\277\332\263\337\301\354\361\326\277\020\372\343\007\370\377\331\277\032\363!E\360\001\266\277\340\222\220\006\277&\304?{\257\255\341\032F\344\277\t\323\263\375\204\343\200?\316\345a\374\217\247\350\277\367\240\363\\\327\326\323\277[\010\223^\253\357\326\277l7\013\305g\274\340\277\336G$\300\237\020\357\277z\0309\217\263~\267\277Y_nA\000Z\340\277\027\030G\037\322s\312?\226\357\266^\025`\330\277\312m\373\036\365\327\256\277\177\252e\3066\304\340\277a\035\001\273\036\365\331\277=\240\307\203\210/\335\277D\357}?oi\346\277\200\'\322\242\343\317\327\277$\315\0066:\251\300\277\223\313\332\0012\217\331\277\370>\260>y\263\252\277\036hG\242~t\347\277\205X\242X\0230\325\277\006\016\211\367\363\330\264?\026](\252\310\362\353\277\223%)\237\324M\264?N2\254\301\177c\306?\253\025\267\033\216\270\325\277\355S\254\037=s\276\277\035\210v_\337\230\254\277o\001\262!IZ\341\277\373-\256\257}\032\264?\347\270df\260\363\342\277\222\tS\357\004V\324\277+\230B1\303\020\342\277\224\026\313\200\365\360\320\277v\364d\243\030\305\310\277\346\303\334\203J\273\331\277a\277\212\000e\333\320\277\373k\242d\254\025\262\277\234\333\204{e\036\343\277\221\311\315c\331;\251\277\033@d6m\353\310\277\024Xc}\3016\322\277ZVP\007h\021\335?y\2657S|\327\340\277\210\221\261\034\031\022\313?\0023`Be\371{?\224\354\362\\\310\353\241\277\005k\275[0#\305\277\324\\4\205J3\234?Z\371\300\351\270u\340\277j<*a\032D\315\277\034,\367]l\325\340\277\242\r\237\370Ze\303\277\252\355\211\"b\222\340\277\006\025\321\206.\356\301\277\340|\217\2372\343\342\277J5\242j\252\035\340\277\357\302Z\245\211\261\243\277e\037\340 \214e\307\277`\321\010\221gr\336\277@\352e\312=\223\345\277fJN\232\304(\263\277Z\025\372\303C\026\326\277\235\247\360VL[\334\277\307\337Q\276\373^\343\277\367\'+e\235\232\334\277\275H\262X\324\361\324\277Q\022\361Z2\334\325\277\236\220\0347\234\374\201?\0305 \301\333#\271\277\214\365.ZW7\307?\256\302\177\035\254\275\326\277x0\030\022\346\254\347\2776\033\216[\212s\336\277\003G\372\233\355]\225\277\325C\362\235\261\322\343\277\345\002\002c\236\221\330\277:2\177\0321\222\310\277\006\3462\177\2268\344\277\332%w\306a\252\233?\366\223sZ\236\244\317\277;\331\325\375\306K\353\277\262O\031bi^\322?\271\224\312F\255\321\314\277*)\207\201t\322\271\277\222\255.\247\004D\334\277\251.\205\254\023<\342\277\234P\210\200C(\304\277\201\264\275\345\003e\253\2775\314\022\225\364\315\272\277\374\366\371\030A\235\303\277j\026&[v+\337\277\225\377\332\013\026X\352\277\234\253%\236ev\261\277\'7\202;\355|\267\2778L4H\301S\310\277\025\354\032\210\300,\352\277-\341\267\276\233\360\321\277\331A%\256c\034\341\277\260\307eX\234\034\302?\265w\035\334c\n\271\277k\345o\214\256\\\345\277(\251\002\244\354\343\334\277\260\017\241\000@\004\333\277\360|Pa\266.\335\277\\4\t\203\327\323\341\277\020\0305\251\2629\276?:\364\016\236\246\242\270?\246\367\350h\260\004\332\277\315\276\033\240n\177\327\277\250\360\213>+\330\243\277\221\337\221gMb\343\277\254g6\377\027\036\254\277\306\215\266\205B\337\307\277n\021R\337\304\234x\277$.[FE\267\346\277.e*\016\261\213\345\277\243\t\213\277*m\242?\302F\376\005\'\007\341\277\363-\256\034\032I\240\2772l9<)\370\345\277r\357+ \376\253\340\277\312\212~\300E\337\320\2770\036\357\237\270\255\273\277\201\340;{x\240\336\277J\212~#p\332\336\277|\330f\276\336\230\343\277}\212\312#\013\332\323?\310\330\205\366\034\036\271\277\001\276\200\003\377@\321\277\214\272\030\373yp\332\277\306\"<\220\253\307\320\277\002\321\366\\d\312\332\277k\273\t\276i\372\325\277%\253\205\006 =\306\277\336\324\264IM\324\305\277\213\275\274\245Av\336\2770r\005\312\\\317\325\277\270\253\272\273\214*\333\277\377\347\325\245\353\256\346\277\351\367\251\234\211\370\237\277\001\236\354\032\270\371\226\277\364\251\276NE\005\327\277\360Y\317\367\360\270\274\277f\3066\004\"_\340\277\270\245\037\036\323\004\346\277|\214f#\337~\332\277\3164\3453n\244\264?\361\312?D\264\247\322\277\252\264(`\371;\336\277\364\320\014\034\257D\333\277HV\331\322\376\342\345\277HACA!\251\347\277\324k\253@\312[\311?\360\223z\201\037\226\340\277\306\177\313\255Z\343\350\277Q\362\217c\220\340\307?\3106\340[\247}\212?\2571}\351\314A\306\277\n\026\342\3541l\343\277\255\215\251\242\025\353\314\2772\010(\344\265\330\321\277\275\302\'B\217\275\322\277;zf\303F\313\230?\020\016\017\304&\360\302?\021\316\237\035\rs\354\277\363!f\376\352T\334\277\361\325\022\033\301\200\334?\215\010\010\336w)\321\277b\224\261\353(\230\324\277\006z\217\320\"\035\246?L\021\355\0361^\240\277\315\364\277\032o\004\327\277\026\220\017\335`\346\334\277\212\177\320a[R\346\277\307p+s\251\300\346\2778\357(c\266C\242\277\3623\344\216\355k\331\277.\r\262\033l\340\342\277\265\261\310e\222\307\341\277\017\266\330\355\263J\345\277\204\246\200\017\271t\301\277\333\372+\\=\204\327\277\262X\365\177/a\350\277\360\026\'B\023v\321\277>\303\'\337d\002\341\277o\252<!>\'\243\277I(\272\204\374\231\225?1pC\003\346^\252\2778\017\314v*\005\327\277\233$\022\\\027D\330\277\357m\007\336!\251\256\277\314X\270\325A\230\265\277h\304q\205\034\300\343\277t\347..\372/\334\277Hz\346\037\\%\340\277\215\255\261\225\341\t\326\277\023\235\341\335\374L\336\277\312\347p\010\260#\325\277v\335[\221\230 \333\277\262\206j\316\352\262\276?\3168h\n\370\220\301\277\320#\353\025\273\"\267\277\031\262\025\217\346#\266\277\202\304\331!\274E\244\277\026X\370\341\275v\310\277\\\327\273\201\372}\311\277x\265\334\231\t\006\326\277j\nl\347^T\314\277\221z\323\035Y\263\313\277\370\0376\344\341\265\327\277\220x\242\271\210\316\242\277/\216%\007G$\336\277:\227\301\234\311\314\337\277\224\345=1_\034\260?9\233L\344\233\320\256\277\303\357K\242\003W\350\277# \221|F\036\315?\241~\335\n\335\374\272\277\256~l\222\0371\341\277\2613\246\334T\217\303?\\\226\310h\221\253\306\277\1772\306\207\331K\325\277SN\346\345\321\211\304\277I,\214\241Z\014\325\277\023\'\367;\024\205\357\277j\002^\311\002d\304\277\255\312t\236g\002\355\277\256\213\221\333\345\021\352\2776!J\007-\034\305\277\336\005\347\337pW\330\277\235\253{\236\036\337\325\277\366u\307\377pY\330\277\201;\026\374\262\213\303\277\272\332\212\375e\367\246\277\265\231/\334\345\325c?\340\037m\036\262A\257\277b\340\024\261\343\332\344\277H]\264\305\n\276\236?\213\024\014\337\251]\323\2774\320c1=\243\272\277\372\247\310\337\305\224\313\277U\\f\"\266\205\304?Ocs\274\237&\305?F3[!\310\033\273\277\212L\n=\254\201\334\277\231\305zY\311}\345\277\233\376.d\\\016\225?\002]\177;\036m\310\277\250\036ip[[\353\277-]\342D\313\354\334\277\002c\340-N\204\277?B;\n\204[\206\325\277|\262I\033\232\364\303?0Y\005\377\225t\333\277`\354\367\243,\354\306\277:\027\322#>\036\320\277\236\323\013\302\005n\325\277\355$\t_\353\224\325\2778UW;\023e\230\277\272R\350\037\361\251\346\2779\301\355\277\204\200\323\277N6\324\336\226>\322\277\345`W\017o\010\277\277\240\301*\007Hn\263\277\333\220\230\003\261\252\325\277m\305\037\301d\025\322\2776\355\275S\\\260\340\277gT\215\034\361\275\320\277\324XN\204\005^\313\277\216\307o~\201(\342\277\202%\r$\3360\330\277\261\314\021\350\002\215\354\277\244\263\243\243\342 \251?p\001\354\314\322\210\264?\305\252\244\302\226&\325\277\343\020\026\272\267\307\331\277\330tN\375\315U\332\277cF\364Bl\366\327\2770\3209hD#\300\277\256~\021\331\254\337\340\277\313\037\302\256\334A\340\277\331\217\034\002\252\354\345\277\362n\331\337\341\217\317\277\217H\004xEO\316\277\255~\266\037:N\302\277\266@\314o\342u\323\277\265dS\203p\322~\277\025\310\354,zg\344\277\226\236D\3378\204\353\277Z\022^\212\304g\314\2777\"s\300\t`\331\277\216\3473\240\336L\351\277R\212\310\372\3162i??\225\354;3\377\335\277&\315\027b\222\035\337?E\227\334\315\370\343\335\277%\274\024\211\317\276\311\277\266\344\031}\312\006\211?mv \302*\004\351\277\244\301\216{\312\034\306?\244\300\247\336\277^\334\277\000\036Q\241\2729\324\277\240\374\233\037\230\306\333\277\223jD\325T\273\305\277HjF\253\377\330\354\277\016\024\2315\210A\273\277\001\266\315\236\025\"\343\277\345\341oA\327\272\306\277QR\036\345y\023\336\277\034\216\266C&\215\321\277\034,\265A\232\257\347\277\032\265o\254\223L\262\277)\334~;\201\027\325\277!d\315\206\004\245\247\277\335\302\251\305\226\324\350\277\332~\246\034\233\266\327?\222\217\202L\327\270\262\277\334\240\264?i\013\317\277h\014k\021\356!\243?\336\317\306\235\024^\341\277\213\310M`|I\331\277u\323\"b\204\215C?l\364 \363\267\363\346\277q\243\257\275\242]\321\277R\025%\261<\371\210?\352\3010\242\345\247\336\277\241\251\317\274\271\313\322\277 6&\376\007\\\323\277z\326^\331?.\300\277\244\302\032_bI\344\277\210m\346\353\215\265\342\277;\222\344\034\351\312\300?D%\001\254\206\253\244\277 \326\227|\036\351\337\277\024\272\001U\222\253\335\277\344\304O\312A\\\227?\203\022\013!\214\204\344\277\351\224\354}OQ\320\277\307_\275\376\342a\336\277F\245\307\245\340\337\333\277{\177(=x\322\337\277\356\217\234\361\"x\350\277\255%O\037\242M\331\277\240\372j\273\307!\301\277\235\315\364\\\3603\303?\206\376\372\002)\232\253\277+ \304\000O\373\322\277\346\340>\027\262\337\332\277\257L\373\313\316\340O?\024\335M\314\207[v?\014\214E\236\347\371\262\277\343\337g\\8\020\341\277\030\271D\201\200\255\243\277f\266u\201\334\257\344\277>@\265\311\372\260\301?\351\302\274\205}T\314?0L\246\nF\345\344\277\030\340\314\371s\033\275?\253\006\202|\340\025\324\277\255\217\342w.g\335\277\206\037{A4\210\335\277\377!`!1\t\327\277L\320\307\202g\236j?\235\212\n\213@+\332\277Q*\351z\005\226\304\277\230N\273\375\221\240\250\277,\266IEc\355\312\277[\3220\000}\360\204\277l2\231\340\212\032\340\277\026\204\362>\216\346\326\277r\353\010\274\240y\251?\205\332%`*l\336\277\266!\020\371x\362\347\277\314\317\262\223f\030\333\277\332\036\377\375\020\270\340\277\225~%\004i\316\303\277\355=\246\377\366\306\325\277j\222P\341\245\247\326\277S\277\034\207\013\312\345\277\276\374\312Zu\343\276?!yc\030\342\036\314\277\035X+f\306\323\270\277\331.\247\343\265\273\325?t\000\253\300\034\377\334\277D\233t?\315\347\235?\306\236E\010\362`\305\277;\347e\034<v\331\277M9W{u\341\266?\3032\262;\0174\321?\005\242i\201$\t\337\277C\365A\\Z\t\304\277T\364\035\202\376\320\225?\370\205\"\240l\021\263?\005\314\360]R\316\304\277e{\343Z\243\324\320\277P\261\305\311XH\327\277\347\006\032\236$~\315\277\211\352\243\017:A\213\277\"\243\311\346&A\301\277\010u\262PB\033\262?\031\264F\363\266\210\335\277\233\256\'\272.|\340\277o\2655\277\355\013\340\277[\n\260\336\2241\262?(\217\331\037IE\326\277.R\356_\325\260\333\277I\237\271\373\332\002\302\277|D\257\263\337\342\270\277B\276:}\363\021\326\277\030\266\003\001t\320\324\277\247g0\374\226/\347\277:0o\304IP\334\277\271\025g\261\271\017\337\277k\355\236\270\363/\303?|\263\223\342_[\313\277N\004X\201\255\024\325\277\t\336\024\177\251\331\333\277\252SP\027J\242\244?\\s\211\033\236\273\324\277\234\260q\273\237\354\334\277\214\265\3502o\264\243\277\215m\010D>\236\322\277\330\004\244?,\202\333\277y`\031~\344\324\351?\321\371:\272[#\341\277`\350\215jC\013\307?Vp.\264)\215\352\277\350\n\000\237i\223\325\277\377\3665\305\365\205\226?\007\031T]\270\032\323\277\334Sj\335\243\n\327\277F\372\243^\246\034\326\277R\264\373 \216\037\227?\231\222\027_\325U\322\277g\037\r\242\023\024\253?\3068\216>7K\227??\351\237;\034\270\242\277x\200\304\002\241-\330\277,J_\301cc\271?\200S\367\177\020\364\246\277\362J\355\240m\360\344\277\360!\227\356d\246\326\277\332X\211yV\222\340\277;4MTF\216\252\277\226\362\265\302O\267\322\277\336\300=\377\330L\255\277U\327F\341\037\373\341?S\\U\366]Q\346\277\266\227\331\214xW\306\277^\215\242\275\260\253\335\277\027\205\033\370j\252\260\277V\021M$\301\351\263\277h2N\t\251\327\310\277\322\373\306\327\236\331\336\277\2007\223%)\037\304\277\'\245\240\333K\232\317\277!$\250m\005E\277\277\311\036\241fH\025\323\277\323\212\312\341\356\007\350\277\365\323$\035\212\'\322\277\247e{_\"\377\265\277%\225\306\273e\377\324\277\207H4\036\370\332\326\277\271\345\002\033\000\277\332\277\270\030\311?\257O\241?\020R\001A\312\271\350\277\356\326\t\232\\\255\307\277\373+\032!\362\314\301\277\004\375\307:\003@\335\2770\375\340\266\225\342\304\277D\375\211%@(\330\277\005\"8\354\306\324\274\277k\302\363\333\242\217\253\277h>\347n\327\313\334\277\224\252H\340j8\346\277\264\225\362\265\302O\346\277n-zD\330r\334\277|\257k\305H\000\351\277\014\336\241r]\302\334\277b\276z\344(\243\322\277\023\236m\301\224\371\330\277u+\327\035\203\374\340\277\0101\341\341\207\224\323\277\020YSBx\000\240?g\303\016!\266\315\324\277\260\356P\373J3\330?\212\223\216\201[\310\254\277\305\377\374B\270\227\336\277\205\272\243Z\237\315\333\277\272(\037\'\361\336\330\277*\313\255\234\377O\312\277\242ZL\205\333\216\323\2772\310\237\240\373O\333\277[0\247\2726J\341\277\307gpc\314@\310\277dBH\355\260O\274?%!ua\302m\242?\347\200\207_\266\210l?Xv\034\232\rM\340\277\321eb\241s\312\324?g\337\354A\316\034\302\277\002f\276\203\2378\317\277U\330\322\304\267\007\326?VO\377\274\035\037\325\277%\224V-\375\014\206\277\301I\303\276\327\357\331\277!\264\334\241z\316\317\277\3074\252>\035\260\327\277eUB\177\272\244\341\277\206d\267\205\235\230\344\277\253\010\263\340\260z\270\277:\214r\376`\337\351\277\017R\246\207WH\260?\377\276Vt\261\212\264\277\307~\334\237\007\316\334\277\307@C\244K\344\326\277\252W\035{\356+\333?\243\242=\240d\031\346\277\271\315\257A\272s\326\277\223\252{\321\017\004\217?>\300\244B\206\237\272?E\216c\332\355)\344\277dsYu\353o\246?>#\021\032\301\306\264?\214M\206>\263\277\323\277p\230\005f\307>\251\277\236\345\375\250\033b\203\277\277z\201\376\347\325\272?\026\320\227 \033\257\267\277\r\337%\345\254W\330?\016\343$\203\222\270\335\277\270m\204\352\213\251\340\277\316\032\274\257\312\205\344\277\272;!*C\013\325\277\364I\223\367\026{\311?\335\212\016\222O\331\244\277\340\305\363\000\263\316\302\277\261\250\324a\217\315\231?[M\317\242\024\300\336\277\220\331z\0028(\335\277T\217\302b\305\212\253?\036\030\243\"\014\313\322\277\001.\373\207\212\367\221\277Cu\316\252*\217\262\277\327\271\314]\t\254\355\277_\247&\373\306[\303\277(Sy\371\245\227\316\277\001f\000\240q\376\341?\256\207i\276\316\226\343\277] \367cI\257\350\277%\277\217\264e\n\321?\032\200\323\334\206\250\326\277\005\226\366\342\230 \256\277\2126*\344\010\241\310\277o2\005\306U@\335\2776\304\035\0249\351\350\2772x\024\276)r\335\277o\247\245\240x\241\350\277\'\325\343c\034\010\325?\377\020\023\273SM\331\277\255\276\272*P\013\356\277\n*\354\232w9\323\277gGG\305Az\335\277x\346\212\367\210\275\347\277t\n\362\263\221k\330\277\177C\362\337\315$\337\277)w\341\377u\313\326?\024\305q\001\344[\334\277z!x\3274\212\352\277\231\003N\000\017\226\355\277\322\036\030\010N\362\225\277\'\022L5\263\226\341\277z\370\327\227\021\003\323\277\357J\334t\025\234\340\277\000\233 \250\"\256\313\277W\354\355\236U\211\356?&\230 \331\022(\340\277\025^z\342\326p\351\277gV!\253|K\277?,6{\332\300\241\313\277M\306\010\023\014\010\225\277F\232\323\300\352\203\350\277\177\372\215~M\271\322\277\005:\356\357\307\210\355?\022\303i\034E\361\322\277l\336\345\340\241\301\322\277\t\025\177\210\313\371\275\277\203>\211\266\000\300\316?eq\377\221\351\320\311\277\260\034c\037K\274\303?\377\310\370 \231\310\323\277\367\234\2521\327X\322\277\366,\306\310\253\326\265?r\354M\312\254\367\275\277\"#wC\340\351\301?\030\354\247{t\325\335\277\374\361\345\245e\033\211?\211\304N\302\226\250\352?\255\252\217n!\033\277\277\033\370\206\377\312\003\264\277\346\215\027\373`S\335?\177\000\316b\224\255\332\277\034\315\364\277\032\257\324\277\266\022\231=\371i\344\2774w>Mw\250\346\277\"\235\211\002\340L\322\277\251^\247&\373\306\306\277\300\253\355?\225\307\326\277A\224y\365;\236\340\277\301\322\257c\022\344\345\277\227R\270\232L\307\327\277\'\230\030h\312\220\263?\t\274\233\300\327\204\266\277F\032\005VH\330\270?\340]\304\375\233\245\257?\330\331\346\177\037\371\272?\272u\355\301Z\013\340\277\321\332\021\247\303\245\225?c~\260\204\234\224\266\277\035\333|mG\202\327?_\247\344\336\364\225\340\277H\260\212\232\\J\302\277\206\245&fb\337\337\277B\220(Y\363\310\351\277>9\257V\222\241\351\277z7\263\351J\374\272\277 \025\326\370\022\313\304?\353\207}\247nS\321\277\023F\026\33581\245?m\237\002\036 \261\316\277\005&\344A\202{\261?h\345\010`\235?\276\277\234O\374\234\253{\301\277\271\303hNE\307\275\277\340\242\356^I\r\340\2776:\214\356\305<\351\277~\177\224\"Cx\344\277&~\326F\206\346\345\277"
      }
    }
  }
}
node {
  name: "normalize_element/component_41"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_content: "\2772\251\200\377V\316\277\003\024\227\241\3715\352?Zk\203n\212\"\344\277Sd\204\"\243\204\355\2779u/AW\314\357\277\222\246\213^W\335\350?9`x\241\220\357\352\277v\215\361\274\257e\347\277\271\327\223\nt\267\342\277\210\363\262\036\245\257\357\277\227\242\001aL\337\345?\t\240\275\237\2775\344?\022\350\237\"\177\227\352?Y\355\253\274.\215\357\277\003\311\277\277\326\177\354?#<-\201\214\347\357\277\272\270\021?\224\"\262\277\026/\232\276lU\355?\236Y\267\3463\305\321\277\326\3779\314\227\227\354\277\225=S\371\350\336\357\277`\236\204\210\212\247\325?b\241\3264\357\370\352?\224\314\240\220S\252\357\277%r\250|[\362\331?\300\257\323@\332\034\335?\215z-\215\004?\355?ig\342gm\344\340\277&3\203\235\007<\354?\351\371.\000\350K\357\277\2325\241\336\306\245\351\277\036\367R\035\027z\350??\377\240\242\250\373\346\277P{B]A\246\335?\213>\325\327\251\250\343?\315,\370#\373\226\325\277\010\235c\202\022\215\341\277\210I\270\220G0\356\277\206Cg\200\250\207\352?\234\312\232?C\313\357\277u\240\230\006\217\200\355?\217@r!E\363\357\2774fu\037>8\355\277\364+BV\\\201\357? \024\255?6G\357\277\010$z|\357\355\323\277\003\362_\377\371F\342?aK4\355\007\241\354\277-|\\\237b\212\354?j\016\265\022_\222\351?\313\331;\243\255\212\356?mA\347\034\331\350\306?\210z\0135T\326\357\277\203(\251]]\377\357\277\211\271A@\000a\356\277\371\331\310uS\312\357\277pp3&\016\252\357\277\216&\223*\274\221\310\277\371Gc\335\r\374\357\277\327W\rxO\324\331?\341\3143\037\245\354\345\277\365J\366[}\355\325?\226\231-\264\316\323\356?\244K\244\331\341T\321\277b\370\343Q\205\032\335\277\267 \000\335<\372\342?\005n\335\315S\335\344\277\302^Q\337l\362\357\277L`)\201\203L\356?\263\323j\243\225\326\357\277\201\206\253\301\003\234\346?\277\300b\303\211\336\357\277\246\021\361\336j\300\355?z\205\252=\221,\356\277\313+|\"\364X\342\277\226\251\223}\241\021\337?W\216\271\000n\365\322\277#\251\277=S8\357?NA\341`-\306\342\277\315\264\232\001p$\346\277AvIbj\347\351?d\2546\377\257\232\350\277\303T\351\335\016#\351?4\227e\231\217\365\356\277(\331E,\275\021\356?\214P\307\276\277\234\354\277\375_\236cz!\331\277\326X\302\332\030{\357\277_\376\226B\030\346\345?\344\355\255\355\222\235\353?\327\270\345\300\376\255\357\277dO\351\375\322\344\347?@\\\203\010\202\321\357\277C\3350\237\346\343\356\277t\013\372^\205\314\357\277\341\365\364l\261\266\334?\022\201\217f\321 \357\2771\005\020\343\332u\321\277\303\334I\237\261\n\352\277\237\3767\037lK\351\277\n\022\333\335\003\324\357\277\325p6\302G\211\357\277\2258<\316~n\343\277\177\270P\236\036\200\323\277 d\264\351c\231\356?M\323-\\\322(\327\277\214\331\222U\021n\350?C\260hB\254\341\357\277>w\202\375\327\231\357\277%\313I(}\241\325\277\373\224c\262\270\377\357\277A\003\373\371\000\356\323\277.rOWwl\356?\220<\245\275\240\211\334?\n\362X\330x\225\346?\0041\330&x\267\316?K\304\000.m\335\357\277\307\306r\001\036G\340\277-\201\357\221(O\357\277\217\232e\005u@\345?\336\246\344A\037\361\357\277E\371\335\317\204A\353\277I\232\303\336YU\343\277;\373o\312\201\003\341\277\221\305h\343\251\303\323\277\277E\'K\255\267\345?\tb\352\370y\035\324?G9w?\227\036\347?\204\035\0202\332\364\357\277\261qXu\261\304\345?\266\227~\323\005\206\350\277\030\232F\356D\344\350\277\220Z\264B\211=\321\277\303\305@\2151\346\357\2773\344TB\342\004\342\277\204\342\032\341\345P\325?,\271\314\341AP\312?\273\256\251=6\363\357\277\365\202Os\362\342\352?E\343?\223\263\346\357\277\265\243\274\177\301\310\351?\031\343\242\336|\330\355?\333Rb2\260i\352\277\003\026L>n\246\354?R\303\257?&e\357\277M\226\244|Rw\351?\254\275\231\342\273\336\356?y\212f\257\210\353\357\277\346\325\357xIR\351?\247\275w\212\013\366\357\277\325\003(>%\204\352?\367\331T\037@\255\356?\177(\240\242M\202\354\277\024&\214fe{\352?\nAX\327\262F\357\277Ub\350\"\317\377\357\277\010\203|\032A\264\355\277\350.\252\301\013\255\350\277\227\201V\242\344\374\357\277\223\207l\2752q\353\277\310V\341\340\034?\353\277Z+\332\034\3476\353?t\353\332\203\265\226\350?\332\027\226`\355_\353?/\356\016B\243\350\355? \2202\177\330\324\351\277\300\3348sY\026\324\277Dn\206\033\360\371\357\277m\351\013\000\331\024\316?[s\354EY\244\345\277\304\177\025;u@\330\277\337\374\206\211\006\351\357\277\301 #\177\264\010\356\277:\202\n\375\002\260\354\277\336\275\016b\210x\351\277>\366\006\241\264\336\353?\320e\244\275E0\345\277P\277\260\241@\204\345\277A\364A\"\257\377\357\277\374\356\014\t\316O\353?\010\233\360\001p\002\347\277~z\">f\266\345\277vv\350\252/\001\324\2773\311#\023K%\354\277aE\272]7\376\357\277\\\333%\273\343\036\351?\334\325\314\326\321\243\313?\020?\275!\246g\357\2772\272\017\202\206\245\324\277\224\373\035\212\002\375\357\277\377\215\342\301\273\001\357\277\234\253b\001~\263\340\2773\202S@V\247\356\277\0043K\247\032\242\353\277\366\337\224\003\207!\353?|Zn\376\231\000\354\277\313\013U\326\333K\352\277\202\231\010~\310\231\357\277\365\013\033\nD\364\357\277\333{\002r\323p\347\277\275GG\203%\350\351\277\243)\226\266\023\300\353\277\226\365Q\374\316\245\324\277\210g*@\353\354\357\277\204&.lr\335\357\277\236\344\365\375\'A\333?\336\327\222\237\236h\342\277\200\271\365\036W\230\351\277k\225h\342\200\n\353\277\"\256\265Z\324\345\332\2777\205:Q\267\330\357\277\006\005\357\365\377;\330\277n\324T`\022\270\334?q.Q\377Q\002\355?\317\355\353\341G\254\350\277\\A\313\241\342\013\346\277\315q\217!\327\030\347\277 =M\177Y\016\350\277N\245U\343[\016\331\277\034r\032?\340\303\355?\274\237K\037W6\352\277\013\216\334\344\001v\351\277\276P\0330\243\363\357\277b\013\346T\327F\347\277\023\200\034 \332\377\357\277\243*\340}\331f\326\277IPW\322\345\250\347\277\275\355\370\345\202i\350\277\037Gsd\345\027\353?\r\213Q\327\332\373\357\277\212\344+\201\224X\306\277\233\372\3458\\P\353\277\325\307*B=\177\356?\017\332\006I\372\317\357?/\032\360\001\323\214\347?\321\266\365.9\t\354\277\3721\234!\013\'\341?\314\305k\240\361k\356\277c\177\331=y\330\357\277)\036\274\033\260\320\356\277Xy\033\376G$\355?\231\225\222\212k\341\356\277\030fW\020\271\017\355\277k\321#\302\226)\347\277\000\037\274vi\203\357\277\250\034\223\305\375\207\357\277-\326h 3#\337?X\023U\t`\024\351\277\300?\245J\224=\351?\211\227\247sE\251\321\277\262.n\243\001\374\357\2772\257\002\000\360\375\357\277\003\332\014&\264\333\355\277;8\226\177F\314\357\277md\r\315+M\345?:~\342\337\353t\341\277\371\300\216\377\002!\355\277X\264\357@S\345\357\277\361\312?D\264\247\322\277n\220\244\377@4\354\277\375Q/S\356\331\354?\221\3774{\301\243\322\277\214\374\023\277\326\243\326\277\305L\211\301O\036\345\2777\307V#\375.\334?\221p\020c\210\322\304\27729\326A5p\357\277.\035s\236\261\017\347\277\\~\226\2354\203\357\277\321m\364\367s\206\311\277\307\357\022AA\356\350\277IQ_}\331\311\347\277\277\347\217\202\n\273\337\277\216\327r\035\231\375\357\277\331E,\275\221\324\350\277gv\304\276\360L\335\277g\336\036Bd\252\342\277\211\277\334\335\271\246\354\277\223\220H\333\370\323\356?^\346\t\276HL\356\277\264\236\020\360Z\370\357\277f\341F%\320\373\357\277\356\336\233\360\\i\354?\364\364\266>Q>\345?\030*Z\024\321\n\322\277x\243$^}@\331\277X\254#?\311\372\357\277\346Oeb\004^\355?Rqo\300\337\326\351\277=\340p\325+\233\352\277\324\257\276\313V\250\307\277\253e!\360v\263\357\277\021\017r(\215b\344\277\t\301\252z\371\335\331?\227\324}\2765\311\356\277Y\345[\202\000\327\351?%\350\222\036D\372\357\277<\3328b-\376\357\277R\203\345\337\231\266\353\277\021\030\220b%K\354?\303P=\210S\234\355\277\200\212\374]L\361\357\277\374\010\262T\315\342\357\277\300\277R\247Mf\322\277\027J\201`\3517\341\277\326\242\252\256\350\373\340\277tqe\232\372\n\356?>\235\206\003|R\343\277\030}`\"94\356?\250\001\203\244Ok\353?t\203\231\235\342\304\357\277\031\357}`}\262\357\277J\177\212>z\336\357\277\261b\237\235_\326\355\277\322>N\177\223\371\357\277\336\277\303\376\374h\357\2774\032TvU{\323\277\267\030\362\276\340\311\354\277\005\221\240S\353\230\354?\331\253\023\300b\247\342\277J\344\314\300\022\271\355\277\223\243\010\302x\372\357\277\364\352\322u\227:\354\277\273\351;do\216\347?\177g{\364\206;\344\277@\264\342]&\361\357\277\006v\210\301\364d\327\277U\265\35607)\357\277g\2217\nZ\322\357\277\302\316\003\016W\375\352\277\017\245\017\300z\032\337?T9\212\377}~\357\277\306\367\305\245*-\356?\246\373\357w\336\374\352?f\360\234\322f\201\353?\253/\340\2371\027\306?\362\014u\263\232I\353\277D\335\305\003\343\003\333\277\252\367\361#\300\341\322\277\355p\307\335\030i\346\2777\035\277\277Z\230\355?\207\344\277\233\311\022\356?=5M\216\361\227\355?h\267\361\202\343M\355?\265\305\363!\301\367\357\277\361\010\023\353\371\377\357\277\204\3567\177\270\360\357\277\177\242\262aME\350\277g\200,\300N\374\357\277\324\237X\002\204\212\340\277\314\320x\"\210\323\357\277\201\334\321A\217?\357\277\207\036\255A\312u\350\277\360\331\235b\223\204\346\277&\r$\336\360\321\357\277B\362)[\177\246\354?\256[\251\014\210\265\347?l<}\251D\376\357\277?\244\204\005\234\n\350\277\314\234\r}\240*\324\277x\376\376\336\267+\345?\335D-\315\255\020\350\277\215\332\263\235\245z\344?\345\324\3160\265\245\353\277`\306\332\000\350\347\354\277\'\021\206\246\221{\357\277\241\302*A\363\367\356\277\0070<aO\334\330\277\t\317:\231n\210\347\277Nr\217\276\254\375\357\277\215\322\347\233\0330\332\277b\262\002\215\343\221\341\277w\005\r\303hR\323?\321*LB\226\303\357\277Y\353zX^\350\357\277Z\211\324\017E\034\356\277W\341\340\034\277A\350\277\303\275\215(H\207\347?{\231Q\301\033\261\326\277\367Z\216_\221B\357\277\200\264\244HcY\352?\261\277\354\236<\314\343\277\t\335F\177?\347\334\277\300+\335\270 \366\357\277^\037\214\216\232\345\357\277\226_a\034\2673\356\277\0278\013A/\330\332?\245Kb\275\017\317\352?\235,\265\336oT\345?\305\267f\341\241\276\357\277\270_\272 \2150\353\277X#\263a\352z\347\277\325\355\313\035&O\347\277\267\332y\321\r\003\357?\200\034\336\275\355\023\332\277\222\354\256?\313\253\357\277|\345\213\007\245\271\355\277\343\235\215\246\304\377\357\277\325\362\332\327GH\314\277>\2779m\327U\340\277\325~\306\340\2743\357\277\350\263M;F\303\345?u\251\370\\\371.\331\277 \311\366k\374\223\353\277\364_\326zuD\354\277\237Y\022\240\246\366\353\277\265\243\335\215\252K\354\277`y\353W\225X\357\277\340\t\346}V\330\350\277\\\212P\021LZ\324\277\237q\206\207\325\204\357\277\307s\307\254(\257\354\277\225+Y\241\212\023\343\277rg\313^[\344\342\277\214c\311\301\021\211\357\277D\266\034}\006\263\333\277\366\0056\337o\321\357\277g_\232\236\207E\315\277\312\213L\300\257q\351\277 \255\326.\022?\354\277\227\250\203aey\342\277s\332\3179\252\340\317\277\353\021\264\023on\345\277\003\252\207\201\021\350\344\277e5]Ot\235\351\277\013\376\310\276u/\344?\354\\\007\275\355\270\355\277\207d\022?\020\352\357\277\263\265\276Hh\013\357\277v\337\357\037$\256\354\277\006\\\035!\177\340\352\277\007[\221=\347\363\354\277\2255\240\224\377\377\357\277\256\020Vc\tk\302\277\312\241\250\340\256\346\306\277\315\301}.d\377\357\277\222\304\334\377\021\027\354?\331\265{\301\300\226\356\2771\331\323i8\200\356\277.Z\333oH\276\357\277\266\252\333\217\312C\340?\017\n)\303\341\032\334?\230t\357<L\226\344\277\372;%1R\371\357\277\251\354\005\260\022\275\353?\322\002\223\237}Z\354\277S#\025B\336\375\357\277\252hj\341\313g\323\277\373\316\212\003C\361\356\2779\0139\276\017*\354?F4\313\2570\316\354\277\221Kw2\223\303\353\277\377\366LakW\324\2770\241\335|~\363\352?\274\"\370\337J\266\357\277\265\312\247\"p\037\351\277B\2616B\026\364\357\277\033##\261\356i\343\277\366\273\013\357\315\n\355\277\200\250\352\324K\302\355\277\340\227\237\300\340\377\357\277\210\332\025~\231]\343\277\333{#\200\274\263\344?\305,\305\237\362\371\357\277%(\033b\376\002\320\277\215~\362\177`\261\357\277Q\334\361&\277\205\352\277a\210\234\276\236/\327\277m_\366\241\301\034\327\277\360{\304}\036b\356?)A\177\241Gl\354\277\240\266W0;\225\353\277T\343c\177\362\332\355?\356\213\225\342\364\377\357\277\t\233K\273\3423\355? j\221\243\357$\354?\017\352d\241\204\366\357\277\0364\273\356\255H\357\277\301\273\246Q\222\377\357\277EO\343A\'B\347?\004\324\212%\233\341\355\277\306:\260w\332\365\357\277\3177\3754IG\353?ZZ6\010\255\346\315\277\226\312><\t4\333?OW\034sC\370\350?\367*\307\236\034)\347\277\2425P*+\027\356\277\204}\340\317\225\355\355\277\265\233*)\301,\320\277\t\'\026\266n\234\262?\026\004\207\376\246C\351?\030\266\301\344\241J\314\277K[\\\3433\031\356\277Ky\010>a\304\351?h\361\246~\205\234\226\277\2624\tA\273A\324\277\207L\236W\341{\340\277\024j<\3076\337\357\2776\344\237\031\304\007\351\277\276\223\005\002S\374\353\277\201Hu\360\002\233\357\277\326\217M\362#\376\357\277zs\023\020\356i\351\277j\341\r\304\r\223\357\277\252\001\224\320\247\337\356\277.;\202#\232c\335?\234\305\346>\224#\357\277\356\270<1F\377\357\277}\210\231\277:\265\357\277\273\354|\344{\353\357\277\201\212\221\302H\261\337?\2551\350\204\320\301\350?C\032xb\224\257\353\277\277\0218m!\243\350\277\347`h;\307\374\333\277\214e~^\206\331\354\277\305`\264}~\256\357\277\252\253LB3\331\357\277\353\326\276\302zJ\323?\017\t\204B\251B\356\277x8.\241\2124\306\277ME\317\322\272\262\354?4\305\322v\002P\350?\257\n\324b\360\260\355\277\360\324+~\266B\357?\273~\301n\3306\356\277\207p\006^\261\317\354\277\206\003!Y\300\004\354\277\032\332\245\262\315\262\355?\333Q\234\243\216\316\343\277b_W8\356\371\357\277\255\317(\237\026\352\347\277\263\261\022\363\254\344\354\277\225\246\367C\"\343\342\2772\024^\037)$\330\277\344\266\205\000C\203\355\277\267\244z\235\232\354\333\277\233\353n}\334\207\346?\324\230s\235\004\376\357\277\377PY\342;\220\327\277k\222i~F\363\344?%;6\002\361:\323?\255\364\240\301\"v\347\277\353\025\375>o\354\332\2773@X|\371S\345\277\274-\005b\341\375\357\277h\265\033\330\205\372\357\277\232v\367!\353\240\355?z,\307u\235\327\357\277\343-\374\205\303\367\357\277\255/u\004.\227\320\277fL\177\376\224\r\345\277\323\220e\177\250\215\326\277o\240\300;\371\364\357\277\035\331\350\336\273t\344\277\322\014\363/\223\362\357\277y\266?\376ox\352\277G\270=\377E)\323\277\367\357\260??\202\357\277\270\321[\227uZ\354\277<9\371\343\254\276\355\277\014\340\322\326-\347\357\277\200R\345b\251\301\324\277\250\374\020\300r\t\354?[tW\033\010n\337\277\235\023\030>d\002\357\277nYt\241\250\302\357\277\273\200\362\322\250\333\341?Hf\273c-\025\322\277\320\3304B\201\257\356\277\266\202\246%V\306\327?5\221>R\351L\340?{\321h\274\276\240\336?\275\335y\177\017`\344\277\310\216\327\315\326\013\355\277\353Y\255\237@P\344\277=\024\201\301\240r\357\2777*\201\336e\260\357\277\267\3637\200\002\230\331\277m\310`AqR\352?\"*\340\340\003\242\355?\244\035\222\265\341\313\357\277g\\\335V\037\364\357\277t\"$\177\356\223\354?e\177\311[\350\251\321\277Y\357\303\203^\346\322\277)\237\324M\030\303\350?D\300\204~d\202\332\277~r\024 \n\246\351?~\345\377]\270\026\344\277\246\337t\201\201v\355\277\303\031\221b_\266\316\277\277\342_\272\377\376\336\277\233:\217\212\377\373\357\277\305\316o\363!C\356?\322f\346\023\303\237\355\277\271\372V\220\013\363\357\277\367\256A_z\033\354\277|\366\267_\231\322\354?\230\266\311\362\277&\342\277<}N\213\013Q\357\277\211\333x\342\377\017\341\277\346\023\303\037\217\n\340?\304\217\326\275\272\357\340?\211\317\235`\3775\344\277$\212\177\216E\211\335\277R\265\037!\261\372\357\277\210\325\304\247\245\236\353\277\025\007+\251n\211\353?\2459he\261C\356\277\323\344\030\177\221\206\314\277\366\316h\253\222\010\357\277\215\312\362\032`\013\356\277\315-\337\300\0055\356?\316\033\'\205yO\332\277\242$E\340\037A\355\277 \314\324\301M\310\346\277F\212\226vI\240\313?#\265\232\277S\262\352?kf-\005\244}\350\277X\201k8v\332\357\277\304!\033H\027[\342\277\250b\031\321,\377\350\277\365\224\346\240\225\345\357\277K}\325\241\005\316\347?\242\350\211\000\n\342\355?\240\372\007\221\014\371\354\277\n2\237\377`\030\323\277$\033YC\363\312\355\277i\t\350t\017\377\357\277\327\250$>\271\236\346\277\3274\255\034s\201\316\277\335X\365^!\370\357\277?\330\265\377\371\344\357\277\312\253\316\305:p\356\277\273\301\006\372\372\020\341\277Nq\250!\242\377\357\277\225\330\265\275\335\322\357\277kY\010\274\335\334\357\277\306\330\256uN\230\355\277\303\365\346?\275<\347\2771M\307R\332Q\353?\267n\030?l\215\350?2\243\'~\357\243\354?\026|\344 2\226\341\277\206\375C\2374\371\357\277\250\243\210\261\361E\344? g\365ip\366\357\277bT\255\340\022{\345\2773\017\252\036z|\354?\3330L\236\231\375\346\277;\t[\242i\337\343\277\022%)\002\377\310\325\277\376\373B~\354\204\354\277s\242\372Z\331\366\327\277h\026\262\004cN\347\277\277\225\221\037\226\022\357\277\211C6\220.v\352\277\342\345\351\\Q\n\347?8\006l \300\026\332\277\304\333{\237G\330\356\277\202\311\215\"k\355\355\277\256Q\305C\316\361\357\277\201v\250\"\354f\357\277\361\007\250\025Kv\354\277(\310|\376\203!\335\277\302}.d\277\370\351?\034d\314<=_\327\277\336\334\251\312\0109\356\277O\247\341\000\237d\355?\376l\232-\017\010\326\277;\353\t\001\257\205\356?\300\331\2349\332\347\350?\203\345!\266h\277\313\277\351rs\277}\\\352\277\312\210\013@\243\364\353\277Gi>\000\0148\337?\014#\275\250\335\257\354\277b->\005\300x\327\277Yh\214{\230b\330\277\320\353\364(\001\226\342\277\016\340%\037X\341\342?\376pF\203\312\356\355?e\326{\277\013Z\353?o\247c\204\246\333\350?N\006\354\0179\"\323\277z\000I\340(\\\345\277\241\216}\1779i\321\277\215\020y&\217\302\357\277\017\305\323\341\327>\357\277\225\'s\240E\376\357\2773VY\343\205W\324\277[M\215\206B\272\341\277\223G\242]\246\242\330\277\216\031n\341\365\220\356\277\236 V$\313\256\346\277\303\345\343\240\245\307\357\277/\202\214\241\030\020\357\277#z\204`v\253\347\277\215\243(\206\232W\351\277RG\307\325\310n\356?\001$\344\315+\250\356\277\225\350v@#\342\357\277\335\026\033\251\255\307\357\277\370L\233\026a\257\357\277\350\003U\345s\325\335\277\316A\310`b\377\357\277\260\345\225\353m\263\341\277\315?\372&M\303\357\277i\302Y\276\354\346\357\277>\345^\201dq\354\277\352Gy\234X\026\355\2773\021\333\202JA\354\277\340\014@\233\003!\325\277\264\303\004\332\302\230\346?\252x+d\021\267\314?>\226>tA}\357\277\222\006\267\265\205\347\355\277F|\'f\275X\353\277\351=\337`\271\357\321\277\232!v\"\230\265\355\2773\242\027b\263+\324?\332\302\230\231>\340\357\277\253\"\334dT\331\357\277\362\020!\tV\360\357\277C\240\247\277f\322\357\277\364+\347\234\351\257\353\277\010u\323^+\376\357\277\2068Z\376\021\340\357\277\321<\302aP\303\355\277\332\264\255\301V\304\351?2\223\003\321\356\253\357\277\377\210p\335\336\277\353\277:\241\306sl\363\342\277X_\023\210\215(\343\277\013\265\t\244\202\022\335?v\322\014\363/\223\357\277\267\201\226\t\032\316\356?\371\262\376\340\215\366\346\277\n\230\310\036\004\021\357?\033\007$\202\355\327\353\277\330f\276\336X\353\347\277\255\364\177\2639\263\357\277j\030>\"\246\204\327\277\026]\315\360U!\347\277o\227\242\001a\314\315\277\230Uu\342\264\230\350?\363!f\376\352T\347?"
      }
    }
  }
}
node {
  name: "normalize_element/component_42"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 749
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 749
          }
        }
        tensor_contentt\000\000\000\007\000\000\000\010\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\000\000\000\000\004\000\000\000\006\000\000\000\002\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\000\000\003\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\006\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\000\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\005\000\000\000\002\000\000\000\t\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\005\000\000\000\005\000\000\000\007\000\000\000\005\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\004\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\006\000\000\000\000\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\007\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\003\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\004\000\000\000\002\000\000\000\000\000\000\000\003\000\000\000\002\000\000\000\001\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\t\000\000\000\002\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\010\000\000\000\004\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\003\000\000\000\004\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\003\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\007\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\t\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\000\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\010\000\000\000\010\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\007\000\000\000\006\000\000\000\001\000\000\000\t\000\000\000\004\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\007\000\000\000\003\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\010\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\004\000\000\000\000\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\003\000\000\000\t\000\000\000\007\000\000\000\004\000\000\000\002\000\000\000\001\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\007\000\000\000\t\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\005\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\003\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\001\000\000\000\006\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\006\000\000\000\t\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\001\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\004\000\000\000\010\000\000\000\005\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\007\000\000\000\005\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\001\000\000\000\t\000\000\000\t\000\000\000\001\000\000\000\006\000\000\000\007\000\000\000\007\000\000\000\003\000\000\000\004\000\000\000\004\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\002\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\007\000\000\000\000\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\006\000\000\000\004\000\000\000\002\000\000\000\006\000\000\000\005\000\000\000\010\000\000\000\004\000\000\000\004\000\000\000\003\000\000\000\t\000\000\000\006\000\000\000\004\000\000\000\001\000\000\000\010\000\000\000\007\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\tt\000\000\000\004\000\000\000\005\000\000\000\001\000\000\000\003\000\000\000\007\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\005\000\000\000\006\000\000\000\005\000\000\000\000\000\000\000\010\000\000\000\007\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\004\000\000\000\003\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\007\000\000\000\002\000\000\000\t\000\000\000\004\000\000\000\010\000\000\000\006\000\000\000\005\000\000\000\002\000\000\000\010\000\000\000\001\000\000\000\002\000\000\000\010\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\t\000\000\000\003\000\000\000\010\000\000\000\007\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\002\000\000\000\010\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\010\000\000\000\010\000\000\000\006\000\000\000\002\000\000\000\002\000\000\000\005\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\007\000\000\000\001\000\000\000\t\000\000\000\010\000\000\000\001\000\000\000\006\000\000\000\005\000\000\000\006\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\002\000\000\000\007\000\000\000\005\000\000\000\010\000\000\000\005\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\t\000\000\000\003\000\000\000\t\000\000\000\004\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\004\000\000\000\005\000\000\000\003\000\000\000\001\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\002\000\000\000\006\000\000\000\001\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\010\000\000\000\004\000\000\000\006\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\006\000\000\000\002\000\000\000\006\000\000\000\002\000\000\000\t\000\000\000\010\000\000\000\006\000\000\000\007\000\000\000\004\000\000\000\000\000\000\000\004\000\000\000\003\000\000\000\010\000\000\000\000\000\000\000\007\000\000\000\010\000\000\000\007\000\000\000\002\000\000\000\007\000\000\000\t\000\000\000\005\000\000\000\004\000\000\000\005\000\000\000\000\000\000\000\001\000\000\000\007\000\000\000\004\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\010\000\000\000\t\000\000\000\007\000\000\000\000\000\000\000\010\000\000\000\003\000\000\000\006\000\000\000\005\000\000\000\003\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\006\000\000\000\t\000\000\000\001\000\000\000\005\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\010\000\000\000\010\000\000\000\001\000\000\000\003\000\000\000\005\000\000\000\004\000\000\000\t\000\000\000\007\000\000\000\002\000\000\000\000\000\000\000\005\000\000\000\004\000\000\000\002\000\000\000\005\000\000\000\t\000\000\000\000\000\000\000\005\000\000\000\t\000\000\000\010\000\000\000\005\000\000\000\006\000\000\000\t\000\000\000\005\000\000\000\001\000\000\000\002\000\000\000\006\000\000\000\004\000\000\000\004\000\000\000\001\000\000\000\003\000\000\000\001\000\000\000\006\000\000\000\002\000\000\000\007\000\000\000\001\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\002\000\000\000\006\000\000\000\t\000\000\000\010\000\000\000\007\000\000\000\004\000\000\000\006\000\000\000\006\000\000\000\005\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\001\000\000\000\t\000\000\000\006\000\000\000\001\000\000\000\003\000\000\000\003\000\000\000\006\000\000\000\007\000\000\000\001\000\000\000\010\000\000\000\t\000\000\000\004\000\000\000\005\000\000\000\t\000\000\000\003\000\000\000\000\000\000\000\t\000\000\000\001\000\000\000\003\000\000\000\004\000\000\000\t\000\000\000\004\000\000\000\001\000\000\000\005\000\000\000\003\000\000\000\004\000\000\000\010\000\000\000\t
      }
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  input: "normalize_element/component_4"
  input: "normalize_element/component_5"
  input: "normalize_element/component_6"
  input: "normalize_element/component_7"
  input: "normalize_element/component_8"
  input: "normalize_element/component_9"
  input: "normalize_element/component_10"
  input: "normalize_element/component_11"
  input: "normalize_element/component_12"
  input: "normalize_element/component_13"
  input: "normalize_element/component_14"
  input: "normalize_element/component_15"
  input: "normalize_element/component_16"
  input: "normalize_element/component_17"
  input: "normalize_element/component_18"
  input: "normalize_element/component_19"
  input: "normalize_element/component_20"
  input: "normalize_element/component_21"
  input: "normalize_element/component_22"
  input: "normalize_element/component_23"
  input: "normalize_element/component_24"
  input: "normalize_element/component_25"
  input: "normalize_element/component_26"
  input: "normalize_element/component_27"
  input: "normalize_element/component_28"
  input: "normalize_element/component_29"
  input: "normalize_element/component_30"
  input: "normalize_element/component_31"
  input: "normalize_element/component_32"
  input: "normalize_element/component_33"
  input: "normalize_element/component_34"
  input: "normalize_element/component_35"
  input: "normalize_element/component_36"
  input: "normalize_element/component_37"
  input: "normalize_element/component_38"
  input: "normalize_element/component_39"
  input: "normalize_element/component_40"
  input: "normalize_element/component_41"
  input: "normalize_element/component_42"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "BatchDatasetV2"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  device: "/device:CPU:0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@BatchDatasetV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT32
      }
    }
  }
}
node {
  name: "dnn/Cast"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_1"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_2"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_3"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_4"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_5"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_6"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_7"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_8"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_9"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_10"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_11"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_12"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_13"
  op: "Cast"
  input: "IteratorGetNext:13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_14"
  op: "Cast"
  input: "IteratorGetNext:14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_15"
  op: "Cast"
  input: "IteratorGetNext:15"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_16"
  op: "Cast"
  input: "IteratorGetNext:16"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_17"
  op: "Cast"
  input: "IteratorGetNext:17"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_18"
  op: "Cast"
  input: "IteratorGetNext:18"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_19"
  op: "Cast"
  input: "IteratorGetNext:19"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_20"
  op: "Cast"
  input: "IteratorGetNext:20"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_21"
  op: "Cast"
  input: "IteratorGetNext:21"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_22"
  op: "Cast"
  input: "IteratorGetNext:22"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_23"
  op: "Cast"
  input: "IteratorGetNext:23"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_24"
  op: "Cast"
  input: "IteratorGetNext:24"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_25"
  op: "Cast"
  input: "IteratorGetNext:25"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_26"
  op: "Cast"
  input: "IteratorGetNext:26"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_27"
  op: "Cast"
  input: "IteratorGetNext:27"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_28"
  op: "Cast"
  input: "IteratorGetNext:28"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_29"
  op: "Cast"
  input: "IteratorGetNext:29"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_30"
  op: "Cast"
  input: "IteratorGetNext:30"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_31"
  op: "Cast"
  input: "IteratorGetNext:31"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_32"
  op: "Cast"
  input: "IteratorGetNext:32"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_33"
  op: "Cast"
  input: "IteratorGetNext:33"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_34"
  op: "Cast"
  input: "IteratorGetNext:34"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_35"
  op: "Cast"
  input: "IteratorGetNext:35"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_36"
  op: "Cast"
  input: "IteratorGetNext:36"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_37"
  op: "Cast"
  input: "IteratorGetNext:37"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_38"
  op: "Cast"
  input: "IteratorGetNext:38"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_39"
  op: "Cast"
  input: "IteratorGetNext:39"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_40"
  op: "Cast"
  input: "IteratorGetNext:40"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_41"
  op: "Cast"
  input: "IteratorGetNext:41"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_2"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_3"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_4"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_5"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_6"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_7"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_8"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_9"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_10"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_11"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_12"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_13"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_14"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_15"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_16"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_17"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_18"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_19"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_20"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_21"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_22"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_23"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_24"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_25"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_26"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_27"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_28"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_29"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_30"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_31"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_32"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_33"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_34"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_35"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_36"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_37"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_38"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_39"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_40"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims"
  op: "ExpandDims"
  input: "dnn/Cast_41"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Shape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/ExpandDims"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_DIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_MCP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_PIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/INDEX_FINGER_TIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_DIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_MCP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_PIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/MIDDLE_FINGER_TIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_DIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_MCP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_PIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/PINKY_TIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_DIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_MCP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_PIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/RING_FINGER_TIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_CMC_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_IP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_MCP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/THUMB_TIP_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_X_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/WRIST_Y_1/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 42
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 42
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "*\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.28867512941360474
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.28867512941360474
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 42
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "dnn/hiddenlayer_0/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "dnn/hiddenlayer_0/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_false_10495"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_cond_true_10494"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\036\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3872983455657959
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "dnn/hiddenlayer_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "dnn/hiddenlayer_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/LeakyRelu"
  op: "LeakyRelu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_false_10565"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_1_cond_true_10564"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Initializer/random_uniform"
  op: "AddV2"
  input: "dnn/logits/kernel/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel"
    }
  }
}
node {
  name: "dnn/logits/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "dnn/logits/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias"
    }
  }
}
node {
  name: "dnn/logits/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "dnn/logits/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/BiasAdd/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond"
  op: "StatelessIf"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
        type: DT_VARIANT
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_false_10634"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "dnn_zero_fraction_2_cond_true_10633"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_1"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:1"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_2"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:2"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_3"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:3"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_4"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:4"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Identity_5"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond:5"
  attr {
    key: "T"
    value {
      type: DT_VARIANT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_42"
  op: "Cast"
  input: "IteratorGetNext"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_43"
  op: "Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_44"
  op: "Cast"
  input: "IteratorGetNext:2"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_45"
  op: "Cast"
  input: "IteratorGetNext:3"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_46"
  op: "Cast"
  input: "IteratorGetNext:4"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_47"
  op: "Cast"
  input: "IteratorGetNext:5"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_48"
  op: "Cast"
  input: "IteratorGetNext:6"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_49"
  op: "Cast"
  input: "IteratorGetNext:7"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_50"
  op: "Cast"
  input: "IteratorGetNext:8"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_51"
  op: "Cast"
  input: "IteratorGetNext:9"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_52"
  op: "Cast"
  input: "IteratorGetNext:10"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_53"
  op: "Cast"
  input: "IteratorGetNext:11"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_54"
  op: "Cast"
  input: "IteratorGetNext:12"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_55"
  op: "Cast"
  input: "IteratorGetNext:13"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_56"
  op: "Cast"
  input: "IteratorGetNext:14"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_57"
  op: "Cast"
  input: "IteratorGetNext:15"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_58"
  op: "Cast"
  input: "IteratorGetNext:16"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_59"
  op: "Cast"
  input: "IteratorGetNext:17"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_60"
  op: "Cast"
  input: "IteratorGetNext:18"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_61"
  op: "Cast"
  input: "IteratorGetNext:19"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_62"
  op: "Cast"
  input: "IteratorGetNext:20"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_63"
  op: "Cast"
  input: "IteratorGetNext:21"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_64"
  op: "Cast"
  input: "IteratorGetNext:22"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_65"
  op: "Cast"
  input: "IteratorGetNext:23"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_66"
  op: "Cast"
  input: "IteratorGetNext:24"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_67"
  op: "Cast"
  input: "IteratorGetNext:25"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_68"
  op: "Cast"
  input: "IteratorGetNext:26"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_69"
  op: "Cast"
  input: "IteratorGetNext:27"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_70"
  op: "Cast"
  input: "IteratorGetNext:28"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_71"
  op: "Cast"
  input: "IteratorGetNext:29"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_72"
  op: "Cast"
  input: "IteratorGetNext:30"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_73"
  op: "Cast"
  input: "IteratorGetNext:31"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_74"
  op: "Cast"
  input: "IteratorGetNext:32"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_75"
  op: "Cast"
  input: "IteratorGetNext:33"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_76"
  op: "Cast"
  input: "IteratorGetNext:34"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_77"
  op: "Cast"
  input: "IteratorGetNext:35"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_78"
  op: "Cast"
  input: "IteratorGetNext:36"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_79"
  op: "Cast"
  input: "IteratorGetNext:37"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_80"
  op: "Cast"
  input: "IteratorGetNext:38"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_81"
  op: "Cast"
  input: "IteratorGetNext:39"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_82"
  op: "Cast"
  input: "IteratorGetNext:40"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/Cast_83"
  op: "Cast"
  input: "IteratorGetNext:41"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/initial_learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10000
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast"
  op: "Cast"
  input: "ExponentialDecay/Cast/x"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9599999785423279
      }
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ExponentialDecay/Cast_2"
  op: "Cast"
  input: "ExponentialDecay/Cast_2/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/truediv"
  op: "RealDiv"
  input: "ExponentialDecay/Cast_2"
  input: "ExponentialDecay/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay/Pow"
  op: "Pow"
  input: "ExponentialDecay/Cast_1/x"
  input: "ExponentialDecay/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "ExponentialDecay"
  op: "Mul"
  input: "ExponentialDecay/initial_learning_rate"
  input: "ExponentialDecay/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/logits/BiasAdd"
  input: "head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "head/predictions/class_ids"
  input: "head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/str_classes"
  op: "AsString"
  input: "head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice"
  op: "StridedSlice"
  input: "head/predictions/Shape"
  input: "head/predictions/strided_slice/stack"
  input: "head/predictions/strided_slice/stack_1"
  input: "head/predictions/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range"
  op: "Range"
  input: "head/predictions/range/start"
  input: "head/predictions/range/limit"
  input: "head/predictions/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_1"
  op: "ExpandDims"
  input: "head/predictions/range"
  input: "head/predictions/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice"
  input: "head/predictions/Tile/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile"
  op: "Tile"
  input: "head/predictions/ExpandDims_1"
  input: "head/predictions/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/strided_slice_1"
  op: "StridedSlice"
  input: "head/predictions/Shape_1"
  input: "head/predictions/strided_slice_1/stack"
  input: "head/predictions/strided_slice_1/stack_1"
  input: "head/predictions/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "head/predictions/range_1/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/range_1/limit"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "head/predictions/range_1/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/range_1"
  op: "Range"
  input: "head/predictions/range_1/start"
  input: "head/predictions/range_1/limit"
  input: "head/predictions/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/AsString"
  op: "AsString"
  input: "head/predictions/range_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/predictions/ExpandDims_2"
  op: "ExpandDims"
  input: "head/predictions/AsString"
  input: "head/predictions/ExpandDims_2/dim"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/predictions/Tile_1/multiples"
  op: "Pack"
  input: "head/predictions/strided_slice_1"
  input: "head/predictions/Tile_1/multiples/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "head/predictions/Tile_1"
  op: "Tile"
  input: "head/predictions/ExpandDims_2"
  input: "head/predictions/Tile_1/multiples"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:42"
  input: "head/losses/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "head/losses/labels/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice/stack_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/strided_slice"
  op: "StridedSlice"
  input: "head/losses/labels/Shape"
  input: "head/losses/labels/strided_slice/stack"
  input: "head/losses/labels/strided_slice/stack_1"
  input: "head/losses/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "head/losses/labels/concat/values_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/labels/concat/axis"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/concat"
  op: "ConcatV2"
  input: "head/losses/labels/strided_slice"
  input: "head/losses/labels/concat/values_1"
  input: "head/losses/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/labels/Shape_1"
  op: "Shape"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Equal"
  op: "Equal"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/All"
  op: "All"
  input: "head/losses/labels/assert_equal_1/Equal"
  input: "head/losses/labels/assert_equal_1/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Const_2"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels shape must be [D0, D1, ... DN, 1]. Suggested Fix: check your n_classes argument to the head and/or the shape of your label."
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  op: "Const"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "head/losses/labels/assert_equal_1/Assert/Assert"
  op: "Assert"
  input: "head/losses/labels/assert_equal_1/All"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_0"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_1"
  input: "head/losses/labels/concat"
  input: "head/losses/labels/assert_equal_1/Assert/Assert/data_3"
  input: "head/losses/labels/Shape_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/labels"
  op: "Identity"
  input: "head/losses/labels/ExpandDims"
  input: "^head/losses/labels/assert_equal_1/Assert/Assert"
  input: "^head/losses/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 9
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Const_3"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be <= n_classes - 1"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (head/losses/check_label_range/Const:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  input: "head/losses/check_label_range/assert_less_equal/Assert/Assert/data_4"
  input: "head/losses/check_label_range/Const"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/Const"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must be >= 0"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (head/losses/labels:0) = "
      }
    }
  }
}
node {
  name: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/All"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_0"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_1"
  input: "head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert/data_2"
  input: "head/losses/labels"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "head/losses/check_label_range/Identity"
  op: "Identity"
  input: "head/losses/labels"
  input: "^head/losses/check_label_range/assert_less_equal/Assert/Assert"
  input: "^head/losses/check_label_range/assert_non_negative/assert_less_equal/Assert/Assert"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  op: "Squeeze"
  input: "head/losses/check_label_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: -1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "dnn/logits/BiasAdd"
  input: "head/losses/sparse_softmax_cross_entropy_loss/remove_squeezable_dimensions/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  input: "^head/losses/sparse_softmax_cross_entropy_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "head/losses/ExpandDims"
  op: "ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  input: "head/losses/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Mul"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum"
  op: "Sum"
  input: "head/losses/weighted_loss/Mul"
  input: "head/losses/weighted_loss/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements"
  op: "Size"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "head/losses/weighted_loss/num_elements/Cast"
  op: "Cast"
  input: "head/losses/weighted_loss/num_elements"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/start"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range/delta"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/range"
  op: "Range"
  input: "head/losses/weighted_loss/range/start"
  input: "head/losses/weighted_loss/Rank"
  input: "head/losses/weighted_loss/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "head/losses/weighted_loss/Sum_1"
  op: "Sum"
  input: "head/losses/weighted_loss/Sum"
  input: "head/losses/weighted_loss/range"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "head/losses/weighted_loss/value"
  op: "DivNoNan"
  input: "head/losses/weighted_loss/Sum_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/grad_ys_0"
  op: "Fill"
  input: "training/Adam/gradients/gradients/Shape"
  input: "training/Adam/gradients/gradients/grad_ys_0/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  op: "Neg"
  input: "head/losses/weighted_loss/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Neg"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  op: "DivNoNan"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_1"
  input: "head/losses/weighted_loss/num_elements/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/grad_ys_0"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/div_no_nan_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/value_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape/shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_1_grad/Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "head/losses/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  input: "head/losses/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/weighted_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  op: "Shape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  input: "head/losses/sparse_softmax_cross_entropy_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy"
  input: "training/Adam/gradients/gradients/head/losses/ExpandDims_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Mul_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Sum_1"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/zeros_like"
  op: "ZerosLike"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/Mul_grad/Reshape"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  op: "Mul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/ExpandDims"
  input: "head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  input: "dnn/logits/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/LeakyRelu"
  input: "training/Adam/gradients/gradients/head/losses/sparse_softmax_cross_entropy_loss/xentropy/xentropy_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_1/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/LeakyRelu"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  op: "LeakyReluGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.009999999776482582
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  input: "dnn/hiddenlayer_0/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 42
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/LeakyRelu_grad/LeakyReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/beta_1/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "training/Adam/beta_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_1"
    }
  }
}
node {
  name: "training/Adam/beta_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_1/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "training/Adam/beta_1/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "training/Adam/beta_2"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/beta_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/beta_2"
    }
  }
}
node {
  name: "training/Adam/beta_2/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/beta_2/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "training/Adam/beta_2/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/beta_2/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/decay"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@training/Adam/decay"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/decay"
    }
  }
}
node {
  name: "training/Adam/decay/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/decay/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "training/Adam/decay/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/decay/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "*\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 42
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/m"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/m/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "*\000\000\000\036\000\000\000"
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  op: "Fill"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/shape_as_tensor"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 42
        }
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 42
          }
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_0/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 30
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 30
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/hiddenlayer_1/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/kernel/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/dnn/logits/kernel/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "allowed_devices"
    value {
      list {
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "training/Adam/dnn/logits/bias/v"
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Assign"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/dnn/logits/bias/v/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity"
  op: "Identity"
  input: "ExponentialDecay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/Adam/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/add"
  op: "AddV2"
  input: "training/Adam/ReadVariableOp"
  input: "training/Adam/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Cast"
  op: "Cast"
  input: "training/Adam/add"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_1"
  op: "Identity"
  input: "training/Adam/Identity_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Identity_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "training/Adam/Identity_2"
  op: "Identity"
  input: "training/Adam/Identity_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow"
  op: "Pow"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Pow_1"
  op: "Pow"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub"
  op: "Sub"
  input: "training/Adam/sub/x"
  input: "training/Adam/Pow_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Sqrt"
  op: "Sqrt"
  input: "training/Adam/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_1/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_1"
  op: "Sub"
  input: "training/Adam/sub_1/x"
  input: "training/Adam/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/truediv"
  op: "RealDiv"
  input: "training/Adam/Sqrt"
  input: "training/Adam/sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/mul"
  op: "Mul"
  input: "training/Adam/Identity"
  input: "training/Adam/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "training/Adam/sub_2/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_2"
  op: "Sub"
  input: "training/Adam/sub_2/x"
  input: "training/Adam/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/sub_3/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "training/Adam/sub_3"
  op: "Sub"
  input: "training/Adam/sub_3/x"
  input: "training/Adam/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/kernel"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_0/bias"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/kernel"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/hiddenlayer_1/bias"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/kernel"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "dnn/logits/bias"
  input: "training/Adam/dnn/logits/bias/m"
  input: "training/Adam/dnn/logits/bias/v"
  input: "training/Adam/Pow"
  input: "training/Adam/Pow_1"
  input: "training/Adam/Identity"
  input: "training/Adam/Identity_1"
  input: "training/Adam/Identity_2"
  input: "training/Adam/Const"
  input: "training/Adam/gradients/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "training/Adam/Adam/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_0/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/hiddenlayer_1/kernel/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/bias/ResourceApplyAdam"
  input: "^training/Adam/Adam/update_dnn/logits/kernel/ResourceApplyAdam"
}
node {
  name: "training/Adam/Adam/Const"
  op: "Const"
  input: "^training/Adam/Adam/group_deps"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "training/Adam/Adam/AssignAddVariableOp"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "training/Adam/Adam/Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "training/group_deps"
  op: "NoOp"
  input: "^training/Adam/Adam/AssignAddVariableOp"
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "head/losses/weighted_loss/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/hiddenlayer_0/bias/Assign"
  input: "^dnn/hiddenlayer_0/kernel/Assign"
  input: "^dnn/hiddenlayer_1/bias/Assign"
  input: "^dnn/hiddenlayer_1/kernel/Assign"
  input: "^dnn/logits/bias/Assign"
  input: "^dnn/logits/kernel/Assign"
  input: "^global_step/Assign"
  input: "^training/Adam/beta_1/Assign"
  input: "^training/Adam/beta_2/Assign"
  input: "^training/Adam/decay/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_0/kernel/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/bias/v/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/m/Assign"
  input: "^training/Adam/dnn/hiddenlayer_1/kernel/v/Assign"
  input: "^training/Adam/dnn/logits/bias/m/Assign"
  input: "^training/Adam/dnn/logits/bias/v/Assign"
  input: "^training/Adam/dnn/logits/kernel/m/Assign"
  input: "^training/Adam/dnn/logits/kernel/v/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  input: "report_uninitialized_variables/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "training/Adam/beta_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "training/Adam/decay"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/m"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/kernel/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  op: "VarIsInitializedOp"
  input: "training/Adam/dnn/logits/bias/v"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_21"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 22
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/bias"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/v"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 22
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/hiddenlayer_0/activation"
  input: "dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/hiddenlayer_1/activation"
  input: "dnn/logits/fraction_of_zero_values"
  input: "dnn/logits/activation"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 7
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp\\part"
      }
    }
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "dnn/hiddenlayer_0/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/Read/ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/Read/ReadVariableOp"
  input: "dnn/logits/bias/Read/ReadVariableOp"
  input: "dnn/logits/kernel/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "training/Adam/beta_1/Read/ReadVariableOp"
  input: "training/Adam/beta_2/Read/ReadVariableOp"
  input: "training/Adam/decay/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/bias/v/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/m/Read/ReadVariableOp"
  input: "training/Adam/dnn/logits/kernel/v/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/kernel"
        string_val: "global_step"
        string_val: "training/Adam/beta_1"
        string_val: "training/Adam/beta_2"
        string_val: "training/Adam/decay"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_0/kernel/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/bias/v"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/m"
        string_val: "training/Adam/dnn/hiddenlayer_1/kernel/v"
        string_val: "training/Adam/dnn/logits/bias/m"
        string_val: "training/Adam/dnn/logits/bias/v"
        string_val: "training/Adam/dnn/logits/kernel/m"
        string_val: "training/Adam/dnn/logits/kernel/v"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 22
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 22
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/logits/bias"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "training/Adam/beta_1"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "training/Adam/beta_2"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "training/Adam/decay"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/m"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/bias/v"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/m"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_0/kernel/v"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/m"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/bias/v"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/m"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/hiddenlayer_1/kernel/v"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/m"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/bias/v"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/m"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_21"
  op: "AssignVariableOp"
  input: "training/Adam/dnn/logits/kernel/v"
  input: "save/Identity_22"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_21"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
library {
  function {
    signature {
      name: "dnn_zero_fraction_cond_false_10495"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_9897"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_false_10634"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_9896"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
        handle_data {
          dtype: DT_INT64
          shape {
          }
        }
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_cond_true_10494"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_0_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 30
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 30
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 30
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_false_10565"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "count_nonzero_nonzero_count"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalnone"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalNone"
      op: "OptionalNone"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalNone"
      }
    }
    ret {
      key: "count_nonzero_nonzero_count"
      value: "count_nonzero/nonzero_count:output:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalnone"
      value: "OptionalNone:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_2_cond_true_10633"
      input_arg {
        name: "count_nonzero_notequal_dnn_logits_biasadd"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_logits_biasadd"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "dnn_zero_fraction_1_cond_true_10564"
      input_arg {
        name: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
        type: DT_FLOAT
      }
      output_arg {
        name: "cast"
        type: DT_INT64
      }
      output_arg {
        name: "optionalfromvalue"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_1"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_2"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_3"
        type: DT_VARIANT
      }
      output_arg {
        name: "optionalfromvalue_4"
        type: DT_VARIANT
      }
    }
    node_def {
      name: "count_nonzero/zeros"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
            }
            float_val: 0.0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/zeros"
      }
    }
    node_def {
      name: "count_nonzero/NotEqual"
      op: "NotEqual"
      input: "count_nonzero_notequal_dnn_hiddenlayer_1_leakyrelu"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/NotEqual"
      }
    }
    node_def {
      name: "count_nonzero/Cast"
      op: "Cast"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 10
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Cast"
      }
    }
    node_def {
      name: "count_nonzero/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\001\000\000\000"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/Const"
      }
    }
    node_def {
      name: "count_nonzero/nonzero_count"
      op: "Sum"
      input: "count_nonzero/Cast:y:0"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "count_nonzero/nonzero_count"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "DstT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "OptionalFromValue"
      op: "OptionalFromValue"
      input: "count_nonzero/zeros:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue"
      }
    }
    node_def {
      name: "OptionalFromValue_1"
      op: "OptionalFromValue"
      input: "count_nonzero/NotEqual:z:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_BOOL
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_1"
      }
    }
    node_def {
      name: "OptionalFromValue_2"
      op: "OptionalFromValue"
      input: "count_nonzero/Cast:y:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_2"
      }
    }
    node_def {
      name: "OptionalFromValue_3"
      op: "OptionalFromValue"
      input: "count_nonzero/Const:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_3"
      }
    }
    node_def {
      name: "OptionalFromValue_4"
      op: "OptionalFromValue"
      input: "count_nonzero/nonzero_count:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_INT32
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "OptionalFromValue_4"
      }
    }
    ret {
      key: "cast"
      value: "Cast:y:0"
    }
    ret {
      key: "optionalfromvalue"
      value: "OptionalFromValue:optional:0"
    }
    ret {
      key: "optionalfromvalue_1"
      value: "OptionalFromValue_1:optional:0"
    }
    ret {
      key: "optionalfromvalue_2"
      value: "OptionalFromValue_2:optional:0"
    }
    ret {
      key: "optionalfromvalue_3"
      value: "OptionalFromValue_3:optional:0"
    }
    ret {
      key: "optionalfromvalue_4"
      value: "OptionalFromValue_4:optional:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: -1
            }
            dim {
              size: 10
            }
          }
        }
      }
    }
    arg_attr {
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: -1
                }
                dim {
                  size: 10
                }
              }
            }
          }
        }
      }
    }
  }
}
versions {
  producer: 808
  min_consumer: 12
}
